; ModuleID = 'rdswitch.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.jpeg_compress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32, %struct.jpeg_destination_mgr*, i32, i32, i32, i32, double, i32, i32, i32, %struct.jpeg_component_info*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], [16 x i8], [16 x i8], [16 x i8], i32, %struct.jpeg_scan_info*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i16, i16, i32, i32, i32, i32, i32, i32, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, %struct.jpeg_comp_master*, %struct.jpeg_c_main_controller*, %struct.jpeg_c_prep_controller*, %struct.jpeg_c_coef_controller*, %struct.jpeg_marker_writer*, %struct.jpeg_color_converter*, %struct.jpeg_downsampler*, %struct.jpeg_forward_dct*, %struct.jpeg_entropy_encoder* }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_destination_mgr = type { i8*, i64, void (%struct.jpeg_compress_struct*)*, i32 (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)* }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_scan_info = type { i32, [4 x i32], i32, i32, i32, i32 }
%struct.jpeg_comp_master = type opaque
%struct.jpeg_c_main_controller = type opaque
%struct.jpeg_c_prep_controller = type opaque
%struct.jpeg_c_coef_controller = type opaque
%struct.jpeg_marker_writer = type opaque
%struct.jpeg_color_converter = type opaque
%struct.jpeg_downsampler = type opaque
%struct.jpeg_forward_dct = type opaque
%struct.jpeg_entropy_encoder = type opaque

@.str = private unnamed_addr constant [2 x i8] c"r\00", align 1
@stderr = external global %struct._IO_FILE*, align 8
@.str.1 = private unnamed_addr constant [26 x i8] c"Can't open table file %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [28 x i8] c"Too many tables in file %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [31 x i8] c"Invalid table data in file %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [29 x i8] c"Non-numeric data in file %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [36 x i8] c"Can't open scan definition file %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [35 x i8] c"Too many scans defined in file %s\0A\00", align 1
@.str.7 = private unnamed_addr constant [44 x i8] c"Too many components in one scan in file %s\0A\00", align 1
@.str.8 = private unnamed_addr constant [38 x i8] c"Invalid scan entry format in file %s\0A\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"%d%c\00", align 1
@.str.10 = private unnamed_addr constant [45 x i8] c"JPEG quantization tables are numbered 0..%d\0A\00", align 1
@.str.11 = private unnamed_addr constant [9 x i8] c"%d%c%d%c\00", align 1
@.str.12 = private unnamed_addr constant [36 x i8] c"JPEG sampling factors must be 1..4\0A\00", align 1

; Function Attrs: nounwind uwtable
define i32 @read_quant_tables(%struct.jpeg_compress_struct* %cinfo, i8* %filename, i32 %scale_factor, i32 %force_baseline) #0 !prof !2 {
entry:
  %termchar = alloca i32, align 4
  %val = alloca i64, align 8
  %table = alloca [64 x i32], align 16
  %0 = bitcast i32* %termchar to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #5
  %1 = bitcast i64* %val to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #5
  %2 = bitcast [64 x i32]* %table to i8*
  call void @llvm.lifetime.start(i64 256, i8* %2) #5
  %call = tail call %struct._IO_FILE* @fopen(i8* %filename, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  %cmp = icmp eq %struct._IO_FILE* %call, null
  br i1 %cmp, label %if.then, label %while.cond.preheader

while.cond.preheader:                             ; preds = %entry
  %call248 = call fastcc i32 @read_text_integer(%struct._IO_FILE* nonnull %call, i64* nonnull %val, i32* nonnull %termchar)
  %tobool49 = icmp eq i32 %call248, 0
  br i1 %tobool49, label %while.end, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %while.cond.preheader
  %arrayidx = getelementptr inbounds [64 x i32], [64 x i32]* %table, i64 0, i64 0
  br label %while.body

if.then:                                          ; preds = %entry
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !3
  %call1 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* nonnull getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0), i8* %filename) #6
  br label %cleanup

while.body:                                       ; preds = %while.body.lr.ph, %for.end
  %tblno.050 = phi i32 [ 0, %while.body.lr.ph ], [ %inc18, %for.end ]
  %cmp3 = icmp sgt i32 %tblno.050, 3
  br i1 %cmp3, label %if.then4, label %if.end7

if.then4:                                         ; preds = %while.body
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !3
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* nonnull getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i64 0, i64 0), i8* %filename) #6
  %call6 = call i32 @fclose(%struct._IO_FILE* nonnull %call)
  br label %cleanup

if.end7:                                          ; preds = %while.body
  %5 = load i64, i64* %val, align 8, !tbaa !7
  %conv = trunc i64 %5 to i32
  store i32 %conv, i32* %arrayidx, align 16, !tbaa !9
  br label %for.body

for.body:                                         ; preds = %if.end7, %if.end15
  %indvars.iv = phi i64 [ 1, %if.end7 ], [ %indvars.iv.next, %if.end15 ]
  %call10 = call fastcc i32 @read_text_integer(%struct._IO_FILE* nonnull %call, i64* nonnull %val, i32* nonnull %termchar)
  %tobool11 = icmp eq i32 %call10, 0
  br i1 %tobool11, label %if.then12, label %if.end15

if.then12:                                        ; preds = %for.body
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !3
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i64 0, i64 0), i8* %filename) #6
  %call14 = call i32 @fclose(%struct._IO_FILE* nonnull %call)
  br label %cleanup

if.end15:                                         ; preds = %for.body
  %7 = load i64, i64* %val, align 8, !tbaa !7
  %conv16 = trunc i64 %7 to i32
  %arrayidx17 = getelementptr inbounds [64 x i32], [64 x i32]* %table, i64 0, i64 %indvars.iv
  store i32 %conv16, i32* %arrayidx17, align 4, !tbaa !9
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %cmp8 = icmp slt i64 %indvars.iv.next, 64
  br i1 %cmp8, label %for.body, label %for.end

for.end:                                          ; preds = %if.end15
  call void @jpeg_add_quant_table(%struct.jpeg_compress_struct* %cinfo, i32 %tblno.050, i32* nonnull %arrayidx, i32 %scale_factor, i32 %force_baseline) #5
  %inc18 = add nuw nsw i32 %tblno.050, 1
  %call2 = call fastcc i32 @read_text_integer(%struct._IO_FILE* nonnull %call, i64* nonnull %val, i32* nonnull %termchar)
  %tobool = icmp eq i32 %call2, 0
  br i1 %tobool, label %while.end.loopexit, label %while.body

while.end.loopexit:                               ; preds = %for.end
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %while.cond.preheader
  %8 = load i32, i32* %termchar, align 4, !tbaa !9
  %cmp19 = icmp eq i32 %8, -1
  br i1 %cmp19, label %if.end24, label %if.then21

if.then21:                                        ; preds = %while.end
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !3
  %call22 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* nonnull getelementptr inbounds ([29 x i8], [29 x i8]* @.str.4, i64 0, i64 0), i8* %filename) #6
  %call23 = call i32 @fclose(%struct._IO_FILE* nonnull %call)
  br label %cleanup

if.end24:                                         ; preds = %while.end
  %call25 = call i32 @fclose(%struct._IO_FILE* nonnull %call)
  br label %cleanup

cleanup:                                          ; preds = %if.end24, %if.then21, %if.then12, %if.then4, %if.then
  %retval.0 = phi i32 [ 0, %if.then ], [ 0, %if.then4 ], [ 0, %if.then12 ], [ 0, %if.then21 ], [ 1, %if.end24 ]
  call void @llvm.lifetime.end(i64 256, i8* %2) #5
  call void @llvm.lifetime.end(i64 8, i8* %1) #5
  call void @llvm.lifetime.end(i64 4, i8* %0) #5
  ret i32 %retval.0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: nounwind
declare noalias %struct._IO_FILE* @fopen(i8* nocapture readonly, i8* nocapture readonly) #2

; Function Attrs: nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) #2

; Function Attrs: nounwind uwtable
define internal fastcc i32 @read_text_integer(%struct._IO_FILE* nocapture %file, i64* nocapture %result, i32* nocapture %termchar) unnamed_addr #0 !prof !2 {
entry:
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %call.i = tail call i32 @_IO_getc(%struct._IO_FILE* %file) #5
  %cmp.i = icmp eq i32 %call.i, 35
  br i1 %cmp.i, label %do.body.i.preheader, label %text_getc.exit

do.body.i.preheader:                              ; preds = %do.body
  br label %do.body.i

do.body.i:                                        ; preds = %do.body.i.preheader, %do.body.i
  %call1.i = tail call i32 @_IO_getc(%struct._IO_FILE* %file) #5
  switch i32 %call1.i, label %do.body.i [
    i32 -1, label %text_getc.exit.loopexit
    i32 10, label %text_getc.exit.loopexit
  ]

text_getc.exit.loopexit:                          ; preds = %do.body.i, %do.body.i
  %call1.i.lcssa = phi i32 [ %call1.i, %do.body.i ], [ %call1.i, %do.body.i ]
  br label %text_getc.exit

text_getc.exit:                                   ; preds = %text_getc.exit.loopexit, %do.body
  %ch.0.i = phi i32 [ %call.i, %do.body ], [ %call1.i.lcssa, %text_getc.exit.loopexit ]
  %cmp = icmp eq i32 %ch.0.i, -1
  br i1 %cmp, label %if.then, label %do.cond

if.then:                                          ; preds = %text_getc.exit
  store i32 -1, i32* %termchar, align 4, !tbaa !9
  br label %cleanup

do.cond:                                          ; preds = %text_getc.exit
  %idxprom = sext i32 %ch.0.i to i64
  %call1 = tail call i16** @__ctype_b_loc() #7
  %0 = load i16*, i16** %call1, align 8, !tbaa !3
  %arrayidx = getelementptr inbounds i16, i16* %0, i64 %idxprom
  %1 = load i16, i16* %arrayidx, align 2, !tbaa !11
  %conv = zext i16 %1 to i32
  %and = and i32 %conv, 8192
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %do.end, label %do.body

do.end:                                           ; preds = %do.cond
  %conv.lcssa = phi i32 [ %conv, %do.cond ]
  %call1.lcssa = phi i16** [ %call1, %do.cond ]
  %ch.0.i.lcssa49 = phi i32 [ %ch.0.i, %do.cond ]
  %and6 = and i32 %conv.lcssa, 2048
  %tobool7 = icmp eq i32 %and6, 0
  br i1 %tobool7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %do.end
  store i32 %ch.0.i.lcssa49, i32* %termchar, align 4, !tbaa !9
  br label %cleanup

if.end9:                                          ; preds = %do.end
  %sub = add nsw i32 %ch.0.i.lcssa49, -48
  %conv10 = sext i32 %sub to i64
  br label %while.cond

while.cond:                                       ; preds = %if.end21, %if.end9
  %val.0 = phi i64 [ %conv10, %if.end9 ], [ %add, %if.end21 ]
  %call.i38 = tail call i32 @_IO_getc(%struct._IO_FILE* %file) #5
  %cmp.i39 = icmp eq i32 %call.i38, 35
  br i1 %cmp.i39, label %do.body.i41.preheader, label %text_getc.exit43

do.body.i41.preheader:                            ; preds = %while.cond
  br label %do.body.i41

do.body.i41:                                      ; preds = %do.body.i41.preheader, %do.body.i41
  %call1.i40 = tail call i32 @_IO_getc(%struct._IO_FILE* %file) #5
  switch i32 %call1.i40, label %do.body.i41 [
    i32 -1, label %text_getc.exit43.loopexit
    i32 10, label %text_getc.exit43.loopexit
  ]

text_getc.exit43.loopexit:                        ; preds = %do.body.i41, %do.body.i41
  %call1.i40.lcssa = phi i32 [ %call1.i40, %do.body.i41 ], [ %call1.i40, %do.body.i41 ]
  br label %text_getc.exit43

text_getc.exit43:                                 ; preds = %text_getc.exit43.loopexit, %while.cond
  %ch.0.i42 = phi i32 [ %call.i38, %while.cond ], [ %call1.i40.lcssa, %text_getc.exit43.loopexit ]
  %cmp12 = icmp eq i32 %ch.0.i42, -1
  br i1 %cmp12, label %while.end, label %while.body

while.body:                                       ; preds = %text_getc.exit43
  %idxprom14 = sext i32 %ch.0.i42 to i64
  %2 = load i16*, i16** %call1.lcssa, align 8, !tbaa !3
  %arrayidx16 = getelementptr inbounds i16, i16* %2, i64 %idxprom14
  %3 = load i16, i16* %arrayidx16, align 2, !tbaa !11
  %and18 = and i16 %3, 2048
  %tobool19 = icmp eq i16 %and18, 0
  br i1 %tobool19, label %while.end, label %if.end21

if.end21:                                         ; preds = %while.body
  %mul = mul nsw i64 %val.0, 10
  %sub22 = add nsw i32 %ch.0.i42, -48
  %conv23 = sext i32 %sub22 to i64
  %add = add nsw i64 %conv23, %mul
  br label %while.cond

while.end:                                        ; preds = %while.body, %text_getc.exit43
  %val.0.lcssa = phi i64 [ %val.0, %while.body ], [ %val.0, %text_getc.exit43 ]
  %ch.0.i42.lcssa = phi i32 [ %ch.0.i42, %while.body ], [ -1, %text_getc.exit43 ]
  store i64 %val.0.lcssa, i64* %result, align 8, !tbaa !7
  store i32 %ch.0.i42.lcssa, i32* %termchar, align 4, !tbaa !9
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then8, %if.then
  %retval.0 = phi i32 [ 0, %if.then ], [ 1, %while.end ], [ 0, %if.then8 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
declare i32 @fclose(%struct._IO_FILE* nocapture) #2

declare void @jpeg_add_quant_table(%struct.jpeg_compress_struct*, i32, i32*, i32, i32) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: nounwind uwtable
define i32 @read_scan_script(%struct.jpeg_compress_struct* %cinfo, i8* %filename) #0 !prof !2 {
entry:
  %termchar = alloca i32, align 4
  %val = alloca i64, align 8
  %scans = alloca [100 x %struct.jpeg_scan_info], align 16
  %0 = bitcast i32* %termchar to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #5
  %1 = bitcast i64* %val to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #5
  %2 = bitcast [100 x %struct.jpeg_scan_info]* %scans to i8*
  call void @llvm.lifetime.start(i64 3600, i8* %2) #5
  %call = tail call %struct._IO_FILE* @fopen(i8* %filename, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  %cmp = icmp eq %struct._IO_FILE* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !3
  %call1 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5, i64 0, i64 0), i8* %filename) #6
  br label %cleanup

if.end:                                           ; preds = %entry
  %call2147 = call fastcc i32 @read_scan_integer(%struct._IO_FILE* nonnull %call, i64* nonnull %val, i32* nonnull %termchar)
  %tobool148 = icmp eq i32 %call2147, 0
  br i1 %tobool148, label %while.end70, label %while.body.preheader

while.body.preheader:                             ; preds = %if.end
  %arraydecay = getelementptr inbounds [100 x %struct.jpeg_scan_info], [100 x %struct.jpeg_scan_info]* %scans, i64 0, i64 0
  br label %while.body

while.body:                                       ; preds = %while.body.preheader, %if.end68
  %scanptr.0150 = phi %struct.jpeg_scan_info* [ %incdec.ptr, %if.end68 ], [ %arraydecay, %while.body.preheader ]
  %scanno.0149 = phi i32 [ %inc69, %if.end68 ], [ 0, %while.body.preheader ]
  %cmp3 = icmp sgt i32 %scanno.0149, 99
  br i1 %cmp3, label %if.then4, label %if.end7

if.then4:                                         ; preds = %while.body
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !3
  %call5 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* nonnull getelementptr inbounds ([35 x i8], [35 x i8]* @.str.6, i64 0, i64 0), i8* %filename) #6
  %call6 = tail call i32 @fclose(%struct._IO_FILE* nonnull %call)
  br label %cleanup

if.end7:                                          ; preds = %while.body
  %5 = load i64, i64* %val, align 8, !tbaa !7
  %conv = trunc i64 %5 to i32
  %arrayidx = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %scanptr.0150, i64 0, i32 1, i64 0
  store i32 %conv, i32* %arrayidx, align 4, !tbaa !9
  %6 = load i32, i32* %termchar, align 4, !tbaa !9
  %cmp9145 = icmp eq i32 %6, 32
  br i1 %cmp9145, label %while.body11.preheader, label %while.end

while.body11.preheader:                           ; preds = %if.end7
  br label %while.body11

while.body11:                                     ; preds = %while.body11.preheader, %if.end21
  %indvars.iv = phi i64 [ %indvars.iv.next, %if.end21 ], [ 1, %while.body11.preheader ]
  %cmp12 = icmp sgt i64 %indvars.iv, 3
  br i1 %cmp12, label %if.then14, label %if.end17

if.then14:                                        ; preds = %while.body11
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !3
  %call15 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* nonnull getelementptr inbounds ([44 x i8], [44 x i8]* @.str.7, i64 0, i64 0), i8* %filename) #6
  %call16 = tail call i32 @fclose(%struct._IO_FILE* nonnull %call)
  br label %cleanup

if.end17:                                         ; preds = %while.body11
  %call18 = call fastcc i32 @read_scan_integer(%struct._IO_FILE* nonnull %call, i64* nonnull %val, i32* nonnull %termchar)
  %tobool19 = icmp eq i32 %call18, 0
  br i1 %tobool19, label %bogus.loopexit, label %if.end21

if.end21:                                         ; preds = %if.end17
  %8 = load i64, i64* %val, align 8, !tbaa !7
  %conv22 = trunc i64 %8 to i32
  %arrayidx24 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %scanptr.0150, i64 0, i32 1, i64 %indvars.iv
  store i32 %conv22, i32* %arrayidx24, align 4, !tbaa !9
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %9 = load i32, i32* %termchar, align 4, !tbaa !9
  %cmp9 = icmp eq i32 %9, 32
  br i1 %cmp9, label %while.body11, label %while.end.loopexit

while.end.loopexit:                               ; preds = %if.end21
  %indvars.iv.next.lcssa = phi i64 [ %indvars.iv.next, %if.end21 ]
  %10 = trunc i64 %indvars.iv.next.lcssa to i32
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %if.end7
  %ncomps.0.lcssa = phi i32 [ 1, %if.end7 ], [ %10, %while.end.loopexit ]
  %comps_in_scan = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %scanptr.0150, i64 0, i32 0
  store i32 %ncomps.0.lcssa, i32* %comps_in_scan, align 4, !tbaa !13
  %11 = load i32, i32* %termchar, align 4, !tbaa !9
  %cmp25 = icmp eq i32 %11, 58
  br i1 %cmp25, label %if.then27, label %if.else

if.then27:                                        ; preds = %while.end
  %call28 = call fastcc i32 @read_scan_integer(%struct._IO_FILE* nonnull %call, i64* nonnull %val, i32* nonnull %termchar)
  %tobool29 = icmp eq i32 %call28, 0
  %12 = load i32, i32* %termchar, align 4
  %cmp30 = icmp ne i32 %12, 32
  %or.cond = or i1 %tobool29, %cmp30
  br i1 %or.cond, label %bogus.loopexit156, label %if.end33

if.end33:                                         ; preds = %if.then27
  %13 = load i64, i64* %val, align 8, !tbaa !7
  %conv34 = trunc i64 %13 to i32
  %Ss = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %scanptr.0150, i64 0, i32 2
  store i32 %conv34, i32* %Ss, align 4, !tbaa !15
  %call35 = call fastcc i32 @read_scan_integer(%struct._IO_FILE* nonnull %call, i64* nonnull %val, i32* nonnull %termchar)
  %tobool36 = icmp eq i32 %call35, 0
  %14 = load i32, i32* %termchar, align 4
  %cmp38 = icmp ne i32 %14, 32
  %or.cond93 = or i1 %tobool36, %cmp38
  br i1 %or.cond93, label %bogus.loopexit156, label %if.end41

if.end41:                                         ; preds = %if.end33
  %15 = load i64, i64* %val, align 8, !tbaa !7
  %conv42 = trunc i64 %15 to i32
  %Se = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %scanptr.0150, i64 0, i32 3
  store i32 %conv42, i32* %Se, align 4, !tbaa !16
  %call43 = call fastcc i32 @read_scan_integer(%struct._IO_FILE* nonnull %call, i64* nonnull %val, i32* nonnull %termchar)
  %tobool44 = icmp eq i32 %call43, 0
  %16 = load i32, i32* %termchar, align 4
  %cmp46 = icmp ne i32 %16, 32
  %or.cond94 = or i1 %tobool44, %cmp46
  br i1 %or.cond94, label %bogus.loopexit156, label %if.end49

if.end49:                                         ; preds = %if.end41
  %17 = load i64, i64* %val, align 8, !tbaa !7
  %conv50 = trunc i64 %17 to i32
  %Ah = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %scanptr.0150, i64 0, i32 4
  store i32 %conv50, i32* %Ah, align 4, !tbaa !17
  %call51 = call fastcc i32 @read_scan_integer(%struct._IO_FILE* nonnull %call, i64* nonnull %val, i32* nonnull %termchar)
  %tobool52 = icmp eq i32 %call51, 0
  br i1 %tobool52, label %bogus.loopexit156, label %if.end54

if.end54:                                         ; preds = %if.end49
  %18 = load i64, i64* %val, align 8, !tbaa !7
  %conv55 = trunc i64 %18 to i32
  %Al = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %scanptr.0150, i64 0, i32 5
  store i32 %conv55, i32* %Al, align 4, !tbaa !18
  br label %if.end60

if.else:                                          ; preds = %while.end
  %Ss56 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %scanptr.0150, i64 0, i32 2
  %19 = bitcast i32* %Ss56 to <4 x i32>*
  store <4 x i32> <i32 0, i32 63, i32 0, i32 0>, <4 x i32>* %19, align 4, !tbaa !9
  br label %if.end60

if.end60:                                         ; preds = %if.else, %if.end54
  %20 = load i32, i32* %termchar, align 4, !tbaa !9
  switch i32 %20, label %bogus.loopexit156 [
    i32 -1, label %if.end68
    i32 59, label %if.end68
  ]

bogus.loopexit:                                   ; preds = %if.end17
  br label %bogus

bogus.loopexit156:                                ; preds = %if.then27, %if.end33, %if.end41, %if.end49, %if.end60
  br label %bogus

bogus:                                            ; preds = %bogus.loopexit156, %bogus.loopexit
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !3
  %call66 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* nonnull getelementptr inbounds ([38 x i8], [38 x i8]* @.str.8, i64 0, i64 0), i8* %filename) #6
  %call67 = tail call i32 @fclose(%struct._IO_FILE* nonnull %call)
  br label %cleanup

if.end68:                                         ; preds = %if.end60, %if.end60
  %incdec.ptr = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %scanptr.0150, i64 1
  %inc69 = add nuw nsw i32 %scanno.0149, 1
  %call2 = call fastcc i32 @read_scan_integer(%struct._IO_FILE* nonnull %call, i64* nonnull %val, i32* nonnull %termchar)
  %tobool = icmp eq i32 %call2, 0
  br i1 %tobool, label %while.end70.loopexit, label %while.body

while.end70.loopexit:                             ; preds = %if.end68
  %inc69.lcssa = phi i32 [ %inc69, %if.end68 ]
  br label %while.end70

while.end70:                                      ; preds = %while.end70.loopexit, %if.end
  %scanno.0.lcssa = phi i32 [ 0, %if.end ], [ %inc69.lcssa, %while.end70.loopexit ]
  %22 = load i32, i32* %termchar, align 4, !tbaa !9
  %cmp71 = icmp eq i32 %22, -1
  br i1 %cmp71, label %if.end76, label %if.then73

if.then73:                                        ; preds = %while.end70
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !3
  %call74 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* nonnull getelementptr inbounds ([29 x i8], [29 x i8]* @.str.4, i64 0, i64 0), i8* %filename) #6
  %call75 = tail call i32 @fclose(%struct._IO_FILE* nonnull %call)
  br label %cleanup

if.end76:                                         ; preds = %while.end70
  %cmp77 = icmp sgt i32 %scanno.0.lcssa, 0
  br i1 %cmp77, label %if.then79, label %if.end85

if.then79:                                        ; preds = %if.end76
  %mem = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 1
  %24 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !19
  %alloc_small = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %24, i64 0, i32 0
  %25 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_small, align 8, !tbaa !22
  %26 = bitcast %struct.jpeg_compress_struct* %cinfo to %struct.jpeg_common_struct*
  %conv80 = sext i32 %scanno.0.lcssa to i64
  %mul = mul nsw i64 %conv80, 36
  %call81 = tail call i8* %25(%struct.jpeg_common_struct* %26, i32 1, i64 %mul) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %call81, i8* %2, i64 %mul, i32 1, i1 false)
  %scan_info = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 22
  %27 = bitcast %struct.jpeg_scan_info** %scan_info to i8**
  store i8* %call81, i8** %27, align 8, !tbaa !24
  %num_scans = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 21
  store i32 %scanno.0.lcssa, i32* %num_scans, align 8, !tbaa !25
  br label %if.end85

if.end85:                                         ; preds = %if.then79, %if.end76
  %call86 = tail call i32 @fclose(%struct._IO_FILE* nonnull %call)
  br label %cleanup

cleanup:                                          ; preds = %if.end85, %if.then73, %bogus, %if.then14, %if.then4, %if.then
  %retval.0 = phi i32 [ 0, %if.then ], [ 0, %if.then4 ], [ 0, %if.then14 ], [ 0, %bogus ], [ 0, %if.then73 ], [ 1, %if.end85 ]
  call void @llvm.lifetime.end(i64 3600, i8* %2) #5
  call void @llvm.lifetime.end(i64 8, i8* %1) #5
  call void @llvm.lifetime.end(i64 4, i8* %0) #5
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @read_scan_integer(%struct._IO_FILE* nocapture %file, i64* nocapture %result, i32* nocapture %termchar) unnamed_addr #0 !prof !2 {
entry:
  %call = tail call fastcc i32 @read_text_integer(%struct._IO_FILE* %file, i64* %result, i32* %termchar)
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %0 = load i32, i32* %termchar, align 4, !tbaa !9
  %cmp38 = icmp eq i32 %0, -1
  %.pre = tail call i16** @__ctype_b_loc() #7
  br i1 %cmp38, label %while.end, label %land.rhs.preheader

land.rhs.preheader:                               ; preds = %if.end
  br label %land.rhs

land.rhs:                                         ; preds = %land.rhs.preheader, %while.cond.backedge
  %ch.039 = phi i32 [ %ch.0.be, %while.cond.backedge ], [ %0, %land.rhs.preheader ]
  %idxprom = sext i32 %ch.039 to i64
  %1 = load i16*, i16** %.pre, align 8, !tbaa !3
  %arrayidx = getelementptr inbounds i16, i16* %1, i64 %idxprom
  %2 = load i16, i16* %arrayidx, align 2, !tbaa !11
  %and = and i16 %2, 8192
  %tobool2 = icmp eq i16 %and, 0
  br i1 %tobool2, label %while.end.loopexit, label %while.body

while.body:                                       ; preds = %land.rhs
  %call.i = tail call i32 @_IO_getc(%struct._IO_FILE* %file) #5
  %cmp.i = icmp eq i32 %call.i, 35
  br i1 %cmp.i, label %do.body.i.preheader, label %while.cond.backedge

do.body.i.preheader:                              ; preds = %while.body
  br label %do.body.i

while.cond.backedge.loopexit:                     ; preds = %do.body.i, %do.body.i
  %call1.i.lcssa = phi i32 [ %call1.i, %do.body.i ], [ %call1.i, %do.body.i ]
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %while.cond.backedge.loopexit, %while.body
  %ch.0.be = phi i32 [ %call.i, %while.body ], [ %call1.i.lcssa, %while.cond.backedge.loopexit ]
  %cmp = icmp eq i32 %ch.0.be, -1
  br i1 %cmp, label %while.end.loopexit, label %land.rhs

do.body.i:                                        ; preds = %do.body.i.preheader, %do.body.i
  %call1.i = tail call i32 @_IO_getc(%struct._IO_FILE* %file) #5
  switch i32 %call1.i, label %do.body.i [
    i32 -1, label %while.cond.backedge.loopexit
    i32 10, label %while.cond.backedge.loopexit
  ]

while.end.loopexit:                               ; preds = %while.cond.backedge, %land.rhs
  %ch.0.lcssa.ph = phi i32 [ -1, %while.cond.backedge ], [ %ch.039, %land.rhs ]
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %if.end
  %ch.0.lcssa = phi i32 [ -1, %if.end ], [ %ch.0.lcssa.ph, %while.end.loopexit ]
  %idxprom4 = sext i32 %ch.0.lcssa to i64
  %3 = load i16*, i16** %.pre, align 8, !tbaa !3
  %arrayidx6 = getelementptr inbounds i16, i16* %3, i64 %idxprom4
  %4 = load i16, i16* %arrayidx6, align 2, !tbaa !11
  %and8 = and i16 %4, 2048
  %tobool9 = icmp eq i16 %and8, 0
  br i1 %tobool9, label %if.else, label %if.then10

if.then10:                                        ; preds = %while.end
  %call11 = tail call i32 @ungetc(i32 %ch.0.lcssa, %struct._IO_FILE* %file)
  %cmp12 = icmp eq i32 %call11, -1
  br i1 %cmp12, label %cleanup, label %if.end25

if.else:                                          ; preds = %while.end
  switch i32 %ch.0.lcssa, label %if.then23 [
    i32 -1, label %if.end25
    i32 59, label %if.end25
    i32 58, label %if.end25
  ]

if.then23:                                        ; preds = %if.else
  br label %if.end25

if.end25:                                         ; preds = %if.else, %if.else, %if.else, %if.then10, %if.then23
  %ch.1 = phi i32 [ 32, %if.then23 ], [ %ch.0.lcssa, %if.else ], [ 32, %if.then10 ], [ %ch.0.lcssa, %if.else ], [ %ch.0.lcssa, %if.else ]
  store i32 %ch.1, i32* %termchar, align 4, !tbaa !9
  br label %cleanup

cleanup:                                          ; preds = %if.then10, %entry, %if.end25
  %retval.0 = phi i32 [ 1, %if.end25 ], [ 0, %entry ], [ 0, %if.then10 ]
  ret i32 %retval.0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: nounwind uwtable
define i32 @set_quant_slots(%struct.jpeg_compress_struct* nocapture readonly %cinfo, i8* nocapture readonly %arg) #0 !prof !2 {
entry:
  %val = alloca i32, align 4
  %ch = alloca i8, align 1
  %0 = bitcast i32* %val to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #5
  store i32 0, i32* %val, align 4, !tbaa !9
  call void @llvm.lifetime.start(i64 1, i8* nonnull %ch) #5
  %comp_info20 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 14
  br label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.inc ]
  %arg.addr.034 = phi i8* [ %arg, %entry ], [ %arg.addr.2, %for.inc ]
  %1 = load i8, i8* %arg.addr.034, align 1, !tbaa !26
  %tobool = icmp eq i8 %1, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  store i8 44, i8* %ch, align 1, !tbaa !26
  %call = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* nonnull %arg.addr.034, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 0), i32* nonnull %val, i8* nonnull %ch) #5
  %cmp1 = icmp sgt i32 %call, 0
  %2 = load i8, i8* %ch, align 1
  %cmp3 = icmp eq i8 %2, 44
  %or.cond = and i1 %cmp1, %cmp3
  br i1 %or.cond, label %if.end6, label %cleanup.loopexit

if.end6:                                          ; preds = %if.then
  %3 = load i32, i32* %val, align 4, !tbaa !9
  %4 = icmp ugt i32 %3, 3
  br i1 %4, label %if.then11, label %if.end13

if.then11:                                        ; preds = %if.end6
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !3
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* nonnull getelementptr inbounds ([45 x i8], [45 x i8]* @.str.10, i64 0, i64 0), i32 3) #6
  br label %cleanup

if.end13:                                         ; preds = %if.end6
  %6 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %comp_info20, align 8, !tbaa !27
  %quant_tbl_no = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %6, i64 %indvars.iv, i32 4
  store i32 %3, i32* %quant_tbl_no, align 8, !tbaa !28
  br label %while.cond

while.cond:                                       ; preds = %land.rhs, %if.end13
  %arg.addr.1 = phi i8* [ %arg.addr.034, %if.end13 ], [ %incdec.ptr, %land.rhs ]
  %7 = load i8, i8* %arg.addr.1, align 1, !tbaa !26
  %tobool15 = icmp eq i8 %7, 0
  br i1 %tobool15, label %for.inc.loopexit, label %land.rhs

land.rhs:                                         ; preds = %while.cond
  %incdec.ptr = getelementptr inbounds i8, i8* %arg.addr.1, i64 1
  %cmp17 = icmp eq i8 %7, 44
  br i1 %cmp17, label %for.inc.loopexit, label %while.cond

if.else:                                          ; preds = %for.body
  %8 = load i32, i32* %val, align 4, !tbaa !9
  %9 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %comp_info20, align 8, !tbaa !27
  %quant_tbl_no22 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %9, i64 %indvars.iv, i32 4
  store i32 %8, i32* %quant_tbl_no22, align 8, !tbaa !28
  br label %for.inc

for.inc.loopexit:                                 ; preds = %while.cond, %land.rhs
  %arg.addr.2.ph = phi i8* [ %arg.addr.1, %while.cond ], [ %incdec.ptr, %land.rhs ]
  br label %for.inc

for.inc:                                          ; preds = %for.inc.loopexit, %if.else
  %arg.addr.2 = phi i8* [ %arg.addr.034, %if.else ], [ %arg.addr.2.ph, %for.inc.loopexit ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %cmp = icmp slt i64 %indvars.iv.next, 10
  br i1 %cmp, label %for.body, label %cleanup.loopexit

cleanup.loopexit:                                 ; preds = %for.inc, %if.then
  %retval.0.ph = phi i32 [ 1, %for.inc ], [ 0, %if.then ]
  br label %cleanup

cleanup:                                          ; preds = %cleanup.loopexit, %if.then11
  %retval.0 = phi i32 [ 0, %if.then11 ], [ %retval.0.ph, %cleanup.loopexit ]
  call void @llvm.lifetime.end(i64 1, i8* nonnull %ch) #5
  call void @llvm.lifetime.end(i64 4, i8* %0) #5
  ret i32 %retval.0
}

; Function Attrs: nounwind
declare i32 @__isoc99_sscanf(i8* nocapture readonly, i8* nocapture readonly, ...) #2

; Function Attrs: nounwind uwtable
define i32 @set_sample_factors(%struct.jpeg_compress_struct* nocapture readonly %cinfo, i8* nocapture readonly %arg) #0 !prof !2 {
entry:
  %val1 = alloca i32, align 4
  %val2 = alloca i32, align 4
  %ch1 = alloca i8, align 1
  %ch2 = alloca i8, align 1
  %0 = bitcast i32* %val1 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #5
  %1 = bitcast i32* %val2 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #5
  call void @llvm.lifetime.start(i64 1, i8* nonnull %ch1) #5
  call void @llvm.lifetime.start(i64 1, i8* nonnull %ch2) #5
  %comp_info36 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 14
  br label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.inc ]
  %arg.addr.063 = phi i8* [ %arg, %entry ], [ %arg.addr.2, %for.inc ]
  %2 = load i8, i8* %arg.addr.063, align 1, !tbaa !26
  %tobool = icmp eq i8 %2, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  store i8 44, i8* %ch2, align 1, !tbaa !26
  %call = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* nonnull %arg.addr.063, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11, i64 0, i64 0), i32* nonnull %val1, i8* nonnull %ch1, i32* nonnull %val2, i8* nonnull %ch2) #5
  %cmp1 = icmp slt i32 %call, 3
  br i1 %cmp1, label %cleanup.loopexit, label %if.end

if.end:                                           ; preds = %if.then
  %3 = load i8, i8* %ch1, align 1, !tbaa !26
  switch i8 %3, label %cleanup.loopexit [
    i8 120, label %lor.lhs.false
    i8 88, label %lor.lhs.false
  ]

lor.lhs.false:                                    ; preds = %if.end, %if.end
  %4 = load i8, i8* %ch2, align 1, !tbaa !26
  %cmp9 = icmp eq i8 %4, 44
  br i1 %cmp9, label %if.end12, label %cleanup.loopexit

if.end12:                                         ; preds = %lor.lhs.false
  %5 = load i32, i32* %val1, align 4, !tbaa !9
  %.off = add i32 %5, -1
  %6 = load i32, i32* %val2, align 4
  %.off62 = add i32 %6, -1
  %7 = or i32 %.off62, %.off
  %8 = icmp ugt i32 %7, 3
  br i1 %8, label %if.then24, label %if.end26

if.then24:                                        ; preds = %if.end12
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !3
  %10 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.12, i64 0, i64 0), i64 35, i64 1, %struct._IO_FILE* %9) #6
  br label %cleanup

if.end26:                                         ; preds = %if.end12
  %11 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %comp_info36, align 8, !tbaa !27
  %h_samp_factor = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %11, i64 %indvars.iv, i32 2
  store i32 %5, i32* %h_samp_factor, align 8, !tbaa !30
  %12 = load i32, i32* %val2, align 4, !tbaa !9
  %v_samp_factor = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %11, i64 %indvars.iv, i32 3
  store i32 %12, i32* %v_samp_factor, align 4, !tbaa !31
  br label %while.cond

while.cond:                                       ; preds = %land.rhs, %if.end26
  %arg.addr.1 = phi i8* [ %arg.addr.063, %if.end26 ], [ %incdec.ptr, %land.rhs ]
  %13 = load i8, i8* %arg.addr.1, align 1, !tbaa !26
  %tobool31 = icmp eq i8 %13, 0
  br i1 %tobool31, label %for.inc.loopexit, label %land.rhs

land.rhs:                                         ; preds = %while.cond
  %incdec.ptr = getelementptr inbounds i8, i8* %arg.addr.1, i64 1
  %cmp33 = icmp eq i8 %13, 44
  br i1 %cmp33, label %for.inc.loopexit, label %while.cond

if.else:                                          ; preds = %for.body
  %14 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %comp_info36, align 8, !tbaa !27
  %h_samp_factor38 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %14, i64 %indvars.iv, i32 2
  store i32 1, i32* %h_samp_factor38, align 8, !tbaa !30
  %v_samp_factor42 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %14, i64 %indvars.iv, i32 3
  store i32 1, i32* %v_samp_factor42, align 4, !tbaa !31
  br label %for.inc

for.inc.loopexit:                                 ; preds = %while.cond, %land.rhs
  %arg.addr.2.ph = phi i8* [ %arg.addr.1, %while.cond ], [ %incdec.ptr, %land.rhs ]
  br label %for.inc

for.inc:                                          ; preds = %for.inc.loopexit, %if.else
  %arg.addr.2 = phi i8* [ %arg.addr.063, %if.else ], [ %arg.addr.2.ph, %for.inc.loopexit ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %cmp = icmp slt i64 %indvars.iv.next, 10
  br i1 %cmp, label %for.body, label %cleanup.loopexit

cleanup.loopexit:                                 ; preds = %if.then, %if.end, %lor.lhs.false, %for.inc
  %retval.0.ph = phi i32 [ 1, %for.inc ], [ 0, %lor.lhs.false ], [ 0, %if.end ], [ 0, %if.then ]
  br label %cleanup

cleanup:                                          ; preds = %cleanup.loopexit, %if.then24
  %retval.0 = phi i32 [ 0, %if.then24 ], [ %retval.0.ph, %cleanup.loopexit ]
  call void @llvm.lifetime.end(i64 1, i8* nonnull %ch2) #5
  call void @llvm.lifetime.end(i64 1, i8* nonnull %ch1) #5
  call void @llvm.lifetime.end(i64 4, i8* %1) #5
  call void @llvm.lifetime.end(i64 4, i8* %0) #5
  ret i32 %retval.0
}

; Function Attrs: nounwind readnone
declare i16** @__ctype_b_loc() #4

; Function Attrs: nounwind
declare i32 @_IO_getc(%struct._IO_FILE* nocapture) #2

; Function Attrs: nounwind
declare i32 @ungetc(i32, %struct._IO_FILE* nocapture) #2

; Function Attrs: nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) #5

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { cold }
attributes #7 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"MaxFunctionCount", i32 150581}
!1 = !{!"clang version 3.8.0 (trunk 257473)"}
!2 = !{!"function_entry_count", i64 0}
!3 = !{!4, !4, i64 0}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!8, !8, i64 0}
!8 = !{!"long", !5, i64 0}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !5, i64 0}
!11 = !{!12, !12, i64 0}
!12 = !{!"short", !5, i64 0}
!13 = !{!14, !10, i64 0}
!14 = !{!"", !10, i64 0, !5, i64 4, !10, i64 20, !10, i64 24, !10, i64 28, !10, i64 32}
!15 = !{!14, !10, i64 20}
!16 = !{!14, !10, i64 24}
!17 = !{!14, !10, i64 28}
!18 = !{!14, !10, i64 32}
!19 = !{!20, !4, i64 8}
!20 = !{!"jpeg_compress_struct", !4, i64 0, !4, i64 8, !4, i64 16, !10, i64 24, !10, i64 28, !4, i64 32, !10, i64 40, !10, i64 44, !10, i64 48, !5, i64 52, !21, i64 56, !10, i64 64, !10, i64 68, !5, i64 72, !4, i64 80, !5, i64 88, !5, i64 120, !5, i64 152, !5, i64 184, !5, i64 200, !5, i64 216, !10, i64 232, !4, i64 240, !10, i64 248, !10, i64 252, !10, i64 256, !10, i64 260, !10, i64 264, !5, i64 268, !10, i64 272, !10, i64 276, !10, i64 280, !5, i64 284, !12, i64 286, !12, i64 288, !10, i64 292, !10, i64 296, !10, i64 300, !10, i64 304, !10, i64 308, !10, i64 312, !10, i64 316, !5, i64 320, !10, i64 352, !10, i64 356, !10, i64 360, !5, i64 364, !10, i64 404, !10, i64 408, !10, i64 412, !10, i64 416, !4, i64 424, !4, i64 432, !4, i64 440, !4, i64 448, !4, i64 456, !4, i64 464, !4, i64 472, !4, i64 480, !4, i64 488}
!21 = !{!"double", !5, i64 0}
!22 = !{!23, !4, i64 0}
!23 = !{!"jpeg_memory_mgr", !4, i64 0, !4, i64 8, !4, i64 16, !4, i64 24, !4, i64 32, !4, i64 40, !4, i64 48, !4, i64 56, !4, i64 64, !4, i64 72, !4, i64 80, !8, i64 88}
!24 = !{!20, !4, i64 240}
!25 = !{!20, !10, i64 232}
!26 = !{!5, !5, i64 0}
!27 = !{!20, !4, i64 80}
!28 = !{!29, !10, i64 16}
!29 = !{!"", !10, i64 0, !10, i64 4, !10, i64 8, !10, i64 12, !10, i64 16, !10, i64 20, !10, i64 24, !10, i64 28, !10, i64 32, !10, i64 36, !10, i64 40, !10, i64 44, !10, i64 48, !10, i64 52, !10, i64 56, !10, i64 60, !10, i64 64, !10, i64 68, !10, i64 72, !4, i64 80, !4, i64 88}
!30 = !{!29, !10, i64 8}
!31 = !{!29, !10, i64 12}
