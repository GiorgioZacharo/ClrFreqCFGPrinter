; ModuleID = 'jdcolor.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_decompress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32, %struct.jpeg_source_mgr*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i16, i16, i32, i8, i32, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master*, %struct.jpeg_d_main_controller*, %struct.jpeg_d_coef_controller*, %struct.jpeg_d_post_controller*, %struct.jpeg_input_controller*, %struct.jpeg_marker_reader*, %struct.jpeg_entropy_decoder*, %struct.jpeg_inverse_dct*, %struct.jpeg_upsampler*, %struct.jpeg_color_deconverter*, %struct.jpeg_color_quantizer* }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_source_mgr = type { i8*, i64, {}*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i64)*, i32 (%struct.jpeg_decompress_struct*, i32)*, {}* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.jpeg_decomp_master = type { {}*, {}*, i32 }
%struct.jpeg_d_main_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)* }
%struct.jpeg_d_coef_controller = type { {}*, i32 (%struct.jpeg_decompress_struct*)*, {}*, i32 (%struct.jpeg_decompress_struct*, i8***)*, %struct.jvirt_barray_control** }
%struct.jpeg_d_post_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)* }
%struct.jpeg_input_controller = type { i32 (%struct.jpeg_decompress_struct*)*, {}*, {}*, {}*, i32, i32 }
%struct.jpeg_marker_reader = type { {}*, i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, [16 x i32 (%struct.jpeg_decompress_struct*)*], i32, i32, i32, i32 }
%struct.jpeg_entropy_decoder = type { {}*, i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)* }
%struct.jpeg_inverse_dct = type { {}*, [10 x void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)*] }
%struct.jpeg_upsampler = type { {}*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)*, i32 }
%struct.jpeg_color_deconverter = type { {}*, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* }
%struct.jpeg_color_quantizer = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)*, {}*, {}* }
%struct.my_color_deconverter = type { %struct.jpeg_color_deconverter, i32*, i32*, i64*, i64* }

; Function Attrs: nounwind uwtable
define void @jinit_color_deconverter(%struct.jpeg_decompress_struct* %cinfo) #0 {
entry:
  %mem = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 1
  %0 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !2
  %alloc_small = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %0, i64 0, i32 0
  %1 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_small, align 8, !tbaa !10
  %2 = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  %call = tail call i8* %1(%struct.jpeg_common_struct* %2, i32 1, i64 48) #4
  %cconvert1 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 82
  %3 = bitcast %struct.jpeg_color_deconverter** %cconvert1 to i8**
  store i8* %call, i8** %3, align 8, !tbaa !13
  %start_pass2 = bitcast i8* %call to void (%struct.jpeg_decompress_struct*)**
  store void (%struct.jpeg_decompress_struct*)* @start_pass_dcolor, void (%struct.jpeg_decompress_struct*)** %start_pass2, align 8, !tbaa !14
  %jpeg_color_space = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 9
  %4 = load i32, i32* %jpeg_color_space, align 4, !tbaa !17
  switch i32 %4, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb4
    i32 3, label %sw.bb4
    i32 4, label %sw.bb13
    i32 5, label %sw.bb13
  ]

sw.bb:                                            ; preds = %entry
  %num_components = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 8
  %5 = load i32, i32* %num_components, align 8, !tbaa !18
  %cmp = icmp eq i32 %5, 1
  br i1 %cmp, label %sw.epilog, label %if.then

if.then:                                          ; preds = %sw.bb
  %err = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0
  %6 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8, !tbaa !19
  %msg_code = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %6, i64 0, i32 5
  store i32 8, i32* %msg_code, align 8, !tbaa !20
  %error_exit = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %6, i64 0, i32 0
  %7 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit, align 8, !tbaa !22
  tail call void %7(%struct.jpeg_common_struct* nonnull %2) #4
  br label %sw.epilog

sw.bb4:                                           ; preds = %entry, %entry
  %num_components5 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 8
  %8 = load i32, i32* %num_components5, align 8, !tbaa !18
  %cmp6 = icmp eq i32 %8, 3
  br i1 %cmp6, label %sw.epilog, label %if.then7

if.then7:                                         ; preds = %sw.bb4
  %err8 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0
  %9 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err8, align 8, !tbaa !19
  %msg_code9 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %9, i64 0, i32 5
  store i32 8, i32* %msg_code9, align 8, !tbaa !20
  %error_exit11 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %9, i64 0, i32 0
  %10 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit11, align 8, !tbaa !22
  tail call void %10(%struct.jpeg_common_struct* nonnull %2) #4
  br label %sw.epilog

sw.bb13:                                          ; preds = %entry, %entry
  %num_components14 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 8
  %11 = load i32, i32* %num_components14, align 8, !tbaa !18
  %cmp15 = icmp eq i32 %11, 4
  br i1 %cmp15, label %sw.epilog, label %if.then16

if.then16:                                        ; preds = %sw.bb13
  %err17 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0
  %12 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err17, align 8, !tbaa !19
  %msg_code18 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %12, i64 0, i32 5
  store i32 8, i32* %msg_code18, align 8, !tbaa !20
  %error_exit20 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %12, i64 0, i32 0
  %13 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit20, align 8, !tbaa !22
  tail call void %13(%struct.jpeg_common_struct* nonnull %2) #4
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  %num_components22 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 8
  %14 = load i32, i32* %num_components22, align 8, !tbaa !18
  %cmp23 = icmp slt i32 %14, 1
  br i1 %cmp23, label %if.then24, label %sw.epilog

if.then24:                                        ; preds = %sw.default
  %err25 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0
  %15 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err25, align 8, !tbaa !19
  %msg_code26 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %15, i64 0, i32 5
  store i32 8, i32* %msg_code26, align 8, !tbaa !20
  %error_exit28 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %15, i64 0, i32 0
  %16 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit28, align 8, !tbaa !22
  tail call void %16(%struct.jpeg_common_struct* nonnull %2) #4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb, %sw.bb4, %sw.bb13, %sw.default, %if.then24, %if.then16, %if.then7, %if.then
  %out_color_space = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 10
  %17 = load i32, i32* %out_color_space, align 8, !tbaa !23
  switch i32 %17, label %sw.default84 [
    i32 1, label %sw.bb30
    i32 2, label %sw.bb44
    i32 4, label %sw.bb64
  ]

sw.bb30:                                          ; preds = %sw.epilog
  %out_color_components = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 28
  store i32 1, i32* %out_color_components, align 8, !tbaa !24
  %18 = load i32, i32* %jpeg_color_space, align 4, !tbaa !17
  switch i32 %18, label %if.else [
    i32 1, label %if.then35
    i32 3, label %if.then35
  ]

if.then35:                                        ; preds = %sw.bb30, %sw.bb30
  %color_convert = getelementptr inbounds i8, i8* %call, i64 8
  %19 = bitcast i8* %color_convert to void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)**
  store void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* @grayscale_convert, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)** %19, align 8, !tbaa !25
  %num_components37 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 8
  %20 = load i32, i32* %num_components37, align 8, !tbaa !18
  %cmp38206 = icmp sgt i32 %20, 1
  br i1 %cmp38206, label %for.body.lr.ph, label %sw.epilog99

for.body.lr.ph:                                   ; preds = %if.then35
  %comp_info = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 43
  %21 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %comp_info, align 8
  %22 = sext i32 %20 to i64
  %23 = sext i32 %20 to i64
  %24 = add nsw i64 %23, 7
  %25 = add nsw i64 %23, -2
  %xtraiter = and i64 %24, 7
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %for.body.lr.ph.split, label %for.body.prol.preheader

for.body.prol.preheader:                          ; preds = %for.body.lr.ph
  br label %for.body.prol

for.body.prol:                                    ; preds = %for.body.prol.preheader, %for.body.prol
  %indvars.iv.prol = phi i64 [ %indvars.iv.next.prol, %for.body.prol ], [ 1, %for.body.prol.preheader ]
  %prol.iter = phi i64 [ %prol.iter.sub, %for.body.prol ], [ %xtraiter, %for.body.prol.preheader ]
  %component_needed.prol = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %21, i64 %indvars.iv.prol, i32 12
  store i32 0, i32* %component_needed.prol, align 8, !tbaa !26
  %indvars.iv.next.prol = add nuw nsw i64 %indvars.iv.prol, 1
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %for.body.lr.ph.split.loopexit, label %for.body.prol, !llvm.loop !28

for.body.lr.ph.split.loopexit:                    ; preds = %for.body.prol
  %indvars.iv.next.prol.lcssa = phi i64 [ %indvars.iv.next.prol, %for.body.prol ]
  br label %for.body.lr.ph.split

for.body.lr.ph.split:                             ; preds = %for.body.lr.ph.split.loopexit, %for.body.lr.ph
  %indvars.iv.unr = phi i64 [ 1, %for.body.lr.ph ], [ %indvars.iv.next.prol.lcssa, %for.body.lr.ph.split.loopexit ]
  %26 = icmp ult i64 %25, 7
  br i1 %26, label %sw.epilog99.loopexit, label %for.body.lr.ph.split.split

for.body.lr.ph.split.split:                       ; preds = %for.body.lr.ph.split
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.lr.ph.split.split
  %indvars.iv = phi i64 [ %indvars.iv.unr, %for.body.lr.ph.split.split ], [ %indvars.iv.next.7, %for.body ]
  %component_needed = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %21, i64 %indvars.iv, i32 12
  store i32 0, i32* %component_needed, align 8, !tbaa !26
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %component_needed.1 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %21, i64 %indvars.iv.next, i32 12
  store i32 0, i32* %component_needed.1, align 8, !tbaa !26
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, 2
  %component_needed.2 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %21, i64 %indvars.iv.next.1, i32 12
  store i32 0, i32* %component_needed.2, align 8, !tbaa !26
  %indvars.iv.next.2 = add nsw i64 %indvars.iv, 3
  %component_needed.3 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %21, i64 %indvars.iv.next.2, i32 12
  store i32 0, i32* %component_needed.3, align 8, !tbaa !26
  %indvars.iv.next.3 = add nsw i64 %indvars.iv, 4
  %component_needed.4 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %21, i64 %indvars.iv.next.3, i32 12
  store i32 0, i32* %component_needed.4, align 8, !tbaa !26
  %indvars.iv.next.4 = add nsw i64 %indvars.iv, 5
  %component_needed.5 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %21, i64 %indvars.iv.next.4, i32 12
  store i32 0, i32* %component_needed.5, align 8, !tbaa !26
  %indvars.iv.next.5 = add nsw i64 %indvars.iv, 6
  %component_needed.6 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %21, i64 %indvars.iv.next.5, i32 12
  store i32 0, i32* %component_needed.6, align 8, !tbaa !26
  %indvars.iv.next.6 = add nsw i64 %indvars.iv, 7
  %component_needed.7 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %21, i64 %indvars.iv.next.6, i32 12
  store i32 0, i32* %component_needed.7, align 8, !tbaa !26
  %indvars.iv.next.7 = add nsw i64 %indvars.iv, 8
  %cmp38.7 = icmp slt i64 %indvars.iv.next.7, %22
  br i1 %cmp38.7, label %for.body, label %sw.epilog99.loopexit.unr-lcssa

if.else:                                          ; preds = %sw.bb30
  %err39 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0
  %27 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err39, align 8, !tbaa !19
  %msg_code40 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %27, i64 0, i32 5
  store i32 25, i32* %msg_code40, align 8, !tbaa !20
  %error_exit42 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %27, i64 0, i32 0
  %28 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit42, align 8, !tbaa !22
  tail call void %28(%struct.jpeg_common_struct* nonnull %2) #4
  br label %sw.epilog99

sw.bb44:                                          ; preds = %sw.epilog
  %out_color_components45 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 28
  store i32 3, i32* %out_color_components45, align 8, !tbaa !24
  %29 = load i32, i32* %jpeg_color_space, align 4, !tbaa !17
  switch i32 %29, label %if.else57 [
    i32 3, label %if.then48
    i32 2, label %if.then54
  ]

if.then48:                                        ; preds = %sw.bb44
  %color_convert50 = getelementptr inbounds i8, i8* %call, i64 8
  %30 = bitcast i8* %color_convert50 to void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)**
  store void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* @ycc_rgb_convert, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)** %30, align 8, !tbaa !25
  %31 = bitcast %struct.jpeg_color_deconverter** %cconvert1 to %struct.my_color_deconverter**
  %32 = load %struct.my_color_deconverter*, %struct.my_color_deconverter** %31, align 8, !tbaa !13
  %33 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !2
  %alloc_small.i = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %33, i64 0, i32 0
  %34 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_small.i, align 8, !tbaa !10
  %call.i = tail call i8* %34(%struct.jpeg_common_struct* nonnull %2, i32 1, i64 1024) #4
  %Cr_r_tab.i = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %32, i64 0, i32 1
  %35 = bitcast i32** %Cr_r_tab.i to i8**
  store i8* %call.i, i8** %35, align 8, !tbaa !30
  %36 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !2
  %alloc_small3.i = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %36, i64 0, i32 0
  %37 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_small3.i, align 8, !tbaa !10
  %call4.i = tail call i8* %37(%struct.jpeg_common_struct* nonnull %2, i32 1, i64 1024) #4
  %Cb_b_tab.i = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %32, i64 0, i32 2
  %38 = bitcast i32** %Cb_b_tab.i to i8**
  store i8* %call4.i, i8** %38, align 8, !tbaa !31
  %39 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !2
  %alloc_small6.i = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %39, i64 0, i32 0
  %40 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_small6.i, align 8, !tbaa !10
  %call7.i = tail call i8* %40(%struct.jpeg_common_struct* nonnull %2, i32 1, i64 2048) #4
  %Cr_g_tab.i = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %32, i64 0, i32 3
  %41 = bitcast i64** %Cr_g_tab.i to i8**
  store i8* %call7.i, i8** %41, align 8, !tbaa !32
  %42 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !2
  %alloc_small9.i = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %42, i64 0, i32 0
  %43 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_small9.i, align 8, !tbaa !10
  %call10.i = tail call i8* %43(%struct.jpeg_common_struct* nonnull %2, i32 1, i64 2048) #4
  %Cb_g_tab.i = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %32, i64 0, i32 4
  %44 = bitcast i64** %Cb_g_tab.i to i8**
  store i8* %call10.i, i8** %44, align 8, !tbaa !33
  %45 = load i32*, i32** %Cr_r_tab.i, align 8
  %46 = load i32*, i32** %Cb_b_tab.i, align 8
  %47 = load i64*, i64** %Cr_g_tab.i, align 8
  %.cast.i = bitcast i8* %call10.i to i64*
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %if.then48
  %indvars.iv.i = phi i64 [ 0, %if.then48 ], [ %indvars.iv.next.i, %for.body.i ]
  %x.059.i = phi i64 [ -128, %if.then48 ], [ %inc28.i, %for.body.i ]
  %mul.i = mul nsw i64 %x.059.i, 91881
  %add.i = add nsw i64 %mul.i, 32768
  %shr56.i = lshr i64 %add.i, 16
  %conv.i = trunc i64 %shr56.i to i32
  %arrayidx.i = getelementptr inbounds i32, i32* %45, i64 %indvars.iv.i
  store i32 %conv.i, i32* %arrayidx.i, align 4, !tbaa !34
  %mul12.i = mul nsw i64 %x.059.i, 116130
  %add13.i = add nsw i64 %mul12.i, 32768
  %shr1457.i = lshr i64 %add13.i, 16
  %conv15.i = trunc i64 %shr1457.i to i32
  %arrayidx18.i = getelementptr inbounds i32, i32* %46, i64 %indvars.iv.i
  store i32 %conv15.i, i32* %arrayidx18.i, align 4, !tbaa !34
  %mul19.i = mul nsw i64 %x.059.i, -46802
  %arrayidx22.i = getelementptr inbounds i64, i64* %47, i64 %indvars.iv.i
  store i64 %mul19.i, i64* %arrayidx22.i, align 8, !tbaa !35
  %mul23.i = mul nsw i64 %x.059.i, -22554
  %add24.i = add nsw i64 %mul23.i, 32768
  %arrayidx27.i = getelementptr inbounds i64, i64* %.cast.i, i64 %indvars.iv.i
  store i64 %add24.i, i64* %arrayidx27.i, align 8, !tbaa !35
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %inc28.i = add nsw i64 %x.059.i, 1
  %exitcond.i = icmp eq i64 %indvars.iv.next.i, 256
  br i1 %exitcond.i, label %sw.epilog99.loopexit214, label %for.body.i

if.then54:                                        ; preds = %sw.bb44
  %color_convert56 = getelementptr inbounds i8, i8* %call, i64 8
  %48 = bitcast i8* %color_convert56 to void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)**
  store void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* @null_convert, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)** %48, align 8, !tbaa !25
  br label %sw.epilog99

if.else57:                                        ; preds = %sw.bb44
  %err58 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0
  %49 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err58, align 8, !tbaa !19
  %msg_code59 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %49, i64 0, i32 5
  store i32 25, i32* %msg_code59, align 8, !tbaa !20
  %error_exit61 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %49, i64 0, i32 0
  %50 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit61, align 8, !tbaa !22
  tail call void %50(%struct.jpeg_common_struct* nonnull %2) #4
  br label %sw.epilog99

sw.bb64:                                          ; preds = %sw.epilog
  %out_color_components65 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 28
  store i32 4, i32* %out_color_components65, align 8, !tbaa !24
  %51 = load i32, i32* %jpeg_color_space, align 4, !tbaa !17
  switch i32 %51, label %if.else77 [
    i32 5, label %if.then68
    i32 4, label %if.then74
  ]

if.then68:                                        ; preds = %sw.bb64
  %color_convert70 = getelementptr inbounds i8, i8* %call, i64 8
  %52 = bitcast i8* %color_convert70 to void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)**
  store void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* @ycck_cmyk_convert, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)** %52, align 8, !tbaa !25
  %53 = bitcast %struct.jpeg_color_deconverter** %cconvert1 to %struct.my_color_deconverter**
  %54 = load %struct.my_color_deconverter*, %struct.my_color_deconverter** %53, align 8, !tbaa !13
  %55 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !2
  %alloc_small.i169 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %55, i64 0, i32 0
  %56 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_small.i169, align 8, !tbaa !10
  %call.i170 = tail call i8* %56(%struct.jpeg_common_struct* nonnull %2, i32 1, i64 1024) #4
  %Cr_r_tab.i171 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %54, i64 0, i32 1
  %57 = bitcast i32** %Cr_r_tab.i171 to i8**
  store i8* %call.i170, i8** %57, align 8, !tbaa !30
  %58 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !2
  %alloc_small3.i172 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %58, i64 0, i32 0
  %59 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_small3.i172, align 8, !tbaa !10
  %call4.i173 = tail call i8* %59(%struct.jpeg_common_struct* nonnull %2, i32 1, i64 1024) #4
  %Cb_b_tab.i174 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %54, i64 0, i32 2
  %60 = bitcast i32** %Cb_b_tab.i174 to i8**
  store i8* %call4.i173, i8** %60, align 8, !tbaa !31
  %61 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !2
  %alloc_small6.i175 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %61, i64 0, i32 0
  %62 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_small6.i175, align 8, !tbaa !10
  %call7.i176 = tail call i8* %62(%struct.jpeg_common_struct* nonnull %2, i32 1, i64 2048) #4
  %Cr_g_tab.i177 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %54, i64 0, i32 3
  %63 = bitcast i64** %Cr_g_tab.i177 to i8**
  store i8* %call7.i176, i8** %63, align 8, !tbaa !32
  %64 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !2
  %alloc_small9.i178 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %64, i64 0, i32 0
  %65 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_small9.i178, align 8, !tbaa !10
  %call10.i179 = tail call i8* %65(%struct.jpeg_common_struct* nonnull %2, i32 1, i64 2048) #4
  %Cb_g_tab.i180 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %54, i64 0, i32 4
  %66 = bitcast i64** %Cb_g_tab.i180 to i8**
  store i8* %call10.i179, i8** %66, align 8, !tbaa !33
  %67 = load i32*, i32** %Cr_r_tab.i171, align 8
  %68 = load i32*, i32** %Cb_b_tab.i174, align 8
  %69 = load i64*, i64** %Cr_g_tab.i177, align 8
  %.cast.i181 = bitcast i8* %call10.i179 to i64*
  br label %for.body.i202

for.body.i202:                                    ; preds = %for.body.i202, %if.then68
  %indvars.iv.i182 = phi i64 [ 0, %if.then68 ], [ %indvars.iv.next.i199, %for.body.i202 ]
  %x.059.i183 = phi i64 [ -128, %if.then68 ], [ %inc28.i200, %for.body.i202 ]
  %mul.i184 = mul nsw i64 %x.059.i183, 91881
  %add.i185 = add nsw i64 %mul.i184, 32768
  %shr56.i186 = lshr i64 %add.i185, 16
  %conv.i187 = trunc i64 %shr56.i186 to i32
  %arrayidx.i188 = getelementptr inbounds i32, i32* %67, i64 %indvars.iv.i182
  store i32 %conv.i187, i32* %arrayidx.i188, align 4, !tbaa !34
  %mul12.i189 = mul nsw i64 %x.059.i183, 116130
  %add13.i190 = add nsw i64 %mul12.i189, 32768
  %shr1457.i191 = lshr i64 %add13.i190, 16
  %conv15.i192 = trunc i64 %shr1457.i191 to i32
  %arrayidx18.i193 = getelementptr inbounds i32, i32* %68, i64 %indvars.iv.i182
  store i32 %conv15.i192, i32* %arrayidx18.i193, align 4, !tbaa !34
  %mul19.i194 = mul nsw i64 %x.059.i183, -46802
  %arrayidx22.i195 = getelementptr inbounds i64, i64* %69, i64 %indvars.iv.i182
  store i64 %mul19.i194, i64* %arrayidx22.i195, align 8, !tbaa !35
  %mul23.i196 = mul nsw i64 %x.059.i183, -22554
  %add24.i197 = add nsw i64 %mul23.i196, 32768
  %arrayidx27.i198 = getelementptr inbounds i64, i64* %.cast.i181, i64 %indvars.iv.i182
  store i64 %add24.i197, i64* %arrayidx27.i198, align 8, !tbaa !35
  %indvars.iv.next.i199 = add nuw nsw i64 %indvars.iv.i182, 1
  %inc28.i200 = add nsw i64 %x.059.i183, 1
  %exitcond.i201 = icmp eq i64 %indvars.iv.next.i199, 256
  br i1 %exitcond.i201, label %sw.epilog99.loopexit215, label %for.body.i202

if.then74:                                        ; preds = %sw.bb64
  %color_convert76 = getelementptr inbounds i8, i8* %call, i64 8
  %70 = bitcast i8* %color_convert76 to void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)**
  store void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* @null_convert, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)** %70, align 8, !tbaa !25
  br label %sw.epilog99

if.else77:                                        ; preds = %sw.bb64
  %err78 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0
  %71 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err78, align 8, !tbaa !19
  %msg_code79 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %71, i64 0, i32 5
  store i32 25, i32* %msg_code79, align 8, !tbaa !20
  %error_exit81 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %71, i64 0, i32 0
  %72 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit81, align 8, !tbaa !22
  tail call void %72(%struct.jpeg_common_struct* nonnull %2) #4
  br label %sw.epilog99

sw.default84:                                     ; preds = %sw.epilog
  %73 = load i32, i32* %jpeg_color_space, align 4, !tbaa !17
  %cmp87 = icmp eq i32 %17, %73
  br i1 %cmp87, label %if.then88, label %if.else93

if.then88:                                        ; preds = %sw.default84
  %num_components89 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 8
  %74 = load i32, i32* %num_components89, align 8, !tbaa !18
  %out_color_components90 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 28
  store i32 %74, i32* %out_color_components90, align 8, !tbaa !24
  %color_convert92 = getelementptr inbounds i8, i8* %call, i64 8
  %75 = bitcast i8* %color_convert92 to void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)**
  store void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* @null_convert, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)** %75, align 8, !tbaa !25
  br label %sw.epilog99

if.else93:                                        ; preds = %sw.default84
  %err94 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0
  %76 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err94, align 8, !tbaa !19
  %msg_code95 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %76, i64 0, i32 5
  store i32 25, i32* %msg_code95, align 8, !tbaa !20
  %error_exit97 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %76, i64 0, i32 0
  %77 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit97, align 8, !tbaa !22
  tail call void %77(%struct.jpeg_common_struct* nonnull %2) #4
  br label %sw.epilog99

sw.epilog99.loopexit.unr-lcssa:                   ; preds = %for.body
  br label %sw.epilog99.loopexit

sw.epilog99.loopexit:                             ; preds = %for.body.lr.ph.split, %sw.epilog99.loopexit.unr-lcssa
  br label %sw.epilog99

sw.epilog99.loopexit214:                          ; preds = %for.body.i
  br label %sw.epilog99

sw.epilog99.loopexit215:                          ; preds = %for.body.i202
  br label %sw.epilog99

sw.epilog99:                                      ; preds = %sw.epilog99.loopexit215, %sw.epilog99.loopexit214, %sw.epilog99.loopexit, %if.then35, %if.then88, %if.else93, %if.else77, %if.then74, %if.else57, %if.then54, %if.else
  %quantize_colors = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 19
  %78 = load i32, i32* %quantize_colors, align 4, !tbaa !36
  %tobool = icmp eq i32 %78, 0
  br i1 %tobool, label %if.else101, label %if.end104

if.else101:                                       ; preds = %sw.epilog99
  %out_color_components102 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 28
  %79 = load i32, i32* %out_color_components102, align 8, !tbaa !24
  br label %if.end104

if.end104:                                        ; preds = %sw.epilog99, %if.else101
  %.sink = phi i32 [ %79, %if.else101 ], [ 1, %sw.epilog99 ]
  %80 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 29
  store i32 %.sink, i32* %80, align 4
  ret void
}

; Function Attrs: norecurse nounwind readnone uwtable
define internal void @start_pass_dcolor(%struct.jpeg_decompress_struct* nocapture %cinfo) #1 {
entry:
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @grayscale_convert(%struct.jpeg_decompress_struct* nocapture readonly %cinfo, i8*** nocapture readonly %input_buf, i32 %input_row, i8** %output_buf, i32 %num_rows) #0 {
entry:
  %0 = load i8**, i8*** %input_buf, align 8, !tbaa !37
  %output_width = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 26
  %1 = load i32, i32* %output_width, align 8, !tbaa !38
  tail call void @jcopy_sample_rows(i8** %0, i32 %input_row, i8** %output_buf, i32 0, i32 %num_rows, i32 %1) #4
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define internal void @ycc_rgb_convert(%struct.jpeg_decompress_struct* nocapture readonly %cinfo, i8*** nocapture readonly %input_buf, i32 %input_row, i8** nocapture readonly %output_buf, i32 %num_rows) #2 {
entry:
  %cconvert1 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 82
  %0 = bitcast %struct.jpeg_color_deconverter** %cconvert1 to %struct.my_color_deconverter**
  %1 = load %struct.my_color_deconverter*, %struct.my_color_deconverter** %0, align 8, !tbaa !13
  %output_width = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 26
  %2 = load i32, i32* %output_width, align 8, !tbaa !38
  %sample_range_limit = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 61
  %3 = load i8*, i8** %sample_range_limit, align 8, !tbaa !39
  %Cr_r_tab = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %1, i64 0, i32 1
  %4 = load i32*, i32** %Cr_r_tab, align 8, !tbaa !30
  %Cb_b_tab = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %1, i64 0, i32 2
  %5 = load i32*, i32** %Cb_b_tab, align 8, !tbaa !31
  %Cr_g_tab = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %1, i64 0, i32 3
  %6 = load i64*, i64** %Cr_g_tab, align 8, !tbaa !32
  %Cb_g_tab = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %1, i64 0, i32 4
  %7 = load i64*, i64** %Cb_g_tab, align 8, !tbaa !33
  %cmp83 = icmp sgt i32 %num_rows, 0
  br i1 %cmp83, label %while.body.lr.ph, label %while.end

while.body.lr.ph:                                 ; preds = %entry
  %arrayidx4 = getelementptr inbounds i8**, i8*** %input_buf, i64 1
  %arrayidx7 = getelementptr inbounds i8**, i8*** %input_buf, i64 2
  %cmp979 = icmp eq i32 %2, 0
  br i1 %cmp979, label %while.end, label %while.body.us.preheader

while.body.us.preheader:                          ; preds = %while.body.lr.ph
  br label %while.body.us

while.body.us:                                    ; preds = %while.body.us.preheader, %for.cond.while.cond.loopexit_crit_edge.us
  %dec86.us.in = phi i32 [ %dec86.us, %for.cond.while.cond.loopexit_crit_edge.us ], [ %num_rows, %while.body.us.preheader ]
  %input_row.addr.085.us = phi i32 [ %inc.us, %for.cond.while.cond.loopexit_crit_edge.us ], [ %input_row, %while.body.us.preheader ]
  %output_buf.addr.084.us = phi i8** [ %incdec.ptr.us, %for.cond.while.cond.loopexit_crit_edge.us ], [ %output_buf, %while.body.us.preheader ]
  %dec86.us = add nsw i32 %dec86.us.in, -1
  %idxprom.us = zext i32 %input_row.addr.085.us to i64
  %8 = load i8**, i8*** %input_buf, align 8, !tbaa !37
  %arrayidx2.us = getelementptr inbounds i8*, i8** %8, i64 %idxprom.us
  %9 = load i8*, i8** %arrayidx2.us, align 8, !tbaa !37
  %10 = load i8**, i8*** %arrayidx4, align 8, !tbaa !37
  %arrayidx5.us = getelementptr inbounds i8*, i8** %10, i64 %idxprom.us
  %11 = load i8*, i8** %arrayidx5.us, align 8, !tbaa !37
  %12 = load i8**, i8*** %arrayidx7, align 8, !tbaa !37
  %arrayidx8.us = getelementptr inbounds i8*, i8** %12, i64 %idxprom.us
  %13 = load i8*, i8** %arrayidx8.us, align 8, !tbaa !37
  %inc.us = add i32 %input_row.addr.085.us, 1
  %14 = load i8*, i8** %output_buf.addr.084.us, align 8, !tbaa !37
  br label %for.body.us

for.body.us:                                      ; preds = %for.body.us, %while.body.us
  %indvars.iv = phi i64 [ 0, %while.body.us ], [ %indvars.iv.next, %for.body.us ]
  %outptr.081.us = phi i8* [ %14, %while.body.us ], [ %add.ptr.us, %for.body.us ]
  %arrayidx11.us = getelementptr inbounds i8, i8* %9, i64 %indvars.iv
  %15 = load i8, i8* %arrayidx11.us, align 1, !tbaa !40
  %conv.us = zext i8 %15 to i32
  %arrayidx13.us = getelementptr inbounds i8, i8* %11, i64 %indvars.iv
  %16 = load i8, i8* %arrayidx13.us, align 1, !tbaa !40
  %arrayidx16.us = getelementptr inbounds i8, i8* %13, i64 %indvars.iv
  %17 = load i8, i8* %arrayidx16.us, align 1, !tbaa !40
  %idxprom18.us = zext i8 %17 to i64
  %arrayidx19.us = getelementptr inbounds i32, i32* %4, i64 %idxprom18.us
  %18 = load i32, i32* %arrayidx19.us, align 4, !tbaa !34
  %add.us = add nsw i32 %18, %conv.us
  %idxprom20.us = sext i32 %add.us to i64
  %arrayidx21.us = getelementptr inbounds i8, i8* %3, i64 %idxprom20.us
  %19 = load i8, i8* %arrayidx21.us, align 1, !tbaa !40
  store i8 %19, i8* %outptr.081.us, align 1, !tbaa !40
  %idxprom23.us = zext i8 %16 to i64
  %arrayidx24.us = getelementptr inbounds i64, i64* %7, i64 %idxprom23.us
  %20 = load i64, i64* %arrayidx24.us, align 8, !tbaa !35
  %arrayidx26.us = getelementptr inbounds i64, i64* %6, i64 %idxprom18.us
  %21 = load i64, i64* %arrayidx26.us, align 8, !tbaa !35
  %add27.us = add nsw i64 %21, %20
  %shr78.us = lshr i64 %add27.us, 16
  %conv28.us = trunc i64 %shr78.us to i32
  %add29.us = add nsw i32 %conv28.us, %conv.us
  %idxprom30.us = sext i32 %add29.us to i64
  %arrayidx31.us = getelementptr inbounds i8, i8* %3, i64 %idxprom30.us
  %22 = load i8, i8* %arrayidx31.us, align 1, !tbaa !40
  %arrayidx32.us = getelementptr inbounds i8, i8* %outptr.081.us, i64 1
  store i8 %22, i8* %arrayidx32.us, align 1, !tbaa !40
  %arrayidx34.us = getelementptr inbounds i32, i32* %5, i64 %idxprom23.us
  %23 = load i32, i32* %arrayidx34.us, align 4, !tbaa !34
  %add35.us = add nsw i32 %23, %conv.us
  %idxprom36.us = sext i32 %add35.us to i64
  %arrayidx37.us = getelementptr inbounds i8, i8* %3, i64 %idxprom36.us
  %24 = load i8, i8* %arrayidx37.us, align 1, !tbaa !40
  %arrayidx38.us = getelementptr inbounds i8, i8* %outptr.081.us, i64 2
  store i8 %24, i8* %arrayidx38.us, align 1, !tbaa !40
  %add.ptr.us = getelementptr inbounds i8, i8* %outptr.081.us, i64 3
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %2
  br i1 %exitcond, label %for.cond.while.cond.loopexit_crit_edge.us, label %for.body.us

for.cond.while.cond.loopexit_crit_edge.us:        ; preds = %for.body.us
  %incdec.ptr.us = getelementptr inbounds i8*, i8** %output_buf.addr.084.us, i64 1
  %cmp.us = icmp sgt i32 %dec86.us.in, 1
  br i1 %cmp.us, label %while.body.us, label %while.end.loopexit

while.end.loopexit:                               ; preds = %for.cond.while.cond.loopexit_crit_edge.us
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %while.body.lr.ph, %entry
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define internal void @null_convert(%struct.jpeg_decompress_struct* nocapture readonly %cinfo, i8*** nocapture readonly %input_buf, i32 %input_row, i8** nocapture readonly %output_buf, i32 %num_rows) #2 {
entry:
  %num_components1 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 8
  %0 = load i32, i32* %num_components1, align 8, !tbaa !18
  %output_width = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 26
  %1 = load i32, i32* %output_width, align 8, !tbaa !38
  %cmp37 = icmp sgt i32 %num_rows, 0
  br i1 %cmp37, label %for.cond.preheader.lr.ph, label %while.end

for.cond.preheader.lr.ph:                         ; preds = %entry
  %cmp234 = icmp sgt i32 %0, 0
  %cmp730 = icmp eq i32 %1, 0
  %idx.ext9 = sext i32 %0 to i64
  br i1 %cmp234, label %for.body.lr.ph.us.preheader, label %while.end

for.body.lr.ph.us.preheader:                      ; preds = %for.cond.preheader.lr.ph
  %2 = add i32 %1, -1
  %xtraiter = and i32 %1, 7
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  %3 = icmp ult i32 %2, 7
  br label %for.body.lr.ph.us

for.body.us42:                                    ; preds = %for.body.us42.preheader, %for.cond6.for.inc12_crit_edge.us60
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.cond6.for.inc12_crit_edge.us60 ], [ 0, %for.body.us42.preheader ]
  %arrayidx.us45 = getelementptr inbounds i8**, i8*** %input_buf, i64 %indvars.iv
  %4 = load i8**, i8*** %arrayidx.us45, align 8, !tbaa !37
  %arrayidx4.us46 = getelementptr inbounds i8*, i8** %4, i64 %idxprom.us
  %5 = load i8*, i8** %arrayidx4.us46, align 8, !tbaa !37
  %6 = load i8*, i8** %output_buf.addr.038.us, align 8, !tbaa !37
  %add.ptr.us47 = getelementptr inbounds i8, i8* %6, i64 %indvars.iv
  br i1 %lcmp.mod, label %for.body.us42.split, label %for.body8.us48.prol.preheader

for.body8.us48.prol.preheader:                    ; preds = %for.body.us42
  br label %for.body8.us48.prol

for.body8.us48.prol:                              ; preds = %for.body8.us48.prol, %for.body8.us48.prol.preheader
  %count.033.us49.prol = phi i32 [ %dec11.us54.prol, %for.body8.us48.prol ], [ %1, %for.body8.us48.prol.preheader ]
  %outptr.032.us50.prol = phi i8* [ %add.ptr10.us53.prol, %for.body8.us48.prol ], [ %add.ptr.us47, %for.body8.us48.prol.preheader ]
  %inptr.031.us51.prol = phi i8* [ %incdec.ptr.us52.prol, %for.body8.us48.prol ], [ %5, %for.body8.us48.prol.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %for.body8.us48.prol ], [ %xtraiter, %for.body8.us48.prol.preheader ]
  %incdec.ptr.us52.prol = getelementptr inbounds i8, i8* %inptr.031.us51.prol, i64 1
  %7 = load i8, i8* %inptr.031.us51.prol, align 1, !tbaa !40
  store i8 %7, i8* %outptr.032.us50.prol, align 1, !tbaa !40
  %add.ptr10.us53.prol = getelementptr inbounds i8, i8* %outptr.032.us50.prol, i64 %idx.ext9
  %dec11.us54.prol = add i32 %count.033.us49.prol, -1
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %for.body.us42.split.loopexit, label %for.body8.us48.prol, !llvm.loop !41

for.body.us42.split.loopexit:                     ; preds = %for.body8.us48.prol
  %dec11.us54.prol.lcssa = phi i32 [ %dec11.us54.prol, %for.body8.us48.prol ]
  %add.ptr10.us53.prol.lcssa = phi i8* [ %add.ptr10.us53.prol, %for.body8.us48.prol ]
  %incdec.ptr.us52.prol.lcssa = phi i8* [ %incdec.ptr.us52.prol, %for.body8.us48.prol ]
  br label %for.body.us42.split

for.body.us42.split:                              ; preds = %for.body.us42, %for.body.us42.split.loopexit
  %count.033.us49.unr = phi i32 [ %1, %for.body.us42 ], [ %dec11.us54.prol.lcssa, %for.body.us42.split.loopexit ]
  %outptr.032.us50.unr = phi i8* [ %add.ptr.us47, %for.body.us42 ], [ %add.ptr10.us53.prol.lcssa, %for.body.us42.split.loopexit ]
  %inptr.031.us51.unr = phi i8* [ %5, %for.body.us42 ], [ %incdec.ptr.us52.prol.lcssa, %for.body.us42.split.loopexit ]
  br i1 %3, label %for.cond6.for.inc12_crit_edge.us60, label %for.body.us42.split.split

for.body.us42.split.split:                        ; preds = %for.body.us42.split
  br label %for.body8.us48

for.body8.us48:                                   ; preds = %for.body8.us48, %for.body.us42.split.split
  %count.033.us49 = phi i32 [ %count.033.us49.unr, %for.body.us42.split.split ], [ %dec11.us54.7, %for.body8.us48 ]
  %outptr.032.us50 = phi i8* [ %outptr.032.us50.unr, %for.body.us42.split.split ], [ %add.ptr10.us53.7, %for.body8.us48 ]
  %inptr.031.us51 = phi i8* [ %inptr.031.us51.unr, %for.body.us42.split.split ], [ %incdec.ptr.us52.7, %for.body8.us48 ]
  %incdec.ptr.us52 = getelementptr inbounds i8, i8* %inptr.031.us51, i64 1
  %8 = load i8, i8* %inptr.031.us51, align 1, !tbaa !40
  store i8 %8, i8* %outptr.032.us50, align 1, !tbaa !40
  %add.ptr10.us53 = getelementptr inbounds i8, i8* %outptr.032.us50, i64 %idx.ext9
  %incdec.ptr.us52.1 = getelementptr inbounds i8, i8* %inptr.031.us51, i64 2
  %9 = load i8, i8* %incdec.ptr.us52, align 1, !tbaa !40
  store i8 %9, i8* %add.ptr10.us53, align 1, !tbaa !40
  %add.ptr10.us53.1 = getelementptr inbounds i8, i8* %add.ptr10.us53, i64 %idx.ext9
  %incdec.ptr.us52.2 = getelementptr inbounds i8, i8* %inptr.031.us51, i64 3
  %10 = load i8, i8* %incdec.ptr.us52.1, align 1, !tbaa !40
  store i8 %10, i8* %add.ptr10.us53.1, align 1, !tbaa !40
  %add.ptr10.us53.2 = getelementptr inbounds i8, i8* %add.ptr10.us53.1, i64 %idx.ext9
  %incdec.ptr.us52.3 = getelementptr inbounds i8, i8* %inptr.031.us51, i64 4
  %11 = load i8, i8* %incdec.ptr.us52.2, align 1, !tbaa !40
  store i8 %11, i8* %add.ptr10.us53.2, align 1, !tbaa !40
  %add.ptr10.us53.3 = getelementptr inbounds i8, i8* %add.ptr10.us53.2, i64 %idx.ext9
  %incdec.ptr.us52.4 = getelementptr inbounds i8, i8* %inptr.031.us51, i64 5
  %12 = load i8, i8* %incdec.ptr.us52.3, align 1, !tbaa !40
  store i8 %12, i8* %add.ptr10.us53.3, align 1, !tbaa !40
  %add.ptr10.us53.4 = getelementptr inbounds i8, i8* %add.ptr10.us53.3, i64 %idx.ext9
  %incdec.ptr.us52.5 = getelementptr inbounds i8, i8* %inptr.031.us51, i64 6
  %13 = load i8, i8* %incdec.ptr.us52.4, align 1, !tbaa !40
  store i8 %13, i8* %add.ptr10.us53.4, align 1, !tbaa !40
  %add.ptr10.us53.5 = getelementptr inbounds i8, i8* %add.ptr10.us53.4, i64 %idx.ext9
  %incdec.ptr.us52.6 = getelementptr inbounds i8, i8* %inptr.031.us51, i64 7
  %14 = load i8, i8* %incdec.ptr.us52.5, align 1, !tbaa !40
  store i8 %14, i8* %add.ptr10.us53.5, align 1, !tbaa !40
  %add.ptr10.us53.6 = getelementptr inbounds i8, i8* %add.ptr10.us53.5, i64 %idx.ext9
  %incdec.ptr.us52.7 = getelementptr inbounds i8, i8* %inptr.031.us51, i64 8
  %15 = load i8, i8* %incdec.ptr.us52.6, align 1, !tbaa !40
  store i8 %15, i8* %add.ptr10.us53.6, align 1, !tbaa !40
  %add.ptr10.us53.7 = getelementptr inbounds i8, i8* %add.ptr10.us53.6, i64 %idx.ext9
  %dec11.us54.7 = add i32 %count.033.us49, -8
  %cmp7.us55.7 = icmp eq i32 %dec11.us54.7, 0
  br i1 %cmp7.us55.7, label %for.cond6.for.inc12_crit_edge.us60.unr-lcssa, label %for.body8.us48

for.cond6.for.inc12_crit_edge.us60.unr-lcssa:     ; preds = %for.body8.us48
  br label %for.cond6.for.inc12_crit_edge.us60

for.cond6.for.inc12_crit_edge.us60:               ; preds = %for.body.us42.split, %for.cond6.for.inc12_crit_edge.us60.unr-lcssa
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %0
  br i1 %exitcond, label %for.cond.for.end13_crit_edge.us.loopexit, label %for.body.us42

for.body.lr.ph.us:                                ; preds = %for.body.lr.ph.us.preheader, %for.cond.for.end13_crit_edge.us
  %dec41.us.in = phi i32 [ %dec41.us, %for.cond.for.end13_crit_edge.us ], [ %num_rows, %for.body.lr.ph.us.preheader ]
  %input_row.addr.040.us = phi i32 [ %inc14.us, %for.cond.for.end13_crit_edge.us ], [ %input_row, %for.body.lr.ph.us.preheader ]
  %output_buf.addr.038.us = phi i8** [ %incdec.ptr15.us, %for.cond.for.end13_crit_edge.us ], [ %output_buf, %for.body.lr.ph.us.preheader ]
  %dec41.us = add nsw i32 %dec41.us.in, -1
  %idxprom.us = zext i32 %input_row.addr.040.us to i64
  br i1 %cmp730, label %for.cond.for.end13_crit_edge.us, label %for.body.us42.preheader

for.body.us42.preheader:                          ; preds = %for.body.lr.ph.us
  br label %for.body.us42

for.cond.for.end13_crit_edge.us.loopexit:         ; preds = %for.cond6.for.inc12_crit_edge.us60
  br label %for.cond.for.end13_crit_edge.us

for.cond.for.end13_crit_edge.us:                  ; preds = %for.cond.for.end13_crit_edge.us.loopexit, %for.body.lr.ph.us
  %inc14.us = add i32 %input_row.addr.040.us, 1
  %incdec.ptr15.us = getelementptr inbounds i8*, i8** %output_buf.addr.038.us, i64 1
  %cmp.us = icmp sgt i32 %dec41.us.in, 1
  br i1 %cmp.us, label %for.body.lr.ph.us, label %while.end.loopexit

while.end.loopexit:                               ; preds = %for.cond.for.end13_crit_edge.us
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %for.cond.preheader.lr.ph, %entry
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define internal void @ycck_cmyk_convert(%struct.jpeg_decompress_struct* nocapture readonly %cinfo, i8*** nocapture readonly %input_buf, i32 %input_row, i8** nocapture readonly %output_buf, i32 %num_rows) #2 {
entry:
  %cconvert1 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 82
  %0 = bitcast %struct.jpeg_color_deconverter** %cconvert1 to %struct.my_color_deconverter**
  %1 = load %struct.my_color_deconverter*, %struct.my_color_deconverter** %0, align 8, !tbaa !13
  %output_width = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 26
  %2 = load i32, i32* %output_width, align 8, !tbaa !38
  %sample_range_limit = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 61
  %3 = load i8*, i8** %sample_range_limit, align 8, !tbaa !39
  %Cr_r_tab = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %1, i64 0, i32 1
  %4 = load i32*, i32** %Cr_r_tab, align 8, !tbaa !30
  %Cb_b_tab = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %1, i64 0, i32 2
  %5 = load i32*, i32** %Cb_b_tab, align 8, !tbaa !31
  %Cr_g_tab = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %1, i64 0, i32 3
  %6 = load i64*, i64** %Cr_g_tab, align 8, !tbaa !32
  %Cb_g_tab = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %1, i64 0, i32 4
  %7 = load i64*, i64** %Cb_g_tab, align 8, !tbaa !33
  %cmp97 = icmp sgt i32 %num_rows, 0
  br i1 %cmp97, label %while.body.lr.ph, label %while.end

while.body.lr.ph:                                 ; preds = %entry
  %arrayidx4 = getelementptr inbounds i8**, i8*** %input_buf, i64 1
  %arrayidx7 = getelementptr inbounds i8**, i8*** %input_buf, i64 2
  %arrayidx10 = getelementptr inbounds i8**, i8*** %input_buf, i64 3
  %cmp1293 = icmp eq i32 %2, 0
  br i1 %cmp1293, label %while.end, label %while.body.us.preheader

while.body.us.preheader:                          ; preds = %while.body.lr.ph
  br label %while.body.us

while.body.us:                                    ; preds = %while.body.us.preheader, %for.cond.while.cond.loopexit_crit_edge.us
  %dec100.us.in = phi i32 [ %dec100.us, %for.cond.while.cond.loopexit_crit_edge.us ], [ %num_rows, %while.body.us.preheader ]
  %input_row.addr.099.us = phi i32 [ %inc.us, %for.cond.while.cond.loopexit_crit_edge.us ], [ %input_row, %while.body.us.preheader ]
  %output_buf.addr.098.us = phi i8** [ %incdec.ptr.us, %for.cond.while.cond.loopexit_crit_edge.us ], [ %output_buf, %while.body.us.preheader ]
  %dec100.us = add nsw i32 %dec100.us.in, -1
  %idxprom.us = zext i32 %input_row.addr.099.us to i64
  %8 = load i8**, i8*** %input_buf, align 8, !tbaa !37
  %arrayidx2.us = getelementptr inbounds i8*, i8** %8, i64 %idxprom.us
  %9 = load i8*, i8** %arrayidx2.us, align 8, !tbaa !37
  %10 = load i8**, i8*** %arrayidx4, align 8, !tbaa !37
  %arrayidx5.us = getelementptr inbounds i8*, i8** %10, i64 %idxprom.us
  %11 = load i8*, i8** %arrayidx5.us, align 8, !tbaa !37
  %12 = load i8**, i8*** %arrayidx7, align 8, !tbaa !37
  %arrayidx8.us = getelementptr inbounds i8*, i8** %12, i64 %idxprom.us
  %13 = load i8*, i8** %arrayidx8.us, align 8, !tbaa !37
  %14 = load i8**, i8*** %arrayidx10, align 8, !tbaa !37
  %arrayidx11.us = getelementptr inbounds i8*, i8** %14, i64 %idxprom.us
  %15 = load i8*, i8** %arrayidx11.us, align 8, !tbaa !37
  %inc.us = add i32 %input_row.addr.099.us, 1
  %16 = load i8*, i8** %output_buf.addr.098.us, align 8, !tbaa !37
  br label %for.body.us

for.body.us:                                      ; preds = %for.body.us, %while.body.us
  %indvars.iv = phi i64 [ 0, %while.body.us ], [ %indvars.iv.next, %for.body.us ]
  %outptr.095.us = phi i8* [ %16, %while.body.us ], [ %add.ptr.us, %for.body.us ]
  %arrayidx14.us = getelementptr inbounds i8, i8* %9, i64 %indvars.iv
  %17 = load i8, i8* %arrayidx14.us, align 1, !tbaa !40
  %conv.us = zext i8 %17 to i32
  %arrayidx16.us = getelementptr inbounds i8, i8* %11, i64 %indvars.iv
  %18 = load i8, i8* %arrayidx16.us, align 1, !tbaa !40
  %arrayidx19.us = getelementptr inbounds i8, i8* %13, i64 %indvars.iv
  %19 = load i8, i8* %arrayidx19.us, align 1, !tbaa !40
  %idxprom21.us = zext i8 %19 to i64
  %arrayidx22.us = getelementptr inbounds i32, i32* %4, i64 %idxprom21.us
  %20 = load i32, i32* %arrayidx22.us, align 4, !tbaa !34
  %add.neg.us = xor i32 %conv.us, 255
  %sub.us = sub i32 %add.neg.us, %20
  %idxprom23.us = sext i32 %sub.us to i64
  %arrayidx24.us = getelementptr inbounds i8, i8* %3, i64 %idxprom23.us
  %21 = load i8, i8* %arrayidx24.us, align 1, !tbaa !40
  store i8 %21, i8* %outptr.095.us, align 1, !tbaa !40
  %idxprom26.us = zext i8 %18 to i64
  %arrayidx27.us = getelementptr inbounds i64, i64* %7, i64 %idxprom26.us
  %22 = load i64, i64* %arrayidx27.us, align 8, !tbaa !35
  %arrayidx29.us = getelementptr inbounds i64, i64* %6, i64 %idxprom21.us
  %23 = load i64, i64* %arrayidx29.us, align 8, !tbaa !35
  %add30.us = add nsw i64 %23, %22
  %shr91.us = lshr i64 %add30.us, 16
  %conv31.us = trunc i64 %shr91.us to i32
  %sub33.us = sub i32 %add.neg.us, %conv31.us
  %idxprom34.us = sext i32 %sub33.us to i64
  %arrayidx35.us = getelementptr inbounds i8, i8* %3, i64 %idxprom34.us
  %24 = load i8, i8* %arrayidx35.us, align 1, !tbaa !40
  %arrayidx36.us = getelementptr inbounds i8, i8* %outptr.095.us, i64 1
  store i8 %24, i8* %arrayidx36.us, align 1, !tbaa !40
  %arrayidx38.us = getelementptr inbounds i32, i32* %5, i64 %idxprom26.us
  %25 = load i32, i32* %arrayidx38.us, align 4, !tbaa !34
  %sub40.us = sub i32 %add.neg.us, %25
  %idxprom41.us = sext i32 %sub40.us to i64
  %arrayidx42.us = getelementptr inbounds i8, i8* %3, i64 %idxprom41.us
  %26 = load i8, i8* %arrayidx42.us, align 1, !tbaa !40
  %arrayidx43.us = getelementptr inbounds i8, i8* %outptr.095.us, i64 2
  store i8 %26, i8* %arrayidx43.us, align 1, !tbaa !40
  %arrayidx45.us = getelementptr inbounds i8, i8* %15, i64 %indvars.iv
  %27 = load i8, i8* %arrayidx45.us, align 1, !tbaa !40
  %arrayidx46.us = getelementptr inbounds i8, i8* %outptr.095.us, i64 3
  store i8 %27, i8* %arrayidx46.us, align 1, !tbaa !40
  %add.ptr.us = getelementptr inbounds i8, i8* %outptr.095.us, i64 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %2
  br i1 %exitcond, label %for.cond.while.cond.loopexit_crit_edge.us, label %for.body.us

for.cond.while.cond.loopexit_crit_edge.us:        ; preds = %for.body.us
  %incdec.ptr.us = getelementptr inbounds i8*, i8** %output_buf.addr.098.us, i64 1
  %cmp.us = icmp sgt i32 %dec100.us.in, 1
  br i1 %cmp.us, label %while.body.us, label %while.end.loopexit

while.end.loopexit:                               ; preds = %for.cond.while.cond.loopexit_crit_edge.us
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %while.body.lr.ph, %entry
  ret void
}

declare void @jcopy_sample_rows(i8**, i32, i8**, i32, i32, i32) #3

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"MaxFunctionCount", i32 150581}
!1 = !{!"clang version 3.8.0 (trunk 257473)"}
!2 = !{!3, !4, i64 8}
!3 = !{!"jpeg_decompress_struct", !4, i64 0, !4, i64 8, !4, i64 16, !7, i64 24, !7, i64 28, !4, i64 32, !7, i64 40, !7, i64 44, !7, i64 48, !5, i64 52, !5, i64 56, !7, i64 60, !7, i64 64, !8, i64 72, !7, i64 80, !7, i64 84, !5, i64 88, !7, i64 92, !7, i64 96, !7, i64 100, !5, i64 104, !7, i64 108, !7, i64 112, !7, i64 116, !7, i64 120, !7, i64 124, !7, i64 128, !7, i64 132, !7, i64 136, !7, i64 140, !7, i64 144, !7, i64 148, !4, i64 152, !7, i64 160, !7, i64 164, !7, i64 168, !7, i64 172, !7, i64 176, !4, i64 184, !5, i64 192, !5, i64 224, !5, i64 256, !7, i64 288, !4, i64 296, !7, i64 304, !7, i64 308, !5, i64 312, !5, i64 328, !5, i64 344, !7, i64 360, !7, i64 364, !5, i64 368, !9, i64 370, !9, i64 372, !7, i64 376, !5, i64 380, !7, i64 384, !7, i64 388, !7, i64 392, !7, i64 396, !7, i64 400, !4, i64 408, !7, i64 416, !5, i64 424, !7, i64 456, !7, i64 460, !7, i64 464, !5, i64 468, !7, i64 508, !7, i64 512, !7, i64 516, !7, i64 520, !7, i64 524, !4, i64 528, !4, i64 536, !4, i64 544, !4, i64 552, !4, i64 560, !4, i64 568, !4, i64 576, !4, i64 584, !4, i64 592, !4, i64 600, !4, i64 608}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!"int", !5, i64 0}
!8 = !{!"double", !5, i64 0}
!9 = !{!"short", !5, i64 0}
!10 = !{!11, !4, i64 0}
!11 = !{!"jpeg_memory_mgr", !4, i64 0, !4, i64 8, !4, i64 16, !4, i64 24, !4, i64 32, !4, i64 40, !4, i64 48, !4, i64 56, !4, i64 64, !4, i64 72, !4, i64 80, !12, i64 88}
!12 = !{!"long", !5, i64 0}
!13 = !{!3, !4, i64 600}
!14 = !{!15, !4, i64 0}
!15 = !{!"", !16, i64 0, !4, i64 16, !4, i64 24, !4, i64 32, !4, i64 40}
!16 = !{!"jpeg_color_deconverter", !4, i64 0, !4, i64 8}
!17 = !{!3, !5, i64 52}
!18 = !{!3, !7, i64 48}
!19 = !{!3, !4, i64 0}
!20 = !{!21, !7, i64 40}
!21 = !{!"jpeg_error_mgr", !4, i64 0, !4, i64 8, !4, i64 16, !4, i64 24, !4, i64 32, !7, i64 40, !5, i64 44, !7, i64 124, !12, i64 128, !4, i64 136, !7, i64 144, !4, i64 152, !7, i64 160, !7, i64 164}
!22 = !{!21, !4, i64 0}
!23 = !{!3, !5, i64 56}
!24 = !{!3, !7, i64 136}
!25 = !{!15, !4, i64 8}
!26 = !{!27, !7, i64 48}
!27 = !{!"", !7, i64 0, !7, i64 4, !7, i64 8, !7, i64 12, !7, i64 16, !7, i64 20, !7, i64 24, !7, i64 28, !7, i64 32, !7, i64 36, !7, i64 40, !7, i64 44, !7, i64 48, !7, i64 52, !7, i64 56, !7, i64 60, !7, i64 64, !7, i64 68, !7, i64 72, !4, i64 80, !4, i64 88}
!28 = distinct !{!28, !29}
!29 = !{!"llvm.loop.unroll.disable"}
!30 = !{!15, !4, i64 16}
!31 = !{!15, !4, i64 24}
!32 = !{!15, !4, i64 32}
!33 = !{!15, !4, i64 40}
!34 = !{!7, !7, i64 0}
!35 = !{!12, !12, i64 0}
!36 = !{!3, !7, i64 100}
!37 = !{!4, !4, i64 0}
!38 = !{!3, !7, i64 128}
!39 = !{!3, !4, i64 408}
!40 = !{!5, !5, i64 0}
!41 = distinct !{!41, !29}
