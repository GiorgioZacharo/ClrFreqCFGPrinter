; ModuleID = 'jctrans.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_compress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32, %struct.jpeg_destination_mgr*, i32, i32, i32, i32, double, i32, i32, i32, %struct.jpeg_component_info*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], [16 x i8], [16 x i8], [16 x i8], i32, %struct.jpeg_scan_info*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i16, i16, i32, i32, i32, i32, i32, i32, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, %struct.jpeg_comp_master*, %struct.jpeg_c_main_controller*, %struct.jpeg_c_prep_controller*, %struct.jpeg_c_coef_controller*, %struct.jpeg_marker_writer*, %struct.jpeg_color_converter*, %struct.jpeg_downsampler*, %struct.jpeg_forward_dct*, %struct.jpeg_entropy_encoder* }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_destination_mgr = type { i8*, i64, void (%struct.jpeg_compress_struct*)*, i32 (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)* }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_scan_info = type { i32, [4 x i32], i32, i32, i32, i32 }
%struct.jpeg_comp_master = type { void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, i32, i32 }
%struct.jpeg_c_main_controller = type { void (%struct.jpeg_compress_struct*, i32)*, void (%struct.jpeg_compress_struct*, i8**, i32*, i32)* }
%struct.jpeg_c_prep_controller = type { void (%struct.jpeg_compress_struct*, i32)*, void (%struct.jpeg_compress_struct*, i8**, i32*, i32, i8***, i32*, i32)* }
%struct.jpeg_c_coef_controller = type { void (%struct.jpeg_compress_struct*, i32)*, i32 (%struct.jpeg_compress_struct*, i8***)* }
%struct.jpeg_marker_writer = type { void (%struct.jpeg_compress_struct*, i32, i8*, i32)*, void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)* }
%struct.jpeg_color_converter = type { void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)* }
%struct.jpeg_downsampler = type { void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*, i8***, i32, i8***, i32)*, i32 }
%struct.jpeg_forward_dct = type { void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, [64 x i16]*, i32, i32, i32)* }
%struct.jpeg_entropy_encoder = type { void (%struct.jpeg_compress_struct*, i32)*, i32 (%struct.jpeg_compress_struct*, [64 x i16]**)*, void (%struct.jpeg_compress_struct*)* }
%struct.jpeg_decompress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32, %struct.jpeg_source_mgr*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i16, i16, i32, i8, i32, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master*, %struct.jpeg_d_main_controller*, %struct.jpeg_d_coef_controller*, %struct.jpeg_d_post_controller*, %struct.jpeg_input_controller*, %struct.jpeg_marker_reader*, %struct.jpeg_entropy_decoder*, %struct.jpeg_inverse_dct*, %struct.jpeg_upsampler*, %struct.jpeg_color_deconverter*, %struct.jpeg_color_quantizer* }
%struct.jpeg_source_mgr = type { i8*, i64, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i64)*, i32 (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*)* }
%struct.jpeg_decomp_master = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32 }
%struct.jpeg_d_main_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)* }
%struct.jpeg_d_coef_controller = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*, i8***)*, %struct.jvirt_barray_control** }
%struct.jpeg_d_post_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)* }
%struct.jpeg_input_controller = type { i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32, i32 }
%struct.jpeg_marker_reader = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, [16 x i32 (%struct.jpeg_decompress_struct*)*], i32, i32, i32, i32 }
%struct.jpeg_entropy_decoder = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)* }
%struct.jpeg_inverse_dct = type { void (%struct.jpeg_decompress_struct*)*, [10 x void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)*] }
%struct.jpeg_upsampler = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)*, i32 }
%struct.jpeg_color_deconverter = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* }
%struct.jpeg_color_quantizer = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)* }
%struct.my_coef_controller = type { %struct.jpeg_c_coef_controller, i32, i32, i32, i32, %struct.jvirt_barray_control**, [10 x [64 x i16]*] }

; Function Attrs: nounwind uwtable
define void @jpeg_write_coefficients(%struct.jpeg_compress_struct* %cinfo, %struct.jvirt_barray_control** %coef_arrays) #0 {
entry:
  %global_state = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 4
  %0 = load i32, i32* %global_state, align 4, !tbaa !2
  %cmp = icmp eq i32 %0, 100
  %.pre = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 0
  br i1 %cmp, label %entry.if.end_crit_edge, label %if.then

entry.if.end_crit_edge:                           ; preds = %entry
  %.pre19 = bitcast %struct.jpeg_compress_struct* %cinfo to %struct.jpeg_common_struct*
  br label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %.pre, align 8, !tbaa !10
  %msg_code = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %1, i64 0, i32 5
  store i32 18, i32* %msg_code, align 8, !tbaa !11
  %arrayidx = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %1, i64 0, i32 6, i32 0, i64 0
  store i32 %0, i32* %arrayidx, align 4, !tbaa !14
  %error_exit = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %1, i64 0, i32 0
  %2 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit, align 8, !tbaa !15
  %3 = bitcast %struct.jpeg_compress_struct* %cinfo to %struct.jpeg_common_struct*
  tail call void %2(%struct.jpeg_common_struct* %3) #3
  br label %if.end

if.end:                                           ; preds = %entry.if.end_crit_edge, %if.then
  %.pre-phi = phi %struct.jpeg_common_struct* [ %.pre19, %entry.if.end_crit_edge ], [ %3, %if.then ]
  tail call void @jpeg_suppress_tables(%struct.jpeg_compress_struct* nonnull %cinfo, i32 0) #3
  %4 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %.pre, align 8, !tbaa !10
  %reset_error_mgr = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %4, i64 0, i32 4
  %5 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %reset_error_mgr, align 8, !tbaa !16
  tail call void %5(%struct.jpeg_common_struct* %.pre-phi) #3
  %dest = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 5
  %6 = load %struct.jpeg_destination_mgr*, %struct.jpeg_destination_mgr** %dest, align 8, !tbaa !17
  %init_destination = getelementptr inbounds %struct.jpeg_destination_mgr, %struct.jpeg_destination_mgr* %6, i64 0, i32 2
  %7 = load void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)** %init_destination, align 8, !tbaa !18
  tail call void %7(%struct.jpeg_compress_struct* nonnull %cinfo) #3
  %input_components.i = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 8
  store i32 1, i32* %input_components.i, align 8, !tbaa !20
  tail call void @jinit_c_master_control(%struct.jpeg_compress_struct* nonnull %cinfo, i32 1) #3
  %arith_code.i = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 24
  %8 = load i32, i32* %arith_code.i, align 4, !tbaa !21
  %tobool.i = icmp eq i32 %8, 0
  br i1 %tobool.i, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %if.end
  %9 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %.pre, align 8, !tbaa !10
  %msg_code.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %9, i64 0, i32 5
  store i32 1, i32* %msg_code.i, align 8, !tbaa !11
  %error_exit.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %9, i64 0, i32 0
  %10 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit.i, align 8, !tbaa !15
  tail call void %10(%struct.jpeg_common_struct* %.pre-phi) #3
  br label %transencode_master_selection.exit

if.else.i:                                        ; preds = %if.end
  %progressive_mode.i = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 37
  %11 = load i32, i32* %progressive_mode.i, align 4, !tbaa !22
  %tobool2.i = icmp eq i32 %11, 0
  br i1 %tobool2.i, label %if.else4.i, label %if.then3.i

if.then3.i:                                       ; preds = %if.else.i
  tail call void @jinit_phuff_encoder(%struct.jpeg_compress_struct* nonnull %cinfo) #3
  br label %transencode_master_selection.exit

if.else4.i:                                       ; preds = %if.else.i
  tail call void @jinit_huff_encoder(%struct.jpeg_compress_struct* nonnull %cinfo) #3
  br label %transencode_master_selection.exit

transencode_master_selection.exit:                ; preds = %if.then.i, %if.then3.i, %if.else4.i
  %mem.i.i = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 1
  %12 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem.i.i, align 8, !tbaa !23
  %alloc_small.i.i = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %12, i64 0, i32 0
  %13 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_small.i.i, align 8, !tbaa !24
  %call.i.i = tail call i8* %13(%struct.jpeg_common_struct* nonnull %.pre-phi, i32 1, i64 120) #3
  %coef1.i.i = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 54
  %14 = bitcast %struct.jpeg_c_coef_controller** %coef1.i.i to i8**
  store i8* %call.i.i, i8** %14, align 8, !tbaa !26
  %start_pass.i.i = bitcast i8* %call.i.i to void (%struct.jpeg_compress_struct*, i32)**
  store void (%struct.jpeg_compress_struct*, i32)* @start_pass_coef, void (%struct.jpeg_compress_struct*, i32)** %start_pass.i.i, align 8, !tbaa !27
  %compress_data.i.i = getelementptr inbounds i8, i8* %call.i.i, i64 8
  %15 = bitcast i8* %compress_data.i.i to i32 (%struct.jpeg_compress_struct*, i8***)**
  store i32 (%struct.jpeg_compress_struct*, i8***)* @compress_output, i32 (%struct.jpeg_compress_struct*, i8***)** %15, align 8, !tbaa !30
  %whole_image.i.i = getelementptr inbounds i8, i8* %call.i.i, i64 32
  %16 = bitcast i8* %whole_image.i.i to %struct.jvirt_barray_control***
  store %struct.jvirt_barray_control** %coef_arrays, %struct.jvirt_barray_control*** %16, align 8, !tbaa !31
  %17 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem.i.i, align 8, !tbaa !23
  %alloc_large.i.i = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %17, i64 0, i32 1
  %18 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_large.i.i, align 8, !tbaa !32
  %call4.i.i = tail call i8* %18(%struct.jpeg_common_struct* nonnull %.pre-phi, i32 1, i64 1280) #3
  tail call void @jzero_far(i8* %call4.i.i, i64 1280) #3
  %dummy_buffer.i.i = getelementptr inbounds i8, i8* %call.i.i, i64 40
  %19 = bitcast i8* %dummy_buffer.i.i to i8**
  store i8* %call4.i.i, i8** %19, align 8, !tbaa !33
  %arrayidx.1.i.i = getelementptr inbounds i8, i8* %call.i.i, i64 48
  %20 = insertelement <2 x i8*> undef, i8* %call4.i.i, i32 0
  %21 = insertelement <2 x i8*> %20, i8* %call4.i.i, i32 1
  %22 = getelementptr i8, <2 x i8*> %21, <2 x i64> <i64 128, i64 256>
  %23 = bitcast i8* %arrayidx.1.i.i to <2 x i8*>*
  store <2 x i8*> %22, <2 x i8*>* %23, align 8, !tbaa !33
  %arrayidx.3.i.i = getelementptr inbounds i8, i8* %call.i.i, i64 64
  %24 = getelementptr i8, <2 x i8*> %21, <2 x i64> <i64 384, i64 512>
  %25 = bitcast i8* %arrayidx.3.i.i to <2 x i8*>*
  store <2 x i8*> %24, <2 x i8*>* %25, align 8, !tbaa !33
  %arrayidx.5.i.i = getelementptr inbounds i8, i8* %call.i.i, i64 80
  %26 = getelementptr i8, <2 x i8*> %21, <2 x i64> <i64 640, i64 768>
  %27 = bitcast i8* %arrayidx.5.i.i to <2 x i8*>*
  store <2 x i8*> %26, <2 x i8*>* %27, align 8, !tbaa !33
  %arrayidx.7.i.i = getelementptr inbounds i8, i8* %call.i.i, i64 96
  %28 = getelementptr i8, <2 x i8*> %21, <2 x i64> <i64 896, i64 1024>
  %29 = bitcast i8* %arrayidx.7.i.i to <2 x i8*>*
  store <2 x i8*> %28, <2 x i8*>* %29, align 8, !tbaa !33
  %add.ptr.9.i.i = getelementptr inbounds i8, i8* %call4.i.i, i64 1152
  %arrayidx.9.i.i = getelementptr inbounds i8, i8* %call.i.i, i64 112
  %30 = bitcast i8* %arrayidx.9.i.i to i8**
  store i8* %add.ptr.9.i.i, i8** %30, align 8, !tbaa !33
  tail call void @jinit_marker_writer(%struct.jpeg_compress_struct* nonnull %cinfo) #3
  %31 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem.i.i, align 8, !tbaa !23
  %realize_virt_arrays.i = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %31, i64 0, i32 6
  %realize_virt_arrays6.i = bitcast {}** %realize_virt_arrays.i to void (%struct.jpeg_common_struct*)**
  %32 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %realize_virt_arrays6.i, align 8, !tbaa !34
  tail call void %32(%struct.jpeg_common_struct* nonnull %.pre-phi) #3
  %marker.i = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 55
  %33 = load %struct.jpeg_marker_writer*, %struct.jpeg_marker_writer** %marker.i, align 8, !tbaa !35
  %write_file_header.i = getelementptr inbounds %struct.jpeg_marker_writer, %struct.jpeg_marker_writer* %33, i64 0, i32 1
  %34 = load void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)** %write_file_header.i, align 8, !tbaa !36
  tail call void %34(%struct.jpeg_compress_struct* nonnull %cinfo) #3
  %next_scanline = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 36
  store i32 0, i32* %next_scanline, align 8, !tbaa !38
  store i32 103, i32* %global_state, align 4, !tbaa !2
  ret void
}

declare void @jpeg_suppress_tables(%struct.jpeg_compress_struct*, i32) #1

; Function Attrs: nounwind uwtable
define void @jpeg_copy_critical_parameters(%struct.jpeg_decompress_struct* nocapture readonly %srcinfo, %struct.jpeg_compress_struct* %dstinfo) #0 {
entry:
  %global_state = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %dstinfo, i64 0, i32 4
  %0 = load i32, i32* %global_state, align 4, !tbaa !2
  %cmp = icmp eq i32 %0, 100
  br i1 %cmp, label %entry.if.end_crit_edge, label %if.then

entry.if.end_crit_edge:                           ; preds = %entry
  %.pre209 = bitcast %struct.jpeg_compress_struct* %dstinfo to %struct.jpeg_common_struct*
  br label %if.end

if.then:                                          ; preds = %entry
  %err = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %dstinfo, i64 0, i32 0
  %1 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8, !tbaa !10
  %msg_code = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %1, i64 0, i32 5
  store i32 18, i32* %msg_code, align 8, !tbaa !11
  %arrayidx = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %1, i64 0, i32 6, i32 0, i64 0
  store i32 %0, i32* %arrayidx, align 4, !tbaa !14
  %error_exit = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %1, i64 0, i32 0
  %2 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit, align 8, !tbaa !15
  %3 = bitcast %struct.jpeg_compress_struct* %dstinfo to %struct.jpeg_common_struct*
  tail call void %2(%struct.jpeg_common_struct* %3) #3
  br label %if.end

if.end:                                           ; preds = %entry.if.end_crit_edge, %if.then
  %.pre-phi = phi %struct.jpeg_common_struct* [ %.pre209, %entry.if.end_crit_edge ], [ %3, %if.then ]
  %image_width = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %srcinfo, i64 0, i32 6
  %4 = bitcast i32* %image_width to i64*
  %5 = load i64, i64* %4, align 8
  %6 = trunc i64 %5 to i32
  %image_width4 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %dstinfo, i64 0, i32 6
  store i32 %6, i32* %image_width4, align 8, !tbaa !39
  %7 = lshr i64 %5, 32
  %8 = trunc i64 %7 to i32
  %image_height5 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %dstinfo, i64 0, i32 7
  store i32 %8, i32* %image_height5, align 4, !tbaa !40
  %num_components = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %srcinfo, i64 0, i32 8
  %9 = bitcast i32* %num_components to i64*
  %10 = load i64, i64* %9, align 8
  %11 = trunc i64 %10 to i32
  %input_components = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %dstinfo, i64 0, i32 8
  store i32 %11, i32* %input_components, align 8, !tbaa !20
  %jpeg_color_space = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %srcinfo, i64 0, i32 9
  %12 = lshr i64 %10, 32
  %13 = trunc i64 %12 to i32
  %in_color_space = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %dstinfo, i64 0, i32 9
  store i32 %13, i32* %in_color_space, align 4, !tbaa !41
  tail call void @jpeg_set_defaults(%struct.jpeg_compress_struct* nonnull %dstinfo) #3
  %14 = load i32, i32* %jpeg_color_space, align 4, !tbaa !42
  tail call void @jpeg_set_colorspace(%struct.jpeg_compress_struct* nonnull %dstinfo, i32 %14) #3
  %data_precision = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %srcinfo, i64 0, i32 42
  %15 = load i32, i32* %data_precision, align 8, !tbaa !44
  %data_precision7 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %dstinfo, i64 0, i32 11
  store i32 %15, i32* %data_precision7, align 8, !tbaa !45
  %CCIR601_sampling = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %srcinfo, i64 0, i32 56
  %16 = load i32, i32* %CCIR601_sampling, align 8, !tbaa !46
  %CCIR601_sampling8 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %dstinfo, i64 0, i32 26
  store i32 %16, i32* %CCIR601_sampling8, align 4, !tbaa !47
  %arrayidx10 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %srcinfo, i64 0, i32 39, i64 0
  %17 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %arrayidx10, align 8, !tbaa !33
  %cmp11 = icmp eq %struct.JQUANT_TBL* %17, null
  br i1 %cmp11, label %for.inc, label %if.then12

if.then12:                                        ; preds = %if.end
  %18 = bitcast %struct.JQUANT_TBL* %17 to i8*
  %arrayidx15 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %dstinfo, i64 0, i32 15, i64 0
  %19 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %arrayidx15, align 8, !tbaa !33
  %cmp16 = icmp eq %struct.JQUANT_TBL* %19, null
  br i1 %cmp16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.then12
  %call = tail call %struct.JQUANT_TBL* @jpeg_alloc_quant_table(%struct.jpeg_common_struct* %.pre-phi) #3
  store %struct.JQUANT_TBL* %call, %struct.JQUANT_TBL** %arrayidx15, align 8, !tbaa !33
  %.phi.trans.insert = bitcast %struct.JQUANT_TBL** %arrayidx10 to i8**
  %.pre = load i8*, i8** %.phi.trans.insert, align 8, !tbaa !33
  br label %if.end18

if.end18:                                         ; preds = %if.then12, %if.then17
  %20 = phi i8* [ %.pre, %if.then17 ], [ %18, %if.then12 ]
  %.in222 = phi %struct.JQUANT_TBL* [ %call, %if.then17 ], [ %19, %if.then12 ]
  %21 = bitcast %struct.JQUANT_TBL* %.in222 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %21, i8* %20, i64 128, i32 4, i1 false)
  %22 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %arrayidx15, align 8, !tbaa !33
  %sent_table = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %22, i64 0, i32 1
  store i32 0, i32* %sent_table, align 4, !tbaa !48
  br label %for.inc

for.inc:                                          ; preds = %if.end, %if.end18
  %arrayidx10.1 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %srcinfo, i64 0, i32 39, i64 1
  %23 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %arrayidx10.1, align 8, !tbaa !33
  %cmp11.1 = icmp eq %struct.JQUANT_TBL* %23, null
  br i1 %cmp11.1, label %for.inc.1, label %if.then12.1

if.then31:                                        ; preds = %for.inc.3
  %err32 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %dstinfo, i64 0, i32 0
  %24 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err32, align 8, !tbaa !10
  %msg_code33 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %24, i64 0, i32 5
  store i32 24, i32* %msg_code33, align 8, !tbaa !11
  %arrayidx38 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %24, i64 0, i32 6, i32 0, i64 0
  store i32 %64, i32* %arrayidx38, align 4, !tbaa !14
  %arrayidx42 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %24, i64 0, i32 6, i32 0, i64 1
  store i32 10, i32* %arrayidx42, align 4, !tbaa !14
  %error_exit44 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %24, i64 0, i32 0
  %25 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit44, align 8, !tbaa !15
  tail call void %25(%struct.jpeg_common_struct* %.pre-phi) #3
  %.pre206 = load i32, i32* %num_components26, align 4, !tbaa !50
  br label %if.end45

if.end45:                                         ; preds = %for.inc.3, %if.then31
  %26 = phi i32 [ %64, %for.inc.3 ], [ %.pre206, %if.then31 ]
  %cmp49192 = icmp sgt i32 %26, 0
  br i1 %cmp49192, label %for.body50.lr.ph, label %for.end108

for.body50.lr.ph:                                 ; preds = %if.end45
  %comp_info46 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %dstinfo, i64 0, i32 14
  %27 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %comp_info46, align 8, !tbaa !51
  %comp_info = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %srcinfo, i64 0, i32 43
  %28 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %comp_info, align 8, !tbaa !52
  %err65 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %dstinfo, i64 0, i32 0
  br label %for.body50

for.body50:                                       ; preds = %for.body50.lr.ph, %for.inc105
  %ci.0195 = phi i32 [ 0, %for.body50.lr.ph ], [ %inc106, %for.inc105 ]
  %incomp.0194 = phi %struct.jpeg_component_info* [ %28, %for.body50.lr.ph ], [ %incdec.ptr, %for.inc105 ]
  %outcomp.0193 = phi %struct.jpeg_component_info* [ %27, %for.body50.lr.ph ], [ %incdec.ptr107, %for.inc105 ]
  %component_id = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %incomp.0194, i64 0, i32 0
  %29 = load i32, i32* %component_id, align 8, !tbaa !53
  %component_id51 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %outcomp.0193, i64 0, i32 0
  store i32 %29, i32* %component_id51, align 8, !tbaa !53
  %h_samp_factor = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %incomp.0194, i64 0, i32 2
  %30 = bitcast i32* %h_samp_factor to i64*
  %31 = load i64, i64* %30, align 8
  %32 = trunc i64 %31 to i32
  %h_samp_factor52 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %outcomp.0193, i64 0, i32 2
  store i32 %32, i32* %h_samp_factor52, align 8, !tbaa !55
  %33 = lshr i64 %31, 32
  %34 = trunc i64 %33 to i32
  %v_samp_factor53 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %outcomp.0193, i64 0, i32 3
  store i32 %34, i32* %v_samp_factor53, align 4, !tbaa !56
  %quant_tbl_no = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %incomp.0194, i64 0, i32 4
  %35 = load i32, i32* %quant_tbl_no, align 8, !tbaa !57
  %quant_tbl_no54 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %outcomp.0193, i64 0, i32 4
  store i32 %35, i32* %quant_tbl_no54, align 8, !tbaa !57
  %36 = icmp ugt i32 %35, 3
  %.pre210 = sext i32 %35 to i64
  %.pre211 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %srcinfo, i64 0, i32 39, i64 %.pre210
  br i1 %36, label %if.then64, label %lor.lhs.false59

lor.lhs.false59:                                  ; preds = %for.body50
  %37 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %.pre211, align 8, !tbaa !33
  %cmp63 = icmp eq %struct.JQUANT_TBL* %37, null
  br i1 %cmp63, label %if.then64, label %if.end73

if.then64:                                        ; preds = %for.body50, %lor.lhs.false59
  %38 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err65, align 8, !tbaa !10
  %msg_code66 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %38, i64 0, i32 5
  store i32 51, i32* %msg_code66, align 8, !tbaa !11
  %arrayidx70 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %38, i64 0, i32 6, i32 0, i64 0
  store i32 %35, i32* %arrayidx70, align 4, !tbaa !14
  %error_exit72 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %38, i64 0, i32 0
  %39 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit72, align 8, !tbaa !15
  tail call void %39(%struct.jpeg_common_struct* %.pre-phi) #3
  %.pre208 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %.pre211, align 8, !tbaa !33
  br label %if.end73

if.end73:                                         ; preds = %if.then64, %lor.lhs.false59
  %40 = phi %struct.JQUANT_TBL* [ %.pre208, %if.then64 ], [ %37, %lor.lhs.false59 ]
  %quant_table = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %incomp.0194, i64 0, i32 19
  %41 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %quant_table, align 8, !tbaa !58
  %cmp77 = icmp eq %struct.JQUANT_TBL* %41, null
  br i1 %cmp77, label %for.inc105, label %for.body81.preheader

for.body81.preheader:                             ; preds = %if.end73
  br label %for.body81

for.body81:                                       ; preds = %for.body81.preheader, %for.inc101
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc101 ], [ 0, %for.body81.preheader ]
  %arrayidx84 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %41, i64 0, i32 0, i64 %indvars.iv
  %42 = load i16, i16* %arrayidx84, align 2, !tbaa !59
  %arrayidx87 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %40, i64 0, i32 0, i64 %indvars.iv
  %43 = load i16, i16* %arrayidx87, align 2, !tbaa !59
  %cmp89 = icmp eq i16 %42, %43
  br i1 %cmp89, label %for.inc101, label %if.then91

if.then91:                                        ; preds = %for.body81
  %44 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err65, align 8, !tbaa !10
  %msg_code93 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %44, i64 0, i32 5
  store i32 43, i32* %msg_code93, align 8, !tbaa !11
  %arrayidx97 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %44, i64 0, i32 6, i32 0, i64 0
  store i32 %35, i32* %arrayidx97, align 4, !tbaa !14
  %error_exit99 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %44, i64 0, i32 0
  %45 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit99, align 8, !tbaa !15
  tail call void %45(%struct.jpeg_common_struct* %.pre-phi) #3
  br label %for.inc101

for.inc101:                                       ; preds = %for.body81, %if.then91
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 64
  br i1 %exitcond, label %for.inc105.loopexit, label %for.body81

for.inc105.loopexit:                              ; preds = %for.inc101
  br label %for.inc105

for.inc105:                                       ; preds = %for.inc105.loopexit, %if.end73
  %inc106 = add nuw nsw i32 %ci.0195, 1
  %incdec.ptr = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %incomp.0194, i64 1
  %incdec.ptr107 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %outcomp.0193, i64 1
  %46 = load i32, i32* %num_components26, align 4, !tbaa !50
  %cmp49 = icmp slt i32 %inc106, %46
  br i1 %cmp49, label %for.body50, label %for.end108.loopexit

for.end108.loopexit:                              ; preds = %for.inc105
  br label %for.end108

for.end108:                                       ; preds = %for.end108.loopexit, %if.end45
  ret void

if.then12.1:                                      ; preds = %for.inc
  %47 = bitcast %struct.JQUANT_TBL* %23 to i8*
  %arrayidx15.1 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %dstinfo, i64 0, i32 15, i64 1
  %48 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %arrayidx15.1, align 8, !tbaa !33
  %cmp16.1 = icmp eq %struct.JQUANT_TBL* %48, null
  br i1 %cmp16.1, label %if.then17.1, label %if.end18.1

if.then17.1:                                      ; preds = %if.then12.1
  %call.1 = tail call %struct.JQUANT_TBL* @jpeg_alloc_quant_table(%struct.jpeg_common_struct* %.pre-phi) #3
  store %struct.JQUANT_TBL* %call.1, %struct.JQUANT_TBL** %arrayidx15.1, align 8, !tbaa !33
  %.phi.trans.insert200 = bitcast %struct.JQUANT_TBL** %arrayidx10.1 to i8**
  %.pre201 = load i8*, i8** %.phi.trans.insert200, align 8, !tbaa !33
  br label %if.end18.1

if.end18.1:                                       ; preds = %if.then12.1, %if.then17.1
  %49 = phi i8* [ %.pre201, %if.then17.1 ], [ %47, %if.then12.1 ]
  %.in221 = phi %struct.JQUANT_TBL* [ %call.1, %if.then17.1 ], [ %48, %if.then12.1 ]
  %50 = bitcast %struct.JQUANT_TBL* %.in221 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %50, i8* %49, i64 128, i32 4, i1 false)
  %51 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %arrayidx15.1, align 8, !tbaa !33
  %sent_table.1 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %51, i64 0, i32 1
  store i32 0, i32* %sent_table.1, align 4, !tbaa !48
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.end18.1, %for.inc
  %arrayidx10.2 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %srcinfo, i64 0, i32 39, i64 2
  %52 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %arrayidx10.2, align 8, !tbaa !33
  %cmp11.2 = icmp eq %struct.JQUANT_TBL* %52, null
  br i1 %cmp11.2, label %for.inc.2, label %if.then12.2

if.then12.2:                                      ; preds = %for.inc.1
  %53 = bitcast %struct.JQUANT_TBL* %52 to i8*
  %arrayidx15.2 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %dstinfo, i64 0, i32 15, i64 2
  %54 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %arrayidx15.2, align 8, !tbaa !33
  %cmp16.2 = icmp eq %struct.JQUANT_TBL* %54, null
  br i1 %cmp16.2, label %if.then17.2, label %if.end18.2

if.then17.2:                                      ; preds = %if.then12.2
  %call.2 = tail call %struct.JQUANT_TBL* @jpeg_alloc_quant_table(%struct.jpeg_common_struct* %.pre-phi) #3
  store %struct.JQUANT_TBL* %call.2, %struct.JQUANT_TBL** %arrayidx15.2, align 8, !tbaa !33
  %.phi.trans.insert202 = bitcast %struct.JQUANT_TBL** %arrayidx10.2 to i8**
  %.pre203 = load i8*, i8** %.phi.trans.insert202, align 8, !tbaa !33
  br label %if.end18.2

if.end18.2:                                       ; preds = %if.then12.2, %if.then17.2
  %55 = phi i8* [ %.pre203, %if.then17.2 ], [ %53, %if.then12.2 ]
  %.in220 = phi %struct.JQUANT_TBL* [ %call.2, %if.then17.2 ], [ %54, %if.then12.2 ]
  %56 = bitcast %struct.JQUANT_TBL* %.in220 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %56, i8* %55, i64 128, i32 4, i1 false)
  %57 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %arrayidx15.2, align 8, !tbaa !33
  %sent_table.2 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %57, i64 0, i32 1
  store i32 0, i32* %sent_table.2, align 4, !tbaa !48
  br label %for.inc.2

for.inc.2:                                        ; preds = %if.end18.2, %for.inc.1
  %arrayidx10.3 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %srcinfo, i64 0, i32 39, i64 3
  %58 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %arrayidx10.3, align 8, !tbaa !33
  %cmp11.3 = icmp eq %struct.JQUANT_TBL* %58, null
  br i1 %cmp11.3, label %for.inc.3, label %if.then12.3

if.then12.3:                                      ; preds = %for.inc.2
  %59 = bitcast %struct.JQUANT_TBL* %58 to i8*
  %arrayidx15.3 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %dstinfo, i64 0, i32 15, i64 3
  %60 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %arrayidx15.3, align 8, !tbaa !33
  %cmp16.3 = icmp eq %struct.JQUANT_TBL* %60, null
  br i1 %cmp16.3, label %if.then17.3, label %if.end18.3

if.then17.3:                                      ; preds = %if.then12.3
  %call.3 = tail call %struct.JQUANT_TBL* @jpeg_alloc_quant_table(%struct.jpeg_common_struct* %.pre-phi) #3
  store %struct.JQUANT_TBL* %call.3, %struct.JQUANT_TBL** %arrayidx15.3, align 8, !tbaa !33
  %.phi.trans.insert204 = bitcast %struct.JQUANT_TBL** %arrayidx10.3 to i8**
  %.pre205 = load i8*, i8** %.phi.trans.insert204, align 8, !tbaa !33
  br label %if.end18.3

if.end18.3:                                       ; preds = %if.then12.3, %if.then17.3
  %61 = phi i8* [ %.pre205, %if.then17.3 ], [ %59, %if.then12.3 ]
  %.in = phi %struct.JQUANT_TBL* [ %call.3, %if.then17.3 ], [ %60, %if.then12.3 ]
  %62 = bitcast %struct.JQUANT_TBL* %.in to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %62, i8* %61, i64 128, i32 4, i1 false)
  %63 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %arrayidx15.3, align 8, !tbaa !33
  %sent_table.3 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %63, i64 0, i32 1
  store i32 0, i32* %sent_table.3, align 4, !tbaa !48
  br label %for.inc.3

for.inc.3:                                        ; preds = %if.end18.3, %for.inc.2
  %64 = load i32, i32* %num_components, align 8, !tbaa !60
  %num_components26 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %dstinfo, i64 0, i32 12
  store i32 %64, i32* %num_components26, align 4, !tbaa !50
  %.off = add i32 %64, -1
  %65 = icmp ugt i32 %.off, 9
  br i1 %65, label %if.then31, label %if.end45
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #2

declare void @jpeg_set_defaults(%struct.jpeg_compress_struct*) #1

declare void @jpeg_set_colorspace(%struct.jpeg_compress_struct*, i32) #1

declare %struct.JQUANT_TBL* @jpeg_alloc_quant_table(%struct.jpeg_common_struct*) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #2

declare void @jinit_c_master_control(%struct.jpeg_compress_struct*, i32) #1

declare void @jinit_phuff_encoder(%struct.jpeg_compress_struct*) #1

declare void @jinit_huff_encoder(%struct.jpeg_compress_struct*) #1

declare void @jinit_marker_writer(%struct.jpeg_compress_struct*) #1

; Function Attrs: nounwind uwtable
define internal void @start_pass_coef(%struct.jpeg_compress_struct* %cinfo, i32 %pass_mode) #0 {
entry:
  %coef1 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 54
  %0 = bitcast %struct.jpeg_c_coef_controller** %coef1 to %struct.my_coef_controller**
  %1 = load %struct.my_coef_controller*, %struct.my_coef_controller** %0, align 8, !tbaa !26
  %cmp = icmp eq i32 %pass_mode, 2
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %err = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 0
  %2 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8, !tbaa !10
  %msg_code = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %2, i64 0, i32 5
  store i32 4, i32* %msg_code, align 8, !tbaa !11
  %error_exit = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %2, i64 0, i32 0
  %3 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit, align 8, !tbaa !15
  %4 = bitcast %struct.jpeg_compress_struct* %cinfo to %struct.jpeg_common_struct*
  tail call void %3(%struct.jpeg_common_struct* %4) #3
  %.pre = load %struct.my_coef_controller*, %struct.my_coef_controller** %0, align 8, !tbaa !26
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %5 = phi %struct.my_coef_controller* [ %1, %entry ], [ %.pre, %if.then ]
  %iMCU_row_num = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %1, i64 0, i32 1
  store i32 0, i32* %iMCU_row_num, align 8, !tbaa !61
  %comps_in_scan.i = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 41
  %6 = load i32, i32* %comps_in_scan.i, align 4, !tbaa !62
  %cmp.i = icmp sgt i32 %6, 1
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.end
  %MCU_rows_per_iMCU_row.i = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 4
  store i32 1, i32* %MCU_rows_per_iMCU_row.i, align 4, !tbaa !63
  br label %start_iMCU_row.exit

if.else.i:                                        ; preds = %if.end
  %iMCU_row_num.i = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 1
  %7 = load i32, i32* %iMCU_row_num.i, align 8, !tbaa !61
  %total_iMCU_rows.i = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 40
  %8 = load i32, i32* %total_iMCU_rows.i, align 8, !tbaa !64
  %sub.i = add i32 %8, -1
  %cmp2.i = icmp ult i32 %7, %sub.i
  %arrayidx.i = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 42, i64 0
  %9 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %arrayidx.i, align 8, !tbaa !33
  br i1 %cmp2.i, label %if.then3.i, label %if.else5.i

if.then3.i:                                       ; preds = %if.else.i
  %v_samp_factor.i = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %9, i64 0, i32 3
  %10 = load i32, i32* %v_samp_factor.i, align 4, !tbaa !56
  %MCU_rows_per_iMCU_row4.i = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 4
  store i32 %10, i32* %MCU_rows_per_iMCU_row4.i, align 4, !tbaa !63
  br label %start_iMCU_row.exit

if.else5.i:                                       ; preds = %if.else.i
  %last_row_height.i = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %9, i64 0, i32 18
  %11 = load i32, i32* %last_row_height.i, align 8, !tbaa !65
  %MCU_rows_per_iMCU_row8.i = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 4
  store i32 %11, i32* %MCU_rows_per_iMCU_row8.i, align 4, !tbaa !63
  br label %start_iMCU_row.exit

start_iMCU_row.exit:                              ; preds = %if.then.i, %if.then3.i, %if.else5.i
  %mcu_ctr.i = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 2
  store i32 0, i32* %mcu_ctr.i, align 4, !tbaa !66
  %MCU_vert_offset.i = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 3
  store i32 0, i32* %MCU_vert_offset.i, align 8, !tbaa !67
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @compress_output(%struct.jpeg_compress_struct* %cinfo, i8*** nocapture readnone %input_buf) #0 {
entry:
  %buffer = alloca [4 x [64 x i16]**], align 16
  %MCU_buffer = alloca [10 x [64 x i16]*], align 16
  %coef1 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 54
  %0 = bitcast %struct.jpeg_c_coef_controller** %coef1 to %struct.my_coef_controller**
  %1 = load %struct.my_coef_controller*, %struct.my_coef_controller** %0, align 8, !tbaa !26
  %MCUs_per_row = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 43
  %2 = load i32, i32* %MCUs_per_row, align 8, !tbaa !68
  %sub = add i32 %2, -1
  %total_iMCU_rows = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 40
  %3 = bitcast i32* %total_iMCU_rows to i64*
  %4 = load i64, i64* %3, align 8
  %5 = trunc i64 %4 to i32
  %sub2 = add i32 %5, -1
  %6 = bitcast [4 x [64 x i16]**]* %buffer to i8*
  call void @llvm.lifetime.start(i64 32, i8* %6) #3
  %7 = bitcast [10 x [64 x i16]*]* %MCU_buffer to i8*
  call void @llvm.lifetime.start(i64 80, i8* %7) #3
  %comps_in_scan = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 41
  %8 = lshr i64 %4, 32
  %9 = trunc i64 %8 to i32
  %cmp191 = icmp sgt i32 %9, 0
  br i1 %cmp191, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %mem = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 1
  %10 = bitcast %struct.jpeg_compress_struct* %cinfo to %struct.jpeg_common_struct*
  %whole_image = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %1, i64 0, i32 5
  %iMCU_row_num = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %1, i64 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %indvars.iv209 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next210, %for.body ]
  %arrayidx = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 42, i64 %indvars.iv209
  %11 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %arrayidx, align 8, !tbaa !33
  %12 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !23
  %access_virt_barray = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %12, i64 0, i32 8
  %13 = load [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)** %access_virt_barray, align 8, !tbaa !69
  %component_index = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %11, i64 0, i32 1
  %14 = load i32, i32* %component_index, align 4, !tbaa !70
  %idxprom3 = sext i32 %14 to i64
  %15 = load %struct.jvirt_barray_control**, %struct.jvirt_barray_control*** %whole_image, align 8, !tbaa !31
  %arrayidx4 = getelementptr inbounds %struct.jvirt_barray_control*, %struct.jvirt_barray_control** %15, i64 %idxprom3
  %16 = load %struct.jvirt_barray_control*, %struct.jvirt_barray_control** %arrayidx4, align 8, !tbaa !33
  %17 = load i32, i32* %iMCU_row_num, align 8, !tbaa !61
  %v_samp_factor = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %11, i64 0, i32 3
  %18 = load i32, i32* %v_samp_factor, align 4, !tbaa !56
  %mul = mul i32 %18, %17
  %call = tail call [64 x i16]** %13(%struct.jpeg_common_struct* %10, %struct.jvirt_barray_control* %16, i32 %mul, i32 %18, i32 0) #3
  %arrayidx7 = getelementptr inbounds [4 x [64 x i16]**], [4 x [64 x i16]**]* %buffer, i64 0, i64 %indvars.iv209
  store [64 x i16]** %call, [64 x i16]*** %arrayidx7, align 8, !tbaa !33
  %indvars.iv.next210 = add nuw nsw i64 %indvars.iv209, 1
  %19 = load i32, i32* %comps_in_scan, align 4, !tbaa !62
  %20 = sext i32 %19 to i64
  %cmp = icmp slt i64 %indvars.iv.next210, %20
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  %.lcssa252 = phi i32 [ %19, %for.body ]
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  %21 = phi i32 [ %9, %entry ], [ %.lcssa252, %for.end.loopexit ]
  %MCU_vert_offset = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %1, i64 0, i32 3
  %22 = bitcast i32* %MCU_vert_offset to i64*
  %23 = load i64, i64* %22, align 8
  %24 = trunc i64 %23 to i32
  %MCU_rows_per_iMCU_row = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %1, i64 0, i32 4
  %25 = lshr i64 %23, 32
  %26 = trunc i64 %25 to i32
  %cmp9188 = icmp slt i32 %24, %26
  br i1 %cmp9188, label %for.body10.lr.ph, label %for.end.for.end83_crit_edge

for.end.for.end83_crit_edge:                      ; preds = %for.end
  %.pre219 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %1, i64 0, i32 1
  br label %for.end83

for.body10.lr.ph:                                 ; preds = %for.end
  %mcu_ctr = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %1, i64 0, i32 2
  %entropy = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 59
  %arraydecay = getelementptr inbounds [10 x [64 x i16]*], [10 x [64 x i16]*]* %MCU_buffer, i64 0, i64 0
  %iMCU_row_num28 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %1, i64 0, i32 1
  %sext = shl i64 %23, 32
  %27 = ashr exact i64 %sext, 32
  %.pre = load i32, i32* %mcu_ctr, align 4, !tbaa !66
  %.pre213 = load i32, i32* %MCUs_per_row, align 8, !tbaa !68
  br label %for.body10

for.body10:                                       ; preds = %for.body10.lr.ph, %for.end79
  %28 = phi i32 [ %26, %for.body10.lr.ph ], [ %69, %for.end79 ]
  %29 = phi i32 [ %.pre213, %for.body10.lr.ph ], [ %70, %for.end79 ]
  %30 = phi i32 [ %.pre, %for.body10.lr.ph ], [ 0, %for.end79 ]
  %indvars.iv207 = phi i64 [ %27, %for.body10.lr.ph ], [ %indvars.iv.next208, %for.end79 ]
  %cmp13186 = icmp ult i32 %30, %29
  br i1 %cmp13186, label %for.cond15.preheader.preheader, label %for.end79

for.cond15.preheader.preheader:                   ; preds = %for.body10
  br label %for.cond15.preheader

for.cond15.preheader:                             ; preds = %for.cond15.preheader.preheader, %for.inc77
  %MCU_col_num.0187 = phi i32 [ %inc78, %for.inc77 ], [ %30, %for.cond15.preheader.preheader ]
  %31 = load i32, i32* %comps_in_scan, align 4, !tbaa !62
  %cmp17183 = icmp sgt i32 %31, 0
  br i1 %cmp17183, label %for.body18.lr.ph, label %for.end71

for.body18.lr.ph:                                 ; preds = %for.cond15.preheader
  %cmp23 = icmp ult i32 %MCU_col_num.0187, %sub
  %32 = sext i32 %31 to i64
  br label %for.body18

for.body18:                                       ; preds = %for.body18.lr.ph, %for.inc69
  %indvars.iv205 = phi i64 [ 0, %for.body18.lr.ph ], [ %indvars.iv.next206, %for.inc69 ]
  %blkn.0184 = phi i32 [ 0, %for.body18.lr.ph ], [ %blkn.1.lcssa, %for.inc69 ]
  %arrayidx21 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 42, i64 %indvars.iv205
  %33 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %arrayidx21, align 8, !tbaa !33
  %MCU_width = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %33, i64 0, i32 13
  %34 = load i32, i32* %MCU_width, align 4, !tbaa !71
  %mul22 = mul i32 %34, %MCU_col_num.0187
  br i1 %cmp23, label %cond.end, label %cond.false

cond.false:                                       ; preds = %for.body18
  %last_col_width = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %33, i64 0, i32 17
  %35 = load i32, i32* %last_col_width, align 4, !tbaa !72
  br label %cond.end

cond.end:                                         ; preds = %for.body18, %cond.false
  %cond = phi i32 [ %35, %cond.false ], [ %34, %for.body18 ]
  %MCU_height = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %33, i64 0, i32 14
  %36 = load i32, i32* %MCU_height, align 8, !tbaa !73
  %cmp26178 = icmp sgt i32 %36, 0
  br i1 %cmp26178, label %for.body27.lr.ph, label %for.inc69

for.body27.lr.ph:                                 ; preds = %cond.end
  %arrayidx34 = getelementptr inbounds [4 x [64 x i16]**], [4 x [64 x i16]**]* %buffer, i64 0, i64 %indvars.iv205
  %idx.ext = zext i32 %mul22 to i64
  %cmp37169 = icmp sgt i32 %cond, 0
  %last_row_height = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %33, i64 0, i32 18
  br i1 %cmp37169, label %for.body27.us.preheader, label %for.body27.preheader

for.body27.preheader:                             ; preds = %for.body27.lr.ph
  %cmp47174 = icmp sgt i32 %34, 0
  br label %for.body27

for.body27.us.preheader:                          ; preds = %for.body27.lr.ph
  %37 = sext i32 %36 to i64
  %.pre215 = load i32, i32* %iMCU_row_num28, align 8, !tbaa !61
  %cmp29.us = icmp ult i32 %.pre215, %sub2
  %38 = add i32 %cond, -1
  %39 = zext i32 %38 to i64
  %40 = add nuw nsw i64 %39, 1
  %min.iters.check = icmp ult i64 %40, 4
  %n.vec = and i64 %40, 8589934588
  %cmp.zero = icmp eq i64 %n.vec, 0
  %cast.crd = trunc i64 %n.vec to i32
  %cmp.n = icmp eq i64 %40, %n.vec
  br label %for.body27.us

for.body27.us:                                    ; preds = %for.body27.us.preheader, %for.inc66.us
  %indvars.iv201 = phi i64 [ 0, %for.body27.us.preheader ], [ %indvars.iv.next202, %for.inc66.us ]
  %blkn.1179.us = phi i32 [ %blkn.0184, %for.body27.us.preheader ], [ %blkn.3.lcssa.us, %for.inc66.us ]
  %.pre218 = add nsw i64 %indvars.iv201, %indvars.iv207
  br i1 %cmp29.us, label %if.then.us, label %lor.lhs.false.us

lor.lhs.false.us:                                 ; preds = %for.body27.us
  %41 = load i32, i32* %last_row_height, align 8, !tbaa !65
  %42 = sext i32 %41 to i64
  %cmp30.us = icmp slt i64 %.pre218, %42
  br i1 %cmp30.us, label %if.then.us, label %for.cond45.preheader.us

if.then.us:                                       ; preds = %for.body27.us, %lor.lhs.false.us
  %43 = load [64 x i16]**, [64 x i16]*** %arrayidx34, align 8, !tbaa !33
  %arrayidx35.us = getelementptr inbounds [64 x i16]*, [64 x i16]** %43, i64 %.pre218
  %44 = load [64 x i16]*, [64 x i16]** %arrayidx35.us, align 8, !tbaa !33
  %add.ptr.us = getelementptr inbounds [64 x i16], [64 x i16]* %44, i64 %idx.ext
  %45 = sext i32 %blkn.1179.us to i64
  br i1 %min.iters.check, label %for.body38.us.preheader, label %min.iters.checked

for.body38.us.preheader:                          ; preds = %middle.block, %min.iters.checked, %if.then.us
  %indvars.iv197.ph = phi i64 [ %45, %min.iters.checked ], [ %45, %if.then.us ], [ %ind.end, %middle.block ]
  %buffer_ptr.0172.us.ph = phi [64 x i16]* [ %add.ptr.us, %min.iters.checked ], [ %add.ptr.us, %if.then.us ], [ %ind.end229, %middle.block ]
  %xindex.0171.us.ph = phi i32 [ 0, %min.iters.checked ], [ 0, %if.then.us ], [ %cast.crd, %middle.block ]
  br label %for.body38.us

min.iters.checked:                                ; preds = %if.then.us
  %ind.end = add nsw i64 %45, %n.vec
  %ind.end229 = getelementptr [64 x i16], [64 x i16]* %add.ptr.us, i64 %n.vec
  br i1 %cmp.zero, label %for.body38.us.preheader, label %vector.body.preheader

vector.body.preheader:                            ; preds = %min.iters.checked
  br label %vector.body

vector.body:                                      ; preds = %vector.body.preheader, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %vector.body.preheader ]
  %offset.idx = add i64 %45, %index
  %next.gep = getelementptr [64 x i16], [64 x i16]* %add.ptr.us, i64 %index
  %insert.gep = insertelement <2 x [64 x i16]*> undef, [64 x i16]* %next.gep, i32 0
  %46 = or i64 %index, 1
  %next.gep233 = getelementptr [64 x i16], [64 x i16]* %add.ptr.us, i64 %46
  %insert.gep234 = insertelement <2 x [64 x i16]*> %insert.gep, [64 x i16]* %next.gep233, i32 1
  %47 = or i64 %index, 2
  %next.gep235 = getelementptr [64 x i16], [64 x i16]* %add.ptr.us, i64 %47
  %insert.gep236 = insertelement <2 x [64 x i16]*> undef, [64 x i16]* %next.gep235, i32 0
  %48 = or i64 %index, 3
  %next.gep237 = getelementptr [64 x i16], [64 x i16]* %add.ptr.us, i64 %48
  %insert.gep238 = insertelement <2 x [64 x i16]*> %insert.gep236, [64 x i16]* %next.gep237, i32 1
  %49 = getelementptr inbounds [10 x [64 x i16]*], [10 x [64 x i16]*]* %MCU_buffer, i64 0, i64 %offset.idx
  %50 = bitcast [64 x i16]** %49 to <2 x [64 x i16]*>*
  store <2 x [64 x i16]*> %insert.gep234, <2 x [64 x i16]*>* %50, align 8, !tbaa !33
  %51 = getelementptr [64 x i16]*, [64 x i16]** %49, i64 2
  %52 = bitcast [64 x i16]** %51 to <2 x [64 x i16]*>*
  store <2 x [64 x i16]*> %insert.gep238, <2 x [64 x i16]*>* %52, align 8, !tbaa !33
  %index.next = add i64 %index, 4
  %53 = icmp eq i64 %index.next, %n.vec
  br i1 %53, label %middle.block, label %vector.body, !llvm.loop !74

middle.block:                                     ; preds = %vector.body
  br i1 %cmp.n, label %for.cond45.preheader.us.loopexit, label %for.body38.us.preheader

for.inc66.us.loopexit:                            ; preds = %for.body48.us
  %inc62.us.lcssa = phi i32 [ %inc62.us, %for.body48.us ]
  br label %for.inc66.us

for.inc66.us:                                     ; preds = %for.inc66.us.loopexit, %for.cond45.preheader.us
  %blkn.3.lcssa.us = phi i32 [ %blkn.3.ph.us, %for.cond45.preheader.us ], [ %inc62.us.lcssa, %for.inc66.us.loopexit ]
  %indvars.iv.next202 = add nuw nsw i64 %indvars.iv201, 1
  %cmp26.us = icmp slt i64 %indvars.iv.next202, %37
  br i1 %cmp26.us, label %for.body27.us, label %for.inc69.loopexit

for.body48.us:                                    ; preds = %for.body48.lr.ph.us, %for.body48.us
  %indvars.iv199 = phi i64 [ %59, %for.body48.lr.ph.us ], [ %indvars.iv.next200, %for.body48.us ]
  %xindex.1176.us = phi i32 [ %xindex.1.ph.us, %for.body48.lr.ph.us ], [ %inc64.us, %for.body48.us ]
  %blkn.3175.us = phi i32 [ %blkn.3.ph.us, %for.body48.lr.ph.us ], [ %inc62.us, %for.body48.us ]
  %arrayidx50.us = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %1, i64 0, i32 6, i64 %indvars.iv199
  %54 = load [64 x i16]*, [64 x i16]** %arrayidx50.us, align 8, !tbaa !33
  %arrayidx52.us = getelementptr inbounds [10 x [64 x i16]*], [10 x [64 x i16]*]* %MCU_buffer, i64 0, i64 %indvars.iv199
  store [64 x i16]* %54, [64 x i16]** %arrayidx52.us, align 8, !tbaa !33
  %sub53.us = add nsw i32 %blkn.3175.us, -1
  %idxprom54.us = sext i32 %sub53.us to i64
  %arrayidx55.us = getelementptr inbounds [10 x [64 x i16]*], [10 x [64 x i16]*]* %MCU_buffer, i64 0, i64 %idxprom54.us
  %55 = load [64 x i16]*, [64 x i16]** %arrayidx55.us, align 8, !tbaa !33
  %arrayidx57.us = getelementptr inbounds [64 x i16], [64 x i16]* %55, i64 0, i64 0
  %56 = load i16, i16* %arrayidx57.us, align 2, !tbaa !59
  %arrayidx61.us = getelementptr inbounds [64 x i16], [64 x i16]* %54, i64 0, i64 0
  store i16 %56, i16* %arrayidx61.us, align 2, !tbaa !59
  %inc62.us = add nsw i32 %blkn.3175.us, 1
  %inc64.us = add nsw i32 %xindex.1176.us, 1
  %cmp47.us = icmp slt i32 %inc64.us, %58
  %indvars.iv.next200 = add nsw i64 %indvars.iv199, 1
  br i1 %cmp47.us, label %for.body48.us, label %for.inc66.us.loopexit

for.body38.us:                                    ; preds = %for.body38.us.preheader, %for.body38.us
  %indvars.iv197 = phi i64 [ %indvars.iv.next198, %for.body38.us ], [ %indvars.iv197.ph, %for.body38.us.preheader ]
  %buffer_ptr.0172.us = phi [64 x i16]* [ %incdec.ptr.us, %for.body38.us ], [ %buffer_ptr.0172.us.ph, %for.body38.us.preheader ]
  %xindex.0171.us = phi i32 [ %inc43.us, %for.body38.us ], [ %xindex.0171.us.ph, %for.body38.us.preheader ]
  %incdec.ptr.us = getelementptr inbounds [64 x i16], [64 x i16]* %buffer_ptr.0172.us, i64 1
  %arrayidx41.us = getelementptr inbounds [10 x [64 x i16]*], [10 x [64 x i16]*]* %MCU_buffer, i64 0, i64 %indvars.iv197
  store [64 x i16]* %buffer_ptr.0172.us, [64 x i16]** %arrayidx41.us, align 8, !tbaa !33
  %inc43.us = add nuw nsw i32 %xindex.0171.us, 1
  %indvars.iv.next198 = add nsw i64 %indvars.iv197, 1
  %exitcond = icmp eq i32 %inc43.us, %cond
  br i1 %exitcond, label %for.cond45.preheader.us.loopexit.loopexit, label %for.body38.us, !llvm.loop !77

for.cond45.preheader.us.loopexit.loopexit:        ; preds = %for.body38.us
  br label %for.cond45.preheader.us.loopexit

for.cond45.preheader.us.loopexit:                 ; preds = %for.cond45.preheader.us.loopexit.loopexit, %middle.block
  %57 = add i32 %cond, %blkn.1179.us
  br label %for.cond45.preheader.us

for.cond45.preheader.us:                          ; preds = %for.cond45.preheader.us.loopexit, %lor.lhs.false.us
  %blkn.3.ph.us = phi i32 [ %blkn.1179.us, %lor.lhs.false.us ], [ %57, %for.cond45.preheader.us.loopexit ]
  %xindex.1.ph.us = phi i32 [ 0, %lor.lhs.false.us ], [ %cond, %for.cond45.preheader.us.loopexit ]
  %cmp47174.us = icmp slt i32 %xindex.1.ph.us, %34
  br i1 %cmp47174.us, label %for.body48.lr.ph.us, label %for.inc66.us

for.body48.lr.ph.us:                              ; preds = %for.cond45.preheader.us
  %58 = load i32, i32* %MCU_width, align 4
  %59 = sext i32 %blkn.3.ph.us to i64
  br label %for.body48.us

for.body27:                                       ; preds = %for.body27.preheader, %for.inc66
  %yindex.0180 = phi i32 [ %inc67, %for.inc66 ], [ 0, %for.body27.preheader ]
  %blkn.1179 = phi i32 [ %blkn.3.lcssa, %for.inc66 ], [ %blkn.0184, %for.body27.preheader ]
  br i1 %cmp47174, label %for.body48.lr.ph, label %for.inc66

for.body48.lr.ph:                                 ; preds = %for.body27
  %60 = load i32, i32* %MCU_width, align 4
  %61 = sext i32 %blkn.1179 to i64
  br label %for.body48

for.body48:                                       ; preds = %for.body48.lr.ph, %for.body48
  %indvars.iv = phi i64 [ %61, %for.body48.lr.ph ], [ %indvars.iv.next, %for.body48 ]
  %xindex.1176 = phi i32 [ 0, %for.body48.lr.ph ], [ %inc64, %for.body48 ]
  %blkn.3175 = phi i32 [ %blkn.1179, %for.body48.lr.ph ], [ %inc62, %for.body48 ]
  %arrayidx50 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %1, i64 0, i32 6, i64 %indvars.iv
  %62 = load [64 x i16]*, [64 x i16]** %arrayidx50, align 8, !tbaa !33
  %arrayidx52 = getelementptr inbounds [10 x [64 x i16]*], [10 x [64 x i16]*]* %MCU_buffer, i64 0, i64 %indvars.iv
  store [64 x i16]* %62, [64 x i16]** %arrayidx52, align 8, !tbaa !33
  %sub53 = add nsw i32 %blkn.3175, -1
  %idxprom54 = sext i32 %sub53 to i64
  %arrayidx55 = getelementptr inbounds [10 x [64 x i16]*], [10 x [64 x i16]*]* %MCU_buffer, i64 0, i64 %idxprom54
  %63 = load [64 x i16]*, [64 x i16]** %arrayidx55, align 8, !tbaa !33
  %arrayidx57 = getelementptr inbounds [64 x i16], [64 x i16]* %63, i64 0, i64 0
  %64 = load i16, i16* %arrayidx57, align 2, !tbaa !59
  %arrayidx61 = getelementptr inbounds [64 x i16], [64 x i16]* %62, i64 0, i64 0
  store i16 %64, i16* %arrayidx61, align 2, !tbaa !59
  %inc62 = add nsw i32 %blkn.3175, 1
  %inc64 = add nuw nsw i32 %xindex.1176, 1
  %cmp47 = icmp slt i32 %inc64, %60
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  br i1 %cmp47, label %for.body48, label %for.inc66.loopexit

for.inc66.loopexit:                               ; preds = %for.body48
  %inc62.lcssa = phi i32 [ %inc62, %for.body48 ]
  br label %for.inc66

for.inc66:                                        ; preds = %for.inc66.loopexit, %for.body27
  %blkn.3.lcssa = phi i32 [ %blkn.1179, %for.body27 ], [ %inc62.lcssa, %for.inc66.loopexit ]
  %inc67 = add nuw nsw i32 %yindex.0180, 1
  %cmp26 = icmp slt i32 %inc67, %36
  br i1 %cmp26, label %for.body27, label %for.inc69.loopexit246

for.inc69.loopexit:                               ; preds = %for.inc66.us
  %blkn.3.lcssa.us.lcssa = phi i32 [ %blkn.3.lcssa.us, %for.inc66.us ]
  br label %for.inc69

for.inc69.loopexit246:                            ; preds = %for.inc66
  %blkn.3.lcssa.lcssa = phi i32 [ %blkn.3.lcssa, %for.inc66 ]
  br label %for.inc69

for.inc69:                                        ; preds = %for.inc69.loopexit246, %for.inc69.loopexit, %cond.end
  %blkn.1.lcssa = phi i32 [ %blkn.0184, %cond.end ], [ %blkn.3.lcssa.us.lcssa, %for.inc69.loopexit ], [ %blkn.3.lcssa.lcssa, %for.inc69.loopexit246 ]
  %indvars.iv.next206 = add nuw nsw i64 %indvars.iv205, 1
  %cmp17 = icmp slt i64 %indvars.iv.next206, %32
  br i1 %cmp17, label %for.body18, label %for.end71.loopexit

for.end71.loopexit:                               ; preds = %for.inc69
  br label %for.end71

for.end71:                                        ; preds = %for.end71.loopexit, %for.cond15.preheader
  %65 = load %struct.jpeg_entropy_encoder*, %struct.jpeg_entropy_encoder** %entropy, align 8, !tbaa !79
  %encode_mcu = getelementptr inbounds %struct.jpeg_entropy_encoder, %struct.jpeg_entropy_encoder* %65, i64 0, i32 1
  %66 = load i32 (%struct.jpeg_compress_struct*, [64 x i16]**)*, i32 (%struct.jpeg_compress_struct*, [64 x i16]**)** %encode_mcu, align 8, !tbaa !80
  %call72 = call i32 %66(%struct.jpeg_compress_struct* nonnull %cinfo, [64 x i16]** %arraydecay) #3
  %tobool = icmp eq i32 %call72, 0
  br i1 %tobool, label %if.then73, label %for.inc77

if.then73:                                        ; preds = %for.end71
  %indvars.iv207.lcssa = phi i64 [ %indvars.iv207, %for.end71 ]
  %MCU_col_num.0187.lcssa = phi i32 [ %MCU_col_num.0187, %for.end71 ]
  %67 = trunc i64 %indvars.iv207.lcssa to i32
  store i32 %67, i32* %MCU_vert_offset, align 8, !tbaa !67
  store i32 %MCU_col_num.0187.lcssa, i32* %mcu_ctr, align 4, !tbaa !66
  br label %cleanup

for.inc77:                                        ; preds = %for.end71
  %inc78 = add i32 %MCU_col_num.0187, 1
  %68 = load i32, i32* %MCUs_per_row, align 8, !tbaa !68
  %cmp13 = icmp ult i32 %inc78, %68
  br i1 %cmp13, label %for.cond15.preheader, label %for.end79.loopexit

for.end79.loopexit:                               ; preds = %for.inc77
  %.lcssa = phi i32 [ %68, %for.inc77 ]
  %.pre216 = load i32, i32* %MCU_rows_per_iMCU_row, align 4, !tbaa !63
  br label %for.end79

for.end79:                                        ; preds = %for.end79.loopexit, %for.body10
  %69 = phi i32 [ %.pre216, %for.end79.loopexit ], [ %28, %for.body10 ]
  %70 = phi i32 [ %.lcssa, %for.end79.loopexit ], [ %29, %for.body10 ]
  store i32 0, i32* %mcu_ctr, align 4, !tbaa !66
  %indvars.iv.next208 = add i64 %indvars.iv207, 1
  %71 = sext i32 %69 to i64
  %cmp9 = icmp slt i64 %indvars.iv.next208, %71
  br i1 %cmp9, label %for.body10, label %for.end83.loopexit

for.end83.loopexit:                               ; preds = %for.end79
  %.pre217 = load i32, i32* %comps_in_scan, align 4, !tbaa !62
  br label %for.end83

for.end83:                                        ; preds = %for.end.for.end83_crit_edge, %for.end83.loopexit
  %iMCU_row_num84.pre-phi = phi i32* [ %.pre219, %for.end.for.end83_crit_edge ], [ %iMCU_row_num28, %for.end83.loopexit ]
  %72 = phi i32 [ %21, %for.end.for.end83_crit_edge ], [ %.pre217, %for.end83.loopexit ]
  %73 = load i32, i32* %iMCU_row_num84.pre-phi, align 8, !tbaa !61
  %inc85 = add i32 %73, 1
  store i32 %inc85, i32* %iMCU_row_num84.pre-phi, align 8, !tbaa !61
  %74 = load %struct.my_coef_controller*, %struct.my_coef_controller** %0, align 8, !tbaa !26
  %cmp.i = icmp sgt i32 %72, 1
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.end83
  %MCU_rows_per_iMCU_row.i = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %74, i64 0, i32 4
  store i32 1, i32* %MCU_rows_per_iMCU_row.i, align 4, !tbaa !63
  br label %start_iMCU_row.exit

if.else.i:                                        ; preds = %for.end83
  %iMCU_row_num.i = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %74, i64 0, i32 1
  %75 = load i32, i32* %iMCU_row_num.i, align 8, !tbaa !61
  %76 = load i32, i32* %total_iMCU_rows, align 8, !tbaa !64
  %sub.i = add i32 %76, -1
  %cmp2.i = icmp ult i32 %75, %sub.i
  %arrayidx.i = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 42, i64 0
  %77 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %arrayidx.i, align 8, !tbaa !33
  br i1 %cmp2.i, label %if.then3.i, label %if.else5.i

if.then3.i:                                       ; preds = %if.else.i
  %v_samp_factor.i = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %77, i64 0, i32 3
  %78 = load i32, i32* %v_samp_factor.i, align 4, !tbaa !56
  %MCU_rows_per_iMCU_row4.i = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %74, i64 0, i32 4
  store i32 %78, i32* %MCU_rows_per_iMCU_row4.i, align 4, !tbaa !63
  br label %start_iMCU_row.exit

if.else5.i:                                       ; preds = %if.else.i
  %last_row_height.i = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %77, i64 0, i32 18
  %79 = load i32, i32* %last_row_height.i, align 8, !tbaa !65
  %MCU_rows_per_iMCU_row8.i = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %74, i64 0, i32 4
  store i32 %79, i32* %MCU_rows_per_iMCU_row8.i, align 4, !tbaa !63
  br label %start_iMCU_row.exit

start_iMCU_row.exit:                              ; preds = %if.then.i, %if.then3.i, %if.else5.i
  %mcu_ctr.i = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %74, i64 0, i32 2
  store i32 0, i32* %mcu_ctr.i, align 4, !tbaa !66
  %MCU_vert_offset.i = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %74, i64 0, i32 3
  store i32 0, i32* %MCU_vert_offset.i, align 8, !tbaa !67
  br label %cleanup

cleanup:                                          ; preds = %start_iMCU_row.exit, %if.then73
  %retval.0 = phi i32 [ 0, %if.then73 ], [ 1, %start_iMCU_row.exit ]
  call void @llvm.lifetime.end(i64 80, i8* %7) #3
  call void @llvm.lifetime.end(i64 32, i8* %6) #3
  ret i32 %retval.0
}

declare void @jzero_far(i8*, i64) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"MaxFunctionCount", i32 150581}
!1 = !{!"clang version 3.8.0 (trunk 257473)"}
!2 = !{!3, !7, i64 28}
!3 = !{!"jpeg_compress_struct", !4, i64 0, !4, i64 8, !4, i64 16, !7, i64 24, !7, i64 28, !4, i64 32, !7, i64 40, !7, i64 44, !7, i64 48, !5, i64 52, !8, i64 56, !7, i64 64, !7, i64 68, !5, i64 72, !4, i64 80, !5, i64 88, !5, i64 120, !5, i64 152, !5, i64 184, !5, i64 200, !5, i64 216, !7, i64 232, !4, i64 240, !7, i64 248, !7, i64 252, !7, i64 256, !7, i64 260, !7, i64 264, !5, i64 268, !7, i64 272, !7, i64 276, !7, i64 280, !5, i64 284, !9, i64 286, !9, i64 288, !7, i64 292, !7, i64 296, !7, i64 300, !7, i64 304, !7, i64 308, !7, i64 312, !7, i64 316, !5, i64 320, !7, i64 352, !7, i64 356, !7, i64 360, !5, i64 364, !7, i64 404, !7, i64 408, !7, i64 412, !7, i64 416, !4, i64 424, !4, i64 432, !4, i64 440, !4, i64 448, !4, i64 456, !4, i64 464, !4, i64 472, !4, i64 480, !4, i64 488}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!"int", !5, i64 0}
!8 = !{!"double", !5, i64 0}
!9 = !{!"short", !5, i64 0}
!10 = !{!3, !4, i64 0}
!11 = !{!12, !7, i64 40}
!12 = !{!"jpeg_error_mgr", !4, i64 0, !4, i64 8, !4, i64 16, !4, i64 24, !4, i64 32, !7, i64 40, !5, i64 44, !7, i64 124, !13, i64 128, !4, i64 136, !7, i64 144, !4, i64 152, !7, i64 160, !7, i64 164}
!13 = !{!"long", !5, i64 0}
!14 = !{!7, !7, i64 0}
!15 = !{!12, !4, i64 0}
!16 = !{!12, !4, i64 32}
!17 = !{!3, !4, i64 32}
!18 = !{!19, !4, i64 16}
!19 = !{!"jpeg_destination_mgr", !4, i64 0, !13, i64 8, !4, i64 16, !4, i64 24, !4, i64 32}
!20 = !{!3, !7, i64 48}
!21 = !{!3, !7, i64 252}
!22 = !{!3, !7, i64 300}
!23 = !{!3, !4, i64 8}
!24 = !{!25, !4, i64 0}
!25 = !{!"jpeg_memory_mgr", !4, i64 0, !4, i64 8, !4, i64 16, !4, i64 24, !4, i64 32, !4, i64 40, !4, i64 48, !4, i64 56, !4, i64 64, !4, i64 72, !4, i64 80, !13, i64 88}
!26 = !{!3, !4, i64 448}
!27 = !{!28, !4, i64 0}
!28 = !{!"", !29, i64 0, !7, i64 16, !7, i64 20, !7, i64 24, !7, i64 28, !4, i64 32, !5, i64 40}
!29 = !{!"jpeg_c_coef_controller", !4, i64 0, !4, i64 8}
!30 = !{!28, !4, i64 8}
!31 = !{!28, !4, i64 32}
!32 = !{!25, !4, i64 8}
!33 = !{!4, !4, i64 0}
!34 = !{!25, !4, i64 48}
!35 = !{!3, !4, i64 456}
!36 = !{!37, !4, i64 8}
!37 = !{!"jpeg_marker_writer", !4, i64 0, !4, i64 8, !4, i64 16, !4, i64 24, !4, i64 32, !4, i64 40}
!38 = !{!3, !7, i64 296}
!39 = !{!3, !7, i64 40}
!40 = !{!3, !7, i64 44}
!41 = !{!3, !5, i64 52}
!42 = !{!43, !5, i64 52}
!43 = !{!"jpeg_decompress_struct", !4, i64 0, !4, i64 8, !4, i64 16, !7, i64 24, !7, i64 28, !4, i64 32, !7, i64 40, !7, i64 44, !7, i64 48, !5, i64 52, !5, i64 56, !7, i64 60, !7, i64 64, !8, i64 72, !7, i64 80, !7, i64 84, !5, i64 88, !7, i64 92, !7, i64 96, !7, i64 100, !5, i64 104, !7, i64 108, !7, i64 112, !7, i64 116, !7, i64 120, !7, i64 124, !7, i64 128, !7, i64 132, !7, i64 136, !7, i64 140, !7, i64 144, !7, i64 148, !4, i64 152, !7, i64 160, !7, i64 164, !7, i64 168, !7, i64 172, !7, i64 176, !4, i64 184, !5, i64 192, !5, i64 224, !5, i64 256, !7, i64 288, !4, i64 296, !7, i64 304, !7, i64 308, !5, i64 312, !5, i64 328, !5, i64 344, !7, i64 360, !7, i64 364, !5, i64 368, !9, i64 370, !9, i64 372, !7, i64 376, !5, i64 380, !7, i64 384, !7, i64 388, !7, i64 392, !7, i64 396, !7, i64 400, !4, i64 408, !7, i64 416, !5, i64 424, !7, i64 456, !7, i64 460, !7, i64 464, !5, i64 468, !7, i64 508, !7, i64 512, !7, i64 516, !7, i64 520, !7, i64 524, !4, i64 528, !4, i64 536, !4, i64 544, !4, i64 552, !4, i64 560, !4, i64 568, !4, i64 576, !4, i64 584, !4, i64 592, !4, i64 600, !4, i64 608}
!44 = !{!43, !7, i64 288}
!45 = !{!3, !7, i64 64}
!46 = !{!43, !7, i64 384}
!47 = !{!3, !7, i64 260}
!48 = !{!49, !7, i64 128}
!49 = !{!"", !5, i64 0, !7, i64 128}
!50 = !{!3, !7, i64 68}
!51 = !{!3, !4, i64 80}
!52 = !{!43, !4, i64 296}
!53 = !{!54, !7, i64 0}
!54 = !{!"", !7, i64 0, !7, i64 4, !7, i64 8, !7, i64 12, !7, i64 16, !7, i64 20, !7, i64 24, !7, i64 28, !7, i64 32, !7, i64 36, !7, i64 40, !7, i64 44, !7, i64 48, !7, i64 52, !7, i64 56, !7, i64 60, !7, i64 64, !7, i64 68, !7, i64 72, !4, i64 80, !4, i64 88}
!55 = !{!54, !7, i64 8}
!56 = !{!54, !7, i64 12}
!57 = !{!54, !7, i64 16}
!58 = !{!54, !4, i64 80}
!59 = !{!9, !9, i64 0}
!60 = !{!43, !7, i64 48}
!61 = !{!28, !7, i64 16}
!62 = !{!3, !7, i64 316}
!63 = !{!28, !7, i64 28}
!64 = !{!3, !7, i64 312}
!65 = !{!54, !7, i64 72}
!66 = !{!28, !7, i64 20}
!67 = !{!28, !7, i64 24}
!68 = !{!3, !7, i64 352}
!69 = !{!25, !4, i64 64}
!70 = !{!54, !7, i64 4}
!71 = !{!54, !7, i64 52}
!72 = !{!54, !7, i64 68}
!73 = !{!54, !7, i64 56}
!74 = distinct !{!74, !75, !76}
!75 = !{!"llvm.loop.vectorize.width", i32 1}
!76 = !{!"llvm.loop.interleave.count", i32 1}
!77 = distinct !{!77, !78, !75, !76}
!78 = !{!"llvm.loop.unroll.runtime.disable"}
!79 = !{!3, !4, i64 488}
!80 = !{!81, !4, i64 8}
!81 = !{!"jpeg_entropy_encoder", !4, i64 0, !4, i64 8, !4, i64 16}
