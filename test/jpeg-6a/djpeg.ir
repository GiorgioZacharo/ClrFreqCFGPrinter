; ModuleID = 'djpeg.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.jpeg_decompress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32, %struct.jpeg_source_mgr*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i16, i16, i32, i8, i32, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master*, %struct.jpeg_d_main_controller*, %struct.jpeg_d_coef_controller*, %struct.jpeg_d_post_controller*, %struct.jpeg_input_controller*, %struct.jpeg_marker_reader*, %struct.jpeg_entropy_decoder*, %struct.jpeg_inverse_dct*, %struct.jpeg_upsampler*, %struct.jpeg_color_deconverter*, %struct.jpeg_color_quantizer* }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_source_mgr = type { i8*, i64, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i64)*, i32 (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*)* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.jpeg_decomp_master = type opaque
%struct.jpeg_d_main_controller = type opaque
%struct.jpeg_d_coef_controller = type opaque
%struct.jpeg_d_post_controller = type opaque
%struct.jpeg_input_controller = type opaque
%struct.jpeg_marker_reader = type opaque
%struct.jpeg_entropy_decoder = type opaque
%struct.jpeg_inverse_dct = type opaque
%struct.jpeg_upsampler = type opaque
%struct.jpeg_color_deconverter = type opaque
%struct.jpeg_color_quantizer = type opaque
%struct.djpeg_dest_struct = type { void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*)*, void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*, i32)*, void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*)*, %struct._IO_FILE*, i8**, i32 }

@progname = internal unnamed_addr global i8* null, align 8
@.str = private unnamed_addr constant [6 x i8] c"djpeg\00", align 1
@cdjpeg_message_table = internal constant [44 x i8*] [i8* null, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.35, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.38, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.39, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.40, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.41, i32 0, i32 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.42, i32 0, i32 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.44, i32 0, i32 0), i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.46, i32 0, i32 0), i8* null], align 16
@stderr = external global %struct._IO_FILE*, align 8
@.str.1 = private unnamed_addr constant [25 x i8] c"%s: only one input file\0A\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str.3 = private unnamed_addr constant [19 x i8] c"%s: can't open %s\0A\00", align 1
@outfilename = internal unnamed_addr global i8* null, align 8
@.str.4 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@requested_fmt = internal unnamed_addr global i32 0, align 4
@stdin = external global %struct._IO_FILE*, align 8
@stdout = external global %struct._IO_FILE*, align 8
@.str.5 = private unnamed_addr constant [32 x i8] c"Unsupported BMP colormap format\00", align 1
@.str.6 = private unnamed_addr constant [43 x i8] c"Only 8- and 24-bit BMP files are supported\00", align 1
@.str.7 = private unnamed_addr constant [36 x i8] c"Invalid BMP file: bad header length\00", align 1
@.str.8 = private unnamed_addr constant [42 x i8] c"Invalid BMP file: biPlanes not equal to 1\00", align 1
@.str.9 = private unnamed_addr constant [36 x i8] c"BMP output must be grayscale or RGB\00", align 1
@.str.10 = private unnamed_addr constant [41 x i8] c"Sorry, compressed BMPs not yet supported\00", align 1
@.str.11 = private unnamed_addr constant [40 x i8] c"Not a BMP file - does not start with BM\00", align 1
@.str.12 = private unnamed_addr constant [23 x i8] c"%ux%u 24-bit BMP image\00", align 1
@.str.13 = private unnamed_addr constant [34 x i8] c"%ux%u 8-bit colormapped BMP image\00", align 1
@.str.14 = private unnamed_addr constant [27 x i8] c"%ux%u 24-bit OS2 BMP image\00", align 1
@.str.15 = private unnamed_addr constant [38 x i8] c"%ux%u 8-bit colormapped OS2 BMP image\00", align 1
@.str.16 = private unnamed_addr constant [24 x i8] c"GIF output got confused\00", align 1
@.str.17 = private unnamed_addr constant [22 x i8] c"Bogus GIF codesize %d\00", align 1
@.str.18 = private unnamed_addr constant [36 x i8] c"GIF output must be grayscale or RGB\00", align 1
@.str.19 = private unnamed_addr constant [27 x i8] c"Too few images in GIF file\00", align 1
@.str.20 = private unnamed_addr constant [15 x i8] c"Not a GIF file\00", align 1
@.str.21 = private unnamed_addr constant [19 x i8] c"%ux%ux%d GIF image\00", align 1
@.str.22 = private unnamed_addr constant [48 x i8] c"Warning: unexpected GIF version number '%c%c%c'\00", align 1
@.str.23 = private unnamed_addr constant [44 x i8] c"Ignoring GIF extension block of type 0x%02x\00", align 1
@.str.24 = private unnamed_addr constant [35 x i8] c"Caution: nonsquare pixels in input\00", align 1
@.str.25 = private unnamed_addr constant [25 x i8] c"Corrupt data in GIF file\00", align 1
@.str.26 = private unnamed_addr constant [40 x i8] c"Bogus char 0x%02x in GIF file, ignoring\00", align 1
@.str.27 = private unnamed_addr constant [27 x i8] c"Premature end of GIF image\00", align 1
@.str.28 = private unnamed_addr constant [20 x i8] c"Ran out of GIF bits\00", align 1
@.str.29 = private unnamed_addr constant [36 x i8] c"PPM output must be grayscale or RGB\00", align 1
@.str.30 = private unnamed_addr constant [28 x i8] c"Nonnumeric data in PPM file\00", align 1
@.str.31 = private unnamed_addr constant [15 x i8] c"Not a PPM file\00", align 1
@.str.32 = private unnamed_addr constant [16 x i8] c"%ux%u PGM image\00", align 1
@.str.33 = private unnamed_addr constant [21 x i8] c"%ux%u text PGM image\00", align 1
@.str.34 = private unnamed_addr constant [16 x i8] c"%ux%u PPM image\00", align 1
@.str.35 = private unnamed_addr constant [21 x i8] c"%ux%u text PPM image\00", align 1
@.str.36 = private unnamed_addr constant [34 x i8] c"Unsupported Targa colormap format\00", align 1
@.str.37 = private unnamed_addr constant [34 x i8] c"Invalid or unsupported Targa file\00", align 1
@.str.38 = private unnamed_addr constant [38 x i8] c"Targa output must be grayscale or RGB\00", align 1
@.str.39 = private unnamed_addr constant [22 x i8] c"%ux%u RGB Targa image\00", align 1
@.str.40 = private unnamed_addr constant [28 x i8] c"%ux%u grayscale Targa image\00", align 1
@.str.41 = private unnamed_addr constant [30 x i8] c"%ux%u colormapped Targa image\00", align 1
@.str.42 = private unnamed_addr constant [51 x i8] c"Color map file is invalid or of unsupported format\00", align 1
@.str.43 = private unnamed_addr constant [53 x i8] c"Output file format cannot handle %d colormap entries\00", align 1
@.str.44 = private unnamed_addr constant [14 x i8] c"ungetc failed\00", align 1
@.str.45 = private unnamed_addr constant [59 x i8] c"Unrecognized input file format --- perhaps you need -targa\00", align 1
@.str.46 = private unnamed_addr constant [31 x i8] c"Unsupported output file format\00", align 1
@.str.47 = private unnamed_addr constant [22 x i8] c"Comment, length %ld:\0A\00", align 1
@.str.49 = private unnamed_addr constant [3 x i8] c"\5C\5C\00", align 1
@.str.50 = private unnamed_addr constant [6 x i8] c"\5C%03o\00", align 1
@.str.51 = private unnamed_addr constant [4 x i8] c"bmp\00", align 1
@.str.52 = private unnamed_addr constant [7 x i8] c"colors\00", align 1
@.str.53 = private unnamed_addr constant [8 x i8] c"colours\00", align 1
@.str.54 = private unnamed_addr constant [9 x i8] c"quantize\00", align 1
@.str.55 = private unnamed_addr constant [9 x i8] c"quantise\00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.57 = private unnamed_addr constant [4 x i8] c"dct\00", align 1
@.str.58 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.59 = private unnamed_addr constant [5 x i8] c"fast\00", align 1
@.str.60 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.61 = private unnamed_addr constant [7 x i8] c"dither\00", align 1
@.str.62 = private unnamed_addr constant [3 x i8] c"fs\00", align 1
@.str.63 = private unnamed_addr constant [5 x i8] c"none\00", align 1
@.str.64 = private unnamed_addr constant [8 x i8] c"ordered\00", align 1
@.str.65 = private unnamed_addr constant [6 x i8] c"debug\00", align 1
@.str.66 = private unnamed_addr constant [8 x i8] c"verbose\00", align 1
@parse_switches.printed_version = internal unnamed_addr global i1 false
@.str.67 = private unnamed_addr constant [47 x i8] c"Independent JPEG Group's DJPEG, version %s\0A%s\0A\00", align 1
@.str.68 = private unnamed_addr constant [13 x i8] c"6a  7-Feb-96\00", align 1
@.str.69 = private unnamed_addr constant [35 x i8] c"Copyright (C) 1996, Thomas G. Lane\00", align 1
@.str.70 = private unnamed_addr constant [4 x i8] c"gif\00", align 1
@.str.71 = private unnamed_addr constant [10 x i8] c"grayscale\00", align 1
@.str.72 = private unnamed_addr constant [10 x i8] c"greyscale\00", align 1
@.str.73 = private unnamed_addr constant [4 x i8] c"map\00", align 1
@.str.74 = private unnamed_addr constant [10 x i8] c"maxmemory\00", align 1
@.str.75 = private unnamed_addr constant [6 x i8] c"%ld%c\00", align 1
@.str.76 = private unnamed_addr constant [9 x i8] c"nosmooth\00", align 1
@.str.77 = private unnamed_addr constant [8 x i8] c"onepass\00", align 1
@.str.78 = private unnamed_addr constant [4 x i8] c"os2\00", align 1
@.str.79 = private unnamed_addr constant [8 x i8] c"outfile\00", align 1
@.str.80 = private unnamed_addr constant [4 x i8] c"pnm\00", align 1
@.str.81 = private unnamed_addr constant [4 x i8] c"ppm\00", align 1
@.str.82 = private unnamed_addr constant [4 x i8] c"rle\00", align 1
@.str.83 = private unnamed_addr constant [6 x i8] c"scale\00", align 1
@.str.84 = private unnamed_addr constant [6 x i8] c"%d/%d\00", align 1
@.str.85 = private unnamed_addr constant [6 x i8] c"targa\00", align 1
@.str.86 = private unnamed_addr constant [22 x i8] c"usage: %s [switches] \00", align 1
@.str.87 = private unnamed_addr constant [13 x i8] c"[inputfile]\0A\00", align 1
@.str.88 = private unnamed_addr constant [38 x i8] c"Switches (names may be abbreviated):\0A\00", align 1
@.str.89 = private unnamed_addr constant [56 x i8] c"  -colors N      Reduce image to no more than N colors\0A\00", align 1
@.str.90 = private unnamed_addr constant [47 x i8] c"  -fast          Fast, low-quality processing\0A\00", align 1
@.str.91 = private unnamed_addr constant [41 x i8] c"  -grayscale     Force grayscale output\0A\00", align 1
@.str.92 = private unnamed_addr constant [62 x i8] c"  -scale M/N     Scale output image by fraction M/N, eg, 1/8\0A\00", align 1
@.str.93 = private unnamed_addr constant [61 x i8] c"  -bmp           Select BMP output format (Windows style)%s\0A\00", align 1
@.str.94 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.95 = private unnamed_addr constant [45 x i8] c"  -gif           Select GIF output format%s\0A\00", align 1
@.str.96 = private unnamed_addr constant [58 x i8] c"  -os2           Select BMP output format (OS/2 style)%s\0A\00", align 1
@.str.97 = private unnamed_addr constant [59 x i8] c"  -pnm           Select PBMPLUS (PPM/PGM) output format%s\0A\00", align 1
@.str.98 = private unnamed_addr constant [11 x i8] c" (default)\00", align 1
@.str.99 = private unnamed_addr constant [47 x i8] c"  -targa         Select Targa output format%s\0A\00", align 1
@.str.100 = private unnamed_addr constant [30 x i8] c"Switches for advanced users:\0A\00", align 1
@.str.101 = private unnamed_addr constant [43 x i8] c"  -dct int       Use integer DCT method%s\0A\00", align 1
@.str.102 = private unnamed_addr constant [57 x i8] c"  -dct fast      Use fast integer DCT (less accurate)%s\0A\00", align 1
@.str.103 = private unnamed_addr constant [50 x i8] c"  -dct float     Use floating-point DCT method%s\0A\00", align 1
@.str.104 = private unnamed_addr constant [46 x i8] c"  -dither fs     Use F-S dithering (default)\0A\00", align 1
@.str.105 = private unnamed_addr constant [54 x i8] c"  -dither none   Don't use dithering in quantization\0A\00", align 1
@.str.106 = private unnamed_addr constant [63 x i8] c"  -dither ordered  Use ordered dither (medium speed, quality)\0A\00", align 1
@.str.107 = private unnamed_addr constant [57 x i8] c"  -map FILE      Map to colors used in named image file\0A\00", align 1
@.str.108 = private unnamed_addr constant [52 x i8] c"  -nosmooth      Don't use high-quality upsampling\0A\00", align 1
@.str.109 = private unnamed_addr constant [62 x i8] c"  -onepass       Use 1-pass quantization (fast, low quality)\0A\00", align 1
@.str.110 = private unnamed_addr constant [52 x i8] c"  -maxmemory N   Maximum memory to use (in kbytes)\0A\00", align 1
@.str.111 = private unnamed_addr constant [47 x i8] c"  -outfile name  Specify name for output file\0A\00", align 1
@.str.112 = private unnamed_addr constant [44 x i8] c"  -verbose  or  -debug   Emit debug output\0A\00", align 1

; Function Attrs: noreturn nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) #0 {
entry:
  %cinfo = alloca %struct.jpeg_decompress_struct, align 8
  %jerr = alloca %struct.jpeg_error_mgr, align 8
  %0 = bitcast %struct.jpeg_decompress_struct* %cinfo to i8*
  call void @llvm.lifetime.start(i64 616, i8* %0) #7
  %1 = bitcast %struct.jpeg_error_mgr* %jerr to i8*
  call void @llvm.lifetime.start(i64 168, i8* %1) #7
  %2 = load i8*, i8** %argv, align 8, !tbaa !2
  store i8* %2, i8** @progname, align 8, !tbaa !2
  %cmp = icmp eq i8* %2, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load i8, i8* %2, align 1, !tbaa !6
  %cmp2 = icmp eq i8 %3, 0
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i8** @progname, align 8, !tbaa !2
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %call = call %struct.jpeg_error_mgr* @jpeg_std_error(%struct.jpeg_error_mgr* nonnull %jerr) #7
  %err = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0
  store %struct.jpeg_error_mgr* %call, %struct.jpeg_error_mgr** %err, align 8, !tbaa !7
  call void @jpeg_CreateDecompress(%struct.jpeg_decompress_struct* nonnull %cinfo, i32 61, i64 616) #7
  %addon_message_table = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %jerr, i64 0, i32 11
  store i8** getelementptr inbounds ([44 x i8*], [44 x i8*]* @cdjpeg_message_table, i64 0, i64 0), i8*** %addon_message_table, align 8, !tbaa !12
  %first_addon_message = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %jerr, i64 0, i32 12
  store i32 1000, i32* %first_addon_message, align 8, !tbaa !15
  %last_addon_message = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %jerr, i64 0, i32 13
  store i32 1043, i32* %last_addon_message, align 4, !tbaa !16
  call void @jpeg_set_marker_processor(%struct.jpeg_decompress_struct* nonnull %cinfo, i32 254, i32 (%struct.jpeg_decompress_struct*)* nonnull @COM_handler) #7
  %call4 = call fastcc i32 @parse_switches(%struct.jpeg_decompress_struct* nonnull %cinfo, i32 %argc, i8** nonnull %argv, i32 0)
  %sub = add nsw i32 %argc, -1
  %cmp5 = icmp slt i32 %call4, %sub
  br i1 %cmp5, label %if.then7, label %if.end9

if.then7:                                         ; preds = %if.end
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  %5 = load i8*, i8** @progname, align 8, !tbaa !2
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* nonnull getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i64 0, i64 0), i8* %5) #8
  call fastcc void @usage()
  unreachable

if.end9:                                          ; preds = %if.end
  %cmp10 = icmp slt i32 %call4, %argc
  br i1 %cmp10, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.end9
  %idxprom = sext i32 %call4 to i64
  %arrayidx13 = getelementptr inbounds i8*, i8** %argv, i64 %idxprom
  %6 = load i8*, i8** %arrayidx13, align 8, !tbaa !2
  %call14 = call %struct._IO_FILE* @fopen(i8* %6, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  %cmp15 = icmp eq %struct._IO_FILE* %call14, null
  br i1 %cmp15, label %if.then17, label %if.end23

if.then17:                                        ; preds = %if.then12
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  %8 = load i8*, i8** @progname, align 8, !tbaa !2
  %9 = load i8*, i8** %arrayidx13, align 8, !tbaa !2
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* nonnull getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i8* %8, i8* %9) #8
  call void @exit(i32 1) #9
  unreachable

if.else:                                          ; preds = %if.end9
  %call22 = call %struct._IO_FILE* @read_stdin() #7
  br label %if.end23

if.end23:                                         ; preds = %if.then12, %if.else
  %input_file.0 = phi %struct._IO_FILE* [ %call14, %if.then12 ], [ %call22, %if.else ]
  %10 = load i8*, i8** @outfilename, align 8, !tbaa !2
  %cmp24 = icmp eq i8* %10, null
  br i1 %cmp24, label %if.else33, label %if.then26

if.then26:                                        ; preds = %if.end23
  %call27 = call %struct._IO_FILE* @fopen(i8* nonnull %10, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0))
  %cmp28 = icmp eq %struct._IO_FILE* %call27, null
  br i1 %cmp28, label %if.then30, label %if.end35

if.then30:                                        ; preds = %if.then26
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  %12 = load i8*, i8** @progname, align 8, !tbaa !2
  %13 = load i8*, i8** @outfilename, align 8, !tbaa !2
  %call31 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* nonnull getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i8* %12, i8* %13) #8
  call void @exit(i32 1) #9
  unreachable

if.else33:                                        ; preds = %if.end23
  %call34 = call %struct._IO_FILE* @write_stdout() #7
  br label %if.end35

if.end35:                                         ; preds = %if.then26, %if.else33
  %output_file.0 = phi %struct._IO_FILE* [ %call27, %if.then26 ], [ %call34, %if.else33 ]
  call void @jpeg_stdio_src(%struct.jpeg_decompress_struct* nonnull %cinfo, %struct._IO_FILE* %input_file.0) #7
  %call36 = call i32 @jpeg_read_header(%struct.jpeg_decompress_struct* nonnull %cinfo, i32 1) #7
  %14 = call fastcc i32 @parse_switches(%struct.jpeg_decompress_struct* nonnull %cinfo, i32 %argc, i8** nonnull %argv, i32 1)
  %15 = load i32, i32* @requested_fmt, align 4, !tbaa !6
  switch i32 %15, label %sw.default [
    i32 0, label %sw.bb
    i32 2, label %sw.bb39
    i32 1, label %sw.bb41
    i32 3, label %sw.bb43
    i32 5, label %sw.bb45
  ]

sw.bb:                                            ; preds = %if.end35
  %call38 = call %struct.djpeg_dest_struct* @jinit_write_bmp(%struct.jpeg_decompress_struct* nonnull %cinfo, i32 0) #7
  br label %sw.epilog

sw.bb39:                                          ; preds = %if.end35
  %call40 = call %struct.djpeg_dest_struct* @jinit_write_bmp(%struct.jpeg_decompress_struct* nonnull %cinfo, i32 1) #7
  br label %sw.epilog

sw.bb41:                                          ; preds = %if.end35
  %call42 = call %struct.djpeg_dest_struct* @jinit_write_gif(%struct.jpeg_decompress_struct* nonnull %cinfo) #7
  br label %sw.epilog

sw.bb43:                                          ; preds = %if.end35
  %call44 = call %struct.djpeg_dest_struct* @jinit_write_ppm(%struct.jpeg_decompress_struct* nonnull %cinfo) #7
  br label %sw.epilog

sw.bb45:                                          ; preds = %if.end35
  %call46 = call %struct.djpeg_dest_struct* @jinit_write_targa(%struct.jpeg_decompress_struct* nonnull %cinfo) #7
  br label %sw.epilog

sw.default:                                       ; preds = %if.end35
  %16 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8, !tbaa !7
  %msg_code = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %16, i64 0, i32 5
  store i32 1042, i32* %msg_code, align 8, !tbaa !17
  %error_exit = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %16, i64 0, i32 0
  %17 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit, align 8, !tbaa !18
  %18 = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  call void %17(%struct.jpeg_common_struct* %18) #7
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb45, %sw.bb43, %sw.bb41, %sw.bb39, %sw.bb
  %dest_mgr.0 = phi %struct.djpeg_dest_struct* [ null, %sw.default ], [ %call46, %sw.bb45 ], [ %call44, %sw.bb43 ], [ %call42, %sw.bb41 ], [ %call40, %sw.bb39 ], [ %call38, %sw.bb ]
  %output_file49 = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dest_mgr.0, i64 0, i32 3
  store %struct._IO_FILE* %output_file.0, %struct._IO_FILE** %output_file49, align 8, !tbaa !19
  %call50 = call i32 @jpeg_start_decompress(%struct.jpeg_decompress_struct* nonnull %cinfo) #7
  %start_output = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dest_mgr.0, i64 0, i32 0
  %19 = load void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*)*, void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*)** %start_output, align 8, !tbaa !21
  call void %19(%struct.jpeg_decompress_struct* nonnull %cinfo, %struct.djpeg_dest_struct* %dest_mgr.0) #7
  %output_scanline = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 33
  %20 = load i32, i32* %output_scanline, align 8, !tbaa !22
  %output_height = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 27
  %21 = load i32, i32* %output_height, align 4, !tbaa !23
  %cmp5186 = icmp ult i32 %20, %21
  br i1 %cmp5186, label %while.body.lr.ph, label %while.end

while.body.lr.ph:                                 ; preds = %sw.epilog
  %buffer = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dest_mgr.0, i64 0, i32 4
  %buffer_height = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dest_mgr.0, i64 0, i32 5
  %put_pixel_rows = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dest_mgr.0, i64 0, i32 1
  br label %while.body

while.body:                                       ; preds = %while.body.lr.ph, %while.body
  %22 = load i8**, i8*** %buffer, align 8, !tbaa !24
  %23 = load i32, i32* %buffer_height, align 8, !tbaa !25
  %call53 = call i32 @jpeg_read_scanlines(%struct.jpeg_decompress_struct* nonnull %cinfo, i8** %22, i32 %23) #7
  %24 = load void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*, i32)*, void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*, i32)** %put_pixel_rows, align 8, !tbaa !26
  call void %24(%struct.jpeg_decompress_struct* nonnull %cinfo, %struct.djpeg_dest_struct* %dest_mgr.0, i32 %call53) #7
  %25 = load i32, i32* %output_scanline, align 8, !tbaa !22
  %26 = load i32, i32* %output_height, align 4, !tbaa !23
  %cmp51 = icmp ult i32 %25, %26
  br i1 %cmp51, label %while.body, label %while.end.loopexit

while.end.loopexit:                               ; preds = %while.body
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %sw.epilog
  %finish_output = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dest_mgr.0, i64 0, i32 2
  %27 = load void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*)*, void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*)** %finish_output, align 8, !tbaa !27
  call void %27(%struct.jpeg_decompress_struct* nonnull %cinfo, %struct.djpeg_dest_struct* %dest_mgr.0) #7
  %call54 = call i32 @jpeg_finish_decompress(%struct.jpeg_decompress_struct* nonnull %cinfo) #7
  call void @jpeg_destroy_decompress(%struct.jpeg_decompress_struct* nonnull %cinfo) #7
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !tbaa !2
  %cmp55 = icmp eq %struct._IO_FILE* %input_file.0, %28
  br i1 %cmp55, label %if.end59, label %if.then57

if.then57:                                        ; preds = %while.end
  %call58 = call i32 @fclose(%struct._IO_FILE* %input_file.0)
  br label %if.end59

if.end59:                                         ; preds = %while.end, %if.then57
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !2
  %cmp60 = icmp eq %struct._IO_FILE* %output_file.0, %29
  br i1 %cmp60, label %if.end64, label %if.then62

if.then62:                                        ; preds = %if.end59
  %call63 = call i32 @fclose(%struct._IO_FILE* %output_file.0)
  br label %if.end64

if.end64:                                         ; preds = %if.end59, %if.then62
  %num_warnings = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %jerr, i64 0, i32 8
  %30 = load i64, i64* %num_warnings, align 8, !tbaa !28
  %tobool = icmp ne i64 %30, 0
  %cond = select i1 %tobool, i32 2, i32 0
  call void @exit(i32 %cond) #9
  unreachable
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

declare %struct.jpeg_error_mgr* @jpeg_std_error(%struct.jpeg_error_mgr*) #2

declare void @jpeg_CreateDecompress(%struct.jpeg_decompress_struct*, i32, i64) #2

declare void @jpeg_set_marker_processor(%struct.jpeg_decompress_struct*, i32, i32 (%struct.jpeg_decompress_struct*)*) #2

; Function Attrs: nounwind uwtable
define internal i32 @COM_handler(%struct.jpeg_decompress_struct* %cinfo) #3 {
entry:
  %err = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0
  %0 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8, !tbaa !7
  %trace_level = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %0, i64 0, i32 7
  %1 = load i32, i32* %trace_level, align 4, !tbaa !29
  %cmp = icmp sgt i32 %1, 0
  %src.i = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 5
  %2 = load %struct.jpeg_source_mgr*, %struct.jpeg_source_mgr** %src.i, align 8, !tbaa !30
  %bytes_in_buffer.i = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %2, i64 0, i32 1
  %3 = load i64, i64* %bytes_in_buffer.i, align 8, !tbaa !31
  %cmp.i = icmp eq i64 %3, 0
  br i1 %cmp.i, label %if.then.i, label %jpeg_getc.exit

if.then.i:                                        ; preds = %entry
  %fill_input_buffer.i = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %2, i64 0, i32 3
  %4 = load i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)** %fill_input_buffer.i, align 8, !tbaa !33
  %call.i = tail call i32 %4(%struct.jpeg_decompress_struct* nonnull %cinfo) #7
  %tobool.i = icmp eq i32 %call.i, 0
  br i1 %tobool.i, label %if.then1.i, label %jpeg_getc.exit

if.then1.i:                                       ; preds = %if.then.i
  %5 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8, !tbaa !7
  %msg_code.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %5, i64 0, i32 5
  store i32 22, i32* %msg_code.i, align 8, !tbaa !17
  %error_exit.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %5, i64 0, i32 0
  %6 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit.i, align 8, !tbaa !18
  %7 = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  tail call void %6(%struct.jpeg_common_struct* %7) #7
  br label %jpeg_getc.exit

jpeg_getc.exit:                                   ; preds = %entry, %if.then.i, %if.then1.i
  %8 = load i64, i64* %bytes_in_buffer.i, align 8, !tbaa !31
  %dec.i = add i64 %8, -1
  store i64 %dec.i, i64* %bytes_in_buffer.i, align 8, !tbaa !31
  %next_input_byte.i = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %2, i64 0, i32 0
  %9 = load i8*, i8** %next_input_byte.i, align 8, !tbaa !34
  %incdec.ptr.i = getelementptr inbounds i8, i8* %9, i64 1
  store i8* %incdec.ptr.i, i8** %next_input_byte.i, align 8, !tbaa !34
  %10 = load i8, i8* %9, align 1, !tbaa !6
  %conv.i = zext i8 %10 to i64
  %shl = shl nuw nsw i64 %conv.i, 8
  %11 = load %struct.jpeg_source_mgr*, %struct.jpeg_source_mgr** %src.i, align 8, !tbaa !30
  %bytes_in_buffer.i69 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %11, i64 0, i32 1
  %12 = load i64, i64* %bytes_in_buffer.i69, align 8, !tbaa !31
  %cmp.i70 = icmp eq i64 %12, 0
  br i1 %cmp.i70, label %if.then.i74, label %jpeg_getc.exit83

if.then.i74:                                      ; preds = %jpeg_getc.exit
  %fill_input_buffer.i71 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %11, i64 0, i32 3
  %13 = load i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)** %fill_input_buffer.i71, align 8, !tbaa !33
  %call.i72 = tail call i32 %13(%struct.jpeg_decompress_struct* nonnull %cinfo) #7
  %tobool.i73 = icmp eq i32 %call.i72, 0
  br i1 %tobool.i73, label %if.then1.i78, label %jpeg_getc.exit83

if.then1.i78:                                     ; preds = %if.then.i74
  %14 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8, !tbaa !7
  %msg_code.i76 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %14, i64 0, i32 5
  store i32 22, i32* %msg_code.i76, align 8, !tbaa !17
  %error_exit.i77 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %14, i64 0, i32 0
  %15 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit.i77, align 8, !tbaa !18
  %16 = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  tail call void %15(%struct.jpeg_common_struct* %16) #7
  br label %jpeg_getc.exit83

jpeg_getc.exit83:                                 ; preds = %jpeg_getc.exit, %if.then.i74, %if.then1.i78
  %17 = load i64, i64* %bytes_in_buffer.i69, align 8, !tbaa !31
  %dec.i79 = add i64 %17, -1
  store i64 %dec.i79, i64* %bytes_in_buffer.i69, align 8, !tbaa !31
  %next_input_byte.i80 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %11, i64 0, i32 0
  %18 = load i8*, i8** %next_input_byte.i80, align 8, !tbaa !34
  %incdec.ptr.i81 = getelementptr inbounds i8, i8* %18, i64 1
  store i8* %incdec.ptr.i81, i8** %next_input_byte.i80, align 8, !tbaa !34
  %19 = load i8, i8* %18, align 1, !tbaa !6
  %conv3 = zext i8 %19 to i64
  %add = or i64 %conv3, %shl
  br i1 %cmp, label %while.cond.outer.split.us.us.preheader, label %while.cond.preheader125

while.cond.preheader125:                          ; preds = %jpeg_getc.exit83
  %20 = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  %cmp5134 = icmp ugt i64 %add, 2
  br i1 %cmp5134, label %while.body.lr.ph, label %while.end

while.body.lr.ph:                                 ; preds = %while.cond.preheader125
  %dec133 = add nsw i64 %add, -3
  br label %while.body

while.cond.outer.split.us.us.preheader:           ; preds = %jpeg_getc.exit83
  %sub = add nsw i64 %add, -2
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  %call4 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.47, i64 0, i64 0), i64 %sub) #8
  %22 = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  %cmp5.us.us130 = icmp ugt i64 %add, 2
  br i1 %cmp5.us.us130, label %while.body.us.us.lr.ph, label %while.end

while.body.us.us.lr.ph:                           ; preds = %while.cond.outer.split.us.us.preheader
  %dec.us.us129 = add nsw i64 %add, -3
  br label %while.body.us.us

if.then25.us:                                     ; preds = %jpeg_getc.exit99.us.us
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  %24 = tail call i64 @fwrite(i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.49, i64 0, i64 0), i64 2, i64 1, %struct._IO_FILE* %23) #8
  br label %while.cond.outer.split.us.us.backedge

if.then16.us:                                     ; preds = %jpeg_getc.exit99.us.us
  %cmp17.us = icmp eq i32 %lastch.0.ph.us131, 13
  br i1 %cmp17.us, label %while.cond.outer.split.us.us.backedge, label %if.then19.us

if.then19.us:                                     ; preds = %if.then16.us
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  %fputc64.us = tail call i32 @fputc(i32 10, %struct._IO_FILE* %25) #8
  br label %while.cond.outer.split.us.us.backedge

if.then12.us:                                     ; preds = %jpeg_getc.exit99.us.us
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  %fputc67.us = tail call i32 @fputc(i32 10, %struct._IO_FILE* %26) #8
  br label %while.cond.outer.split.us.us.backedge

if.else27.us:                                     ; preds = %jpeg_getc.exit99.us.us
  %idxprom.us = zext i8 %37 to i64
  %call28.us = tail call i16** @__ctype_b_loc() #10
  %27 = load i16*, i16** %call28.us, align 8, !tbaa !2
  %arrayidx.us = getelementptr inbounds i16, i16* %27, i64 %idxprom.us
  %28 = load i16, i16* %arrayidx.us, align 2, !tbaa !35
  %and.us = and i16 %28, 16384
  %tobool30.us = icmp eq i16 %and.us, 0
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  br i1 %tobool30.us, label %if.else33.us, label %if.then31.us

if.then31.us:                                     ; preds = %if.else27.us
  %call32.us = tail call i32 @_IO_putc(i32 %conv.i98.le.us, %struct._IO_FILE* %29)
  br label %while.cond.outer.split.us.us.backedge

if.else33.us:                                     ; preds = %if.else27.us
  %call34.us = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.50, i64 0, i64 0), i32 %conv.i98.le.us) #8
  br label %while.cond.outer.split.us.us.backedge

while.cond.outer.split.us.us.backedge:            ; preds = %if.else33.us, %if.then31.us, %if.then12.us, %if.then19.us, %if.then16.us, %if.then25.us
  %lastch.0.ph.us.be = phi i32 [ %conv.i98.le.us, %if.else33.us ], [ %conv.i98.le.us, %if.then31.us ], [ 13, %if.then12.us ], [ 10, %if.then19.us ], [ 10, %if.then16.us ], [ 92, %if.then25.us ]
  %dec.us.us = add nsw i64 %dec.us.us132, -1
  %cmp5.us.us = icmp sgt i64 %dec.us.us132, 0
  br i1 %cmp5.us.us, label %while.body.us.us, label %while.end.loopexit

while.body.us.us:                                 ; preds = %while.body.us.us.lr.ph, %while.cond.outer.split.us.us.backedge
  %dec.us.us132 = phi i64 [ %dec.us.us129, %while.body.us.us.lr.ph ], [ %dec.us.us, %while.cond.outer.split.us.us.backedge ]
  %lastch.0.ph.us131 = phi i32 [ 0, %while.body.us.us.lr.ph ], [ %lastch.0.ph.us.be, %while.cond.outer.split.us.us.backedge ]
  %30 = load %struct.jpeg_source_mgr*, %struct.jpeg_source_mgr** %src.i, align 8, !tbaa !30
  %bytes_in_buffer.i85.us.us = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %30, i64 0, i32 1
  %31 = load i64, i64* %bytes_in_buffer.i85.us.us, align 8, !tbaa !31
  %cmp.i86.us.us = icmp eq i64 %31, 0
  br i1 %cmp.i86.us.us, label %if.then.i90.us.us, label %jpeg_getc.exit99.us.us

if.then.i90.us.us:                                ; preds = %while.body.us.us
  %fill_input_buffer.i87.us.us = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %30, i64 0, i32 3
  %32 = load i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)** %fill_input_buffer.i87.us.us, align 8, !tbaa !33
  %call.i88.us.us = tail call i32 %32(%struct.jpeg_decompress_struct* nonnull %cinfo) #7
  %tobool.i89.us.us = icmp eq i32 %call.i88.us.us, 0
  br i1 %tobool.i89.us.us, label %if.then1.i94.us.us, label %jpeg_getc.exit99.us.us

if.then1.i94.us.us:                               ; preds = %if.then.i90.us.us
  %33 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8, !tbaa !7
  %msg_code.i92.us.us = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %33, i64 0, i32 5
  store i32 22, i32* %msg_code.i92.us.us, align 8, !tbaa !17
  %error_exit.i93.us.us = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %33, i64 0, i32 0
  %34 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit.i93.us.us, align 8, !tbaa !18
  tail call void %34(%struct.jpeg_common_struct* nonnull %22) #7
  br label %jpeg_getc.exit99.us.us

jpeg_getc.exit99.us.us:                           ; preds = %if.then1.i94.us.us, %if.then.i90.us.us, %while.body.us.us
  %35 = load i64, i64* %bytes_in_buffer.i85.us.us, align 8, !tbaa !31
  %dec.i95.us.us = add i64 %35, -1
  store i64 %dec.i95.us.us, i64* %bytes_in_buffer.i85.us.us, align 8, !tbaa !31
  %next_input_byte.i96.us.us = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %30, i64 0, i32 0
  %36 = load i8*, i8** %next_input_byte.i96.us.us, align 8, !tbaa !34
  %incdec.ptr.i97.us.us = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %incdec.ptr.i97.us.us, i8** %next_input_byte.i96.us.us, align 8, !tbaa !34
  %37 = load i8, i8* %36, align 1, !tbaa !6
  %conv.i98.le.us = zext i8 %37 to i32
  switch i32 %conv.i98.le.us, label %if.else27.us [
    i32 13, label %if.then12.us
    i32 10, label %if.then16.us
    i32 92, label %if.then25.us
  ]

while.body:                                       ; preds = %while.body.lr.ph, %jpeg_getc.exit99
  %dec135 = phi i64 [ %dec133, %while.body.lr.ph ], [ %dec, %jpeg_getc.exit99 ]
  %38 = load %struct.jpeg_source_mgr*, %struct.jpeg_source_mgr** %src.i, align 8, !tbaa !30
  %bytes_in_buffer.i85 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %38, i64 0, i32 1
  %39 = load i64, i64* %bytes_in_buffer.i85, align 8, !tbaa !31
  %cmp.i86 = icmp eq i64 %39, 0
  br i1 %cmp.i86, label %if.then.i90, label %jpeg_getc.exit99

if.then.i90:                                      ; preds = %while.body
  %fill_input_buffer.i87 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %38, i64 0, i32 3
  %40 = load i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)** %fill_input_buffer.i87, align 8, !tbaa !33
  %call.i88 = tail call i32 %40(%struct.jpeg_decompress_struct* nonnull %cinfo) #7
  %tobool.i89 = icmp eq i32 %call.i88, 0
  br i1 %tobool.i89, label %if.then1.i94, label %jpeg_getc.exit99

if.then1.i94:                                     ; preds = %if.then.i90
  %41 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8, !tbaa !7
  %msg_code.i92 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %41, i64 0, i32 5
  store i32 22, i32* %msg_code.i92, align 8, !tbaa !17
  %error_exit.i93 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %41, i64 0, i32 0
  %42 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit.i93, align 8, !tbaa !18
  tail call void %42(%struct.jpeg_common_struct* nonnull %20) #7
  br label %jpeg_getc.exit99

jpeg_getc.exit99:                                 ; preds = %while.body, %if.then.i90, %if.then1.i94
  %43 = load i64, i64* %bytes_in_buffer.i85, align 8, !tbaa !31
  %dec.i95 = add i64 %43, -1
  store i64 %dec.i95, i64* %bytes_in_buffer.i85, align 8, !tbaa !31
  %next_input_byte.i96 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %38, i64 0, i32 0
  %44 = load i8*, i8** %next_input_byte.i96, align 8, !tbaa !34
  %incdec.ptr.i97 = getelementptr inbounds i8, i8* %44, i64 1
  store i8* %incdec.ptr.i97, i8** %next_input_byte.i96, align 8, !tbaa !34
  %dec = add nsw i64 %dec135, -1
  %cmp5 = icmp sgt i64 %dec135, 0
  br i1 %cmp5, label %while.body, label %while.end.loopexit136

while.end.loopexit:                               ; preds = %while.cond.outer.split.us.us.backedge
  br label %while.end

while.end.loopexit136:                            ; preds = %jpeg_getc.exit99
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit136, %while.end.loopexit, %while.cond.preheader125, %while.cond.outer.split.us.us.preheader
  br i1 %cmp, label %if.then41, label %if.end43

if.then41:                                        ; preds = %while.end
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  %fputc = tail call i32 @fputc(i32 10, %struct._IO_FILE* %45) #8
  br label %if.end43

if.end43:                                         ; preds = %if.then41, %while.end
  ret i32 1
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @parse_switches(%struct.jpeg_decompress_struct* %cinfo, i32 %argc, i8** nocapture readonly %argv, i32 %for_real) unnamed_addr #3 {
entry:
  %val = alloca i32, align 4
  %lval = alloca i64, align 8
  %ch = alloca i8, align 1
  store i32 3, i32* @requested_fmt, align 4, !tbaa !6
  store i8* null, i8** @outfilename, align 8, !tbaa !2
  %err = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0
  %0 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8, !tbaa !7
  %trace_level = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %0, i64 0, i32 7
  store i32 0, i32* %trace_level, align 4, !tbaa !29
  %cmp15 = icmp sgt i32 %argc, 1
  br i1 %cmp15, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %scale_num = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 11
  %scale_denom = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 12
  %two_pass_quantize189 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 21
  %do_fancy_upsampling184 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 17
  %1 = bitcast i64* %lval to i8*
  %mem = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 1
  %tobool139 = icmp eq i32 %for_real, 0
  %quantize_colors152 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 19
  %out_color_space = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 10
  %dither_mode112 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 20
  %desired_number_of_colors116 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 22
  %dct_method118 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 16
  %2 = bitcast i32* %val to i8*
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc
  %argn.016 = phi i32 [ 1, %for.body.lr.ph ], [ %inc255, %for.inc ]
  %idxprom = sext i32 %argn.016 to i64
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 %idxprom
  %3 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %4 = load i8, i8* %3, align 1, !tbaa !6
  %cmp1 = icmp eq i8 %4, 45
  br i1 %cmp1, label %if.end6, label %if.then

if.then:                                          ; preds = %for.body
  %cmp3 = icmp slt i32 %argn.016, 1
  br i1 %cmp3, label %if.then5, label %for.end.loopexit

if.then5:                                         ; preds = %if.then
  store i8* null, i8** @outfilename, align 8, !tbaa !2
  br label %for.inc

if.end6:                                          ; preds = %for.body
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i64 1
  %call = call i32 @keymatch(i8* %incdec.ptr, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.51, i64 0, i64 0), i32 1) #7
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %if.else, label %if.then7

if.then7:                                         ; preds = %if.end6
  store i32 0, i32* @requested_fmt, align 4, !tbaa !6
  br label %for.inc

if.else:                                          ; preds = %if.end6
  %call8 = call i32 @keymatch(i8* %incdec.ptr, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.52, i64 0, i64 0), i32 1) #7
  %tobool9 = icmp eq i32 %call8, 0
  br i1 %tobool9, label %lor.lhs.false, label %if.then18

lor.lhs.false:                                    ; preds = %if.else
  %call10 = call i32 @keymatch(i8* %incdec.ptr, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.53, i64 0, i64 0), i32 1) #7
  %tobool11 = icmp eq i32 %call10, 0
  br i1 %tobool11, label %lor.lhs.false12, label %if.then18

lor.lhs.false12:                                  ; preds = %lor.lhs.false
  %call13 = call i32 @keymatch(i8* %incdec.ptr, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.54, i64 0, i64 0), i32 1) #7
  %tobool14 = icmp eq i32 %call13, 0
  br i1 %tobool14, label %lor.lhs.false15, label %if.then18

lor.lhs.false15:                                  ; preds = %lor.lhs.false12
  %call16 = call i32 @keymatch(i8* %incdec.ptr, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.55, i64 0, i64 0), i32 1) #7
  %tobool17 = icmp eq i32 %call16, 0
  br i1 %tobool17, label %if.else30, label %if.then18

if.then18:                                        ; preds = %lor.lhs.false15, %lor.lhs.false12, %lor.lhs.false, %if.else
  call void @llvm.lifetime.start(i64 4, i8* %2) #7
  %inc = add nsw i32 %argn.016, 1
  %cmp19 = icmp slt i32 %inc, %argc
  br i1 %cmp19, label %if.end22, label %if.then21

if.then21:                                        ; preds = %if.then18
  call fastcc void @usage()
  unreachable

if.end22:                                         ; preds = %if.then18
  %idxprom23 = sext i32 %inc to i64
  %arrayidx24 = getelementptr inbounds i8*, i8** %argv, i64 %idxprom23
  %5 = load i8*, i8** %arrayidx24, align 8, !tbaa !2
  %call25 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %5, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0), i32* nonnull %val) #7
  %cmp26 = icmp eq i32 %call25, 1
  br i1 %cmp26, label %if.end29, label %if.then28

if.then28:                                        ; preds = %if.end22
  call fastcc void @usage()
  unreachable

if.end29:                                         ; preds = %if.end22
  %6 = load i32, i32* %val, align 4, !tbaa !36
  store i32 %6, i32* %desired_number_of_colors116, align 8, !tbaa !37
  store i32 1, i32* %quantize_colors152, align 4, !tbaa !38
  call void @llvm.lifetime.end(i64 4, i8* %2) #7
  br label %for.inc

if.else30:                                        ; preds = %lor.lhs.false15
  %call31 = call i32 @keymatch(i8* %incdec.ptr, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.57, i64 0, i64 0), i32 2) #7
  %tobool32 = icmp eq i32 %call31, 0
  br i1 %tobool32, label %if.else62, label %if.then33

if.then33:                                        ; preds = %if.else30
  %inc34 = add nsw i32 %argn.016, 1
  %cmp35 = icmp slt i32 %inc34, %argc
  br i1 %cmp35, label %if.end38, label %if.then37

if.then37:                                        ; preds = %if.then33
  call fastcc void @usage()
  unreachable

if.end38:                                         ; preds = %if.then33
  %idxprom39 = sext i32 %inc34 to i64
  %arrayidx40 = getelementptr inbounds i8*, i8** %argv, i64 %idxprom39
  %7 = load i8*, i8** %arrayidx40, align 8, !tbaa !2
  %call41 = call i32 @keymatch(i8* %7, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.58, i64 0, i64 0), i32 1) #7
  %tobool42 = icmp eq i32 %call41, 0
  br i1 %tobool42, label %if.else44, label %if.then43

if.then43:                                        ; preds = %if.end38
  store i32 0, i32* %dct_method118, align 8, !tbaa !39
  br label %for.inc

if.else44:                                        ; preds = %if.end38
  %8 = load i8*, i8** %arrayidx40, align 8, !tbaa !2
  %call47 = call i32 @keymatch(i8* %8, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.59, i64 0, i64 0), i32 2) #7
  %tobool48 = icmp eq i32 %call47, 0
  br i1 %tobool48, label %if.else51, label %if.then49

if.then49:                                        ; preds = %if.else44
  store i32 1, i32* %dct_method118, align 8, !tbaa !39
  br label %for.inc

if.else51:                                        ; preds = %if.else44
  %9 = load i8*, i8** %arrayidx40, align 8, !tbaa !2
  %call54 = call i32 @keymatch(i8* %9, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.60, i64 0, i64 0), i32 2) #7
  %tobool55 = icmp eq i32 %call54, 0
  br i1 %tobool55, label %if.else58, label %if.then56

if.then56:                                        ; preds = %if.else51
  store i32 2, i32* %dct_method118, align 8, !tbaa !39
  br label %for.inc

if.else58:                                        ; preds = %if.else51
  call fastcc void @usage()
  unreachable

if.else62:                                        ; preds = %if.else30
  %call63 = call i32 @keymatch(i8* %incdec.ptr, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.61, i64 0, i64 0), i32 2) #7
  %tobool64 = icmp eq i32 %call63, 0
  br i1 %tobool64, label %if.else94, label %if.then65

if.then65:                                        ; preds = %if.else62
  %inc66 = add nsw i32 %argn.016, 1
  %cmp67 = icmp slt i32 %inc66, %argc
  br i1 %cmp67, label %if.end70, label %if.then69

if.then69:                                        ; preds = %if.then65
  call fastcc void @usage()
  unreachable

if.end70:                                         ; preds = %if.then65
  %idxprom71 = sext i32 %inc66 to i64
  %arrayidx72 = getelementptr inbounds i8*, i8** %argv, i64 %idxprom71
  %10 = load i8*, i8** %arrayidx72, align 8, !tbaa !2
  %call73 = call i32 @keymatch(i8* %10, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.62, i64 0, i64 0), i32 2) #7
  %tobool74 = icmp eq i32 %call73, 0
  br i1 %tobool74, label %if.else76, label %if.then75

if.then75:                                        ; preds = %if.end70
  store i32 2, i32* %dither_mode112, align 8, !tbaa !40
  br label %for.inc

if.else76:                                        ; preds = %if.end70
  %11 = load i8*, i8** %arrayidx72, align 8, !tbaa !2
  %call79 = call i32 @keymatch(i8* %11, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.63, i64 0, i64 0), i32 2) #7
  %tobool80 = icmp eq i32 %call79, 0
  br i1 %tobool80, label %if.else83, label %if.then81

if.then81:                                        ; preds = %if.else76
  store i32 0, i32* %dither_mode112, align 8, !tbaa !40
  br label %for.inc

if.else83:                                        ; preds = %if.else76
  %12 = load i8*, i8** %arrayidx72, align 8, !tbaa !2
  %call86 = call i32 @keymatch(i8* %12, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.64, i64 0, i64 0), i32 2) #7
  %tobool87 = icmp eq i32 %call86, 0
  br i1 %tobool87, label %if.else90, label %if.then88

if.then88:                                        ; preds = %if.else83
  store i32 1, i32* %dither_mode112, align 8, !tbaa !40
  br label %for.inc

if.else90:                                        ; preds = %if.else83
  call fastcc void @usage()
  unreachable

if.else94:                                        ; preds = %if.else62
  %call95 = call i32 @keymatch(i8* %incdec.ptr, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.65, i64 0, i64 0), i32 1) #7
  %tobool96 = icmp eq i32 %call95, 0
  br i1 %tobool96, label %lor.lhs.false97, label %if.then100

lor.lhs.false97:                                  ; preds = %if.else94
  %call98 = call i32 @keymatch(i8* %incdec.ptr, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.66, i64 0, i64 0), i32 1) #7
  %tobool99 = icmp eq i32 %call98, 0
  br i1 %tobool99, label %if.else108, label %if.then100

if.then100:                                       ; preds = %lor.lhs.false97, %if.else94
  %.b = load i1, i1* @parse_switches.printed_version, align 1
  br i1 %.b, label %if.end104, label %if.then102

if.then102:                                       ; preds = %if.then100
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  %call103 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* nonnull getelementptr inbounds ([47 x i8], [47 x i8]* @.str.67, i64 0, i64 0), i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.68, i64 0, i64 0), i8* nonnull getelementptr inbounds ([35 x i8], [35 x i8]* @.str.69, i64 0, i64 0)) #8
  store i1 true, i1* @parse_switches.printed_version, align 1
  br label %if.end104

if.end104:                                        ; preds = %if.then102, %if.then100
  %14 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8, !tbaa !7
  %trace_level106 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %14, i64 0, i32 7
  %15 = load i32, i32* %trace_level106, align 4, !tbaa !29
  %inc107 = add nsw i32 %15, 1
  store i32 %inc107, i32* %trace_level106, align 4, !tbaa !29
  br label %for.inc

if.else108:                                       ; preds = %lor.lhs.false97
  %call109 = call i32 @keymatch(i8* %incdec.ptr, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.59, i64 0, i64 0), i32 1) #7
  %tobool110 = icmp eq i32 %call109, 0
  br i1 %tobool110, label %if.else119, label %if.then111

if.then111:                                       ; preds = %if.else108
  store i32 0, i32* %two_pass_quantize189, align 4, !tbaa !41
  store i32 1, i32* %dither_mode112, align 8, !tbaa !40
  %16 = load i32, i32* %quantize_colors152, align 4, !tbaa !38
  %tobool114 = icmp eq i32 %16, 0
  br i1 %tobool114, label %if.then115, label %if.end117

if.then115:                                       ; preds = %if.then111
  store i32 216, i32* %desired_number_of_colors116, align 8, !tbaa !37
  br label %if.end117

if.end117:                                        ; preds = %if.then111, %if.then115
  store i32 1, i32* %dct_method118, align 8, !tbaa !39
  store i32 0, i32* %do_fancy_upsampling184, align 4, !tbaa !42
  br label %for.inc

if.else119:                                       ; preds = %if.else108
  %call120 = call i32 @keymatch(i8* %incdec.ptr, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.70, i64 0, i64 0), i32 1) #7
  %tobool121 = icmp eq i32 %call120, 0
  br i1 %tobool121, label %if.else123, label %if.then122

if.then122:                                       ; preds = %if.else119
  store i32 1, i32* @requested_fmt, align 4, !tbaa !6
  br label %for.inc

if.else123:                                       ; preds = %if.else119
  %call124 = call i32 @keymatch(i8* %incdec.ptr, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.71, i64 0, i64 0), i32 2) #7
  %tobool125 = icmp eq i32 %call124, 0
  br i1 %tobool125, label %lor.lhs.false126, label %if.then129

lor.lhs.false126:                                 ; preds = %if.else123
  %call127 = call i32 @keymatch(i8* %incdec.ptr, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.72, i64 0, i64 0), i32 2) #7
  %tobool128 = icmp eq i32 %call127, 0
  br i1 %tobool128, label %if.else130, label %if.then129

if.then129:                                       ; preds = %lor.lhs.false126, %if.else123
  store i32 1, i32* %out_color_space, align 8, !tbaa !43
  br label %for.inc

if.else130:                                       ; preds = %lor.lhs.false126
  %call131 = call i32 @keymatch(i8* %incdec.ptr, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.73, i64 0, i64 0), i32 3) #7
  %tobool132 = icmp eq i32 %call131, 0
  br i1 %tobool132, label %if.else154, label %if.then133

if.then133:                                       ; preds = %if.else130
  %inc134 = add nsw i32 %argn.016, 1
  %cmp135 = icmp slt i32 %inc134, %argc
  br i1 %cmp135, label %if.end138, label %if.then137

if.then137:                                       ; preds = %if.then133
  call fastcc void @usage()
  unreachable

if.end138:                                        ; preds = %if.then133
  br i1 %tobool139, label %for.inc, label %if.then140

if.then140:                                       ; preds = %if.end138
  %idxprom141 = sext i32 %inc134 to i64
  %arrayidx142 = getelementptr inbounds i8*, i8** %argv, i64 %idxprom141
  %17 = load i8*, i8** %arrayidx142, align 8, !tbaa !2
  %call143 = call %struct._IO_FILE* @fopen(i8* %17, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  %cmp144 = icmp eq %struct._IO_FILE* %call143, null
  br i1 %cmp144, label %if.then146, label %if.end150

if.then146:                                       ; preds = %if.then140
  %arrayidx142.lcssa = phi i8** [ %arrayidx142, %if.then140 ]
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  %19 = load i8*, i8** @progname, align 8, !tbaa !2
  %20 = load i8*, i8** %arrayidx142.lcssa, align 8, !tbaa !2
  %call149 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* nonnull getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i8* %19, i8* %20) #8
  call void @exit(i32 1) #9
  unreachable

if.end150:                                        ; preds = %if.then140
  call void @read_color_map(%struct.jpeg_decompress_struct* %cinfo, %struct._IO_FILE* nonnull %call143) #7
  %call151 = call i32 @fclose(%struct._IO_FILE* nonnull %call143)
  store i32 1, i32* %quantize_colors152, align 4, !tbaa !38
  br label %for.inc

if.else154:                                       ; preds = %if.else130
  %call155 = call i32 @keymatch(i8* %incdec.ptr, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.74, i64 0, i64 0), i32 3) #7
  %tobool156 = icmp eq i32 %call155, 0
  br i1 %tobool156, label %if.else180, label %if.then157

if.then157:                                       ; preds = %if.else154
  call void @llvm.lifetime.start(i64 8, i8* %1) #7
  call void @llvm.lifetime.start(i64 1, i8* nonnull %ch) #7
  store i8 120, i8* %ch, align 1, !tbaa !6
  %inc158 = add nsw i32 %argn.016, 1
  %cmp159 = icmp slt i32 %inc158, %argc
  br i1 %cmp159, label %if.end162, label %if.then161

if.then161:                                       ; preds = %if.then157
  call fastcc void @usage()
  unreachable

if.end162:                                        ; preds = %if.then157
  %idxprom163 = sext i32 %inc158 to i64
  %arrayidx164 = getelementptr inbounds i8*, i8** %argv, i64 %idxprom163
  %21 = load i8*, i8** %arrayidx164, align 8, !tbaa !2
  %call165 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %21, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.75, i64 0, i64 0), i64* nonnull %lval, i8* nonnull %ch) #7
  %cmp166 = icmp slt i32 %call165, 1
  br i1 %cmp166, label %if.then168, label %if.end169

if.then168:                                       ; preds = %if.end162
  call fastcc void @usage()
  unreachable

if.end169:                                        ; preds = %if.end162
  %22 = load i8, i8* %ch, align 1, !tbaa !6
  switch i8 %22, label %if.end169.if.end178_crit_edge [
    i8 109, label %if.then177
    i8 77, label %if.then177
  ]

if.end169.if.end178_crit_edge:                    ; preds = %if.end169
  %.pre = load i64, i64* %lval, align 8, !tbaa !44
  br label %if.end178

if.then177:                                       ; preds = %if.end169, %if.end169
  %23 = load i64, i64* %lval, align 8, !tbaa !44
  %mul = mul nsw i64 %23, 1000
  store i64 %mul, i64* %lval, align 8, !tbaa !44
  br label %if.end178

if.end178:                                        ; preds = %if.end169.if.end178_crit_edge, %if.then177
  %24 = phi i64 [ %.pre, %if.end169.if.end178_crit_edge ], [ %mul, %if.then177 ]
  %mul179 = mul nsw i64 %24, 1000
  %25 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !45
  %max_memory_to_use = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %25, i64 0, i32 11
  store i64 %mul179, i64* %max_memory_to_use, align 8, !tbaa !46
  call void @llvm.lifetime.end(i64 1, i8* nonnull %ch) #7
  call void @llvm.lifetime.end(i64 8, i8* nonnull %1) #7
  br label %for.inc

if.else180:                                       ; preds = %if.else154
  %call181 = call i32 @keymatch(i8* %incdec.ptr, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.76, i64 0, i64 0), i32 3) #7
  %tobool182 = icmp eq i32 %call181, 0
  br i1 %tobool182, label %if.else185, label %if.then183

if.then183:                                       ; preds = %if.else180
  store i32 0, i32* %do_fancy_upsampling184, align 4, !tbaa !42
  br label %for.inc

if.else185:                                       ; preds = %if.else180
  %call186 = call i32 @keymatch(i8* %incdec.ptr, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.77, i64 0, i64 0), i32 3) #7
  %tobool187 = icmp eq i32 %call186, 0
  br i1 %tobool187, label %if.else190, label %if.then188

if.then188:                                       ; preds = %if.else185
  store i32 0, i32* %two_pass_quantize189, align 4, !tbaa !41
  br label %for.inc

if.else190:                                       ; preds = %if.else185
  %call191 = call i32 @keymatch(i8* %incdec.ptr, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.78, i64 0, i64 0), i32 3) #7
  %tobool192 = icmp eq i32 %call191, 0
  br i1 %tobool192, label %if.else194, label %if.then193

if.then193:                                       ; preds = %if.else190
  store i32 2, i32* @requested_fmt, align 4, !tbaa !6
  br label %for.inc

if.else194:                                       ; preds = %if.else190
  %call195 = call i32 @keymatch(i8* %incdec.ptr, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.79, i64 0, i64 0), i32 4) #7
  %tobool196 = icmp eq i32 %call195, 0
  br i1 %tobool196, label %if.else205, label %if.then197

if.then197:                                       ; preds = %if.else194
  %inc198 = add nsw i32 %argn.016, 1
  %cmp199 = icmp slt i32 %inc198, %argc
  br i1 %cmp199, label %if.end202, label %if.then201

if.then201:                                       ; preds = %if.then197
  call fastcc void @usage()
  unreachable

if.end202:                                        ; preds = %if.then197
  %idxprom203 = sext i32 %inc198 to i64
  %arrayidx204 = getelementptr inbounds i8*, i8** %argv, i64 %idxprom203
  %26 = bitcast i8** %arrayidx204 to i64*
  %27 = load i64, i64* %26, align 8, !tbaa !2
  store i64 %27, i64* bitcast (i8** @outfilename to i64*), align 8, !tbaa !2
  br label %for.inc

if.else205:                                       ; preds = %if.else194
  %call206 = call i32 @keymatch(i8* %incdec.ptr, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.80, i64 0, i64 0), i32 1) #7
  %tobool207 = icmp eq i32 %call206, 0
  br i1 %tobool207, label %lor.lhs.false208, label %if.then211

lor.lhs.false208:                                 ; preds = %if.else205
  %call209 = call i32 @keymatch(i8* %incdec.ptr, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.81, i64 0, i64 0), i32 1) #7
  %tobool210 = icmp eq i32 %call209, 0
  br i1 %tobool210, label %if.else212, label %if.then211

if.then211:                                       ; preds = %lor.lhs.false208, %if.else205
  store i32 3, i32* @requested_fmt, align 4, !tbaa !6
  br label %for.inc

if.else212:                                       ; preds = %lor.lhs.false208
  %call213 = call i32 @keymatch(i8* %incdec.ptr, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.82, i64 0, i64 0), i32 1) #7
  %tobool214 = icmp eq i32 %call213, 0
  br i1 %tobool214, label %if.else216, label %if.then215

if.then215:                                       ; preds = %if.else212
  store i32 4, i32* @requested_fmt, align 4, !tbaa !6
  br label %for.inc

if.else216:                                       ; preds = %if.else212
  %call217 = call i32 @keymatch(i8* %incdec.ptr, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.83, i64 0, i64 0), i32 1) #7
  %tobool218 = icmp eq i32 %call217, 0
  br i1 %tobool218, label %if.else232, label %if.then219

if.then219:                                       ; preds = %if.else216
  %inc220 = add nsw i32 %argn.016, 1
  %cmp221 = icmp slt i32 %inc220, %argc
  br i1 %cmp221, label %if.end224, label %if.then223

if.then223:                                       ; preds = %if.then219
  call fastcc void @usage()
  unreachable

if.end224:                                        ; preds = %if.then219
  %idxprom225 = sext i32 %inc220 to i64
  %arrayidx226 = getelementptr inbounds i8*, i8** %argv, i64 %idxprom225
  %28 = load i8*, i8** %arrayidx226, align 8, !tbaa !2
  %call227 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %28, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.84, i64 0, i64 0), i32* %scale_num, i32* %scale_denom) #7
  %cmp228 = icmp eq i32 %call227, 2
  br i1 %cmp228, label %for.inc, label %if.then230

if.then230:                                       ; preds = %if.end224
  call fastcc void @usage()
  unreachable

if.else232:                                       ; preds = %if.else216
  %call233 = call i32 @keymatch(i8* %incdec.ptr, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.85, i64 0, i64 0), i32 1) #7
  %tobool234 = icmp eq i32 %call233, 0
  br i1 %tobool234, label %if.else236, label %if.then235

if.then235:                                       ; preds = %if.else232
  store i32 5, i32* @requested_fmt, align 4, !tbaa !6
  br label %for.inc

if.else236:                                       ; preds = %if.else232
  call fastcc void @usage()
  unreachable

for.inc:                                          ; preds = %if.end138, %if.end224, %if.then7, %if.then49, %if.then56, %if.then43, %if.end104, %if.then122, %if.end150, %if.then183, %if.then193, %if.then211, %if.then235, %if.then215, %if.end202, %if.then188, %if.end178, %if.then129, %if.end117, %if.then75, %if.then88, %if.then81, %if.end29, %if.then5
  %argn.1 = phi i32 [ %argn.016, %if.then5 ], [ %argn.016, %if.then7 ], [ %inc, %if.end29 ], [ %inc34, %if.then43 ], [ %inc34, %if.then49 ], [ %inc34, %if.then56 ], [ %inc66, %if.then75 ], [ %inc66, %if.then81 ], [ %inc66, %if.then88 ], [ %argn.016, %if.end104 ], [ %argn.016, %if.end117 ], [ %argn.016, %if.then122 ], [ %argn.016, %if.then129 ], [ %inc134, %if.end150 ], [ %inc134, %if.end138 ], [ %inc158, %if.end178 ], [ %argn.016, %if.then183 ], [ %argn.016, %if.then188 ], [ %argn.016, %if.then193 ], [ %inc198, %if.end202 ], [ %argn.016, %if.then211 ], [ %argn.016, %if.then215 ], [ %inc220, %if.end224 ], [ %argn.016, %if.then235 ]
  %inc255 = add nsw i32 %argn.1, 1
  %cmp = icmp slt i32 %inc255, %argc
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %if.then, %for.inc
  %argn.0.lcssa.ph = phi i32 [ %argn.016, %if.then ], [ %inc255, %for.inc ]
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  %argn.0.lcssa = phi i32 [ 1, %entry ], [ %argn.0.lcssa.ph, %for.end.loopexit ]
  ret i32 %argn.0.lcssa
}

; Function Attrs: nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) #4

; Function Attrs: noreturn nounwind uwtable
define internal fastcc void @usage() unnamed_addr #0 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  %1 = load i8*, i8** @progname, align 8, !tbaa !2
  %call = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.86, i64 0, i64 0), i8* %1) #8
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  %3 = tail call i64 @fwrite(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.87, i64 0, i64 0), i64 12, i64 1, %struct._IO_FILE* %2) #8
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  %5 = tail call i64 @fwrite(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.88, i64 0, i64 0), i64 37, i64 1, %struct._IO_FILE* %4) #8
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  %7 = tail call i64 @fwrite(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.89, i64 0, i64 0), i64 55, i64 1, %struct._IO_FILE* %6) #8
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  %9 = tail call i64 @fwrite(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.90, i64 0, i64 0), i64 46, i64 1, %struct._IO_FILE* %8) #8
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  %11 = tail call i64 @fwrite(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.91, i64 0, i64 0), i64 40, i64 1, %struct._IO_FILE* %10) #8
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  %13 = tail call i64 @fwrite(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.92, i64 0, i64 0), i64 61, i64 1, %struct._IO_FILE* %12) #8
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  %call7 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.93, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.94, i64 0, i64 0)) #8
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  %call8 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.95, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.94, i64 0, i64 0)) #8
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  %call9 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.96, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.94, i64 0, i64 0)) #8
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  %call10 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.97, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.98, i64 0, i64 0)) #8
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  %call11 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.99, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.94, i64 0, i64 0)) #8
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  %20 = tail call i64 @fwrite(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.100, i64 0, i64 0), i64 29, i64 1, %struct._IO_FILE* %19) #8
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  %call13 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.101, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.98, i64 0, i64 0)) #8
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  %call14 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.102, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.94, i64 0, i64 0)) #8
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  %call15 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.103, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.94, i64 0, i64 0)) #8
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  %25 = tail call i64 @fwrite(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.104, i64 0, i64 0), i64 45, i64 1, %struct._IO_FILE* %24) #8
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  %27 = tail call i64 @fwrite(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.105, i64 0, i64 0), i64 53, i64 1, %struct._IO_FILE* %26) #8
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  %29 = tail call i64 @fwrite(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.106, i64 0, i64 0), i64 62, i64 1, %struct._IO_FILE* %28) #8
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  %31 = tail call i64 @fwrite(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.107, i64 0, i64 0), i64 56, i64 1, %struct._IO_FILE* %30) #8
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  %33 = tail call i64 @fwrite(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.108, i64 0, i64 0), i64 51, i64 1, %struct._IO_FILE* %32) #8
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  %35 = tail call i64 @fwrite(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.109, i64 0, i64 0), i64 61, i64 1, %struct._IO_FILE* %34) #8
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  %37 = tail call i64 @fwrite(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.110, i64 0, i64 0), i64 51, i64 1, %struct._IO_FILE* %36) #8
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  %39 = tail call i64 @fwrite(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.111, i64 0, i64 0), i64 46, i64 1, %struct._IO_FILE* %38) #8
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
  %41 = tail call i64 @fwrite(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.112, i64 0, i64 0), i64 43, i64 1, %struct._IO_FILE* %40) #8
  tail call void @exit(i32 1) #9
  unreachable
}

; Function Attrs: nounwind
declare noalias %struct._IO_FILE* @fopen(i8* nocapture readonly, i8* nocapture readonly) #4

; Function Attrs: noreturn nounwind
declare void @exit(i32) #5

declare %struct._IO_FILE* @read_stdin() #2

declare %struct._IO_FILE* @write_stdout() #2

declare void @jpeg_stdio_src(%struct.jpeg_decompress_struct*, %struct._IO_FILE*) #2

declare i32 @jpeg_read_header(%struct.jpeg_decompress_struct*, i32) #2

declare %struct.djpeg_dest_struct* @jinit_write_bmp(%struct.jpeg_decompress_struct*, i32) #2

declare %struct.djpeg_dest_struct* @jinit_write_gif(%struct.jpeg_decompress_struct*) #2

declare %struct.djpeg_dest_struct* @jinit_write_ppm(%struct.jpeg_decompress_struct*) #2

declare %struct.djpeg_dest_struct* @jinit_write_targa(%struct.jpeg_decompress_struct*) #2

declare i32 @jpeg_start_decompress(%struct.jpeg_decompress_struct*) #2

declare i32 @jpeg_read_scanlines(%struct.jpeg_decompress_struct*, i8**, i32) #2

declare i32 @jpeg_finish_decompress(%struct.jpeg_decompress_struct*) #2

declare void @jpeg_destroy_decompress(%struct.jpeg_decompress_struct*) #2

; Function Attrs: nounwind
declare i32 @fclose(%struct._IO_FILE* nocapture) #4

; Function Attrs: nounwind readnone
declare i16** @__ctype_b_loc() #6

; Function Attrs: nounwind
declare i32 @_IO_putc(i32, %struct._IO_FILE* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

declare i32 @keymatch(i8*, i8*, i32) #2

; Function Attrs: nounwind
declare i32 @__isoc99_sscanf(i8* nocapture readonly, i8* nocapture readonly, ...) #4

declare void @read_color_map(%struct.jpeg_decompress_struct*, %struct._IO_FILE*) #2

; Function Attrs: nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) #7

; Function Attrs: nounwind
declare i32 @fputc(i32, %struct._IO_FILE* nocapture) #7

attributes #0 = { noreturn nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { cold }
attributes #9 = { noreturn nounwind }
attributes #10 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"MaxFunctionCount", i32 150581}
!1 = !{!"clang version 3.8.0 (trunk 257473)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"any pointer", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!4, !4, i64 0}
!7 = !{!8, !3, i64 0}
!8 = !{!"jpeg_decompress_struct", !3, i64 0, !3, i64 8, !3, i64 16, !9, i64 24, !9, i64 28, !3, i64 32, !9, i64 40, !9, i64 44, !9, i64 48, !4, i64 52, !4, i64 56, !9, i64 60, !9, i64 64, !10, i64 72, !9, i64 80, !9, i64 84, !4, i64 88, !9, i64 92, !9, i64 96, !9, i64 100, !4, i64 104, !9, i64 108, !9, i64 112, !9, i64 116, !9, i64 120, !9, i64 124, !9, i64 128, !9, i64 132, !9, i64 136, !9, i64 140, !9, i64 144, !9, i64 148, !3, i64 152, !9, i64 160, !9, i64 164, !9, i64 168, !9, i64 172, !9, i64 176, !3, i64 184, !4, i64 192, !4, i64 224, !4, i64 256, !9, i64 288, !3, i64 296, !9, i64 304, !9, i64 308, !4, i64 312, !4, i64 328, !4, i64 344, !9, i64 360, !9, i64 364, !4, i64 368, !11, i64 370, !11, i64 372, !9, i64 376, !4, i64 380, !9, i64 384, !9, i64 388, !9, i64 392, !9, i64 396, !9, i64 400, !3, i64 408, !9, i64 416, !4, i64 424, !9, i64 456, !9, i64 460, !9, i64 464, !4, i64 468, !9, i64 508, !9, i64 512, !9, i64 516, !9, i64 520, !9, i64 524, !3, i64 528, !3, i64 536, !3, i64 544, !3, i64 552, !3, i64 560, !3, i64 568, !3, i64 576, !3, i64 584, !3, i64 592, !3, i64 600, !3, i64 608}
!9 = !{!"int", !4, i64 0}
!10 = !{!"double", !4, i64 0}
!11 = !{!"short", !4, i64 0}
!12 = !{!13, !3, i64 152}
!13 = !{!"jpeg_error_mgr", !3, i64 0, !3, i64 8, !3, i64 16, !3, i64 24, !3, i64 32, !9, i64 40, !4, i64 44, !9, i64 124, !14, i64 128, !3, i64 136, !9, i64 144, !3, i64 152, !9, i64 160, !9, i64 164}
!14 = !{!"long", !4, i64 0}
!15 = !{!13, !9, i64 160}
!16 = !{!13, !9, i64 164}
!17 = !{!13, !9, i64 40}
!18 = !{!13, !3, i64 0}
!19 = !{!20, !3, i64 24}
!20 = !{!"djpeg_dest_struct", !3, i64 0, !3, i64 8, !3, i64 16, !3, i64 24, !3, i64 32, !9, i64 40}
!21 = !{!20, !3, i64 0}
!22 = !{!8, !9, i64 160}
!23 = !{!8, !9, i64 132}
!24 = !{!20, !3, i64 32}
!25 = !{!20, !9, i64 40}
!26 = !{!20, !3, i64 8}
!27 = !{!20, !3, i64 16}
!28 = !{!13, !14, i64 128}
!29 = !{!13, !9, i64 124}
!30 = !{!8, !3, i64 32}
!31 = !{!32, !14, i64 8}
!32 = !{!"jpeg_source_mgr", !3, i64 0, !14, i64 8, !3, i64 16, !3, i64 24, !3, i64 32, !3, i64 40, !3, i64 48}
!33 = !{!32, !3, i64 24}
!34 = !{!32, !3, i64 0}
!35 = !{!11, !11, i64 0}
!36 = !{!9, !9, i64 0}
!37 = !{!8, !9, i64 112}
!38 = !{!8, !9, i64 100}
!39 = !{!8, !4, i64 88}
!40 = !{!8, !4, i64 104}
!41 = !{!8, !9, i64 108}
!42 = !{!8, !9, i64 92}
!43 = !{!8, !4, i64 56}
!44 = !{!14, !14, i64 0}
!45 = !{!8, !3, i64 8}
!46 = !{!47, !14, i64 88}
!47 = !{!"jpeg_memory_mgr", !3, i64 0, !3, i64 8, !3, i64 16, !3, i64 24, !3, i64 32, !3, i64 40, !3, i64 48, !3, i64 56, !3, i64 64, !3, i64 72, !3, i64 80, !14, i64 88}
