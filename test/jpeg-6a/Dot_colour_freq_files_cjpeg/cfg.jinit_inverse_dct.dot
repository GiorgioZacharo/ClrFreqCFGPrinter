digraph "CFG for 'jinit_inverse_dct' function" {
	label="CFG for 'jinit_inverse_dct' function";

	Node0x585aa40 [shape=record,label="{entry:\l  %mem = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 1\l  %0 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8,\l... !tbaa !2\l  %alloc_small = getelementptr inbounds %struct.jpeg_memory_mgr,\l... %struct.jpeg_memory_mgr* %0, i64 0, i32 0\l  %1 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8*\l... (%struct.jpeg_common_struct*, i32, i64)** %alloc_small, align 8, !tbaa !10\l  %2 = bitcast %struct.jpeg_decompress_struct* %cinfo to\l... %struct.jpeg_common_struct*\l  %call = tail call i8* %1(%struct.jpeg_common_struct* %2, i32 1, i64 128) #3\l  %idct1 = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 80\l  %3 = bitcast %struct.jpeg_inverse_dct** %idct1 to i8**\l  store i8* %call, i8** %3, align 8, !tbaa !13\l  %start_pass2 = bitcast i8* %call to void (%struct.jpeg_decompress_struct*)**\l  store void (%struct.jpeg_decompress_struct*)* @start_pass, void\l... (%struct.jpeg_decompress_struct*)** %start_pass2, align 8, !tbaa !14\l  %num_components = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 8\l  %4 = load i32, i32* %num_components, align 8, !tbaa !17\l  %cmp22 = icmp sgt i32 %4, 0\l  br i1 %cmp22, label %for.body.lr.ph, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x585aa40:s0 -> Node0x585cc40;
	Node0x585aa40:s1 -> Node0x585ccf0;
	Node0x585cc40 [shape=record,label="{for.body.lr.ph:                                   \l  %comp_info = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 43\l  %5 = load %struct.jpeg_component_info*, %struct.jpeg_component_info**\l... %comp_info, align 8, !tbaa !18\l  %cur_method = getelementptr inbounds i8, i8* %call, i64 88\l  %6 = bitcast i8* %cur_method to [10 x i32]*\l  br label %for.body\l}"];
	Node0x585cc40 -> Node0x585a9a0;
	Node0x585a9a0 [shape=record,label="{for.body:                                         \l  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]\l  %compptr.024 = phi %struct.jpeg_component_info* [ %5, %for.body.lr.ph ], [\l... %incdec.ptr, %for.body ]\l  %7 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8,\l... !tbaa !2\l  %alloc_small4 = getelementptr inbounds %struct.jpeg_memory_mgr,\l... %struct.jpeg_memory_mgr* %7, i64 0, i32 0\l  %8 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8*\l... (%struct.jpeg_common_struct*, i32, i64)** %alloc_small4, align 8, !tbaa !10\l  %call5 = tail call i8* %8(%struct.jpeg_common_struct* nonnull %2, i32 1, i64\l... 256) #3\l  %dct_table = getelementptr inbounds %struct.jpeg_component_info,\l... %struct.jpeg_component_info* %compptr.024, i64 0, i32 20\l  store i8* %call5, i8** %dct_table, align 8, !tbaa !19\l  tail call void @llvm.memset.p0i8.i64(i8* %call5, i8 0, i64 256, i32 1, i1\l... false)\l  %arrayidx = getelementptr inbounds [10 x i32], [10 x i32]* %6, i64 0, i64\l... %indvars.iv\l  store i32 -1, i32* %arrayidx, align 4, !tbaa !21\l  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1\l  %incdec.ptr = getelementptr inbounds %struct.jpeg_component_info,\l... %struct.jpeg_component_info* %compptr.024, i64 1\l  %9 = load i32, i32* %num_components, align 8, !tbaa !17\l  %10 = sext i32 %9 to i64\l  %cmp = icmp slt i64 %indvars.iv.next, %10\l  br i1 %cmp, label %for.body, label %for.end.loopexit\l|{<s0>T|<s1>F}}"];
	Node0x585a9a0:s0 -> Node0x585a9a0;
	Node0x585a9a0:s1 -> Node0x585f8f0;
	Node0x585f8f0 [shape=record,label="{for.end.loopexit:                                 \l  br label %for.end\l}"];
	Node0x585f8f0 -> Node0x585ccf0;
	Node0x585ccf0 [shape=record,label="{for.end:                                          \l  ret void\l}"];
}
