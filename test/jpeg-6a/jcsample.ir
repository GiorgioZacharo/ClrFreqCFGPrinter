; ModuleID = 'jcsample.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_compress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32, %struct.jpeg_destination_mgr*, i32, i32, i32, i32, double, i32, i32, i32, %struct.jpeg_component_info*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], [16 x i8], [16 x i8], [16 x i8], i32, %struct.jpeg_scan_info*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i16, i16, i32, i32, i32, i32, i32, i32, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, %struct.jpeg_comp_master*, %struct.jpeg_c_main_controller*, %struct.jpeg_c_prep_controller*, %struct.jpeg_c_coef_controller*, %struct.jpeg_marker_writer*, %struct.jpeg_color_converter*, %struct.jpeg_downsampler*, %struct.jpeg_forward_dct*, %struct.jpeg_entropy_encoder* }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_destination_mgr = type { i8*, i64, {}*, i32 (%struct.jpeg_compress_struct*)*, {}* }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_scan_info = type { i32, [4 x i32], i32, i32, i32, i32 }
%struct.jpeg_comp_master = type { {}*, {}*, {}*, i32, i32 }
%struct.jpeg_c_main_controller = type { void (%struct.jpeg_compress_struct*, i32)*, void (%struct.jpeg_compress_struct*, i8**, i32*, i32)* }
%struct.jpeg_c_prep_controller = type { void (%struct.jpeg_compress_struct*, i32)*, void (%struct.jpeg_compress_struct*, i8**, i32*, i32, i8***, i32*, i32)* }
%struct.jpeg_c_coef_controller = type { void (%struct.jpeg_compress_struct*, i32)*, i32 (%struct.jpeg_compress_struct*, i8***)* }
%struct.jpeg_marker_writer = type { void (%struct.jpeg_compress_struct*, i32, i8*, i32)*, {}*, {}*, {}*, {}*, {}* }
%struct.jpeg_color_converter = type { {}*, void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)* }
%struct.jpeg_downsampler = type { {}*, void (%struct.jpeg_compress_struct*, i8***, i32, i8***, i32)*, i32 }
%struct.jpeg_forward_dct = type { {}*, void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, [64 x i16]*, i32, i32, i32)* }
%struct.jpeg_entropy_encoder = type { void (%struct.jpeg_compress_struct*, i32)*, i32 (%struct.jpeg_compress_struct*, [64 x i16]**)*, {}* }
%struct.my_downsampler = type { %struct.jpeg_downsampler, [10 x void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)*] }

; Function Attrs: nounwind uwtable
define void @jinit_downsampler(%struct.jpeg_compress_struct* %cinfo) #0 !prof !2 {
entry:
  %mem = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 1
  %0 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !3
  %alloc_small = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %0, i64 0, i32 0
  %1 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_small, align 8, !tbaa !11
  %2 = bitcast %struct.jpeg_compress_struct* %cinfo to %struct.jpeg_common_struct*
  %call = tail call i8* %1(%struct.jpeg_common_struct* %2, i32 1, i64 104) #5
  %downsample1 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 57
  %3 = bitcast %struct.jpeg_downsampler** %downsample1 to i8**
  store i8* %call, i8** %3, align 8, !tbaa !14
  %start_pass2 = bitcast i8* %call to void (%struct.jpeg_compress_struct*)**
  store void (%struct.jpeg_compress_struct*)* @start_pass_downsample, void (%struct.jpeg_compress_struct*)** %start_pass2, align 8, !tbaa !15
  %downsample4 = getelementptr inbounds i8, i8* %call, i64 8
  %4 = bitcast i8* %downsample4 to void (%struct.jpeg_compress_struct*, i8***, i32, i8***, i32)**
  store void (%struct.jpeg_compress_struct*, i8***, i32, i8***, i32)* @sep_downsample, void (%struct.jpeg_compress_struct*, i8***, i32, i8***, i32)** %4, align 8, !tbaa !18
  %need_context_rows = getelementptr inbounds i8, i8* %call, i64 16
  %5 = bitcast i8* %need_context_rows to i32*
  store i32 0, i32* %5, align 8, !tbaa !19
  %CCIR601_sampling = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 26
  %6 = load i32, i32* %CCIR601_sampling, align 4, !tbaa !20
  %tobool = icmp eq i32 %6, 0
  br i1 %tobool, label %if.end, label %if.then, !prof !21

if.then:                                          ; preds = %entry
  %err = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 0
  %7 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8, !tbaa !22
  %msg_code = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %7, i64 0, i32 5
  store i32 23, i32* %msg_code, align 8, !tbaa !23
  %error_exit = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %7, i64 0, i32 0
  %8 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit, align 8, !tbaa !25
  tail call void %8(%struct.jpeg_common_struct* %2) #5
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %num_components = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 12
  %9 = load i32, i32* %num_components, align 4, !tbaa !26
  %cmp136 = icmp sgt i32 %9, 0
  br i1 %cmp136, label %for.body.lr.ph, label %if.end84, !prof !27

for.body.lr.ph:                                   ; preds = %if.end
  %comp_info = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 14
  %10 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %comp_info, align 8, !tbaa !28
  %max_h_samp_factor = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 38
  %smoothing_factor = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 27
  %methods = getelementptr inbounds i8, i8* %call, i64 24
  %11 = bitcast i8* %methods to [10 x void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)*]*
  %err68 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 0
  %12 = bitcast i32* %max_h_samp_factor to i64*
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc
  %13 = phi i32 [ %9, %for.body.lr.ph ], [ %27, %for.inc ]
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %smoothok.0141 = phi i32 [ 1, %for.body.lr.ph ], [ %smoothok.1, %for.inc ]
  %compptr.0139 = phi %struct.jpeg_component_info* [ %10, %for.body.lr.ph ], [ %incdec.ptr, %for.inc ]
  %h_samp_factor = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr.0139, i64 0, i32 2
  %14 = bitcast i32* %h_samp_factor to i64*
  %15 = load i64, i64* %14, align 8
  %16 = trunc i64 %15 to i32
  %17 = load i64, i64* %12, align 8
  %18 = trunc i64 %17 to i32
  %cmp7 = icmp eq i32 %16, %18
  %19 = lshr i64 %15, 32
  %20 = trunc i64 %19 to i32
  %21 = lshr i64 %17, 32
  %22 = trunc i64 %21 to i32
  %cmp8 = icmp eq i32 %20, %22
  %or.cond148 = and i1 %cmp7, %cmp8
  br i1 %or.cond148, label %if.then9, label %if.else18, !prof !29

if.then9:                                         ; preds = %for.body
  %23 = load i32, i32* %smoothing_factor, align 8, !tbaa !30
  %tobool10 = icmp eq i32 %23, 0
  %arrayidx = getelementptr inbounds [10 x void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)*], [10 x void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)*]* %11, i64 0, i64 %indvars.iv
  br i1 %tobool10, label %if.else, label %if.then11, !prof !21

if.then11:                                        ; preds = %if.then9
  store void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)* @fullsize_smooth_downsample, void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)** %arrayidx, align 8, !tbaa !31
  store i32 1, i32* %5, align 8, !tbaa !19
  br label %for.inc

if.else:                                          ; preds = %if.then9
  store void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)* @fullsize_downsample, void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)** %arrayidx, align 8, !tbaa !31
  br label %for.inc

if.else18:                                        ; preds = %for.body
  %mul = shl nsw i32 %16, 1
  %cmp21 = icmp eq i32 %mul, %18
  br i1 %cmp21, label %land.lhs.true22, label %if.else54, !prof !32

land.lhs.true22:                                  ; preds = %if.else18
  %cmp25 = icmp eq i32 %20, %22
  br i1 %cmp25, label %if.then26, label %land.lhs.true35, !prof !33

if.then26:                                        ; preds = %land.lhs.true22
  %arrayidx29 = getelementptr inbounds [10 x void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)*], [10 x void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)*]* %11, i64 0, i64 %indvars.iv
  store void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)* @h2v1_downsample, void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)** %arrayidx29, align 8, !tbaa !31
  br label %for.inc

land.lhs.true35:                                  ; preds = %land.lhs.true22
  %mul37143 = shl nuw nsw i64 %19, 1
  %mul37 = trunc i64 %mul37143 to i32
  %cmp39 = icmp eq i32 %mul37, %22
  br i1 %cmp39, label %if.then40, label %if.else54, !prof !32

if.then40:                                        ; preds = %land.lhs.true35
  %24 = load i32, i32* %smoothing_factor, align 8, !tbaa !30
  %tobool42 = icmp eq i32 %24, 0
  %arrayidx46 = getelementptr inbounds [10 x void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)*], [10 x void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)*]* %11, i64 0, i64 %indvars.iv
  br i1 %tobool42, label %if.else49, label %if.then43, !prof !32

if.then43:                                        ; preds = %if.then40
  store void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)* @h2v2_smooth_downsample, void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)** %arrayidx46, align 8, !tbaa !31
  store i32 1, i32* %5, align 8, !tbaa !19
  br label %for.inc

if.else49:                                        ; preds = %if.then40
  store void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)* @h2v2_downsample, void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)** %arrayidx46, align 8, !tbaa !31
  br label %for.inc

if.else54:                                        ; preds = %if.else18, %land.lhs.true35
  %rem = srem i32 %18, %16
  %cmp57 = icmp eq i32 %rem, 0
  br i1 %cmp57, label %land.lhs.true58, label %if.else67

land.lhs.true58:                                  ; preds = %if.else54
  %rem61 = srem i32 %22, %20
  %cmp62 = icmp eq i32 %rem61, 0
  br i1 %cmp62, label %if.then63, label %if.else67

if.then63:                                        ; preds = %land.lhs.true58
  %arrayidx66 = getelementptr inbounds [10 x void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)*], [10 x void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)*]* %11, i64 0, i64 %indvars.iv
  store void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)* @int_downsample, void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)** %arrayidx66, align 8, !tbaa !31
  br label %for.inc

if.else67:                                        ; preds = %land.lhs.true58, %if.else54
  %25 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err68, align 8, !tbaa !22
  %msg_code69 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %25, i64 0, i32 5
  store i32 37, i32* %msg_code69, align 8, !tbaa !23
  %error_exit71 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %25, i64 0, i32 0
  %26 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit71, align 8, !tbaa !25
  tail call void %26(%struct.jpeg_common_struct* nonnull %2) #5
  %.pre = load i32, i32* %num_components, align 4, !tbaa !26
  br label %for.inc

for.inc:                                          ; preds = %if.else, %if.then11, %if.else49, %if.then43, %if.else67, %if.then63, %if.then26
  %27 = phi i32 [ %13, %if.then11 ], [ %13, %if.else ], [ %13, %if.then26 ], [ %13, %if.then43 ], [ %13, %if.else49 ], [ %13, %if.then63 ], [ %.pre, %if.else67 ]
  %smoothok.1 = phi i32 [ %smoothok.0141, %if.then11 ], [ %smoothok.0141, %if.else ], [ 0, %if.then26 ], [ %smoothok.0141, %if.then43 ], [ %smoothok.0141, %if.else49 ], [ 0, %if.then63 ], [ %smoothok.0141, %if.else67 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %incdec.ptr = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr.0139, i64 1
  %28 = sext i32 %27 to i64
  %cmp = icmp slt i64 %indvars.iv.next, %28
  br i1 %cmp, label %for.body, label %for.end, !prof !27

for.end:                                          ; preds = %for.inc
  %smoothok.1.lcssa = phi i32 [ %smoothok.1, %for.inc ]
  %29 = load i32, i32* %smoothing_factor, align 8, !tbaa !30
  %tobool77 = icmp eq i32 %29, 0
  %tobool79 = icmp ne i32 %smoothok.1.lcssa, 0
  %or.cond = or i1 %tobool79, %tobool77
  br i1 %or.cond, label %if.end84, label %if.then80, !prof !34

if.then80:                                        ; preds = %for.end
  %err81 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 0
  %30 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err81, align 8, !tbaa !22
  %msg_code82 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %30, i64 0, i32 5
  store i32 98, i32* %msg_code82, align 8, !tbaa !23
  %emit_message = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %30, i64 0, i32 1
  %31 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %emit_message, align 8, !tbaa !35
  tail call void %31(%struct.jpeg_common_struct* nonnull %2, i32 0) #5
  br label %if.end84

if.end84:                                         ; preds = %if.end, %for.end, %if.then80
  ret void
}

; Function Attrs: norecurse nounwind readnone uwtable
define internal void @start_pass_downsample(%struct.jpeg_compress_struct* nocapture %cinfo) #1 !prof !2 {
entry:
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @sep_downsample(%struct.jpeg_compress_struct* %cinfo, i8*** nocapture readonly %input_buf, i32 %in_row_index, i8*** nocapture readonly %output_buf, i32 %out_row_group_index) #0 !prof !36 {
entry:
  %downsample1 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 57
  %0 = bitcast %struct.jpeg_downsampler** %downsample1 to %struct.my_downsampler**
  %1 = load %struct.my_downsampler*, %struct.my_downsampler** %0, align 8, !tbaa !14
  %num_components = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 12
  %2 = load i32, i32* %num_components, align 4, !tbaa !26
  %cmp22 = icmp sgt i32 %2, 0
  br i1 %cmp22, label %for.body.lr.ph, label %for.end, !prof !37

for.body.lr.ph:                                   ; preds = %entry
  %comp_info = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 14
  %3 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %comp_info, align 8, !tbaa !28
  %idx.ext = zext i32 %in_row_index to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %compptr.023 = phi %struct.jpeg_component_info* [ %3, %for.body.lr.ph ], [ %incdec.ptr, %for.body ]
  %arrayidx = getelementptr inbounds i8**, i8*** %input_buf, i64 %indvars.iv
  %4 = load i8**, i8*** %arrayidx, align 8, !tbaa !31
  %add.ptr = getelementptr inbounds i8*, i8** %4, i64 %idx.ext
  %arrayidx3 = getelementptr inbounds i8**, i8*** %output_buf, i64 %indvars.iv
  %5 = load i8**, i8*** %arrayidx3, align 8, !tbaa !31
  %v_samp_factor = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr.023, i64 0, i32 3
  %6 = load i32, i32* %v_samp_factor, align 4, !tbaa !38
  %mul = mul i32 %6, %out_row_group_index
  %idx.ext4 = zext i32 %mul to i64
  %add.ptr5 = getelementptr inbounds i8*, i8** %5, i64 %idx.ext4
  %arrayidx7 = getelementptr inbounds %struct.my_downsampler, %struct.my_downsampler* %1, i64 0, i32 1, i64 %indvars.iv
  %7 = load void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)*, void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, i8**)** %arrayidx7, align 8, !tbaa !31
  tail call void %7(%struct.jpeg_compress_struct* nonnull %cinfo, %struct.jpeg_component_info* %compptr.023, i8** %add.ptr, i8** %add.ptr5) #5
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %incdec.ptr = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr.023, i64 1
  %8 = load i32, i32* %num_components, align 4, !tbaa !26
  %9 = sext i32 %8 to i64
  %cmp = icmp slt i64 %indvars.iv.next, %9
  br i1 %cmp, label %for.body, label %for.end.loopexit, !prof !37

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define internal void @fullsize_smooth_downsample(%struct.jpeg_compress_struct* nocapture readonly %cinfo, %struct.jpeg_component_info* nocapture readonly %compptr, i8** nocapture readonly %input_data, i8** nocapture readonly %output_data) #2 !prof !40 {
entry:
  %width_in_blocks = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr, i64 0, i32 7
  %0 = load i32, i32* %width_in_blocks, align 4, !tbaa !41
  %mul = shl i32 %0, 3
  %add.ptr = getelementptr inbounds i8*, i8** %input_data, i64 -1
  %max_v_samp_factor = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 39
  %1 = load i32, i32* %max_v_samp_factor, align 4, !tbaa !42
  %image_width = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 6
  %2 = load i32, i32* %image_width, align 8, !tbaa !43
  %sub.i = sub i32 %mul, %2
  %cmp.i = icmp sgt i32 %sub.i, 0
  %cmp121.i = icmp sgt i32 %1, -2
  %or.cond.i = and i1 %cmp121.i, %cmp.i
  br i1 %or.cond.i, label %for.body.us.preheader.i, label %expand_right_edge.exit

for.body.us.preheader.i:                          ; preds = %entry
  %idx.ext.i = zext i32 %2 to i64
  %3 = xor i32 %mul, -1
  %4 = add i32 %2, %3
  %5 = icmp sgt i32 %4, -2
  %smax.i = select i1 %5, i32 %4, i32 -2
  %6 = or i32 %mul, 1
  %7 = sub i32 %6, %2
  %8 = add i32 %7, %smax.i
  %9 = zext i32 %8 to i64
  %10 = add nuw nsw i64 %9, 1
  %11 = add i32 %1, 2
  %12 = add i32 %1, 1
  %xtraiter = and i32 %11, 3
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod, label %for.body.us.preheader.i.split, label %for.body.us.i.prol.preheader

for.body.us.i.prol.preheader:                     ; preds = %for.body.us.preheader.i
  br label %for.body.us.i.prol

for.body.us.i.prol:                               ; preds = %for.body.us.i.prol.preheader, %for.body.us.i.prol
  %indvars.iv.i.prol = phi i64 [ %indvars.iv.next.i.prol, %for.body.us.i.prol ], [ 0, %for.body.us.i.prol.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %for.body.us.i.prol ], [ %xtraiter, %for.body.us.i.prol.preheader ]
  %arrayidx.us.i.prol = getelementptr inbounds i8*, i8** %add.ptr, i64 %indvars.iv.i.prol
  %13 = load i8*, i8** %arrayidx.us.i.prol, align 8, !tbaa !31
  %add.ptr.us.i.prol = getelementptr inbounds i8, i8* %13, i64 %idx.ext.i
  %arrayidx2.us.i.prol = getelementptr inbounds i8, i8* %add.ptr.us.i.prol, i64 -1
  %14 = load i8, i8* %arrayidx2.us.i.prol, align 1, !tbaa !44
  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr.us.i.prol, i8 %14, i64 %10, i32 1, i1 false) #5
  %indvars.iv.next.i.prol = add nuw nsw i64 %indvars.iv.i.prol, 1
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %for.body.us.preheader.i.split.loopexit, label %for.body.us.i.prol, !llvm.loop !45

for.body.us.preheader.i.split.loopexit:           ; preds = %for.body.us.i.prol
  %indvars.iv.next.i.prol.lcssa = phi i64 [ %indvars.iv.next.i.prol, %for.body.us.i.prol ]
  br label %for.body.us.preheader.i.split

for.body.us.preheader.i.split:                    ; preds = %for.body.us.preheader.i.split.loopexit, %for.body.us.preheader.i
  %indvars.iv.i.unr = phi i64 [ 0, %for.body.us.preheader.i ], [ %indvars.iv.next.i.prol.lcssa, %for.body.us.preheader.i.split.loopexit ]
  %15 = icmp ult i32 %12, 3
  br i1 %15, label %expand_right_edge.exit.loopexit, label %for.body.us.preheader.i.split.split

for.body.us.preheader.i.split.split:              ; preds = %for.body.us.preheader.i.split
  br label %for.body.us.i

for.body.us.i:                                    ; preds = %for.body.us.i, %for.body.us.preheader.i.split.split
  %indvars.iv.i = phi i64 [ %indvars.iv.i.unr, %for.body.us.preheader.i.split.split ], [ %indvars.iv.next.i.3, %for.body.us.i ]
  %arrayidx.us.i = getelementptr inbounds i8*, i8** %add.ptr, i64 %indvars.iv.i
  %16 = load i8*, i8** %arrayidx.us.i, align 8, !tbaa !31
  %add.ptr.us.i = getelementptr inbounds i8, i8* %16, i64 %idx.ext.i
  %arrayidx2.us.i = getelementptr inbounds i8, i8* %add.ptr.us.i, i64 -1
  %17 = load i8, i8* %arrayidx2.us.i, align 1, !tbaa !44
  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr.us.i, i8 %17, i64 %10, i32 1, i1 false) #5
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %arrayidx.us.i.1 = getelementptr inbounds i8*, i8** %add.ptr, i64 %indvars.iv.next.i
  %18 = load i8*, i8** %arrayidx.us.i.1, align 8, !tbaa !31
  %add.ptr.us.i.1 = getelementptr inbounds i8, i8* %18, i64 %idx.ext.i
  %arrayidx2.us.i.1 = getelementptr inbounds i8, i8* %add.ptr.us.i.1, i64 -1
  %19 = load i8, i8* %arrayidx2.us.i.1, align 1, !tbaa !44
  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr.us.i.1, i8 %19, i64 %10, i32 1, i1 false) #5
  %indvars.iv.next.i.1 = add nsw i64 %indvars.iv.i, 2
  %arrayidx.us.i.2 = getelementptr inbounds i8*, i8** %add.ptr, i64 %indvars.iv.next.i.1
  %20 = load i8*, i8** %arrayidx.us.i.2, align 8, !tbaa !31
  %add.ptr.us.i.2 = getelementptr inbounds i8, i8* %20, i64 %idx.ext.i
  %arrayidx2.us.i.2 = getelementptr inbounds i8, i8* %add.ptr.us.i.2, i64 -1
  %21 = load i8, i8* %arrayidx2.us.i.2, align 1, !tbaa !44
  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr.us.i.2, i8 %21, i64 %10, i32 1, i1 false) #5
  %indvars.iv.next.i.2 = add nsw i64 %indvars.iv.i, 3
  %arrayidx.us.i.3 = getelementptr inbounds i8*, i8** %add.ptr, i64 %indvars.iv.next.i.2
  %22 = load i8*, i8** %arrayidx.us.i.3, align 8, !tbaa !31
  %add.ptr.us.i.3 = getelementptr inbounds i8, i8* %22, i64 %idx.ext.i
  %arrayidx2.us.i.3 = getelementptr inbounds i8, i8* %add.ptr.us.i.3, i64 -1
  %23 = load i8, i8* %arrayidx2.us.i.3, align 1, !tbaa !44
  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr.us.i.3, i8 %23, i64 %10, i32 1, i1 false) #5
  %indvars.iv.next.i.3 = add nsw i64 %indvars.iv.i, 4
  %lftr.wideiv.3 = trunc i64 %indvars.iv.next.i.3 to i32
  %exitcond.3 = icmp eq i32 %lftr.wideiv.3, %11
  br i1 %exitcond.3, label %expand_right_edge.exit.loopexit.unr-lcssa, label %for.body.us.i

expand_right_edge.exit.loopexit.unr-lcssa:        ; preds = %for.body.us.i
  br label %expand_right_edge.exit.loopexit

expand_right_edge.exit.loopexit:                  ; preds = %for.body.us.preheader.i.split, %expand_right_edge.exit.loopexit.unr-lcssa
  br label %expand_right_edge.exit

expand_right_edge.exit:                           ; preds = %expand_right_edge.exit.loopexit, %entry
  %smoothing_factor = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 27
  %24 = load i32, i32* %smoothing_factor, align 8, !tbaa !30
  %conv = sext i32 %24 to i64
  %mul1 = shl nsw i64 %conv, 9
  %sub = sub nsw i64 65536, %mul1
  %mul3 = shl nsw i32 %24, 6
  %conv4 = sext i32 %mul3 to i64
  %v_samp_factor = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr, i64 0, i32 3
  %25 = load i32, i32* %v_samp_factor, align 4, !tbaa !38
  %cmp163 = icmp sgt i32 %25, 0
  br i1 %cmp163, label %for.body.lr.ph, label %for.end83

for.body.lr.ph:                                   ; preds = %expand_right_edge.exit
  %sub40 = add i32 %mul, -2
  %26 = add i32 %mul, -3
  %27 = zext i32 %26 to i64
  %28 = or i64 %27, 2
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.end
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.end ]
  %arrayidx = getelementptr inbounds i8*, i8** %output_data, i64 %indvars.iv
  %29 = load i8*, i8** %arrayidx, align 8, !tbaa !31
  %arrayidx7 = getelementptr inbounds i8*, i8** %input_data, i64 %indvars.iv
  %30 = load i8*, i8** %arrayidx7, align 8, !tbaa !31
  %31 = add nsw i64 %indvars.iv, -1
  %arrayidx10 = getelementptr inbounds i8*, i8** %input_data, i64 %31
  %32 = load i8*, i8** %arrayidx10, align 8, !tbaa !31
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %arrayidx13 = getelementptr inbounds i8*, i8** %input_data, i64 %indvars.iv.next
  %33 = load i8*, i8** %arrayidx13, align 8, !tbaa !31
  %incdec.ptr = getelementptr inbounds i8, i8* %32, i64 1
  %34 = load i8, i8* %32, align 1, !tbaa !44
  %conv14 = zext i8 %34 to i32
  %incdec.ptr15 = getelementptr inbounds i8, i8* %33, i64 1
  %35 = load i8, i8* %33, align 1, !tbaa !44
  %conv16 = zext i8 %35 to i32
  %add17 = add nuw nsw i32 %conv16, %conv14
  %36 = load i8, i8* %30, align 1, !tbaa !44
  %conv18 = zext i8 %36 to i32
  %add19 = add nuw nsw i32 %add17, %conv18
  %incdec.ptr20 = getelementptr inbounds i8, i8* %30, i64 1
  %conv22 = zext i8 %36 to i64
  %37 = load i8, i8* %incdec.ptr, align 1, !tbaa !44
  %conv23 = zext i8 %37 to i32
  %38 = load i8, i8* %incdec.ptr15, align 1, !tbaa !44
  %conv24 = zext i8 %38 to i32
  %add25 = add nuw nsw i32 %conv24, %conv23
  %39 = load i8, i8* %incdec.ptr20, align 1, !tbaa !44
  %conv26 = zext i8 %39 to i32
  %add27 = add nuw nsw i32 %add25, %conv26
  %conv28148 = zext i32 %add19 to i64
  %conv32149 = zext i32 %add27 to i64
  %factor = shl nuw nsw i64 %conv28148, 1
  %add31 = sub nsw i64 %factor, %conv22
  %add33 = add nsw i64 %add31, %conv32149
  %mul34 = mul nsw i64 %conv22, %sub
  %mul35 = mul nsw i64 %add33, %conv4
  %add36 = add i64 %mul34, 32768
  %add37 = add i64 %add36, %mul35
  %shr150 = lshr i64 %add37, 16
  %conv38 = trunc i64 %shr150 to i8
  store i8 %conv38, i8* %29, align 1, !tbaa !44
  %scevgep = getelementptr i8, i8* %29, i64 %28
  br label %for.body44

for.body44:                                       ; preds = %for.body, %for.body44
  %.pn = phi i8* [ %29, %for.body ], [ %outptr.0162, %for.body44 ]
  %lastcolsum.0161 = phi i32 [ %add19, %for.body ], [ %colsum.0160, %for.body44 ]
  %colsum.0160 = phi i32 [ %add27, %for.body ], [ %add54, %for.body44 ]
  %colctr.0159 = phi i32 [ %sub40, %for.body ], [ %dec, %for.body44 ]
  %below_ptr.0158 = phi i8* [ %incdec.ptr15, %for.body ], [ %incdec.ptr49, %for.body44 ]
  %above_ptr.0157 = phi i8* [ %incdec.ptr, %for.body ], [ %incdec.ptr48, %for.body44 ]
  %inptr.0156 = phi i8* [ %incdec.ptr20, %for.body ], [ %incdec.ptr45, %for.body44 ]
  %outptr.0162 = getelementptr inbounds i8, i8* %.pn, i64 1
  %incdec.ptr45 = getelementptr inbounds i8, i8* %inptr.0156, i64 1
  %40 = load i8, i8* %inptr.0156, align 1, !tbaa !44
  %conv47 = zext i8 %40 to i64
  %incdec.ptr48 = getelementptr inbounds i8, i8* %above_ptr.0157, i64 1
  %incdec.ptr49 = getelementptr inbounds i8, i8* %below_ptr.0158, i64 1
  %41 = load i8, i8* %incdec.ptr48, align 1, !tbaa !44
  %conv50 = zext i8 %41 to i32
  %42 = load i8, i8* %incdec.ptr49, align 1, !tbaa !44
  %conv51 = zext i8 %42 to i32
  %add52 = add nuw nsw i32 %conv51, %conv50
  %43 = load i8, i8* %incdec.ptr45, align 1, !tbaa !44
  %conv53 = zext i8 %43 to i32
  %add54 = add nuw nsw i32 %add52, %conv53
  %conv59152 = zext i32 %add54 to i64
  %addconv = add nsw i32 %lastcolsum.0161, %colsum.0160
  %sub57 = sext i32 %addconv to i64
  %add58 = sub nsw i64 %sub57, %conv47
  %add60 = add nsw i64 %add58, %conv59152
  %mul61 = mul nsw i64 %conv47, %sub
  %mul62 = mul nsw i64 %add60, %conv4
  %add63 = add i64 %mul61, 32768
  %add64 = add i64 %add63, %mul62
  %shr65153 = lshr i64 %add64, 16
  %conv66 = trunc i64 %shr65153 to i8
  store i8 %conv66, i8* %outptr.0162, align 1, !tbaa !44
  %dec = add i32 %colctr.0159, -1
  %cmp42 = icmp eq i32 %dec, 0
  br i1 %cmp42, label %for.end, label %for.body44

for.end:                                          ; preds = %for.body44
  %conv59152.lcssa = phi i64 [ %conv59152, %for.body44 ]
  %colsum.0160.lcssa = phi i32 [ %colsum.0160, %for.body44 ]
  %scevgep166 = getelementptr i8, i8* %30, i64 %28
  %44 = load i8, i8* %scevgep166, align 1, !tbaa !44
  %conv69 = zext i8 %44 to i64
  %conv70 = sext i32 %colsum.0160.lcssa to i64
  %factor154 = shl nuw nsw i64 %conv59152.lcssa, 1
  %add73 = add nsw i64 %factor154, %conv70
  %add75 = sub nsw i64 %add73, %conv69
  %mul76 = mul nsw i64 %conv69, %sub
  %mul77 = mul nsw i64 %add75, %conv4
  %add78 = add i64 %mul76, 32768
  %add79 = add i64 %add78, %mul77
  %shr80151 = lshr i64 %add79, 16
  %conv81 = trunc i64 %shr80151 to i8
  store i8 %conv81, i8* %scevgep, align 1, !tbaa !44
  %45 = load i32, i32* %v_samp_factor, align 4, !tbaa !38
  %46 = sext i32 %45 to i64
  %cmp = icmp slt i64 %indvars.iv.next, %46
  br i1 %cmp, label %for.body, label %for.end83.loopexit

for.end83.loopexit:                               ; preds = %for.end
  br label %for.end83

for.end83:                                        ; preds = %for.end83.loopexit, %expand_right_edge.exit
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @fullsize_downsample(%struct.jpeg_compress_struct* nocapture readonly %cinfo, %struct.jpeg_component_info* nocapture readonly %compptr, i8** %input_data, i8** %output_data) #0 !prof !36 {
entry:
  %max_v_samp_factor = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 39
  %0 = load i32, i32* %max_v_samp_factor, align 4, !tbaa !42
  %image_width = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 6
  %1 = load i32, i32* %image_width, align 8, !tbaa !43
  tail call void @jcopy_sample_rows(i8** %input_data, i32 0, i8** %output_data, i32 0, i32 %0, i32 %1) #5
  %2 = load i32, i32* %max_v_samp_factor, align 4, !tbaa !42
  %3 = load i32, i32* %image_width, align 8, !tbaa !43
  %width_in_blocks = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr, i64 0, i32 7
  %4 = load i32, i32* %width_in_blocks, align 4, !tbaa !41
  %mul = shl i32 %4, 3
  %sub.i = sub i32 %mul, %3
  %cmp.i = icmp sgt i32 %sub.i, 0
  %cmp121.i = icmp sgt i32 %2, 0
  %or.cond.i = and i1 %cmp121.i, %cmp.i
  br i1 %or.cond.i, label %for.body.us.preheader.i, label %expand_right_edge.exit

for.body.us.preheader.i:                          ; preds = %entry
  %idx.ext.i = zext i32 %3 to i64
  %5 = add i32 %3, -1
  %6 = sub i32 %5, %mul
  %7 = icmp sgt i32 %6, -2
  %smax.i = select i1 %7, i32 %6, i32 -2
  %8 = sub i32 1, %3
  %9 = add i32 %8, %mul
  %10 = add i32 %9, %smax.i
  %11 = zext i32 %10 to i64
  %12 = add nuw nsw i64 %11, 1
  %13 = add i32 %2, -1
  %xtraiter = and i32 %2, 3
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod, label %for.body.us.preheader.i.split, label %for.body.us.i.prol.preheader

for.body.us.i.prol.preheader:                     ; preds = %for.body.us.preheader.i
  br label %for.body.us.i.prol

for.body.us.i.prol:                               ; preds = %for.body.us.i.prol.preheader, %for.body.us.i.prol
  %indvars.iv.i.prol = phi i64 [ %indvars.iv.next.i.prol, %for.body.us.i.prol ], [ 0, %for.body.us.i.prol.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %for.body.us.i.prol ], [ %xtraiter, %for.body.us.i.prol.preheader ]
  %arrayidx.us.i.prol = getelementptr inbounds i8*, i8** %output_data, i64 %indvars.iv.i.prol
  %14 = load i8*, i8** %arrayidx.us.i.prol, align 8, !tbaa !31
  %add.ptr.us.i.prol = getelementptr inbounds i8, i8* %14, i64 %idx.ext.i
  %arrayidx2.us.i.prol = getelementptr inbounds i8, i8* %add.ptr.us.i.prol, i64 -1
  %15 = load i8, i8* %arrayidx2.us.i.prol, align 1, !tbaa !44
  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr.us.i.prol, i8 %15, i64 %12, i32 1, i1 false) #5
  %indvars.iv.next.i.prol = add nuw nsw i64 %indvars.iv.i.prol, 1
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %for.body.us.preheader.i.split.loopexit, label %for.body.us.i.prol, !llvm.loop !47

for.body.us.preheader.i.split.loopexit:           ; preds = %for.body.us.i.prol
  %indvars.iv.next.i.prol.lcssa = phi i64 [ %indvars.iv.next.i.prol, %for.body.us.i.prol ]
  br label %for.body.us.preheader.i.split

for.body.us.preheader.i.split:                    ; preds = %for.body.us.preheader.i.split.loopexit, %for.body.us.preheader.i
  %indvars.iv.i.unr = phi i64 [ 0, %for.body.us.preheader.i ], [ %indvars.iv.next.i.prol.lcssa, %for.body.us.preheader.i.split.loopexit ]
  %16 = icmp ult i32 %13, 3
  br i1 %16, label %expand_right_edge.exit.loopexit, label %for.body.us.preheader.i.split.split

for.body.us.preheader.i.split.split:              ; preds = %for.body.us.preheader.i.split
  br label %for.body.us.i

for.body.us.i:                                    ; preds = %for.body.us.i, %for.body.us.preheader.i.split.split
  %indvars.iv.i = phi i64 [ %indvars.iv.i.unr, %for.body.us.preheader.i.split.split ], [ %indvars.iv.next.i.3, %for.body.us.i ]
  %arrayidx.us.i = getelementptr inbounds i8*, i8** %output_data, i64 %indvars.iv.i
  %17 = load i8*, i8** %arrayidx.us.i, align 8, !tbaa !31
  %add.ptr.us.i = getelementptr inbounds i8, i8* %17, i64 %idx.ext.i
  %arrayidx2.us.i = getelementptr inbounds i8, i8* %add.ptr.us.i, i64 -1
  %18 = load i8, i8* %arrayidx2.us.i, align 1, !tbaa !44
  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr.us.i, i8 %18, i64 %12, i32 1, i1 false) #5
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %arrayidx.us.i.1 = getelementptr inbounds i8*, i8** %output_data, i64 %indvars.iv.next.i
  %19 = load i8*, i8** %arrayidx.us.i.1, align 8, !tbaa !31
  %add.ptr.us.i.1 = getelementptr inbounds i8, i8* %19, i64 %idx.ext.i
  %arrayidx2.us.i.1 = getelementptr inbounds i8, i8* %add.ptr.us.i.1, i64 -1
  %20 = load i8, i8* %arrayidx2.us.i.1, align 1, !tbaa !44
  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr.us.i.1, i8 %20, i64 %12, i32 1, i1 false) #5
  %indvars.iv.next.i.1 = add nsw i64 %indvars.iv.i, 2
  %arrayidx.us.i.2 = getelementptr inbounds i8*, i8** %output_data, i64 %indvars.iv.next.i.1
  %21 = load i8*, i8** %arrayidx.us.i.2, align 8, !tbaa !31
  %add.ptr.us.i.2 = getelementptr inbounds i8, i8* %21, i64 %idx.ext.i
  %arrayidx2.us.i.2 = getelementptr inbounds i8, i8* %add.ptr.us.i.2, i64 -1
  %22 = load i8, i8* %arrayidx2.us.i.2, align 1, !tbaa !44
  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr.us.i.2, i8 %22, i64 %12, i32 1, i1 false) #5
  %indvars.iv.next.i.2 = add nsw i64 %indvars.iv.i, 3
  %arrayidx.us.i.3 = getelementptr inbounds i8*, i8** %output_data, i64 %indvars.iv.next.i.2
  %23 = load i8*, i8** %arrayidx.us.i.3, align 8, !tbaa !31
  %add.ptr.us.i.3 = getelementptr inbounds i8, i8* %23, i64 %idx.ext.i
  %arrayidx2.us.i.3 = getelementptr inbounds i8, i8* %add.ptr.us.i.3, i64 -1
  %24 = load i8, i8* %arrayidx2.us.i.3, align 1, !tbaa !44
  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr.us.i.3, i8 %24, i64 %12, i32 1, i1 false) #5
  %indvars.iv.next.i.3 = add nsw i64 %indvars.iv.i, 4
  %lftr.wideiv.3 = trunc i64 %indvars.iv.next.i.3 to i32
  %exitcond.3 = icmp eq i32 %lftr.wideiv.3, %2
  br i1 %exitcond.3, label %expand_right_edge.exit.loopexit.unr-lcssa, label %for.body.us.i

expand_right_edge.exit.loopexit.unr-lcssa:        ; preds = %for.body.us.i
  br label %expand_right_edge.exit.loopexit

expand_right_edge.exit.loopexit:                  ; preds = %for.body.us.preheader.i.split, %expand_right_edge.exit.loopexit.unr-lcssa
  br label %expand_right_edge.exit

expand_right_edge.exit:                           ; preds = %expand_right_edge.exit.loopexit, %entry
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define internal void @h2v1_downsample(%struct.jpeg_compress_struct* nocapture readonly %cinfo, %struct.jpeg_component_info* nocapture readonly %compptr, i8** nocapture readonly %input_data, i8** nocapture readonly %output_data) #2 !prof !40 {
entry:
  %width_in_blocks = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr, i64 0, i32 7
  %0 = load i32, i32* %width_in_blocks, align 4, !tbaa !41
  %mul = shl i32 %0, 3
  %max_v_samp_factor = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 39
  %1 = load i32, i32* %max_v_samp_factor, align 4, !tbaa !42
  %image_width = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 6
  %2 = load i32, i32* %image_width, align 8, !tbaa !43
  %mul1 = shl i32 %0, 4
  %sub.i = sub i32 %mul1, %2
  %cmp.i = icmp sgt i32 %sub.i, 0
  %cmp121.i = icmp sgt i32 %1, 0
  %or.cond.i = and i1 %cmp121.i, %cmp.i
  br i1 %or.cond.i, label %for.body.us.preheader.i, label %for.cond.preheader

for.body.us.preheader.i:                          ; preds = %entry
  %idx.ext.i = zext i32 %2 to i64
  %3 = xor i32 %mul1, -1
  %4 = add i32 %2, %3
  %5 = icmp sgt i32 %4, -2
  %smax.i = select i1 %5, i32 %4, i32 -2
  %6 = or i32 %mul1, 1
  %7 = sub i32 %6, %2
  %8 = add i32 %7, %smax.i
  %9 = zext i32 %8 to i64
  %10 = add nuw nsw i64 %9, 1
  %11 = add i32 %1, -1
  %xtraiter50 = and i32 %1, 3
  %lcmp.mod51 = icmp eq i32 %xtraiter50, 0
  br i1 %lcmp.mod51, label %for.body.us.preheader.i.split, label %for.body.us.i.prol.preheader

for.body.us.i.prol.preheader:                     ; preds = %for.body.us.preheader.i
  br label %for.body.us.i.prol

for.body.us.i.prol:                               ; preds = %for.body.us.i.prol.preheader, %for.body.us.i.prol
  %indvars.iv.i.prol = phi i64 [ %indvars.iv.next.i.prol, %for.body.us.i.prol ], [ 0, %for.body.us.i.prol.preheader ]
  %prol.iter52 = phi i32 [ %prol.iter52.sub, %for.body.us.i.prol ], [ %xtraiter50, %for.body.us.i.prol.preheader ]
  %arrayidx.us.i.prol = getelementptr inbounds i8*, i8** %input_data, i64 %indvars.iv.i.prol
  %12 = load i8*, i8** %arrayidx.us.i.prol, align 8, !tbaa !31
  %add.ptr.us.i.prol = getelementptr inbounds i8, i8* %12, i64 %idx.ext.i
  %arrayidx2.us.i.prol = getelementptr inbounds i8, i8* %add.ptr.us.i.prol, i64 -1
  %13 = load i8, i8* %arrayidx2.us.i.prol, align 1, !tbaa !44
  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr.us.i.prol, i8 %13, i64 %10, i32 1, i1 false) #5
  %indvars.iv.next.i.prol = add nuw nsw i64 %indvars.iv.i.prol, 1
  %prol.iter52.sub = add i32 %prol.iter52, -1
  %prol.iter52.cmp = icmp eq i32 %prol.iter52.sub, 0
  br i1 %prol.iter52.cmp, label %for.body.us.preheader.i.split.loopexit, label %for.body.us.i.prol, !llvm.loop !48

for.body.us.preheader.i.split.loopexit:           ; preds = %for.body.us.i.prol
  %indvars.iv.next.i.prol.lcssa = phi i64 [ %indvars.iv.next.i.prol, %for.body.us.i.prol ]
  br label %for.body.us.preheader.i.split

for.body.us.preheader.i.split:                    ; preds = %for.body.us.preheader.i.split.loopexit, %for.body.us.preheader.i
  %indvars.iv.i.unr = phi i64 [ 0, %for.body.us.preheader.i ], [ %indvars.iv.next.i.prol.lcssa, %for.body.us.preheader.i.split.loopexit ]
  %14 = icmp ult i32 %11, 3
  br i1 %14, label %for.cond.preheader.loopexit, label %for.body.us.preheader.i.split.split

for.body.us.preheader.i.split.split:              ; preds = %for.body.us.preheader.i.split
  br label %for.body.us.i

for.body.us.i:                                    ; preds = %for.body.us.i, %for.body.us.preheader.i.split.split
  %indvars.iv.i = phi i64 [ %indvars.iv.i.unr, %for.body.us.preheader.i.split.split ], [ %indvars.iv.next.i.3, %for.body.us.i ]
  %arrayidx.us.i = getelementptr inbounds i8*, i8** %input_data, i64 %indvars.iv.i
  %15 = load i8*, i8** %arrayidx.us.i, align 8, !tbaa !31
  %add.ptr.us.i = getelementptr inbounds i8, i8* %15, i64 %idx.ext.i
  %arrayidx2.us.i = getelementptr inbounds i8, i8* %add.ptr.us.i, i64 -1
  %16 = load i8, i8* %arrayidx2.us.i, align 1, !tbaa !44
  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr.us.i, i8 %16, i64 %10, i32 1, i1 false) #5
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %arrayidx.us.i.1 = getelementptr inbounds i8*, i8** %input_data, i64 %indvars.iv.next.i
  %17 = load i8*, i8** %arrayidx.us.i.1, align 8, !tbaa !31
  %add.ptr.us.i.1 = getelementptr inbounds i8, i8* %17, i64 %idx.ext.i
  %arrayidx2.us.i.1 = getelementptr inbounds i8, i8* %add.ptr.us.i.1, i64 -1
  %18 = load i8, i8* %arrayidx2.us.i.1, align 1, !tbaa !44
  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr.us.i.1, i8 %18, i64 %10, i32 1, i1 false) #5
  %indvars.iv.next.i.1 = add nsw i64 %indvars.iv.i, 2
  %arrayidx.us.i.2 = getelementptr inbounds i8*, i8** %input_data, i64 %indvars.iv.next.i.1
  %19 = load i8*, i8** %arrayidx.us.i.2, align 8, !tbaa !31
  %add.ptr.us.i.2 = getelementptr inbounds i8, i8* %19, i64 %idx.ext.i
  %arrayidx2.us.i.2 = getelementptr inbounds i8, i8* %add.ptr.us.i.2, i64 -1
  %20 = load i8, i8* %arrayidx2.us.i.2, align 1, !tbaa !44
  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr.us.i.2, i8 %20, i64 %10, i32 1, i1 false) #5
  %indvars.iv.next.i.2 = add nsw i64 %indvars.iv.i, 3
  %arrayidx.us.i.3 = getelementptr inbounds i8*, i8** %input_data, i64 %indvars.iv.next.i.2
  %21 = load i8*, i8** %arrayidx.us.i.3, align 8, !tbaa !31
  %add.ptr.us.i.3 = getelementptr inbounds i8, i8* %21, i64 %idx.ext.i
  %arrayidx2.us.i.3 = getelementptr inbounds i8, i8* %add.ptr.us.i.3, i64 -1
  %22 = load i8, i8* %arrayidx2.us.i.3, align 1, !tbaa !44
  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr.us.i.3, i8 %22, i64 %10, i32 1, i1 false) #5
  %indvars.iv.next.i.3 = add nsw i64 %indvars.iv.i, 4
  %lftr.wideiv.3 = trunc i64 %indvars.iv.next.i.3 to i32
  %exitcond40.3 = icmp eq i32 %lftr.wideiv.3, %1
  br i1 %exitcond40.3, label %for.cond.preheader.loopexit.unr-lcssa, label %for.body.us.i

for.cond.preheader.loopexit.unr-lcssa:            ; preds = %for.body.us.i
  br label %for.cond.preheader.loopexit

for.cond.preheader.loopexit:                      ; preds = %for.body.us.preheader.i.split, %for.cond.preheader.loopexit.unr-lcssa
  br label %for.cond.preheader

for.cond.preheader:                               ; preds = %for.cond.preheader.loopexit, %entry
  %v_samp_factor = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr, i64 0, i32 3
  %23 = load i32, i32* %v_samp_factor, align 4, !tbaa !38
  %cmp37 = icmp sgt i32 %23, 0
  br i1 %cmp37, label %for.body.lr.ph, label %for.end13

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %cmp532 = icmp eq i32 %mul, 0
  br i1 %cmp532, label %for.body.preheader, label %for.body.us.preheader

for.body.us.preheader:                            ; preds = %for.body.lr.ph
  br label %for.body.us

for.body.preheader:                               ; preds = %for.body.lr.ph
  %min.iters.check = icmp ult i32 %23, 32
  br i1 %min.iters.check, label %for.body.preheader46, label %min.iters.checked

for.body.preheader46:                             ; preds = %middle.block, %min.iters.checked, %for.body.preheader
  %outrow.038.ph = phi i32 [ 0, %min.iters.checked ], [ 0, %for.body.preheader ], [ %n.vec, %middle.block ]
  br label %for.body

min.iters.checked:                                ; preds = %for.body.preheader
  %n.vec = and i32 %23, -32
  %cmp.zero = icmp eq i32 %n.vec, 0
  br i1 %cmp.zero, label %for.body.preheader46, label %vector.body.preheader

vector.body.preheader:                            ; preds = %min.iters.checked
  %24 = add i32 %23, -32
  %25 = lshr i32 %24, 5
  %26 = add nuw nsw i32 %25, 1
  %xtraiter = and i32 %26, 7
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod, label %vector.body.preheader.split, label %vector.body.prol.preheader

vector.body.prol.preheader:                       ; preds = %vector.body.preheader
  br label %vector.body.prol

vector.body.prol:                                 ; preds = %vector.body.prol.preheader, %vector.body.prol
  %index.prol = phi i32 [ %index.next.prol, %vector.body.prol ], [ 0, %vector.body.prol.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %vector.body.prol ], [ %xtraiter, %vector.body.prol.preheader ]
  %index.next.prol = add i32 %index.prol, 32
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %vector.body.preheader.split.loopexit, label %vector.body.prol, !llvm.loop !49

vector.body.preheader.split.loopexit:             ; preds = %vector.body.prol
  %index.next.prol.lcssa = phi i32 [ %index.next.prol, %vector.body.prol ]
  br label %vector.body.preheader.split

vector.body.preheader.split:                      ; preds = %vector.body.preheader.split.loopexit, %vector.body.preheader
  %index.unr = phi i32 [ 0, %vector.body.preheader ], [ %index.next.prol.lcssa, %vector.body.preheader.split.loopexit ]
  %27 = icmp ult i32 %24, 224
  br i1 %27, label %middle.block, label %vector.body.preheader.split.split

vector.body.preheader.split.split:                ; preds = %vector.body.preheader.split
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.body.preheader.split.split
  %index = phi i32 [ %index.unr, %vector.body.preheader.split.split ], [ %index.next.7, %vector.body ]
  %index.next.7 = add i32 %index, 256
  %28 = icmp eq i32 %index.next.7, %n.vec
  br i1 %28, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !50

middle.block.unr-lcssa:                           ; preds = %vector.body
  br label %middle.block

middle.block:                                     ; preds = %vector.body.preheader.split, %middle.block.unr-lcssa
  %cmp.n = icmp eq i32 %23, %n.vec
  br i1 %cmp.n, label %for.end13, label %for.body.preheader46

for.body.us:                                      ; preds = %for.body.us.preheader, %for.cond4.for.inc11_crit_edge.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.cond4.for.inc11_crit_edge.us ], [ 0, %for.body.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8*, i8** %output_data, i64 %indvars.iv
  %29 = load i8*, i8** %arrayidx.us, align 8, !tbaa !31
  %arrayidx3.us = getelementptr inbounds i8*, i8** %input_data, i64 %indvars.iv
  %30 = load i8*, i8** %arrayidx3.us, align 8, !tbaa !31
  br i1 false, label %for.body6.us.prol, label %for.body.us.split

for.body6.us.prol:                                ; preds = %for.body.us
  br label %for.body.us.split

for.body.us.split:                                ; preds = %for.body6.us.prol, %for.body.us
  %bias.036.us.unr = phi i32 [ 0, %for.body.us ], [ 1, %for.body6.us.prol ]
  %outcol.033.us.unr = phi i32 [ 0, %for.body.us ], [ 1, %for.body6.us.prol ]
  br i1 false, label %for.cond4.for.inc11_crit_edge.us, label %for.body.us.split.split

for.body.us.split.split:                          ; preds = %for.body.us.split
  %xor.us = xor i32 %bias.036.us.unr, 1
  br label %for.body6.us

for.body6.us:                                     ; preds = %for.body6.us, %for.body.us.split.split
  %outptr.035.us = phi i8* [ %29, %for.body.us.split.split ], [ %incdec.ptr.us.1, %for.body6.us ]
  %inptr.034.us = phi i8* [ %30, %for.body.us.split.split ], [ %add.ptr.us.1, %for.body6.us ]
  %outcol.033.us = phi i32 [ %outcol.033.us.unr, %for.body.us.split.split ], [ %inc.us.1, %for.body6.us ]
  %31 = load i8, i8* %inptr.034.us, align 1, !tbaa !44
  %conv.us = zext i8 %31 to i32
  %arrayidx7.us = getelementptr inbounds i8, i8* %inptr.034.us, i64 1
  %32 = load i8, i8* %arrayidx7.us, align 1, !tbaa !44
  %conv8.us = zext i8 %32 to i32
  %add.us = add nuw nsw i32 %conv.us, %bias.036.us.unr
  %add9.us = add nuw nsw i32 %add.us, %conv8.us
  %shr31.us = lshr i32 %add9.us, 1
  %conv10.us = trunc i32 %shr31.us to i8
  %incdec.ptr.us = getelementptr inbounds i8, i8* %outptr.035.us, i64 1
  store i8 %conv10.us, i8* %outptr.035.us, align 1, !tbaa !44
  %add.ptr.us = getelementptr inbounds i8, i8* %inptr.034.us, i64 2
  %33 = load i8, i8* %add.ptr.us, align 1, !tbaa !44
  %conv.us.1 = zext i8 %33 to i32
  %arrayidx7.us.1 = getelementptr inbounds i8, i8* %inptr.034.us, i64 3
  %34 = load i8, i8* %arrayidx7.us.1, align 1, !tbaa !44
  %conv8.us.1 = zext i8 %34 to i32
  %add.us.1 = add nuw nsw i32 %conv.us.1, %xor.us
  %add9.us.1 = add nuw nsw i32 %add.us.1, %conv8.us.1
  %shr31.us.1 = lshr i32 %add9.us.1, 1
  %conv10.us.1 = trunc i32 %shr31.us.1 to i8
  %incdec.ptr.us.1 = getelementptr inbounds i8, i8* %outptr.035.us, i64 2
  store i8 %conv10.us.1, i8* %incdec.ptr.us, align 1, !tbaa !44
  %add.ptr.us.1 = getelementptr inbounds i8, i8* %inptr.034.us, i64 4
  %inc.us.1 = add i32 %outcol.033.us, 2
  %exitcond.1 = icmp eq i32 %inc.us.1, %mul
  br i1 %exitcond.1, label %for.cond4.for.inc11_crit_edge.us.unr-lcssa, label %for.body6.us

for.cond4.for.inc11_crit_edge.us.unr-lcssa:       ; preds = %for.body6.us
  br label %for.cond4.for.inc11_crit_edge.us

for.cond4.for.inc11_crit_edge.us:                 ; preds = %for.body.us.split, %for.cond4.for.inc11_crit_edge.us.unr-lcssa
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %35 = load i32, i32* %v_samp_factor, align 4, !tbaa !38
  %36 = sext i32 %35 to i64
  %cmp.us = icmp slt i64 %indvars.iv.next, %36
  br i1 %cmp.us, label %for.body.us, label %for.end13.loopexit47

for.body:                                         ; preds = %for.body.preheader46, %for.body
  %outrow.038 = phi i32 [ %inc12, %for.body ], [ %outrow.038.ph, %for.body.preheader46 ]
  %inc12 = add nuw nsw i32 %outrow.038, 1
  %cmp = icmp slt i32 %inc12, %23
  br i1 %cmp, label %for.body, label %for.end13.loopexit, !llvm.loop !53

for.end13.loopexit:                               ; preds = %for.body
  br label %for.end13

for.end13.loopexit47:                             ; preds = %for.cond4.for.inc11_crit_edge.us
  br label %for.end13

for.end13:                                        ; preds = %for.end13.loopexit47, %for.end13.loopexit, %middle.block, %for.cond.preheader
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define internal void @h2v2_smooth_downsample(%struct.jpeg_compress_struct* nocapture readonly %cinfo, %struct.jpeg_component_info* nocapture readonly %compptr, i8** nocapture readonly %input_data, i8** nocapture readonly %output_data) #2 !prof !40 {
entry:
  %width_in_blocks = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr, i64 0, i32 7
  %0 = load i32, i32* %width_in_blocks, align 4, !tbaa !41
  %mul = shl i32 %0, 3
  %add.ptr = getelementptr inbounds i8*, i8** %input_data, i64 -1
  %max_v_samp_factor = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 39
  %1 = load i32, i32* %max_v_samp_factor, align 4, !tbaa !42
  %image_width = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 6
  %2 = load i32, i32* %image_width, align 8, !tbaa !43
  %mul1 = shl i32 %0, 4
  %sub.i = sub i32 %mul1, %2
  %cmp.i = icmp sgt i32 %sub.i, 0
  %cmp121.i = icmp sgt i32 %1, -2
  %or.cond.i = and i1 %cmp121.i, %cmp.i
  br i1 %or.cond.i, label %for.body.us.preheader.i, label %expand_right_edge.exit

for.body.us.preheader.i:                          ; preds = %entry
  %idx.ext.i = zext i32 %2 to i64
  %3 = xor i32 %mul1, -1
  %4 = add i32 %2, %3
  %5 = icmp sgt i32 %4, -2
  %smax.i = select i1 %5, i32 %4, i32 -2
  %6 = or i32 %mul1, 1
  %7 = sub i32 %6, %2
  %8 = add i32 %7, %smax.i
  %9 = zext i32 %8 to i64
  %10 = add nuw nsw i64 %9, 1
  %11 = add i32 %1, 2
  %12 = add i32 %1, 1
  %xtraiter = and i32 %11, 3
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod, label %for.body.us.preheader.i.split, label %for.body.us.i.prol.preheader

for.body.us.i.prol.preheader:                     ; preds = %for.body.us.preheader.i
  br label %for.body.us.i.prol

for.body.us.i.prol:                               ; preds = %for.body.us.i.prol.preheader, %for.body.us.i.prol
  %indvars.iv.i.prol = phi i64 [ %indvars.iv.next.i.prol, %for.body.us.i.prol ], [ 0, %for.body.us.i.prol.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %for.body.us.i.prol ], [ %xtraiter, %for.body.us.i.prol.preheader ]
  %arrayidx.us.i.prol = getelementptr inbounds i8*, i8** %add.ptr, i64 %indvars.iv.i.prol
  %13 = load i8*, i8** %arrayidx.us.i.prol, align 8, !tbaa !31
  %add.ptr.us.i.prol = getelementptr inbounds i8, i8* %13, i64 %idx.ext.i
  %arrayidx2.us.i.prol = getelementptr inbounds i8, i8* %add.ptr.us.i.prol, i64 -1
  %14 = load i8, i8* %arrayidx2.us.i.prol, align 1, !tbaa !44
  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr.us.i.prol, i8 %14, i64 %10, i32 1, i1 false) #5
  %indvars.iv.next.i.prol = add nuw nsw i64 %indvars.iv.i.prol, 1
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %for.body.us.preheader.i.split.loopexit, label %for.body.us.i.prol, !llvm.loop !55

for.body.us.preheader.i.split.loopexit:           ; preds = %for.body.us.i.prol
  %indvars.iv.next.i.prol.lcssa = phi i64 [ %indvars.iv.next.i.prol, %for.body.us.i.prol ]
  br label %for.body.us.preheader.i.split

for.body.us.preheader.i.split:                    ; preds = %for.body.us.preheader.i.split.loopexit, %for.body.us.preheader.i
  %indvars.iv.i.unr = phi i64 [ 0, %for.body.us.preheader.i ], [ %indvars.iv.next.i.prol.lcssa, %for.body.us.preheader.i.split.loopexit ]
  %15 = icmp ult i32 %12, 3
  br i1 %15, label %expand_right_edge.exit.loopexit, label %for.body.us.preheader.i.split.split

for.body.us.preheader.i.split.split:              ; preds = %for.body.us.preheader.i.split
  br label %for.body.us.i

for.body.us.i:                                    ; preds = %for.body.us.i, %for.body.us.preheader.i.split.split
  %indvars.iv.i = phi i64 [ %indvars.iv.i.unr, %for.body.us.preheader.i.split.split ], [ %indvars.iv.next.i.3, %for.body.us.i ]
  %arrayidx.us.i = getelementptr inbounds i8*, i8** %add.ptr, i64 %indvars.iv.i
  %16 = load i8*, i8** %arrayidx.us.i, align 8, !tbaa !31
  %add.ptr.us.i = getelementptr inbounds i8, i8* %16, i64 %idx.ext.i
  %arrayidx2.us.i = getelementptr inbounds i8, i8* %add.ptr.us.i, i64 -1
  %17 = load i8, i8* %arrayidx2.us.i, align 1, !tbaa !44
  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr.us.i, i8 %17, i64 %10, i32 1, i1 false) #5
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %arrayidx.us.i.1 = getelementptr inbounds i8*, i8** %add.ptr, i64 %indvars.iv.next.i
  %18 = load i8*, i8** %arrayidx.us.i.1, align 8, !tbaa !31
  %add.ptr.us.i.1 = getelementptr inbounds i8, i8* %18, i64 %idx.ext.i
  %arrayidx2.us.i.1 = getelementptr inbounds i8, i8* %add.ptr.us.i.1, i64 -1
  %19 = load i8, i8* %arrayidx2.us.i.1, align 1, !tbaa !44
  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr.us.i.1, i8 %19, i64 %10, i32 1, i1 false) #5
  %indvars.iv.next.i.1 = add nsw i64 %indvars.iv.i, 2
  %arrayidx.us.i.2 = getelementptr inbounds i8*, i8** %add.ptr, i64 %indvars.iv.next.i.1
  %20 = load i8*, i8** %arrayidx.us.i.2, align 8, !tbaa !31
  %add.ptr.us.i.2 = getelementptr inbounds i8, i8* %20, i64 %idx.ext.i
  %arrayidx2.us.i.2 = getelementptr inbounds i8, i8* %add.ptr.us.i.2, i64 -1
  %21 = load i8, i8* %arrayidx2.us.i.2, align 1, !tbaa !44
  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr.us.i.2, i8 %21, i64 %10, i32 1, i1 false) #5
  %indvars.iv.next.i.2 = add nsw i64 %indvars.iv.i, 3
  %arrayidx.us.i.3 = getelementptr inbounds i8*, i8** %add.ptr, i64 %indvars.iv.next.i.2
  %22 = load i8*, i8** %arrayidx.us.i.3, align 8, !tbaa !31
  %add.ptr.us.i.3 = getelementptr inbounds i8, i8* %22, i64 %idx.ext.i
  %arrayidx2.us.i.3 = getelementptr inbounds i8, i8* %add.ptr.us.i.3, i64 -1
  %23 = load i8, i8* %arrayidx2.us.i.3, align 1, !tbaa !44
  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr.us.i.3, i8 %23, i64 %10, i32 1, i1 false) #5
  %indvars.iv.next.i.3 = add nsw i64 %indvars.iv.i, 4
  %lftr.wideiv.3 = trunc i64 %indvars.iv.next.i.3 to i32
  %exitcond.3 = icmp eq i32 %lftr.wideiv.3, %11
  br i1 %exitcond.3, label %expand_right_edge.exit.loopexit.unr-lcssa, label %for.body.us.i

expand_right_edge.exit.loopexit.unr-lcssa:        ; preds = %for.body.us.i
  br label %expand_right_edge.exit.loopexit

expand_right_edge.exit.loopexit:                  ; preds = %for.body.us.preheader.i.split, %expand_right_edge.exit.loopexit.unr-lcssa
  br label %expand_right_edge.exit

expand_right_edge.exit:                           ; preds = %expand_right_edge.exit.loopexit, %entry
  %smoothing_factor = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 27
  %24 = load i32, i32* %smoothing_factor, align 8, !tbaa !30
  %25 = mul i32 %24, -80
  %sub = add i32 %25, 16384
  %conv = sext i32 %sub to i64
  %mul4 = shl nsw i32 %24, 4
  %conv5 = sext i32 %mul4 to i64
  %v_samp_factor = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr, i64 0, i32 3
  %26 = load i32, i32* %v_samp_factor, align 4, !tbaa !38
  %cmp287 = icmp sgt i32 %26, 0
  br i1 %cmp287, label %for.body.lr.ph, label %for.end185

for.body.lr.ph:                                   ; preds = %expand_right_edge.exit
  %sub69 = add i32 %mul, -2
  %27 = zext i32 %sub69 to i64
  %28 = or i64 %27, 1
  %29 = shl nuw nsw i64 %27, 1
  %30 = or i64 %29, 2
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.end
  %indvars.iv295 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next296, %for.end ]
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.end ]
  %arrayidx = getelementptr inbounds i8*, i8** %output_data, i64 %indvars.iv295
  %31 = load i8*, i8** %arrayidx, align 8, !tbaa !31
  %arrayidx8 = getelementptr inbounds i8*, i8** %input_data, i64 %indvars.iv
  %32 = load i8*, i8** %arrayidx8, align 8, !tbaa !31
  %33 = or i64 %indvars.iv, 1
  %arrayidx11 = getelementptr inbounds i8*, i8** %input_data, i64 %33
  %34 = load i8*, i8** %arrayidx11, align 8, !tbaa !31
  %35 = add nsw i64 %indvars.iv, -1
  %arrayidx14 = getelementptr inbounds i8*, i8** %input_data, i64 %35
  %36 = load i8*, i8** %arrayidx14, align 8, !tbaa !31
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 2
  %arrayidx17 = getelementptr inbounds i8*, i8** %input_data, i64 %indvars.iv.next
  %37 = load i8*, i8** %arrayidx17, align 8, !tbaa !31
  %38 = load i8, i8* %32, align 1, !tbaa !44
  %conv18 = zext i8 %38 to i32
  %arrayidx19 = getelementptr inbounds i8, i8* %32, i64 1
  %39 = load i8, i8* %arrayidx19, align 1, !tbaa !44
  %conv20 = zext i8 %39 to i32
  %add21 = add nuw nsw i32 %conv20, %conv18
  %40 = load i8, i8* %34, align 1, !tbaa !44
  %conv22 = zext i8 %40 to i32
  %add23 = add nuw nsw i32 %add21, %conv22
  %arrayidx24 = getelementptr inbounds i8, i8* %34, i64 1
  %41 = load i8, i8* %arrayidx24, align 1, !tbaa !44
  %conv25 = zext i8 %41 to i32
  %add26 = add nuw nsw i32 %add23, %conv25
  %conv27279 = zext i32 %add26 to i64
  %42 = load i8, i8* %36, align 1, !tbaa !44
  %conv28 = zext i8 %42 to i32
  %arrayidx29 = getelementptr inbounds i8, i8* %36, i64 1
  %43 = load i8, i8* %arrayidx29, align 1, !tbaa !44
  %conv30 = zext i8 %43 to i32
  %44 = load i8, i8* %37, align 1, !tbaa !44
  %conv32 = zext i8 %44 to i32
  %arrayidx34 = getelementptr inbounds i8, i8* %37, i64 1
  %45 = load i8, i8* %arrayidx34, align 1, !tbaa !44
  %conv35 = zext i8 %45 to i32
  %arrayidx39 = getelementptr inbounds i8, i8* %32, i64 2
  %46 = load i8, i8* %arrayidx39, align 1, !tbaa !44
  %conv40 = zext i8 %46 to i32
  %arrayidx44 = getelementptr inbounds i8, i8* %34, i64 2
  %47 = load i8, i8* %arrayidx44, align 1, !tbaa !44
  %conv45 = zext i8 %47 to i32
  %add31 = add nuw nsw i32 %conv22, %conv18
  %add33 = add nuw nsw i32 %add31, %conv28
  %add36 = add nuw nsw i32 %add33, %conv30
  %add38 = add nuw nsw i32 %add36, %conv32
  %add41 = add nuw nsw i32 %add38, %conv35
  %add43 = add nuw nsw i32 %add41, %conv40
  %add46 = add i32 %add43, %conv45
  %conv47 = sext i32 %add46 to i64
  %add48 = shl nsw i64 %conv47, 1
  %arrayidx50 = getelementptr inbounds i8, i8* %36, i64 2
  %48 = load i8, i8* %arrayidx50, align 1, !tbaa !44
  %conv51 = zext i8 %48 to i32
  %arrayidx55 = getelementptr inbounds i8, i8* %37, i64 2
  %49 = load i8, i8* %arrayidx55, align 1, !tbaa !44
  %conv56 = zext i8 %49 to i32
  %add52 = add nuw nsw i32 %conv32, %conv28
  %add54 = add nuw nsw i32 %add52, %conv51
  %add57 = add nuw nsw i32 %add54, %conv56
  %conv58280 = zext i32 %add57 to i64
  %add59 = add nsw i64 %add48, %conv58280
  %mul60 = mul nsw i64 %conv27279, %conv
  %mul61 = mul nsw i64 %add59, %conv5
  %add62 = add i64 %mul60, 32768
  %add63 = add i64 %add62, %mul61
  %shr281 = lshr i64 %add63, 16
  %conv64 = trunc i64 %shr281 to i8
  store i8 %conv64, i8* %31, align 1, !tbaa !44
  %scevgep = getelementptr i8, i8* %31, i64 %28
  %scevgep291 = getelementptr i8, i8* %36, i64 %30
  br label %for.cond70

for.cond70:                                       ; preds = %for.body73, %for.body
  %colctr.0 = phi i32 [ %sub69, %for.body ], [ %dec, %for.body73 ]
  %inptr0.0 = phi i8* [ %arrayidx39, %for.body ], [ %arrayidx96, %for.body73 ]
  %inptr1.0 = phi i8* [ %arrayidx44, %for.body ], [ %arrayidx102, %for.body73 ]
  %above_ptr.0 = phi i8* [ %arrayidx50, %for.body ], [ %arrayidx109, %for.body73 ]
  %below_ptr.0 = phi i8* [ %arrayidx55, %for.body ], [ %arrayidx115, %for.body73 ]
  %.pn = phi i8* [ %31, %for.body ], [ %outptr.0, %for.body73 ]
  %outptr.0 = getelementptr inbounds i8, i8* %.pn, i64 1
  %cmp71 = icmp eq i32 %colctr.0, 0
  %50 = load i8, i8* %inptr0.0, align 1, !tbaa !44
  %conv74 = zext i8 %50 to i32
  %arrayidx75 = getelementptr inbounds i8, i8* %inptr0.0, i64 1
  %51 = load i8, i8* %arrayidx75, align 1, !tbaa !44
  %conv76 = zext i8 %51 to i32
  %add77 = add nuw nsw i32 %conv76, %conv74
  %52 = load i8, i8* %inptr1.0, align 1, !tbaa !44
  %conv78 = zext i8 %52 to i32
  %add79 = add nuw nsw i32 %add77, %conv78
  %arrayidx80 = getelementptr inbounds i8, i8* %inptr1.0, i64 1
  %53 = load i8, i8* %arrayidx80, align 1, !tbaa !44
  %conv81 = zext i8 %53 to i32
  %add82 = add nuw nsw i32 %add79, %conv81
  %conv83282 = zext i32 %add82 to i64
  %54 = load i8, i8* %above_ptr.0, align 1, !tbaa !44
  %conv84 = zext i8 %54 to i32
  %arrayidx85 = getelementptr inbounds i8, i8* %above_ptr.0, i64 1
  %55 = load i8, i8* %arrayidx85, align 1, !tbaa !44
  %conv86 = zext i8 %55 to i32
  %add87 = add nuw nsw i32 %conv86, %conv84
  %56 = load i8, i8* %below_ptr.0, align 1, !tbaa !44
  %conv88 = zext i8 %56 to i32
  %add89 = add nuw nsw i32 %add87, %conv88
  %arrayidx90 = getelementptr inbounds i8, i8* %below_ptr.0, i64 1
  %57 = load i8, i8* %arrayidx90, align 1, !tbaa !44
  %conv91 = zext i8 %57 to i32
  %add92 = add nuw nsw i32 %add89, %conv91
  %arrayidx93 = getelementptr inbounds i8, i8* %inptr0.0, i64 -1
  %58 = load i8, i8* %arrayidx93, align 1, !tbaa !44
  %conv94 = zext i8 %58 to i32
  %add95 = add nuw nsw i32 %add92, %conv94
  br i1 %cmp71, label %for.end, label %for.body73

for.body73:                                       ; preds = %for.cond70
  %arrayidx96 = getelementptr inbounds i8, i8* %inptr0.0, i64 2
  %59 = load i8, i8* %arrayidx96, align 1, !tbaa !44
  %conv97 = zext i8 %59 to i32
  %add98 = add nuw nsw i32 %conv97, %add95
  %arrayidx99 = getelementptr inbounds i8, i8* %inptr1.0, i64 -1
  %60 = load i8, i8* %arrayidx99, align 1, !tbaa !44
  %conv100 = zext i8 %60 to i32
  %add101 = add nuw nsw i32 %add98, %conv100
  %arrayidx102 = getelementptr inbounds i8, i8* %inptr1.0, i64 2
  %61 = load i8, i8* %arrayidx102, align 1, !tbaa !44
  %conv103 = zext i8 %61 to i32
  %add104 = add nsw i32 %add101, %conv103
  %conv105 = sext i32 %add104 to i64
  %add106 = shl nsw i64 %conv105, 1
  %arrayidx107 = getelementptr inbounds i8, i8* %above_ptr.0, i64 -1
  %62 = load i8, i8* %arrayidx107, align 1, !tbaa !44
  %conv108 = zext i8 %62 to i64
  %arrayidx109 = getelementptr inbounds i8, i8* %above_ptr.0, i64 2
  %63 = load i8, i8* %arrayidx109, align 1, !tbaa !44
  %conv110 = zext i8 %63 to i64
  %add111 = add nuw nsw i64 %conv110, %conv108
  %arrayidx112 = getelementptr inbounds i8, i8* %below_ptr.0, i64 -1
  %64 = load i8, i8* %arrayidx112, align 1, !tbaa !44
  %conv113 = zext i8 %64 to i64
  %add114 = add nuw nsw i64 %add111, %conv113
  %arrayidx115 = getelementptr inbounds i8, i8* %below_ptr.0, i64 2
  %65 = load i8, i8* %arrayidx115, align 1, !tbaa !44
  %conv116 = zext i8 %65 to i64
  %add117 = add nsw i64 %add114, %add106
  %add119 = add nsw i64 %add117, %conv116
  %mul120 = mul nsw i64 %conv83282, %conv
  %mul121 = mul nsw i64 %add119, %conv5
  %add122 = add i64 %mul120, 32768
  %add123 = add i64 %add122, %mul121
  %shr124286 = lshr i64 %add123, 16
  %conv125 = trunc i64 %shr124286 to i8
  store i8 %conv125, i8* %outptr.0, align 1, !tbaa !44
  %dec = add i32 %colctr.0, -1
  br label %for.cond70

for.end:                                          ; preds = %for.cond70
  %add95.lcssa = phi i32 [ %add95, %for.cond70 ]
  %conv91.lcssa = phi i32 [ %conv91, %for.cond70 ]
  %conv86.lcssa = phi i32 [ %conv86, %for.cond70 ]
  %conv83282.lcssa = phi i64 [ %conv83282, %for.cond70 ]
  %conv81.lcssa = phi i32 [ %conv81, %for.cond70 ]
  %conv76.lcssa = phi i32 [ %conv76, %for.cond70 ]
  %scevgep290 = getelementptr i8, i8* %37, i64 %30
  %scevgep292 = getelementptr i8, i8* %34, i64 %30
  %arrayidx156 = getelementptr inbounds i8, i8* %scevgep292, i64 -1
  %66 = load i8, i8* %arrayidx156, align 1, !tbaa !44
  %conv157 = zext i8 %66 to i32
  %add155 = add nuw nsw i32 %conv81.lcssa, %conv76.lcssa
  %add158 = add nuw nsw i32 %add155, %add95.lcssa
  %add161 = add nuw nsw i32 %add158, %conv157
  %conv162 = sext i32 %add161 to i64
  %add163 = shl nsw i64 %conv162, 1
  %arrayidx164 = getelementptr inbounds i8, i8* %scevgep291, i64 -1
  %67 = load i8, i8* %arrayidx164, align 1, !tbaa !44
  %conv165 = zext i8 %67 to i32
  %arrayidx169 = getelementptr inbounds i8, i8* %scevgep290, i64 -1
  %68 = load i8, i8* %arrayidx169, align 1, !tbaa !44
  %conv170 = zext i8 %68 to i32
  %add168 = add nuw nsw i32 %conv91.lcssa, %conv86.lcssa
  %add171 = add nuw nsw i32 %add168, %conv165
  %add174 = add nuw nsw i32 %add171, %conv170
  %conv175283 = zext i32 %add174 to i64
  %add176 = add nsw i64 %conv175283, %add163
  %mul177 = mul nsw i64 %conv83282.lcssa, %conv
  %mul178 = mul nsw i64 %add176, %conv5
  %add179 = add i64 %mul177, 32768
  %add180 = add i64 %add179, %mul178
  %shr181284 = lshr i64 %add180, 16
  %conv182 = trunc i64 %shr181284 to i8
  store i8 %conv182, i8* %scevgep, align 1, !tbaa !44
  %indvars.iv.next296 = add nuw nsw i64 %indvars.iv295, 1
  %69 = load i32, i32* %v_samp_factor, align 4, !tbaa !38
  %70 = sext i32 %69 to i64
  %cmp = icmp slt i64 %indvars.iv.next296, %70
  br i1 %cmp, label %for.body, label %for.end185.loopexit

for.end185.loopexit:                              ; preds = %for.end
  br label %for.end185

for.end185:                                       ; preds = %for.end185.loopexit, %expand_right_edge.exit
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define internal void @h2v2_downsample(%struct.jpeg_compress_struct* nocapture readonly %cinfo, %struct.jpeg_component_info* nocapture readonly %compptr, i8** nocapture readonly %input_data, i8** nocapture readonly %output_data) #2 !prof !56 {
entry:
  %width_in_blocks = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr, i64 0, i32 7
  %0 = load i32, i32* %width_in_blocks, align 4, !tbaa !41
  %mul = shl i32 %0, 3
  %max_v_samp_factor = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 39
  %1 = load i32, i32* %max_v_samp_factor, align 4, !tbaa !42
  %image_width = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 6
  %2 = load i32, i32* %image_width, align 8, !tbaa !43
  %mul1 = shl i32 %0, 4
  %sub.i = sub i32 %mul1, %2
  %cmp.i = icmp sgt i32 %sub.i, 0
  %cmp121.i = icmp sgt i32 %1, 0
  %or.cond.i = and i1 %cmp121.i, %cmp.i
  br i1 %or.cond.i, label %for.body.us.preheader.i, label %for.cond.preheader

for.body.us.preheader.i:                          ; preds = %entry
  %idx.ext.i = zext i32 %2 to i64
  %3 = xor i32 %mul1, -1
  %4 = add i32 %2, %3
  %5 = icmp sgt i32 %4, -2
  %smax.i = select i1 %5, i32 %4, i32 -2
  %6 = or i32 %mul1, 1
  %7 = sub i32 %6, %2
  %8 = add i32 %7, %smax.i
  %9 = zext i32 %8 to i64
  %10 = add nuw nsw i64 %9, 1
  %11 = add i32 %1, -1
  %xtraiter69 = and i32 %1, 3
  %lcmp.mod70 = icmp eq i32 %xtraiter69, 0
  br i1 %lcmp.mod70, label %for.body.us.preheader.i.split, label %for.body.us.i.prol.preheader

for.body.us.i.prol.preheader:                     ; preds = %for.body.us.preheader.i
  br label %for.body.us.i.prol

for.body.us.i.prol:                               ; preds = %for.body.us.i.prol.preheader, %for.body.us.i.prol
  %indvars.iv.i.prol = phi i64 [ %indvars.iv.next.i.prol, %for.body.us.i.prol ], [ 0, %for.body.us.i.prol.preheader ]
  %prol.iter71 = phi i32 [ %prol.iter71.sub, %for.body.us.i.prol ], [ %xtraiter69, %for.body.us.i.prol.preheader ]
  %arrayidx.us.i.prol = getelementptr inbounds i8*, i8** %input_data, i64 %indvars.iv.i.prol
  %12 = load i8*, i8** %arrayidx.us.i.prol, align 8, !tbaa !31
  %add.ptr.us.i.prol = getelementptr inbounds i8, i8* %12, i64 %idx.ext.i
  %arrayidx2.us.i.prol = getelementptr inbounds i8, i8* %add.ptr.us.i.prol, i64 -1
  %13 = load i8, i8* %arrayidx2.us.i.prol, align 1, !tbaa !44
  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr.us.i.prol, i8 %13, i64 %10, i32 1, i1 false) #5
  %indvars.iv.next.i.prol = add nuw nsw i64 %indvars.iv.i.prol, 1
  %prol.iter71.sub = add i32 %prol.iter71, -1
  %prol.iter71.cmp = icmp eq i32 %prol.iter71.sub, 0
  br i1 %prol.iter71.cmp, label %for.body.us.preheader.i.split.loopexit, label %for.body.us.i.prol, !llvm.loop !57

for.body.us.preheader.i.split.loopexit:           ; preds = %for.body.us.i.prol
  %indvars.iv.next.i.prol.lcssa = phi i64 [ %indvars.iv.next.i.prol, %for.body.us.i.prol ]
  br label %for.body.us.preheader.i.split

for.body.us.preheader.i.split:                    ; preds = %for.body.us.preheader.i.split.loopexit, %for.body.us.preheader.i
  %indvars.iv.i.unr = phi i64 [ 0, %for.body.us.preheader.i ], [ %indvars.iv.next.i.prol.lcssa, %for.body.us.preheader.i.split.loopexit ]
  %14 = icmp ult i32 %11, 3
  br i1 %14, label %for.cond.preheader.loopexit, label %for.body.us.preheader.i.split.split

for.body.us.preheader.i.split.split:              ; preds = %for.body.us.preheader.i.split
  br label %for.body.us.i

for.body.us.i:                                    ; preds = %for.body.us.i, %for.body.us.preheader.i.split.split
  %indvars.iv.i = phi i64 [ %indvars.iv.i.unr, %for.body.us.preheader.i.split.split ], [ %indvars.iv.next.i.3, %for.body.us.i ]
  %arrayidx.us.i = getelementptr inbounds i8*, i8** %input_data, i64 %indvars.iv.i
  %15 = load i8*, i8** %arrayidx.us.i, align 8, !tbaa !31
  %add.ptr.us.i = getelementptr inbounds i8, i8* %15, i64 %idx.ext.i
  %arrayidx2.us.i = getelementptr inbounds i8, i8* %add.ptr.us.i, i64 -1
  %16 = load i8, i8* %arrayidx2.us.i, align 1, !tbaa !44
  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr.us.i, i8 %16, i64 %10, i32 1, i1 false) #5
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %arrayidx.us.i.1 = getelementptr inbounds i8*, i8** %input_data, i64 %indvars.iv.next.i
  %17 = load i8*, i8** %arrayidx.us.i.1, align 8, !tbaa !31
  %add.ptr.us.i.1 = getelementptr inbounds i8, i8* %17, i64 %idx.ext.i
  %arrayidx2.us.i.1 = getelementptr inbounds i8, i8* %add.ptr.us.i.1, i64 -1
  %18 = load i8, i8* %arrayidx2.us.i.1, align 1, !tbaa !44
  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr.us.i.1, i8 %18, i64 %10, i32 1, i1 false) #5
  %indvars.iv.next.i.1 = add nsw i64 %indvars.iv.i, 2
  %arrayidx.us.i.2 = getelementptr inbounds i8*, i8** %input_data, i64 %indvars.iv.next.i.1
  %19 = load i8*, i8** %arrayidx.us.i.2, align 8, !tbaa !31
  %add.ptr.us.i.2 = getelementptr inbounds i8, i8* %19, i64 %idx.ext.i
  %arrayidx2.us.i.2 = getelementptr inbounds i8, i8* %add.ptr.us.i.2, i64 -1
  %20 = load i8, i8* %arrayidx2.us.i.2, align 1, !tbaa !44
  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr.us.i.2, i8 %20, i64 %10, i32 1, i1 false) #5
  %indvars.iv.next.i.2 = add nsw i64 %indvars.iv.i, 3
  %arrayidx.us.i.3 = getelementptr inbounds i8*, i8** %input_data, i64 %indvars.iv.next.i.2
  %21 = load i8*, i8** %arrayidx.us.i.3, align 8, !tbaa !31
  %add.ptr.us.i.3 = getelementptr inbounds i8, i8* %21, i64 %idx.ext.i
  %arrayidx2.us.i.3 = getelementptr inbounds i8, i8* %add.ptr.us.i.3, i64 -1
  %22 = load i8, i8* %arrayidx2.us.i.3, align 1, !tbaa !44
  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr.us.i.3, i8 %22, i64 %10, i32 1, i1 false) #5
  %indvars.iv.next.i.3 = add nsw i64 %indvars.iv.i, 4
  %lftr.wideiv.3 = trunc i64 %indvars.iv.next.i.3 to i32
  %exitcond61.3 = icmp eq i32 %lftr.wideiv.3, %1
  br i1 %exitcond61.3, label %for.cond.preheader.loopexit.unr-lcssa, label %for.body.us.i

for.cond.preheader.loopexit.unr-lcssa:            ; preds = %for.body.us.i
  br label %for.cond.preheader.loopexit

for.cond.preheader.loopexit:                      ; preds = %for.body.us.preheader.i.split, %for.cond.preheader.loopexit.unr-lcssa
  br label %for.cond.preheader

for.cond.preheader:                               ; preds = %for.cond.preheader.loopexit, %entry
  %v_samp_factor = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr, i64 0, i32 3
  %23 = load i32, i32* %v_samp_factor, align 4, !tbaa !38
  %cmp54 = icmp sgt i32 %23, 0
  br i1 %cmp54, label %for.body.lr.ph, label %for.end23, !prof !58

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %cmp748 = icmp eq i32 %mul, 0
  br i1 %cmp748, label %for.body.preheader, label %for.body.us.preheader, !prof !59

for.body.us.preheader:                            ; preds = %for.body.lr.ph
  br label %for.body.us

for.body.preheader:                               ; preds = %for.body.lr.ph
  %min.iters.check = icmp ult i32 %23, 32
  br i1 %min.iters.check, label %for.body.preheader67, label %min.iters.checked

for.body.preheader67:                             ; preds = %middle.block, %min.iters.checked, %for.body.preheader
  %outrow.055.ph = phi i32 [ 0, %min.iters.checked ], [ 0, %for.body.preheader ], [ %n.vec, %middle.block ]
  br label %for.body

min.iters.checked:                                ; preds = %for.body.preheader
  %n.vec = and i32 %23, -32
  %cmp.zero = icmp eq i32 %n.vec, 0
  br i1 %cmp.zero, label %for.body.preheader67, label %vector.body.preheader

vector.body.preheader:                            ; preds = %min.iters.checked
  %24 = add i32 %23, -32
  %25 = lshr i32 %24, 5
  %26 = add nuw nsw i32 %25, 1
  %xtraiter = and i32 %26, 7
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod, label %vector.body.preheader.split, label %vector.body.prol.preheader

vector.body.prol.preheader:                       ; preds = %vector.body.preheader
  br label %vector.body.prol

vector.body.prol:                                 ; preds = %vector.body.prol.preheader, %vector.body.prol
  %index.prol = phi i32 [ %index.next.prol, %vector.body.prol ], [ 0, %vector.body.prol.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %vector.body.prol ], [ %xtraiter, %vector.body.prol.preheader ]
  %index.next.prol = add i32 %index.prol, 32
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %vector.body.preheader.split.loopexit, label %vector.body.prol, !llvm.loop !60

vector.body.preheader.split.loopexit:             ; preds = %vector.body.prol
  %index.next.prol.lcssa = phi i32 [ %index.next.prol, %vector.body.prol ]
  br label %vector.body.preheader.split

vector.body.preheader.split:                      ; preds = %vector.body.preheader.split.loopexit, %vector.body.preheader
  %index.unr = phi i32 [ 0, %vector.body.preheader ], [ %index.next.prol.lcssa, %vector.body.preheader.split.loopexit ]
  %27 = icmp ult i32 %24, 224
  br i1 %27, label %middle.block, label %vector.body.preheader.split.split

vector.body.preheader.split.split:                ; preds = %vector.body.preheader.split
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.body.preheader.split.split
  %index = phi i32 [ %index.unr, %vector.body.preheader.split.split ], [ %index.next.7, %vector.body ]
  %index.next.7 = add i32 %index, 256
  %28 = icmp eq i32 %index.next.7, %n.vec
  br i1 %28, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !61

middle.block.unr-lcssa:                           ; preds = %vector.body
  br label %middle.block

middle.block:                                     ; preds = %vector.body.preheader.split, %middle.block.unr-lcssa
  %cmp.n = icmp eq i32 %23, %n.vec
  br i1 %cmp.n, label %for.end23, label %for.body.preheader67

for.body.us:                                      ; preds = %for.body.us.preheader, %for.cond6.for.end_crit_edge.us
  %indvars.iv59 = phi i64 [ %indvars.iv.next60, %for.cond6.for.end_crit_edge.us ], [ 0, %for.body.us.preheader ]
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.cond6.for.end_crit_edge.us ], [ 0, %for.body.us.preheader ]
  %arrayidx.us = getelementptr inbounds i8*, i8** %output_data, i64 %indvars.iv59
  %29 = load i8*, i8** %arrayidx.us, align 8, !tbaa !31
  %arrayidx3.us = getelementptr inbounds i8*, i8** %input_data, i64 %indvars.iv
  %30 = load i8*, i8** %arrayidx3.us, align 8, !tbaa !31
  %31 = or i64 %indvars.iv, 1
  %arrayidx5.us = getelementptr inbounds i8*, i8** %input_data, i64 %31
  %32 = load i8*, i8** %arrayidx5.us, align 8, !tbaa !31
  br label %for.body8.us

for.body8.us:                                     ; preds = %for.body8.us, %for.body.us
  %bias.053.us = phi i32 [ 1, %for.body.us ], [ %xor.us, %for.body8.us ]
  %outptr.052.us = phi i8* [ %29, %for.body.us ], [ %incdec.ptr.us, %for.body8.us ]
  %inptr1.051.us = phi i8* [ %32, %for.body.us ], [ %add.ptr19.us, %for.body8.us ]
  %inptr0.050.us = phi i8* [ %30, %for.body.us ], [ %add.ptr.us, %for.body8.us ]
  %outcol.049.us = phi i32 [ 0, %for.body.us ], [ %inc.us, %for.body8.us ]
  %33 = load i8, i8* %inptr0.050.us, align 1, !tbaa !44
  %conv.us = zext i8 %33 to i32
  %arrayidx9.us = getelementptr inbounds i8, i8* %inptr0.050.us, i64 1
  %34 = load i8, i8* %arrayidx9.us, align 1, !tbaa !44
  %conv10.us = zext i8 %34 to i32
  %35 = load i8, i8* %inptr1.051.us, align 1, !tbaa !44
  %conv12.us = zext i8 %35 to i32
  %arrayidx14.us = getelementptr inbounds i8, i8* %inptr1.051.us, i64 1
  %36 = load i8, i8* %arrayidx14.us, align 1, !tbaa !44
  %conv15.us = zext i8 %36 to i32
  %add11.us = add i32 %conv.us, %bias.053.us
  %add13.us = add i32 %add11.us, %conv10.us
  %add16.us = add i32 %add13.us, %conv12.us
  %add17.us = add i32 %add16.us, %conv15.us
  %shr47.us = lshr i32 %add17.us, 2
  %conv18.us = trunc i32 %shr47.us to i8
  %incdec.ptr.us = getelementptr inbounds i8, i8* %outptr.052.us, i64 1
  store i8 %conv18.us, i8* %outptr.052.us, align 1, !tbaa !44
  %xor.us = xor i32 %bias.053.us, 3
  %add.ptr.us = getelementptr inbounds i8, i8* %inptr0.050.us, i64 2
  %add.ptr19.us = getelementptr inbounds i8, i8* %inptr1.051.us, i64 2
  %inc.us = add nuw i32 %outcol.049.us, 1
  %exitcond = icmp eq i32 %inc.us, %mul
  br i1 %exitcond, label %for.cond6.for.end_crit_edge.us, label %for.body8.us, !prof !59

for.cond6.for.end_crit_edge.us:                   ; preds = %for.body8.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 2
  %indvars.iv.next60 = add nuw nsw i64 %indvars.iv59, 1
  %37 = load i32, i32* %v_samp_factor, align 4, !tbaa !38
  %38 = sext i32 %37 to i64
  %cmp.us = icmp slt i64 %indvars.iv.next60, %38
  br i1 %cmp.us, label %for.body.us, label %for.end23.loopexit68, !prof !58

for.body:                                         ; preds = %for.body.preheader67, %for.body
  %outrow.055 = phi i32 [ %inc22, %for.body ], [ %outrow.055.ph, %for.body.preheader67 ]
  %inc22 = add nuw nsw i32 %outrow.055, 1
  %cmp = icmp slt i32 %inc22, %23
  br i1 %cmp, label %for.body, label %for.end23.loopexit, !prof !58, !llvm.loop !62

for.end23.loopexit:                               ; preds = %for.body
  br label %for.end23

for.end23.loopexit68:                             ; preds = %for.cond6.for.end_crit_edge.us
  br label %for.end23

for.end23:                                        ; preds = %for.end23.loopexit68, %for.end23.loopexit, %middle.block, %for.cond.preheader
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define internal void @int_downsample(%struct.jpeg_compress_struct* nocapture readonly %cinfo, %struct.jpeg_component_info* nocapture readonly %compptr, i8** nocapture readonly %input_data, i8** nocapture readonly %output_data) #2 !prof !40 {
entry:
  %width_in_blocks = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr, i64 0, i32 7
  %0 = load i32, i32* %width_in_blocks, align 4, !tbaa !41
  %mul = shl i32 %0, 3
  %max_h_samp_factor = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 38
  %1 = bitcast i32* %max_h_samp_factor to i64*
  %2 = load i64, i64* %1, align 8
  %3 = trunc i64 %2 to i32
  %h_samp_factor = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr, i64 0, i32 2
  %4 = bitcast i32* %h_samp_factor to i64*
  %5 = load i64, i64* %4, align 8
  %6 = trunc i64 %5 to i32
  %div = sdiv i32 %3, %6
  %7 = lshr i64 %2, 32
  %8 = trunc i64 %7 to i32
  %v_samp_factor = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr, i64 0, i32 3
  %9 = lshr i64 %5, 32
  %10 = trunc i64 %9 to i32
  %div1 = sdiv i32 %8, %10
  %mul2 = mul nsw i32 %div1, %div
  %div3 = sdiv i32 %mul2, 2
  %image_width = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 6
  %11 = load i32, i32* %image_width, align 8, !tbaa !43
  %mul5 = mul i32 %div, %mul
  %sub.i = sub i32 %mul5, %11
  %cmp.i = icmp sgt i32 %sub.i, 0
  %cmp121.i = icmp sgt i32 %8, 0
  %or.cond.i = and i1 %cmp121.i, %cmp.i
  br i1 %or.cond.i, label %for.body.us.preheader.i, label %for.cond.preheader

for.body.us.preheader.i:                          ; preds = %entry
  %idx.ext.i = zext i32 %11 to i64
  %12 = xor i32 %mul5, -1
  %13 = add i32 %11, %12
  %14 = icmp sgt i32 %13, -2
  %smax.i = select i1 %14, i32 %13, i32 -2
  %15 = or i32 %mul5, 1
  %16 = sub i32 %15, %11
  %17 = add i32 %16, %smax.i
  %18 = zext i32 %17 to i64
  %19 = add nuw nsw i64 %18, 1
  %20 = lshr i64 %2, 32
  %21 = trunc i64 %20 to i32
  %22 = add i32 %21, -1
  %xtraiter343 = and i32 %21, 3
  %lcmp.mod344 = icmp eq i32 %xtraiter343, 0
  br i1 %lcmp.mod344, label %for.body.us.preheader.i.split, label %for.body.us.i.prol.preheader

for.body.us.i.prol.preheader:                     ; preds = %for.body.us.preheader.i
  br label %for.body.us.i.prol

for.body.us.i.prol:                               ; preds = %for.body.us.i.prol.preheader, %for.body.us.i.prol
  %indvars.iv.i.prol = phi i64 [ %indvars.iv.next.i.prol, %for.body.us.i.prol ], [ 0, %for.body.us.i.prol.preheader ]
  %prol.iter345 = phi i32 [ %prol.iter345.sub, %for.body.us.i.prol ], [ %xtraiter343, %for.body.us.i.prol.preheader ]
  %arrayidx.us.i.prol = getelementptr inbounds i8*, i8** %input_data, i64 %indvars.iv.i.prol
  %23 = load i8*, i8** %arrayidx.us.i.prol, align 8, !tbaa !31
  %add.ptr.us.i.prol = getelementptr inbounds i8, i8* %23, i64 %idx.ext.i
  %arrayidx2.us.i.prol = getelementptr inbounds i8, i8* %add.ptr.us.i.prol, i64 -1
  %24 = load i8, i8* %arrayidx2.us.i.prol, align 1, !tbaa !44
  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr.us.i.prol, i8 %24, i64 %19, i32 1, i1 false) #5
  %indvars.iv.next.i.prol = add nuw nsw i64 %indvars.iv.i.prol, 1
  %prol.iter345.sub = add i32 %prol.iter345, -1
  %prol.iter345.cmp = icmp eq i32 %prol.iter345.sub, 0
  br i1 %prol.iter345.cmp, label %for.body.us.preheader.i.split.loopexit, label %for.body.us.i.prol, !llvm.loop !63

for.body.us.preheader.i.split.loopexit:           ; preds = %for.body.us.i.prol
  %indvars.iv.next.i.prol.lcssa = phi i64 [ %indvars.iv.next.i.prol, %for.body.us.i.prol ]
  br label %for.body.us.preheader.i.split

for.body.us.preheader.i.split:                    ; preds = %for.body.us.preheader.i.split.loopexit, %for.body.us.preheader.i
  %indvars.iv.i.unr = phi i64 [ 0, %for.body.us.preheader.i ], [ %indvars.iv.next.i.prol.lcssa, %for.body.us.preheader.i.split.loopexit ]
  %25 = icmp ult i32 %22, 3
  br i1 %25, label %for.cond.preheader.loopexit, label %for.body.us.preheader.i.split.split

for.body.us.preheader.i.split.split:              ; preds = %for.body.us.preheader.i.split
  br label %for.body.us.i

for.body.us.i:                                    ; preds = %for.body.us.i, %for.body.us.preheader.i.split.split
  %indvars.iv.i = phi i64 [ %indvars.iv.i.unr, %for.body.us.preheader.i.split.split ], [ %indvars.iv.next.i.3, %for.body.us.i ]
  %arrayidx.us.i = getelementptr inbounds i8*, i8** %input_data, i64 %indvars.iv.i
  %26 = load i8*, i8** %arrayidx.us.i, align 8, !tbaa !31
  %add.ptr.us.i = getelementptr inbounds i8, i8* %26, i64 %idx.ext.i
  %arrayidx2.us.i = getelementptr inbounds i8, i8* %add.ptr.us.i, i64 -1
  %27 = load i8, i8* %arrayidx2.us.i, align 1, !tbaa !44
  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr.us.i, i8 %27, i64 %19, i32 1, i1 false) #5
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %arrayidx.us.i.1 = getelementptr inbounds i8*, i8** %input_data, i64 %indvars.iv.next.i
  %28 = load i8*, i8** %arrayidx.us.i.1, align 8, !tbaa !31
  %add.ptr.us.i.1 = getelementptr inbounds i8, i8* %28, i64 %idx.ext.i
  %arrayidx2.us.i.1 = getelementptr inbounds i8, i8* %add.ptr.us.i.1, i64 -1
  %29 = load i8, i8* %arrayidx2.us.i.1, align 1, !tbaa !44
  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr.us.i.1, i8 %29, i64 %19, i32 1, i1 false) #5
  %indvars.iv.next.i.1 = add nsw i64 %indvars.iv.i, 2
  %arrayidx.us.i.2 = getelementptr inbounds i8*, i8** %input_data, i64 %indvars.iv.next.i.1
  %30 = load i8*, i8** %arrayidx.us.i.2, align 8, !tbaa !31
  %add.ptr.us.i.2 = getelementptr inbounds i8, i8* %30, i64 %idx.ext.i
  %arrayidx2.us.i.2 = getelementptr inbounds i8, i8* %add.ptr.us.i.2, i64 -1
  %31 = load i8, i8* %arrayidx2.us.i.2, align 1, !tbaa !44
  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr.us.i.2, i8 %31, i64 %19, i32 1, i1 false) #5
  %indvars.iv.next.i.2 = add nsw i64 %indvars.iv.i, 3
  %arrayidx.us.i.3 = getelementptr inbounds i8*, i8** %input_data, i64 %indvars.iv.next.i.2
  %32 = load i8*, i8** %arrayidx.us.i.3, align 8, !tbaa !31
  %add.ptr.us.i.3 = getelementptr inbounds i8, i8* %32, i64 %idx.ext.i
  %arrayidx2.us.i.3 = getelementptr inbounds i8, i8* %add.ptr.us.i.3, i64 -1
  %33 = load i8, i8* %arrayidx2.us.i.3, align 1, !tbaa !44
  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr.us.i.3, i8 %33, i64 %19, i32 1, i1 false) #5
  %indvars.iv.next.i.3 = add nsw i64 %indvars.iv.i, 4
  %lftr.wideiv198.3 = trunc i64 %indvars.iv.next.i.3 to i32
  %exitcond199.3 = icmp eq i32 %lftr.wideiv198.3, %8
  br i1 %exitcond199.3, label %for.cond.preheader.loopexit.unr-lcssa, label %for.body.us.i

for.cond.preheader.loopexit.unr-lcssa:            ; preds = %for.body.us.i
  br label %for.cond.preheader.loopexit

for.cond.preheader.loopexit:                      ; preds = %for.body.us.preheader.i.split, %for.cond.preheader.loopexit.unr-lcssa
  %.pre = load i32, i32* %v_samp_factor, align 4, !tbaa !38
  br label %for.cond.preheader

for.cond.preheader:                               ; preds = %for.cond.preheader.loopexit, %entry
  %34 = phi i32 [ %.pre, %for.cond.preheader.loopexit ], [ %10, %entry ]
  %cmp86 = icmp sgt i32 %34, 0
  br i1 %cmp86, label %for.body.lr.ph, label %for.end36

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %cmp882 = icmp eq i32 %mul, 0
  %cmp1178 = icmp sgt i32 %div1, 0
  %conv23 = sext i32 %div3 to i64
  %conv25 = sext i32 %mul2 to i64
  %cmp1674 = icmp sgt i32 %div, 0
  %35 = sext i32 %div1 to i64
  %36 = add i32 %div, -1
  %37 = zext i32 %36 to i64
  %38 = add nuw nsw i64 %37, 1
  %39 = shl i32 %0, 3
  %40 = add i32 %39, -1
  %41 = zext i32 %40 to i64
  %42 = add nuw nsw i64 %41, 1
  %43 = zext i32 %40 to i64
  %44 = add nuw nsw i64 %43, 1
  %45 = zext i32 %40 to i64
  %46 = add nuw nsw i64 %45, 1
  %47 = and i64 %46, 8589934576
  %48 = add nsw i64 %47, -16
  %49 = lshr exact i64 %48, 4
  %50 = add nuw nsw i64 %49, 1
  %51 = shl i32 %0, 3
  %52 = add i32 %51, -1
  %53 = zext i32 %52 to i64
  %54 = add nuw nsw i64 %53, 1
  %55 = and i64 %54, 8589934576
  %56 = add nsw i64 %55, -16
  %57 = lshr exact i64 %56, 4
  %58 = add nuw nsw i64 %57, 1
  %59 = add i32 %div, -1
  %60 = zext i32 %59 to i64
  %61 = add nuw nsw i64 %60, 1
  %62 = and i64 %61, 8589934588
  %63 = add nsw i64 %62, -4
  %64 = lshr exact i64 %63, 2
  %min.iters.check = icmp ult i64 %38, 4
  %n.vec = and i64 %38, 8589934588
  %cmp.zero = icmp eq i64 %n.vec, 0
  %cast.crd = trunc i64 %n.vec to i32
  %65 = and i64 %64, 1
  %lcmp.mod342 = icmp eq i64 %65, 0
  %66 = icmp eq i64 %64, 0
  %cmp.n = icmp eq i64 %38, %n.vec
  %min.iters.check221 = icmp ult i64 %42, 16
  %n.vec224 = and i64 %42, 8589934576
  %cmp.zero225 = icmp eq i64 %n.vec224, 0
  %cast.crd232 = trunc i64 %n.vec224 to i32
  %xtraiter338 = and i64 %58, 7
  %lcmp.mod339 = icmp eq i64 %xtraiter338, 0
  %67 = icmp ult i64 %56, 112
  %cmp.n234 = icmp eq i64 %42, %n.vec224
  %min.iters.check278 = icmp ult i64 %44, 16
  %n.vec281 = and i64 %44, 8589934576
  %cmp.zero282 = icmp eq i64 %n.vec281, 0
  %cast.crd289 = trunc i64 %n.vec281 to i32
  %xtraiter = and i64 %50, 7
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  %68 = icmp ult i64 %48, 112
  %cmp.n291 = icmp eq i64 %44, %n.vec281
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.end32
  %indvars.iv196 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next197, %for.end32 ]
  %indvars.iv194 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next195, %for.end32 ]
  %arrayidx = getelementptr inbounds i8*, i8** %output_data, i64 %indvars.iv196
  %69 = load i8*, i8** %arrayidx, align 8, !tbaa !31
  br i1 %cmp882, label %for.end32, label %for.cond10.preheader.lr.ph

for.cond10.preheader.lr.ph:                       ; preds = %for.body
  br i1 %cmp1178, label %for.body12.lr.ph.us.preheader, label %for.cond10.preheader.lr.ph.split

for.body12.lr.ph.us.preheader:                    ; preds = %for.cond10.preheader.lr.ph
  br label %for.body12.lr.ph.us

for.body12.lr.ph.us:                              ; preds = %for.body12.lr.ph.us.preheader, %for.cond10.for.end22_crit_edge.us
  %outptr.085.us = phi i8* [ %incdec.ptr28.us, %for.cond10.for.end22_crit_edge.us ], [ %69, %for.body12.lr.ph.us.preheader ]
  %outcol_h.084.us = phi i32 [ %add31.us, %for.cond10.for.end22_crit_edge.us ], [ 0, %for.body12.lr.ph.us.preheader ]
  %outcol.083.us = phi i32 [ %inc30.us, %for.cond10.for.end22_crit_edge.us ], [ 0, %for.body12.lr.ph.us.preheader ]
  %idx.ext.us = zext i32 %outcol_h.084.us to i64
  br i1 %cmp1674, label %for.body12.us.us.preheader, label %for.cond10.for.end22_crit_edge.us

for.body12.us.us.preheader:                       ; preds = %for.body12.lr.ph.us
  br label %for.body12.us.us

for.cond10.for.end22_crit_edge.us.loopexit:       ; preds = %for.cond15.for.inc20_crit_edge.us.us
  %add19.us.us.lcssa.lcssa = phi i64 [ %add19.us.us.lcssa, %for.cond15.for.inc20_crit_edge.us.us ]
  br label %for.cond10.for.end22_crit_edge.us

for.cond10.for.end22_crit_edge.us:                ; preds = %for.cond10.for.end22_crit_edge.us.loopexit, %for.body12.lr.ph.us
  %split81.us = phi i64 [ 0, %for.body12.lr.ph.us ], [ %add19.us.us.lcssa.lcssa, %for.cond10.for.end22_crit_edge.us.loopexit ]
  %add24.us = add nsw i64 %split81.us, %conv23
  %div26.us = sdiv i64 %add24.us, %conv25
  %conv27.us = trunc i64 %div26.us to i8
  %incdec.ptr28.us = getelementptr inbounds i8, i8* %outptr.085.us, i64 1
  store i8 %conv27.us, i8* %outptr.085.us, align 1, !tbaa !44
  %inc30.us = add nuw i32 %outcol.083.us, 1
  %add31.us = add i32 %outcol_h.084.us, %div
  %exitcond193 = icmp eq i32 %inc30.us, %mul
  br i1 %exitcond193, label %for.end32.loopexit, label %for.body12.lr.ph.us

for.body12.us.us:                                 ; preds = %for.body12.us.us.preheader, %for.cond15.for.inc20_crit_edge.us.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.cond15.for.inc20_crit_edge.us.us ], [ 0, %for.body12.us.us.preheader ]
  %outvalue.080.us.us = phi i64 [ %add19.us.us.lcssa, %for.cond15.for.inc20_crit_edge.us.us ], [ 0, %for.body12.us.us.preheader ]
  %70 = add nsw i64 %indvars.iv, %indvars.iv194
  %arrayidx14.us.us = getelementptr inbounds i8*, i8** %input_data, i64 %70
  %71 = load i8*, i8** %arrayidx14.us.us, align 8, !tbaa !31
  %add.ptr.us.us = getelementptr inbounds i8, i8* %71, i64 %idx.ext.us
  br i1 %min.iters.check, label %for.body17.us.us.preheader, label %min.iters.checked

for.body17.us.us.preheader:                       ; preds = %middle.block, %min.iters.checked, %for.body12.us.us
  %outvalue.177.us.us.ph = phi i64 [ %outvalue.080.us.us, %min.iters.checked ], [ %outvalue.080.us.us, %for.body12.us.us ], [ %94, %middle.block ]
  %inptr.076.us.us.ph = phi i8* [ %add.ptr.us.us, %min.iters.checked ], [ %add.ptr.us.us, %for.body12.us.us ], [ %ind.end, %middle.block ]
  %h.075.us.us.ph = phi i32 [ 0, %min.iters.checked ], [ 0, %for.body12.us.us ], [ %cast.crd, %middle.block ]
  br label %for.body17.us.us

min.iters.checked:                                ; preds = %for.body12.us.us
  %ind.end = getelementptr i8, i8* %add.ptr.us.us, i64 %n.vec
  br i1 %cmp.zero, label %for.body17.us.us.preheader, label %vector.ph

vector.ph:                                        ; preds = %min.iters.checked
  %72 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %outvalue.080.us.us, i32 0
  br i1 %lcmp.mod342, label %vector.body.prol, label %vector.ph.split

vector.body.prol:                                 ; preds = %vector.ph
  %73 = bitcast i8* %add.ptr.us.us to <2 x i8>*
  %wide.load.prol = load <2 x i8>, <2 x i8>* %73, align 1, !tbaa !44
  %74 = getelementptr i8, i8* %add.ptr.us.us, i64 2
  %75 = bitcast i8* %74 to <2 x i8>*
  %wide.load214.prol = load <2 x i8>, <2 x i8>* %75, align 1, !tbaa !44
  %76 = zext <2 x i8> %wide.load.prol to <2 x i64>
  %77 = zext <2 x i8> %wide.load214.prol to <2 x i64>
  %78 = add nsw <2 x i64> %76, %72
  br label %vector.ph.split

vector.ph.split:                                  ; preds = %vector.body.prol, %vector.ph
  %.lcssa336.unr = phi <2 x i64> [ undef, %vector.ph ], [ %77, %vector.body.prol ]
  %.lcssa.unr = phi <2 x i64> [ undef, %vector.ph ], [ %78, %vector.body.prol ]
  %index.unr = phi i64 [ 0, %vector.ph ], [ 4, %vector.body.prol ]
  %vec.phi.unr = phi <2 x i64> [ %72, %vector.ph ], [ %78, %vector.body.prol ]
  %vec.phi206.unr = phi <2 x i64> [ zeroinitializer, %vector.ph ], [ %77, %vector.body.prol ]
  br i1 %66, label %middle.block, label %vector.ph.split.split

vector.ph.split.split:                            ; preds = %vector.ph.split
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph.split.split
  %index = phi i64 [ %index.unr, %vector.ph.split.split ], [ %index.next.1, %vector.body ]
  %vec.phi = phi <2 x i64> [ %vec.phi.unr, %vector.ph.split.split ], [ %91, %vector.body ]
  %vec.phi206 = phi <2 x i64> [ %vec.phi206.unr, %vector.ph.split.split ], [ %92, %vector.body ]
  %next.gep = getelementptr i8, i8* %add.ptr.us.us, i64 %index
  %79 = bitcast i8* %next.gep to <2 x i8>*
  %wide.load = load <2 x i8>, <2 x i8>* %79, align 1, !tbaa !44
  %80 = getelementptr i8, i8* %next.gep, i64 2
  %81 = bitcast i8* %80 to <2 x i8>*
  %wide.load214 = load <2 x i8>, <2 x i8>* %81, align 1, !tbaa !44
  %82 = zext <2 x i8> %wide.load to <2 x i64>
  %83 = zext <2 x i8> %wide.load214 to <2 x i64>
  %84 = add nsw <2 x i64> %82, %vec.phi
  %85 = add nsw <2 x i64> %83, %vec.phi206
  %index.next = add i64 %index, 4
  %next.gep.1 = getelementptr i8, i8* %add.ptr.us.us, i64 %index.next
  %86 = bitcast i8* %next.gep.1 to <2 x i8>*
  %wide.load.1 = load <2 x i8>, <2 x i8>* %86, align 1, !tbaa !44
  %87 = getelementptr i8, i8* %next.gep.1, i64 2
  %88 = bitcast i8* %87 to <2 x i8>*
  %wide.load214.1 = load <2 x i8>, <2 x i8>* %88, align 1, !tbaa !44
  %89 = zext <2 x i8> %wide.load.1 to <2 x i64>
  %90 = zext <2 x i8> %wide.load214.1 to <2 x i64>
  %91 = add nsw <2 x i64> %89, %84
  %92 = add nsw <2 x i64> %90, %85
  %index.next.1 = add i64 %index, 8
  %93 = icmp eq i64 %index.next.1, %n.vec
  br i1 %93, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !64

middle.block.unr-lcssa:                           ; preds = %vector.body
  %.lcssa347 = phi <2 x i64> [ %92, %vector.body ]
  %.lcssa346 = phi <2 x i64> [ %91, %vector.body ]
  br label %middle.block

middle.block:                                     ; preds = %vector.ph.split, %middle.block.unr-lcssa
  %.lcssa336 = phi <2 x i64> [ %.lcssa336.unr, %vector.ph.split ], [ %.lcssa347, %middle.block.unr-lcssa ]
  %.lcssa = phi <2 x i64> [ %.lcssa.unr, %vector.ph.split ], [ %.lcssa346, %middle.block.unr-lcssa ]
  %bin.rdx = add <2 x i64> %.lcssa336, %.lcssa
  %rdx.shuf = shufflevector <2 x i64> %bin.rdx, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %bin.rdx217 = add <2 x i64> %bin.rdx, %rdx.shuf
  %94 = extractelement <2 x i64> %bin.rdx217, i32 0
  br i1 %cmp.n, label %for.cond15.for.inc20_crit_edge.us.us, label %for.body17.us.us.preheader

for.cond15.for.inc20_crit_edge.us.us.loopexit:    ; preds = %for.body17.us.us
  %add19.us.us.lcssa348 = phi i64 [ %add19.us.us, %for.body17.us.us ]
  br label %for.cond15.for.inc20_crit_edge.us.us

for.cond15.for.inc20_crit_edge.us.us:             ; preds = %for.cond15.for.inc20_crit_edge.us.us.loopexit, %middle.block
  %add19.us.us.lcssa = phi i64 [ %94, %middle.block ], [ %add19.us.us.lcssa348, %for.cond15.for.inc20_crit_edge.us.us.loopexit ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond192 = icmp eq i32 %lftr.wideiv, %div1
  br i1 %exitcond192, label %for.cond10.for.end22_crit_edge.us.loopexit, label %for.body12.us.us

for.body17.us.us:                                 ; preds = %for.body17.us.us.preheader, %for.body17.us.us
  %outvalue.177.us.us = phi i64 [ %add19.us.us, %for.body17.us.us ], [ %outvalue.177.us.us.ph, %for.body17.us.us.preheader ]
  %inptr.076.us.us = phi i8* [ %incdec.ptr.us.us, %for.body17.us.us ], [ %inptr.076.us.us.ph, %for.body17.us.us.preheader ]
  %h.075.us.us = phi i32 [ %inc.us.us, %for.body17.us.us ], [ %h.075.us.us.ph, %for.body17.us.us.preheader ]
  %incdec.ptr.us.us = getelementptr inbounds i8, i8* %inptr.076.us.us, i64 1
  %95 = load i8, i8* %inptr.076.us.us, align 1, !tbaa !44
  %conv18.us.us = zext i8 %95 to i64
  %add19.us.us = add nsw i64 %conv18.us.us, %outvalue.177.us.us
  %inc.us.us = add nuw nsw i32 %h.075.us.us, 1
  %exitcond190 = icmp eq i32 %inc.us.us, %div
  br i1 %exitcond190, label %for.cond15.for.inc20_crit_edge.us.us.loopexit, label %for.body17.us.us, !llvm.loop !65

for.cond10.preheader.lr.ph.split:                 ; preds = %for.cond10.preheader.lr.ph
  %div26.us122 = sdiv i64 %conv23, %conv25
  %conv27.us123 = trunc i64 %div26.us122 to i8
  br i1 %cmp1674, label %for.end22.us119.preheader, label %for.end22.preheader

for.end22.preheader:                              ; preds = %for.cond10.preheader.lr.ph.split
  br i1 %min.iters.check278, label %for.end22.preheader334, label %min.iters.checked279

for.end22.preheader334:                           ; preds = %middle.block276, %min.iters.checked279, %for.end22.preheader
  %outptr.085.ph = phi i8* [ %69, %min.iters.checked279 ], [ %69, %for.end22.preheader ], [ %ind.end287, %middle.block276 ]
  %outcol.083.ph = phi i32 [ 0, %min.iters.checked279 ], [ 0, %for.end22.preheader ], [ %cast.crd289, %middle.block276 ]
  br label %for.end22

min.iters.checked279:                             ; preds = %for.end22.preheader
  %ind.end287 = getelementptr i8, i8* %69, i64 %n.vec281
  br i1 %cmp.zero282, label %for.end22.preheader334, label %vector.ph283

vector.ph283:                                     ; preds = %min.iters.checked279
  %broadcast.splatinsert328 = insertelement <16 x i8> undef, i8 %conv27.us123, i32 0
  %broadcast.splat329 = shufflevector <16 x i8> %broadcast.splatinsert328, <16 x i8> undef, <16 x i32> zeroinitializer
  br i1 %lcmp.mod, label %vector.ph283.split, label %vector.body275.prol.preheader

vector.body275.prol.preheader:                    ; preds = %vector.ph283
  br label %vector.body275.prol

vector.body275.prol:                              ; preds = %vector.body275.prol, %vector.body275.prol.preheader
  %index284.prol = phi i64 [ %index.next285.prol, %vector.body275.prol ], [ 0, %vector.body275.prol.preheader ]
  %prol.iter = phi i64 [ %prol.iter.sub, %vector.body275.prol ], [ %xtraiter, %vector.body275.prol.preheader ]
  %next.gep292.prol = getelementptr i8, i8* %69, i64 %index284.prol
  %96 = bitcast i8* %next.gep292.prol to <16 x i8>*
  store <16 x i8> %broadcast.splat329, <16 x i8>* %96, align 1, !tbaa !44
  %index.next285.prol = add i64 %index284.prol, 16
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %vector.ph283.split.loopexit, label %vector.body275.prol, !llvm.loop !66

vector.ph283.split.loopexit:                      ; preds = %vector.body275.prol
  %index.next285.prol.lcssa = phi i64 [ %index.next285.prol, %vector.body275.prol ]
  br label %vector.ph283.split

vector.ph283.split:                               ; preds = %vector.ph283, %vector.ph283.split.loopexit
  %index284.unr = phi i64 [ 0, %vector.ph283 ], [ %index.next285.prol.lcssa, %vector.ph283.split.loopexit ]
  br i1 %68, label %middle.block276, label %vector.ph283.split.split

vector.ph283.split.split:                         ; preds = %vector.ph283.split
  br label %vector.body275

vector.body275:                                   ; preds = %vector.body275, %vector.ph283.split.split
  %index284 = phi i64 [ %index284.unr, %vector.ph283.split.split ], [ %index.next285.7, %vector.body275 ]
  %next.gep292 = getelementptr i8, i8* %69, i64 %index284
  %97 = bitcast i8* %next.gep292 to <16 x i8>*
  store <16 x i8> %broadcast.splat329, <16 x i8>* %97, align 1, !tbaa !44
  %index.next285 = add i64 %index284, 16
  %next.gep292.1 = getelementptr i8, i8* %69, i64 %index.next285
  %98 = bitcast i8* %next.gep292.1 to <16 x i8>*
  store <16 x i8> %broadcast.splat329, <16 x i8>* %98, align 1, !tbaa !44
  %index.next285.1 = add i64 %index284, 32
  %next.gep292.2 = getelementptr i8, i8* %69, i64 %index.next285.1
  %99 = bitcast i8* %next.gep292.2 to <16 x i8>*
  store <16 x i8> %broadcast.splat329, <16 x i8>* %99, align 1, !tbaa !44
  %index.next285.2 = add i64 %index284, 48
  %next.gep292.3 = getelementptr i8, i8* %69, i64 %index.next285.2
  %100 = bitcast i8* %next.gep292.3 to <16 x i8>*
  store <16 x i8> %broadcast.splat329, <16 x i8>* %100, align 1, !tbaa !44
  %index.next285.3 = add i64 %index284, 64
  %next.gep292.4 = getelementptr i8, i8* %69, i64 %index.next285.3
  %101 = bitcast i8* %next.gep292.4 to <16 x i8>*
  store <16 x i8> %broadcast.splat329, <16 x i8>* %101, align 1, !tbaa !44
  %index.next285.4 = add i64 %index284, 80
  %next.gep292.5 = getelementptr i8, i8* %69, i64 %index.next285.4
  %102 = bitcast i8* %next.gep292.5 to <16 x i8>*
  store <16 x i8> %broadcast.splat329, <16 x i8>* %102, align 1, !tbaa !44
  %index.next285.5 = add i64 %index284, 96
  %next.gep292.6 = getelementptr i8, i8* %69, i64 %index.next285.5
  %103 = bitcast i8* %next.gep292.6 to <16 x i8>*
  store <16 x i8> %broadcast.splat329, <16 x i8>* %103, align 1, !tbaa !44
  %index.next285.6 = add i64 %index284, 112
  %next.gep292.7 = getelementptr i8, i8* %69, i64 %index.next285.6
  %104 = bitcast i8* %next.gep292.7 to <16 x i8>*
  store <16 x i8> %broadcast.splat329, <16 x i8>* %104, align 1, !tbaa !44
  %index.next285.7 = add i64 %index284, 128
  %105 = icmp eq i64 %index.next285.7, %n.vec281
  br i1 %105, label %middle.block276.unr-lcssa, label %vector.body275, !llvm.loop !67

middle.block276.unr-lcssa:                        ; preds = %vector.body275
  br label %middle.block276

middle.block276:                                  ; preds = %vector.ph283.split, %middle.block276.unr-lcssa
  br i1 %cmp.n291, label %for.end32, label %for.end22.preheader334

for.end22.us119.preheader:                        ; preds = %for.cond10.preheader.lr.ph.split
  br i1 %min.iters.check221, label %for.end22.us119.preheader332, label %min.iters.checked222

min.iters.checked222:                             ; preds = %for.end22.us119.preheader
  %ind.end230 = getelementptr i8, i8* %69, i64 %n.vec224
  br i1 %cmp.zero225, label %for.end22.us119.preheader332, label %vector.ph226

vector.ph226:                                     ; preds = %min.iters.checked222
  %broadcast.splatinsert271 = insertelement <16 x i8> undef, i8 %conv27.us123, i32 0
  %broadcast.splat272 = shufflevector <16 x i8> %broadcast.splatinsert271, <16 x i8> undef, <16 x i32> zeroinitializer
  br i1 %lcmp.mod339, label %vector.ph226.split, label %vector.body218.prol.preheader

vector.body218.prol.preheader:                    ; preds = %vector.ph226
  br label %vector.body218.prol

vector.body218.prol:                              ; preds = %vector.body218.prol, %vector.body218.prol.preheader
  %index227.prol = phi i64 [ %index.next228.prol, %vector.body218.prol ], [ 0, %vector.body218.prol.preheader ]
  %prol.iter340 = phi i64 [ %prol.iter340.sub, %vector.body218.prol ], [ %xtraiter338, %vector.body218.prol.preheader ]
  %next.gep235.prol = getelementptr i8, i8* %69, i64 %index227.prol
  %106 = bitcast i8* %next.gep235.prol to <16 x i8>*
  store <16 x i8> %broadcast.splat272, <16 x i8>* %106, align 1, !tbaa !44
  %index.next228.prol = add i64 %index227.prol, 16
  %prol.iter340.sub = add i64 %prol.iter340, -1
  %prol.iter340.cmp = icmp eq i64 %prol.iter340.sub, 0
  br i1 %prol.iter340.cmp, label %vector.ph226.split.loopexit, label %vector.body218.prol, !llvm.loop !68

vector.ph226.split.loopexit:                      ; preds = %vector.body218.prol
  %index.next228.prol.lcssa = phi i64 [ %index.next228.prol, %vector.body218.prol ]
  br label %vector.ph226.split

vector.ph226.split:                               ; preds = %vector.ph226, %vector.ph226.split.loopexit
  %index227.unr = phi i64 [ 0, %vector.ph226 ], [ %index.next228.prol.lcssa, %vector.ph226.split.loopexit ]
  br i1 %67, label %middle.block219, label %vector.ph226.split.split

vector.ph226.split.split:                         ; preds = %vector.ph226.split
  br label %vector.body218

vector.body218:                                   ; preds = %vector.body218, %vector.ph226.split.split
  %index227 = phi i64 [ %index227.unr, %vector.ph226.split.split ], [ %index.next228.7, %vector.body218 ]
  %next.gep235 = getelementptr i8, i8* %69, i64 %index227
  %107 = bitcast i8* %next.gep235 to <16 x i8>*
  store <16 x i8> %broadcast.splat272, <16 x i8>* %107, align 1, !tbaa !44
  %index.next228 = add i64 %index227, 16
  %next.gep235.1 = getelementptr i8, i8* %69, i64 %index.next228
  %108 = bitcast i8* %next.gep235.1 to <16 x i8>*
  store <16 x i8> %broadcast.splat272, <16 x i8>* %108, align 1, !tbaa !44
  %index.next228.1 = add i64 %index227, 32
  %next.gep235.2 = getelementptr i8, i8* %69, i64 %index.next228.1
  %109 = bitcast i8* %next.gep235.2 to <16 x i8>*
  store <16 x i8> %broadcast.splat272, <16 x i8>* %109, align 1, !tbaa !44
  %index.next228.2 = add i64 %index227, 48
  %next.gep235.3 = getelementptr i8, i8* %69, i64 %index.next228.2
  %110 = bitcast i8* %next.gep235.3 to <16 x i8>*
  store <16 x i8> %broadcast.splat272, <16 x i8>* %110, align 1, !tbaa !44
  %index.next228.3 = add i64 %index227, 64
  %next.gep235.4 = getelementptr i8, i8* %69, i64 %index.next228.3
  %111 = bitcast i8* %next.gep235.4 to <16 x i8>*
  store <16 x i8> %broadcast.splat272, <16 x i8>* %111, align 1, !tbaa !44
  %index.next228.4 = add i64 %index227, 80
  %next.gep235.5 = getelementptr i8, i8* %69, i64 %index.next228.4
  %112 = bitcast i8* %next.gep235.5 to <16 x i8>*
  store <16 x i8> %broadcast.splat272, <16 x i8>* %112, align 1, !tbaa !44
  %index.next228.5 = add i64 %index227, 96
  %next.gep235.6 = getelementptr i8, i8* %69, i64 %index.next228.5
  %113 = bitcast i8* %next.gep235.6 to <16 x i8>*
  store <16 x i8> %broadcast.splat272, <16 x i8>* %113, align 1, !tbaa !44
  %index.next228.6 = add i64 %index227, 112
  %next.gep235.7 = getelementptr i8, i8* %69, i64 %index.next228.6
  %114 = bitcast i8* %next.gep235.7 to <16 x i8>*
  store <16 x i8> %broadcast.splat272, <16 x i8>* %114, align 1, !tbaa !44
  %index.next228.7 = add i64 %index227, 128
  %115 = icmp eq i64 %index.next228.7, %n.vec224
  br i1 %115, label %middle.block219.unr-lcssa, label %vector.body218, !llvm.loop !69

middle.block219.unr-lcssa:                        ; preds = %vector.body218
  br label %middle.block219

middle.block219:                                  ; preds = %vector.ph226.split, %middle.block219.unr-lcssa
  br i1 %cmp.n234, label %for.end32, label %for.end22.us119.preheader332

for.end22.us119.preheader332:                     ; preds = %middle.block219, %min.iters.checked222, %for.end22.us119.preheader
  %outptr.085.us116.ph = phi i8* [ %69, %min.iters.checked222 ], [ %69, %for.end22.us119.preheader ], [ %ind.end230, %middle.block219 ]
  %outcol.083.us118.ph = phi i32 [ 0, %min.iters.checked222 ], [ 0, %for.end22.us119.preheader ], [ %cast.crd232, %middle.block219 ]
  br label %for.end22.us119

for.end22.us119:                                  ; preds = %for.end22.us119.preheader332, %for.end22.us119
  %outptr.085.us116 = phi i8* [ %incdec.ptr28.us124, %for.end22.us119 ], [ %outptr.085.us116.ph, %for.end22.us119.preheader332 ]
  %outcol.083.us118 = phi i32 [ %inc30.us125, %for.end22.us119 ], [ %outcol.083.us118.ph, %for.end22.us119.preheader332 ]
  %incdec.ptr28.us124 = getelementptr inbounds i8, i8* %outptr.085.us116, i64 1
  store i8 %conv27.us123, i8* %outptr.085.us116, align 1, !tbaa !44
  %inc30.us125 = add nuw i32 %outcol.083.us118, 1
  %exitcond188 = icmp eq i32 %inc30.us125, %mul
  br i1 %exitcond188, label %for.end32.loopexit333, label %for.end22.us119, !llvm.loop !70

for.end22:                                        ; preds = %for.end22.preheader334, %for.end22
  %outptr.085 = phi i8* [ %incdec.ptr28, %for.end22 ], [ %outptr.085.ph, %for.end22.preheader334 ]
  %outcol.083 = phi i32 [ %inc30, %for.end22 ], [ %outcol.083.ph, %for.end22.preheader334 ]
  %incdec.ptr28 = getelementptr inbounds i8, i8* %outptr.085, i64 1
  store i8 %conv27.us123, i8* %outptr.085, align 1, !tbaa !44
  %inc30 = add nuw i32 %outcol.083, 1
  %exitcond = icmp eq i32 %inc30, %mul
  br i1 %exitcond, label %for.end32.loopexit335, label %for.end22, !llvm.loop !71

for.end32.loopexit:                               ; preds = %for.cond10.for.end22_crit_edge.us
  br label %for.end32

for.end32.loopexit333:                            ; preds = %for.end22.us119
  br label %for.end32

for.end32.loopexit335:                            ; preds = %for.end22
  br label %for.end32

for.end32:                                        ; preds = %for.end32.loopexit335, %for.end32.loopexit333, %for.end32.loopexit, %middle.block276, %middle.block219, %for.body
  %indvars.iv.next195 = add i64 %indvars.iv194, %35
  %indvars.iv.next197 = add nuw nsw i64 %indvars.iv196, 1
  %116 = load i32, i32* %v_samp_factor, align 4, !tbaa !38
  %117 = sext i32 %116 to i64
  %cmp = icmp slt i64 %indvars.iv.next197, %117
  br i1 %cmp, label %for.body, label %for.end36.loopexit

for.end36.loopexit:                               ; preds = %for.end32
  br label %for.end36

for.end36:                                        ; preds = %for.end36.loopexit, %for.cond.preheader
  ret void
}

declare void @jcopy_sample_rows(i8**, i32, i8**, i32, i32, i32) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #4

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"MaxFunctionCount", i32 150581}
!1 = !{!"clang version 3.8.0 (trunk 257473)"}
!2 = !{!"function_entry_count", i64 1}
!3 = !{!4, !5, i64 8}
!4 = !{!"jpeg_compress_struct", !5, i64 0, !5, i64 8, !5, i64 16, !8, i64 24, !8, i64 28, !5, i64 32, !8, i64 40, !8, i64 44, !8, i64 48, !6, i64 52, !9, i64 56, !8, i64 64, !8, i64 68, !6, i64 72, !5, i64 80, !6, i64 88, !6, i64 120, !6, i64 152, !6, i64 184, !6, i64 200, !6, i64 216, !8, i64 232, !5, i64 240, !8, i64 248, !8, i64 252, !8, i64 256, !8, i64 260, !8, i64 264, !6, i64 268, !8, i64 272, !8, i64 276, !8, i64 280, !6, i64 284, !10, i64 286, !10, i64 288, !8, i64 292, !8, i64 296, !8, i64 300, !8, i64 304, !8, i64 308, !8, i64 312, !8, i64 316, !6, i64 320, !8, i64 352, !8, i64 356, !8, i64 360, !6, i64 364, !8, i64 404, !8, i64 408, !8, i64 412, !8, i64 416, !5, i64 424, !5, i64 432, !5, i64 440, !5, i64 448, !5, i64 456, !5, i64 464, !5, i64 472, !5, i64 480, !5, i64 488}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = !{!"int", !6, i64 0}
!9 = !{!"double", !6, i64 0}
!10 = !{!"short", !6, i64 0}
!11 = !{!12, !5, i64 0}
!12 = !{!"jpeg_memory_mgr", !5, i64 0, !5, i64 8, !5, i64 16, !5, i64 24, !5, i64 32, !5, i64 40, !5, i64 48, !5, i64 56, !5, i64 64, !5, i64 72, !5, i64 80, !13, i64 88}
!13 = !{!"long", !6, i64 0}
!14 = !{!4, !5, i64 472}
!15 = !{!16, !5, i64 0}
!16 = !{!"", !17, i64 0, !6, i64 24}
!17 = !{!"jpeg_downsampler", !5, i64 0, !5, i64 8, !8, i64 16}
!18 = !{!16, !5, i64 8}
!19 = !{!16, !8, i64 16}
!20 = !{!4, !8, i64 260}
!21 = !{!"branch_weights", i32 2, i32 1}
!22 = !{!4, !5, i64 0}
!23 = !{!24, !8, i64 40}
!24 = !{!"jpeg_error_mgr", !5, i64 0, !5, i64 8, !5, i64 16, !5, i64 24, !5, i64 32, !8, i64 40, !6, i64 44, !8, i64 124, !13, i64 128, !5, i64 136, !8, i64 144, !5, i64 152, !8, i64 160, !8, i64 164}
!25 = !{!24, !5, i64 0}
!26 = !{!4, !8, i64 68}
!27 = !{!"branch_weights", i32 4, i32 2}
!28 = !{!4, !5, i64 80}
!29 = !{!"branch_weights", i32 4, i32 11}
!30 = !{!4, !8, i64 264}
!31 = !{!5, !5, i64 0}
!32 = !{!"branch_weights", i32 3, i32 1}
!33 = !{!"branch_weights", i32 1, i32 3}
!34 = !{!"branch_weights", i32 536870912, i32 1610612736}
!35 = !{!24, !5, i64 8}
!36 = !{!"function_entry_count", i64 256}
!37 = !{!"branch_weights", i32 769, i32 257}
!38 = !{!39, !8, i64 12}
!39 = !{!"", !8, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16, !8, i64 20, !8, i64 24, !8, i64 28, !8, i64 32, !8, i64 36, !8, i64 40, !8, i64 44, !8, i64 48, !8, i64 52, !8, i64 56, !8, i64 60, !8, i64 64, !8, i64 68, !8, i64 72, !5, i64 80, !5, i64 88}
!40 = !{!"function_entry_count", i64 0}
!41 = !{!39, !8, i64 28}
!42 = !{!4, !8, i64 308}
!43 = !{!4, !8, i64 40}
!44 = !{!6, !6, i64 0}
!45 = distinct !{!45, !46}
!46 = !{!"llvm.loop.unroll.disable"}
!47 = distinct !{!47, !46}
!48 = distinct !{!48, !46}
!49 = distinct !{!49, !46}
!50 = distinct !{!50, !51, !52}
!51 = !{!"llvm.loop.vectorize.width", i32 1}
!52 = !{!"llvm.loop.interleave.count", i32 1}
!53 = distinct !{!53, !54, !51, !52}
!54 = !{!"llvm.loop.unroll.runtime.disable"}
!55 = distinct !{!55, !46}
!56 = !{!"function_entry_count", i64 512}
!57 = distinct !{!57, !46}
!58 = !{!"branch_weights", i32 513, i32 513}
!59 = !{!"branch_weights", i32 513, i32 131073}
!60 = distinct !{!60, !46}
!61 = distinct !{!61, !51, !52}
!62 = distinct !{!62, !54, !51, !52}
!63 = distinct !{!63, !46}
!64 = distinct !{!64, !51, !52}
!65 = distinct !{!65, !54, !51, !52}
!66 = distinct !{!66, !46}
!67 = distinct !{!67, !51, !52}
!68 = distinct !{!68, !46}
!69 = distinct !{!69, !51, !52}
!70 = distinct !{!70, !54, !51, !52}
!71 = distinct !{!71, !54, !51, !52}
