digraph "CFG for 'jinit_c_prep_controller' function" {
	label="CFG for 'jinit_c_prep_controller' function";

	Node0x5d0d660 [shape=record, style = filled, fillcolor = skyblue, label="{entry:\l  %tobool = icmp eq i32 %need_full_buffer, 0\l  br i1 %tobool, label %entry.if.end_crit_edge, label %if.then, !prof !3\l|{<s0>T|<s1>F}}"];
	Node0x5d0d660:s0 -> Node0x5d0dd80;
	Node0x5d0d660:s1 -> Node0x5d0de80;
	Node0x5d0dd80 [shape=record, style = filled, fillcolor = blue, label="{entry.if.end_crit_edge:                           \l  %.pre = bitcast %struct.jpeg_compress_struct* %cinfo to\l... %struct.jpeg_common_struct*\l  br label %if.end\l}"];
	Node0x5d0dd80 -> Node0x5d0f120;
	Node0x5d0de80 [shape=record, style = filled, fillcolor = blue, label="{if.then:                                          \l  %err = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %cinfo, i64 0, i32 0\l  %0 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8,\l... !tbaa !4\l  %msg_code = getelementptr inbounds %struct.jpeg_error_mgr,\l... %struct.jpeg_error_mgr* %0, i64 0, i32 5\l  store i32 4, i32* %msg_code, align 8, !tbaa !12\l  %error_exit = getelementptr inbounds %struct.jpeg_error_mgr,\l... %struct.jpeg_error_mgr* %0, i64 0, i32 0\l  %1 = load void (%struct.jpeg_common_struct*)*, void\l... (%struct.jpeg_common_struct*)** %error_exit, align 8, !tbaa !15\l  %2 = bitcast %struct.jpeg_compress_struct* %cinfo to\l... %struct.jpeg_common_struct*\l  tail call void %1(%struct.jpeg_common_struct* %2) #3\l  br label %if.end\l}"];
	Node0x5d0de80 -> Node0x5d0f120;
	Node0x5d0f120 [shape=record, style = filled, fillcolor = skyblue, label="{if.end:                                           \l  %.pre-phi = phi %struct.jpeg_common_struct* [ %.pre, %entry.if.end_crit_edge\l... ], [ %2, %if.then ]\l  %mem = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %cinfo, i64 0, i32 1\l  %3 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8,\l... !tbaa !16\l  %alloc_small = getelementptr inbounds %struct.jpeg_memory_mgr,\l... %struct.jpeg_memory_mgr* %3, i64 0, i32 0\l  %4 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8*\l... (%struct.jpeg_common_struct*, i32, i64)** %alloc_small, align 8, !tbaa !17\l  %call = tail call i8* %4(%struct.jpeg_common_struct* %.pre-phi, i32 1, i64\l... 112) #3\l  %prep2 = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %cinfo, i64 0, i32 53\l  %5 = bitcast %struct.jpeg_c_prep_controller** %prep2 to i8**\l  store i8* %call, i8** %5, align 8, !tbaa !19\l  %start_pass = bitcast i8* %call to void (%struct.jpeg_compress_struct*,\l... i32)**\l  store void (%struct.jpeg_compress_struct*, i32)* @start_pass_prep, void\l... (%struct.jpeg_compress_struct*, i32)** %start_pass, align 8, !tbaa !20\l  %downsample = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %cinfo, i64 0, i32 57\l  %6 = load %struct.jpeg_downsampler*, %struct.jpeg_downsampler** %downsample,\l... align 8, !tbaa !23\l  %need_context_rows = getelementptr inbounds %struct.jpeg_downsampler,\l... %struct.jpeg_downsampler* %6, i64 0, i32 2\l  %7 = load i32, i32* %need_context_rows, align 8, !tbaa !24\l  %tobool3 = icmp eq i32 %7, 0\l  %pre_process_data = getelementptr inbounds i8, i8* %call, i64 8\l  %8 = bitcast i8* %pre_process_data to void (%struct.jpeg_compress_struct*,\l... i8**, i32*, i32, i8***, i32*, i32)**\l  %9 = bitcast i8* %call to %struct.my_prep_controller*\l  br i1 %tobool3, label %if.else, label %if.then4, !prof !3\l|{<s0>T|<s1>F}}"];
	Node0x5d0f120:s0 -> Node0x5d101d0;
	Node0x5d0f120:s1 -> Node0x5d11360;
	Node0x5d11360 [shape=record, style = filled, fillcolor = blue, label="{if.then4:                                         \l  store void (%struct.jpeg_compress_struct*, i8**, i32*, i32, i8***, i32*,\l... i32)* @pre_process_context, void (%struct.jpeg_compress_struct*, i8**, i32*,\l... i32, i8***, i32*, i32)** %8, align 8, !tbaa !26\l  %max_v_samp_factor.i = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %cinfo, i64 0, i32 39\l  %10 = load i32, i32* %max_v_samp_factor.i, align 4, !tbaa !27\l  %11 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align\l... 8, !tbaa !16\l  %alloc_small.i = getelementptr inbounds %struct.jpeg_memory_mgr,\l... %struct.jpeg_memory_mgr* %11, i64 0, i32 0\l  %12 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8*\l... (%struct.jpeg_common_struct*, i32, i64)** %alloc_small.i, align 8, !tbaa !17\l  %num_components.i = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %cinfo, i64 0, i32 12\l  %13 = load i32, i32* %num_components.i, align 4, !tbaa !28\l  %mul.i = mul i32 %10, 5\l  %mul2.i = mul i32 %13, %mul.i\l  %conv.i = sext i32 %mul2.i to i64\l  %mul3.i = shl nsw i64 %conv.i, 3\l  %call.i = tail call i8* %12(%struct.jpeg_common_struct* %.pre-phi, i32 1,\l... i64 %mul3.i) #3\l  %14 = bitcast i8* %call.i to i8**\l  %comp_info.i = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %cinfo, i64 0, i32 14\l  %15 = load %struct.jpeg_component_info*, %struct.jpeg_component_info**\l... %comp_info.i, align 8, !tbaa !29\l  %16 = load i32, i32* %num_components.i, align 4, !tbaa !28\l  %cmp82.i = icmp sgt i32 %16, 0\l  br i1 %cmp82.i, label %for.body.lr.ph.i, label %if.end14\l|{<s0>T|<s1>F}}"];
	Node0x5d11360:s0 -> Node0x5d140e0;
	Node0x5d11360:s1 -> Node0x5d141e0;
	Node0x5d140e0 [shape=record, style = filled, fillcolor = blue, label="{for.body.lr.ph.i:                                 \l  %max_h_samp_factor.i = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %cinfo, i64 0, i32 38\l  %mul13.i = mul nsw i32 %10, 3\l  %idx.ext.i = sext i32 %10 to i64\l  %conv16.i = sext i32 %mul13.i to i64\l  %mul17.i = shl nsw i64 %conv16.i, 3\l  %cmp1980.i = icmp sgt i32 %10, 0\l  %idx.ext36.i = sext i32 %mul.i to i64\l  br i1 %cmp1980.i, label %for.body.us.preheader.i, label %for.body.i.preheader\l|{<s0>T|<s1>F}}"];
	Node0x5d140e0:s0 -> Node0x5d147f0;
	Node0x5d140e0:s1 -> Node0x5d148f0;
	Node0x5d148f0 [shape=record, style = filled, fillcolor = blue, label="{for.body.i.preheader:                             \l  br label %for.body.i\l}"];
	Node0x5d148f0 -> Node0x5d14a80;
	Node0x5d147f0 [shape=record, style = filled, fillcolor = blue, label="{for.body.us.preheader.i:                          \l  %mul27.i = shl i32 %10, 2\l  %mul22.i = shl i32 %10, 1\l  %17 = sext i32 %mul22.i to i64\l  %18 = sext i32 %mul27.i to i64\l  %19 = add i32 %10, -1\l  %20 = zext i32 %19 to i64\l  %21 = add nuw nsw i64 %20, 1\l  %22 = mul i32 %10, 5\l  %23 = sext i32 %22 to i64\l  %24 = shl nsw i64 %23, 3\l  %25 = zext i32 %19 to i64\l  %26 = shl nuw nsw i64 %25, 3\l  %27 = shl i32 %10, 2\l  %28 = sext i32 %27 to i64\l  %29 = shl nsw i64 %28, 3\l  %30 = add nsw i64 %29, %26\l  %31 = shl i32 %10, 1\l  %32 = sext i32 %31 to i64\l  %33 = add nsw i64 %32, %25\l  %34 = add i32 %10, -1\l  %35 = zext i32 %34 to i64\l  %36 = add nuw nsw i64 %35, 1\l  %37 = and i64 %36, 8589934588\l  %38 = add nsw i64 %37, -4\l  %39 = lshr exact i64 %38, 2\l  %40 = add i32 %10, 1\l  %min.iters.check = icmp ult i64 %21, 4\l  %n.vec = and i64 %21, 8589934588\l  %cmp.zero = icmp eq i64 %n.vec, 0\l  %41 = and i64 %39, 1\l  %lcmp.mod = icmp eq i64 %41, 0\l  %42 = icmp eq i64 %39, 0\l  %cmp.n = icmp eq i64 %21, %n.vec\l  br label %for.body.us.i\l}"];
	Node0x5d147f0 -> Node0x5d164b0;
	Node0x5d164b0 [shape=record, style = filled, fillcolor = skyblue, label="{for.body.us.i:                                    \l  %indvars.iv89.i = phi i64 [ 0, %for.body.us.preheader.i ], [\l... %indvars.iv.next90.i, %for.cond18.for.end_crit_edge.us.i ]\l  %fake_buffer.085.us.i = phi i8** [ %14, %for.body.us.preheader.i ], [\l... %add.ptr37.us.i, %for.cond18.for.end_crit_edge.us.i ]\l  %compptr.083.us.i = phi %struct.jpeg_component_info* [ %15,\l... %for.body.us.preheader.i ], [ %incdec.ptr.us.i,\l... %for.cond18.for.end_crit_edge.us.i ]\l  %43 = mul i64 %24, %indvars.iv89.i\l  %scevgep = getelementptr i8, i8* %call.i, i64 %43\l  %44 = add i64 %26, %43\l  %scevgep49 = getelementptr i8, i8* %call.i, i64 %44\l  %45 = add i64 %29, %43\l  %scevgep50 = getelementptr i8, i8* %call.i, i64 %45\l  %46 = add i64 %30, %43\l  %scevgep51 = getelementptr i8, i8* %call.i, i64 %46\l  %47 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align\l... 8, !tbaa !16\l  %alloc_sarray.us.i = getelementptr inbounds %struct.jpeg_memory_mgr,\l... %struct.jpeg_memory_mgr* %47, i64 0, i32 2\l  %48 = load i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, i8**\l... (%struct.jpeg_common_struct*, i32, i32, i32)** %alloc_sarray.us.i, align 8,\l... !tbaa !30\l  %width_in_blocks.us.i = getelementptr inbounds %struct.jpeg_component_info,\l... %struct.jpeg_component_info* %compptr.083.us.i, i64 0, i32 7\l  %49 = load i32, i32* %width_in_blocks.us.i, align 4, !tbaa !31\l  %conv7.us.i = zext i32 %49 to i64\l  %mul8.us.i = shl nuw nsw i64 %conv7.us.i, 3\l  %50 = load i32, i32* %max_h_samp_factor.i, align 8, !tbaa !33\l  %conv9.us.i = sext i32 %50 to i64\l  %mul10.us.i = mul nsw i64 %mul8.us.i, %conv9.us.i\l  %h_samp_factor.us.i = getelementptr inbounds %struct.jpeg_component_info,\l... %struct.jpeg_component_info* %compptr.083.us.i, i64 0, i32 2\l  %51 = load i32, i32* %h_samp_factor.us.i, align 8, !tbaa !34\l  %conv11.us.i = sext i32 %51 to i64\l  %div.us.i = sdiv i64 %mul10.us.i, %conv11.us.i\l  %conv12.us.i = trunc i64 %div.us.i to i32\l  %call14.us.i = tail call i8** %48(%struct.jpeg_common_struct* nonnull\l... %.pre-phi, i32 1, i32 %conv12.us.i, i32 %mul13.i) #3\l  %52 = bitcast i8** %call14.us.i to i8*\l  %add.ptr.us.i = getelementptr inbounds i8*, i8** %fake_buffer.085.us.i, i64\l... %idx.ext.i\l  %53 = bitcast i8** %add.ptr.us.i to i8*\l  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %53, i8* %52, i64 %mul17.i,\l... i32 1, i1 false) #3\l  br i1 %min.iters.check, label %for.body21.us.i.preheader, label\l... %min.iters.checked\l|{<s0>T|<s1>F}}"];
	Node0x5d164b0:s0 -> Node0x5d18740;
	Node0x5d164b0:s1 -> Node0x5d18860;
	Node0x5d18860 [shape=record, style = filled, fillcolor = skyblue, label="{min.iters.checked:                                \l  br i1 %cmp.zero, label %for.body21.us.i.preheader, label %vector.memcheck\l|{<s0>T|<s1>F}}"];
	Node0x5d18860:s0 -> Node0x5d18740;
	Node0x5d18860:s1 -> Node0x5d189d0;
	Node0x5d189d0 [shape=record, style = filled, fillcolor = skyblue, label="{vector.memcheck:                                  \l  %scevgep52 = getelementptr i8*, i8** %call14.us.i, i64 %32\l  %scevgep5253 = bitcast i8** %scevgep52 to i8*\l  %scevgep54 = getelementptr i8*, i8** %call14.us.i, i64 %33\l  %scevgep5455 = bitcast i8** %scevgep54 to i8*\l  %scevgep56 = getelementptr i8*, i8** %call14.us.i, i64 %25\l  %scevgep5657 = bitcast i8** %scevgep56 to i8*\l  %bound0 = icmp ule i8* %scevgep, %scevgep51\l  %bound1 = icmp ule i8* %scevgep50, %scevgep49\l  %found.conflict = and i1 %bound0, %bound1\l  %bound058 = icmp ule i8* %scevgep, %scevgep5455\l  %bound159 = icmp ule i8* %scevgep5253, %scevgep49\l  %found.conflict60 = and i1 %bound058, %bound159\l  %conflict.rdx = or i1 %found.conflict, %found.conflict60\l  %bound061 = icmp ule i8* %scevgep, %scevgep5657\l  %bound162 = icmp ule i8* %52, %scevgep49\l  %found.conflict63 = and i1 %bound061, %bound162\l  %conflict.rdx64 = or i1 %conflict.rdx, %found.conflict63\l  %bound065 = icmp ule i8* %scevgep50, %scevgep5455\l  %bound166 = icmp ule i8* %scevgep5253, %scevgep51\l  %found.conflict67 = and i1 %bound065, %bound166\l  %conflict.rdx68 = or i1 %conflict.rdx64, %found.conflict67\l  %bound069 = icmp ule i8* %scevgep50, %scevgep5657\l  %bound170 = icmp ule i8* %52, %scevgep51\l  %found.conflict71 = and i1 %bound069, %bound170\l  %conflict.rdx72 = or i1 %conflict.rdx68, %found.conflict71\l  br i1 %conflict.rdx72, label %for.body21.us.i.preheader, label\l... %vector.body.preheader\l|{<s0>T|<s1>F}}"];
	Node0x5d189d0:s0 -> Node0x5d18740;
	Node0x5d189d0:s1 -> Node0x5d15290;
	Node0x5d15290 [shape=record, style = filled, fillcolor = blue, label="{vector.body.preheader:                            \l  br i1 %lcmp.mod, label %vector.body.prol, label %vector.body.preheader.split\l|{<s0>T|<s1>F}}"];
	Node0x5d15290:s0 -> Node0x5d16080;
	Node0x5d15290:s1 -> Node0x5d16100;
	Node0x5d16080 [shape=record, style = filled, fillcolor = blue, label="{vector.body.prol:                                 \l  %54 = getelementptr inbounds i8*, i8** %call14.us.i, i64 %17\l  %55 = bitcast i8** %54 to \<2 x i64\>*\l  %wide.load.prol = load \<2 x i64\>, \<2 x i64\>* %55, align 8, !tbaa !35\l  %56 = getelementptr i8*, i8** %54, i64 2\l  %57 = bitcast i8** %56 to \<2 x i64\>*\l  %wide.load76.prol = load \<2 x i64\>, \<2 x i64\>* %57, align 8, !tbaa !35\l  %58 = bitcast i8** %fake_buffer.085.us.i to \<2 x i64\>*\l  store \<2 x i64\> %wide.load.prol, \<2 x i64\>* %58, align 8, !tbaa !35\l  %59 = getelementptr i8*, i8** %fake_buffer.085.us.i, i64 2\l  %60 = bitcast i8** %59 to \<2 x i64\>*\l  store \<2 x i64\> %wide.load76.prol, \<2 x i64\>* %60, align 8, !tbaa !35\l  %61 = bitcast i8** %call14.us.i to \<2 x i64\>*\l  %wide.load77.prol = load \<2 x i64\>, \<2 x i64\>* %61, align 8, !tbaa !35\l  %62 = getelementptr i8*, i8** %call14.us.i, i64 2\l  %63 = bitcast i8** %62 to \<2 x i64\>*\l  %wide.load78.prol = load \<2 x i64\>, \<2 x i64\>* %63, align 8, !tbaa !35\l  %64 = getelementptr inbounds i8*, i8** %fake_buffer.085.us.i, i64 %18\l  %65 = bitcast i8** %64 to \<2 x i64\>*\l  store \<2 x i64\> %wide.load77.prol, \<2 x i64\>* %65, align 8, !tbaa !35\l  %66 = getelementptr i8*, i8** %64, i64 2\l  %67 = bitcast i8** %66 to \<2 x i64\>*\l  store \<2 x i64\> %wide.load78.prol, \<2 x i64\>* %67, align 8, !tbaa !35\l  br label %vector.body.preheader.split\l}"];
	Node0x5d16080 -> Node0x5d16100;
	Node0x5d16100 [shape=record, style = filled, fillcolor = blue, label="{vector.body.preheader.split:                      \l  %index.unr = phi i64 [ 0, %vector.body.preheader ], [ 4, %vector.body.prol ]\l  br i1 %42, label %middle.block, label %vector.body.preheader.split.split\l|{<s0>T|<s1>F}}"];
	Node0x5d16100:s0 -> Node0x5d1c790;
	Node0x5d16100:s1 -> Node0x5d1c840;
	Node0x5d1c840 [shape=record, style = filled, fillcolor = blue, label="{vector.body.preheader.split.split:                \l  br label %vector.body\l}"];
	Node0x5d1c840 -> Node0x5d1c9b0;
	Node0x5d1c9b0 [shape=record, style = filled, fillcolor = skyblue, label="{vector.body:                                      \l  %index = phi i64 [ %index.unr, %vector.body.preheader.split.split ], [\l... %index.next.1, %vector.body ]\l  %68 = add i64 %index, %17\l  %69 = getelementptr inbounds i8*, i8** %call14.us.i, i64 %68\l  %70 = bitcast i8** %69 to \<2 x i64\>*\l  %wide.load = load \<2 x i64\>, \<2 x i64\>* %70, align 8, !tbaa !35\l  %71 = getelementptr i8*, i8** %69, i64 2\l  %72 = bitcast i8** %71 to \<2 x i64\>*\l  %wide.load76 = load \<2 x i64\>, \<2 x i64\>* %72, align 8, !tbaa !35\l  %73 = getelementptr inbounds i8*, i8** %fake_buffer.085.us.i, i64 %index\l  %74 = bitcast i8** %73 to \<2 x i64\>*\l  store \<2 x i64\> %wide.load, \<2 x i64\>* %74, align 8, !tbaa !35\l  %75 = getelementptr i8*, i8** %73, i64 2\l  %76 = bitcast i8** %75 to \<2 x i64\>*\l  store \<2 x i64\> %wide.load76, \<2 x i64\>* %76, align 8, !tbaa !35\l  %77 = getelementptr inbounds i8*, i8** %call14.us.i, i64 %index\l  %78 = bitcast i8** %77 to \<2 x i64\>*\l  %wide.load77 = load \<2 x i64\>, \<2 x i64\>* %78, align 8, !tbaa !35\l  %79 = getelementptr i8*, i8** %77, i64 2\l  %80 = bitcast i8** %79 to \<2 x i64\>*\l  %wide.load78 = load \<2 x i64\>, \<2 x i64\>* %80, align 8, !tbaa !35\l  %81 = add i64 %index, %18\l  %82 = getelementptr inbounds i8*, i8** %fake_buffer.085.us.i, i64 %81\l  %83 = bitcast i8** %82 to \<2 x i64\>*\l  store \<2 x i64\> %wide.load77, \<2 x i64\>* %83, align 8, !tbaa !35\l  %84 = getelementptr i8*, i8** %82, i64 2\l  %85 = bitcast i8** %84 to \<2 x i64\>*\l  store \<2 x i64\> %wide.load78, \<2 x i64\>* %85, align 8, !tbaa !35\l  %index.next = add i64 %index, 4\l  %86 = add i64 %index.next, %17\l  %87 = getelementptr inbounds i8*, i8** %call14.us.i, i64 %86\l  %88 = bitcast i8** %87 to \<2 x i64\>*\l  %wide.load.1 = load \<2 x i64\>, \<2 x i64\>* %88, align 8, !tbaa !35\l  %89 = getelementptr i8*, i8** %87, i64 2\l  %90 = bitcast i8** %89 to \<2 x i64\>*\l  %wide.load76.1 = load \<2 x i64\>, \<2 x i64\>* %90, align 8, !tbaa !35\l  %91 = getelementptr inbounds i8*, i8** %fake_buffer.085.us.i, i64 %index.next\l  %92 = bitcast i8** %91 to \<2 x i64\>*\l  store \<2 x i64\> %wide.load.1, \<2 x i64\>* %92, align 8, !tbaa !35\l  %93 = getelementptr i8*, i8** %91, i64 2\l  %94 = bitcast i8** %93 to \<2 x i64\>*\l  store \<2 x i64\> %wide.load76.1, \<2 x i64\>* %94, align 8, !tbaa !35\l  %95 = getelementptr inbounds i8*, i8** %call14.us.i, i64 %index.next\l  %96 = bitcast i8** %95 to \<2 x i64\>*\l  %wide.load77.1 = load \<2 x i64\>, \<2 x i64\>* %96, align 8, !tbaa !35\l  %97 = getelementptr i8*, i8** %95, i64 2\l  %98 = bitcast i8** %97 to \<2 x i64\>*\l  %wide.load78.1 = load \<2 x i64\>, \<2 x i64\>* %98, align 8, !tbaa !35\l  %99 = add i64 %index.next, %18\l  %100 = getelementptr inbounds i8*, i8** %fake_buffer.085.us.i, i64 %99\l  %101 = bitcast i8** %100 to \<2 x i64\>*\l  store \<2 x i64\> %wide.load77.1, \<2 x i64\>* %101, align 8, !tbaa !35\l  %102 = getelementptr i8*, i8** %100, i64 2\l  %103 = bitcast i8** %102 to \<2 x i64\>*\l  store \<2 x i64\> %wide.load78.1, \<2 x i64\>* %103, align 8, !tbaa !35\l  %index.next.1 = add i64 %index, 8\l  %104 = icmp eq i64 %index.next.1, %n.vec\l  br i1 %104, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !36\l|{<s0>T|<s1>F}}"];
	Node0x5d1c9b0:s0 -> Node0x5d1e6a0;
	Node0x5d1c9b0:s1 -> Node0x5d1c9b0;
	Node0x5d1e6a0 [shape=record, style = filled, fillcolor = blue, label="{middle.block.unr-lcssa:                           \l  br label %middle.block\l}"];
	Node0x5d1e6a0 -> Node0x5d1c790;
	Node0x5d1c790 [shape=record, style = filled, fillcolor = blue, label="{middle.block:                                     \l  br i1 %cmp.n, label %for.cond18.for.end_crit_edge.us.i, label\l... %for.body21.us.i.preheader\l|{<s0>T|<s1>F}}"];
	Node0x5d1c790:s0 -> Node0x5d16660;
	Node0x5d1c790:s1 -> Node0x5d18740;
	Node0x5d18740 [shape=record, style = filled, fillcolor = skyblue, label="{for.body21.us.i.preheader:                        \l  %indvars.iv.i.ph = phi i64 [ 0, %vector.memcheck ], [ 0, %min.iters.checked\l... ], [ 0, %for.body.us.i ], [ %n.vec, %middle.block ]\l  %105 = or i64 %indvars.iv.i.ph, 1\l  %106 = trunc i64 %105 to i32\l  %107 = sub i32 %40, %106\l  %xtraiter85 = and i32 %107, 1\l  %lcmp.mod86 = icmp eq i32 %xtraiter85, 0\l  br i1 %lcmp.mod86, label %for.body21.us.i.preheader.split, label\l... %for.body21.us.i.prol\l|{<s0>T|<s1>F}}"];
	Node0x5d18740:s0 -> Node0x5d0e4c0;
	Node0x5d18740:s1 -> Node0x5d0e5e0;
	Node0x5d0e5e0 [shape=record, style = filled, fillcolor = skyblue, label="{for.body21.us.i.prol:                             \l  %108 = add nsw i64 %indvars.iv.i.ph, %17\l  %arrayidx.us.i.prol = getelementptr inbounds i8*, i8** %call14.us.i, i64 %108\l  %109 = bitcast i8** %arrayidx.us.i.prol to i64*\l  %110 = load i64, i64* %109, align 8, !tbaa !35\l  %arrayidx24.us.i.prol = getelementptr inbounds i8*, i8**\l... %fake_buffer.085.us.i, i64 %indvars.iv.i.ph\l  %111 = bitcast i8** %arrayidx24.us.i.prol to i64*\l  store i64 %110, i64* %111, align 8, !tbaa !35\l  %arrayidx26.us.i.prol = getelementptr inbounds i8*, i8** %call14.us.i, i64\l... %indvars.iv.i.ph\l  %112 = bitcast i8** %arrayidx26.us.i.prol to i64*\l  %113 = load i64, i64* %112, align 8, !tbaa !35\l  %114 = add nsw i64 %indvars.iv.i.ph, %18\l  %arrayidx30.us.i.prol = getelementptr inbounds i8*, i8**\l... %fake_buffer.085.us.i, i64 %114\l  %115 = bitcast i8** %arrayidx30.us.i.prol to i64*\l  store i64 %113, i64* %115, align 8, !tbaa !35\l  %indvars.iv.next.i.prol = or i64 %indvars.iv.i.ph, 1\l  br label %for.body21.us.i.preheader.split\l}"];
	Node0x5d0e5e0 -> Node0x5d0e4c0;
	Node0x5d0e4c0 [shape=record, style = filled, fillcolor = skyblue, label="{for.body21.us.i.preheader.split:                  \l  %indvars.iv.i.unr = phi i64 [ %indvars.iv.i.ph, %for.body21.us.i.preheader\l... ], [ %indvars.iv.next.i.prol, %for.body21.us.i.prol ]\l  %116 = icmp eq i32 %10, %106\l  br i1 %116, label %for.cond18.for.end_crit_edge.us.i.loopexit, label\l... %for.body21.us.i.preheader.split.split\l|{<s0>T|<s1>F}}"];
	Node0x5d0e4c0:s0 -> Node0x5d208f0;
	Node0x5d0e4c0:s1 -> Node0x5d209f0;
	Node0x5d209f0 [shape=record, style = filled, fillcolor = skyblue, label="{for.body21.us.i.preheader.split.split:            \l  br label %for.body21.us.i\l}"];
	Node0x5d209f0 -> Node0x5d20b30;
	Node0x5d20b30 [shape=record, style = filled, fillcolor = cyan, label="{for.body21.us.i:                                  \l  %indvars.iv.i = phi i64 [ %indvars.iv.i.unr,\l... %for.body21.us.i.preheader.split.split ], [ %indvars.iv.next.i.1,\l... %for.body21.us.i ]\l  %117 = add nsw i64 %indvars.iv.i, %17\l  %arrayidx.us.i = getelementptr inbounds i8*, i8** %call14.us.i, i64 %117\l  %118 = bitcast i8** %arrayidx.us.i to i64*\l  %119 = load i64, i64* %118, align 8, !tbaa !35\l  %arrayidx24.us.i = getelementptr inbounds i8*, i8** %fake_buffer.085.us.i,\l... i64 %indvars.iv.i\l  %120 = bitcast i8** %arrayidx24.us.i to i64*\l  store i64 %119, i64* %120, align 8, !tbaa !35\l  %arrayidx26.us.i = getelementptr inbounds i8*, i8** %call14.us.i, i64\l... %indvars.iv.i\l  %121 = bitcast i8** %arrayidx26.us.i to i64*\l  %122 = load i64, i64* %121, align 8, !tbaa !35\l  %123 = add nsw i64 %indvars.iv.i, %18\l  %arrayidx30.us.i = getelementptr inbounds i8*, i8** %fake_buffer.085.us.i,\l... i64 %123\l  %124 = bitcast i8** %arrayidx30.us.i to i64*\l  store i64 %122, i64* %124, align 8, !tbaa !35\l  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1\l  %125 = add nsw i64 %indvars.iv.next.i, %17\l  %arrayidx.us.i.1 = getelementptr inbounds i8*, i8** %call14.us.i, i64 %125\l  %126 = bitcast i8** %arrayidx.us.i.1 to i64*\l  %127 = load i64, i64* %126, align 8, !tbaa !35\l  %arrayidx24.us.i.1 = getelementptr inbounds i8*, i8** %fake_buffer.085.us.i,\l... i64 %indvars.iv.next.i\l  %128 = bitcast i8** %arrayidx24.us.i.1 to i64*\l  store i64 %127, i64* %128, align 8, !tbaa !35\l  %arrayidx26.us.i.1 = getelementptr inbounds i8*, i8** %call14.us.i, i64\l... %indvars.iv.next.i\l  %129 = bitcast i8** %arrayidx26.us.i.1 to i64*\l  %130 = load i64, i64* %129, align 8, !tbaa !35\l  %131 = add nsw i64 %indvars.iv.next.i, %18\l  %arrayidx30.us.i.1 = getelementptr inbounds i8*, i8** %fake_buffer.085.us.i,\l... i64 %131\l  %132 = bitcast i8** %arrayidx30.us.i.1 to i64*\l  store i64 %130, i64* %132, align 8, !tbaa !35\l  %indvars.iv.next.i.1 = add nsw i64 %indvars.iv.i, 2\l  %lftr.wideiv.1 = trunc i64 %indvars.iv.next.i.1 to i32\l  %exitcond.1 = icmp eq i32 %lftr.wideiv.1, %10\l  br i1 %exitcond.1, label\l... %for.cond18.for.end_crit_edge.us.i.loopexit.unr-lcssa, label\l... %for.body21.us.i, !llvm.loop !39\l|{<s0>T|<s1>F}}"];
	Node0x5d20b30:s0 -> Node0x5d221a0;
	Node0x5d20b30:s1 -> Node0x5d20b30;
	Node0x5d221a0 [shape=record, style = filled, fillcolor = skyblue, label="{for.cond18.for.end_crit_edge.us.i.loopexit.unr-lcssa: \l  br label %for.cond18.for.end_crit_edge.us.i.loopexit\l}"];
	Node0x5d221a0 -> Node0x5d208f0;
	Node0x5d208f0 [shape=record, style = filled, fillcolor = skyblue, label="{for.cond18.for.end_crit_edge.us.i.loopexit:       \l  br label %for.cond18.for.end_crit_edge.us.i\l}"];
	Node0x5d208f0 -> Node0x5d16660;
	Node0x5d16660 [shape=record, style = filled, fillcolor = skyblue, label="{for.cond18.for.end_crit_edge.us.i:                \l  %arrayidx34.us.i = getelementptr inbounds %struct.my_prep_controller,\l... %struct.my_prep_controller* %9, i64 0, i32 1, i64 %indvars.iv89.i\l  store i8** %add.ptr.us.i, i8*** %arrayidx34.us.i, align 8, !tbaa !35\l  %add.ptr37.us.i = getelementptr inbounds i8*, i8** %fake_buffer.085.us.i,\l... i64 %idx.ext36.i\l  %indvars.iv.next90.i = add nuw nsw i64 %indvars.iv89.i, 1\l  %incdec.ptr.us.i = getelementptr inbounds %struct.jpeg_component_info,\l... %struct.jpeg_component_info* %compptr.083.us.i, i64 1\l  %133 = load i32, i32* %num_components.i, align 4, !tbaa !28\l  %134 = sext i32 %133 to i64\l  %cmp.us.i = icmp slt i64 %indvars.iv.next90.i, %134\l  br i1 %cmp.us.i, label %for.body.us.i, label %if.end14.loopexit83\l|{<s0>T|<s1>F}}"];
	Node0x5d16660:s0 -> Node0x5d164b0;
	Node0x5d16660:s1 -> Node0x5d22830;
	Node0x5d14a80 [shape=record, style = filled, fillcolor = skyblue, label="{for.body.i:                                       \l  %indvars.iv91.i = phi i64 [ %indvars.iv.next92.i, %for.body.i ], [ 0,\l... %for.body.i.preheader ]\l  %fake_buffer.085.i = phi i8** [ %add.ptr37.i, %for.body.i ], [ %14,\l... %for.body.i.preheader ]\l  %compptr.083.i = phi %struct.jpeg_component_info* [ %incdec.ptr.i,\l... %for.body.i ], [ %15, %for.body.i.preheader ]\l  %135 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align\l... 8, !tbaa !16\l  %alloc_sarray.i = getelementptr inbounds %struct.jpeg_memory_mgr,\l... %struct.jpeg_memory_mgr* %135, i64 0, i32 2\l  %136 = load i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, i8**\l... (%struct.jpeg_common_struct*, i32, i32, i32)** %alloc_sarray.i, align 8,\l... !tbaa !30\l  %width_in_blocks.i = getelementptr inbounds %struct.jpeg_component_info,\l... %struct.jpeg_component_info* %compptr.083.i, i64 0, i32 7\l  %137 = load i32, i32* %width_in_blocks.i, align 4, !tbaa !31\l  %conv7.i = zext i32 %137 to i64\l  %mul8.i = shl nuw nsw i64 %conv7.i, 3\l  %138 = load i32, i32* %max_h_samp_factor.i, align 8, !tbaa !33\l  %conv9.i = sext i32 %138 to i64\l  %mul10.i = mul nsw i64 %mul8.i, %conv9.i\l  %h_samp_factor.i = getelementptr inbounds %struct.jpeg_component_info,\l... %struct.jpeg_component_info* %compptr.083.i, i64 0, i32 2\l  %139 = load i32, i32* %h_samp_factor.i, align 8, !tbaa !34\l  %conv11.i = sext i32 %139 to i64\l  %div.i = sdiv i64 %mul10.i, %conv11.i\l  %conv12.i = trunc i64 %div.i to i32\l  %call14.i = tail call i8** %136(%struct.jpeg_common_struct* nonnull\l... %.pre-phi, i32 1, i32 %conv12.i, i32 %mul13.i) #3\l  %add.ptr.i = getelementptr inbounds i8*, i8** %fake_buffer.085.i, i64\l... %idx.ext.i\l  %140 = bitcast i8** %add.ptr.i to i8*\l  %141 = bitcast i8** %call14.i to i8*\l  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %140, i8* %141, i64 %mul17.i,\l... i32 1, i1 false) #3\l  %arrayidx34.i = getelementptr inbounds %struct.my_prep_controller,\l... %struct.my_prep_controller* %9, i64 0, i32 1, i64 %indvars.iv91.i\l  store i8** %add.ptr.i, i8*** %arrayidx34.i, align 8, !tbaa !35\l  %add.ptr37.i = getelementptr inbounds i8*, i8** %fake_buffer.085.i, i64\l... %idx.ext36.i\l  %indvars.iv.next92.i = add nuw nsw i64 %indvars.iv91.i, 1\l  %incdec.ptr.i = getelementptr inbounds %struct.jpeg_component_info,\l... %struct.jpeg_component_info* %compptr.083.i, i64 1\l  %142 = load i32, i32* %num_components.i, align 4, !tbaa !28\l  %143 = sext i32 %142 to i64\l  %cmp.i = icmp slt i64 %indvars.iv.next92.i, %143\l  br i1 %cmp.i, label %for.body.i, label %if.end14.loopexit84\l|{<s0>T|<s1>F}}"];
	Node0x5d14a80:s0 -> Node0x5d14a80;
	Node0x5d14a80:s1 -> Node0x5d258d0;
	Node0x5d101d0 [shape=record, style = filled, fillcolor = blue, label="{if.else:                                          \l  store void (%struct.jpeg_compress_struct*, i8**, i32*, i32, i8***, i32*,\l... i32)* @pre_process_data, void (%struct.jpeg_compress_struct*, i8**, i32*,\l... i32, i8***, i32*, i32)** %8, align 8, !tbaa !26\l  %num_components = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %cinfo, i64 0, i32 12\l  %144 = load i32, i32* %num_components, align 4, !tbaa !28\l  %cmp40 = icmp sgt i32 %144, 0\l  br i1 %cmp40, label %for.body.lr.ph, label %if.end14, !prof !40\l|{<s0>T|<s1>F}}"];
	Node0x5d101d0:s0 -> Node0x5d262f0;
	Node0x5d101d0:s1 -> Node0x5d141e0;
	Node0x5d262f0 [shape=record, style = filled, fillcolor = blue, label="{for.body.lr.ph:                                   \l  %comp_info = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %cinfo, i64 0, i32 14\l  %145 = load %struct.jpeg_component_info*, %struct.jpeg_component_info**\l... %comp_info, align 8, !tbaa !29\l  %max_h_samp_factor = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %cinfo, i64 0, i32 38\l  %color_buf = getelementptr inbounds i8, i8* %call, i64 16\l  %146 = bitcast i8* %color_buf to [10 x i8**]*\l  %147 = bitcast i32* %max_h_samp_factor to i64*\l  br label %for.body\l}"];
	Node0x5d262f0 -> Node0x5d26ed0;
	Node0x5d26ed0 [shape=record, style = filled, fillcolor = skyblue, label="{for.body:                                         \l  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]\l  %compptr.042 = phi %struct.jpeg_component_info* [ %145, %for.body.lr.ph ], [\l... %incdec.ptr, %for.body ]\l  %148 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align\l... 8, !tbaa !16\l  %alloc_sarray = getelementptr inbounds %struct.jpeg_memory_mgr,\l... %struct.jpeg_memory_mgr* %148, i64 0, i32 2\l  %149 = load i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, i8**\l... (%struct.jpeg_common_struct*, i32, i32, i32)** %alloc_sarray, align 8, !tbaa\l... !30\l  %width_in_blocks = getelementptr inbounds %struct.jpeg_component_info,\l... %struct.jpeg_component_info* %compptr.042, i64 0, i32 7\l  %150 = load i32, i32* %width_in_blocks, align 4, !tbaa !31\l  %conv = zext i32 %150 to i64\l  %mul = shl nuw nsw i64 %conv, 3\l  %151 = load i64, i64* %147, align 8\l  %sext = shl i64 %151, 32\l  %conv9 = ashr exact i64 %sext, 32\l  %mul10 = mul nsw i64 %mul, %conv9\l  %h_samp_factor = getelementptr inbounds %struct.jpeg_component_info,\l... %struct.jpeg_component_info* %compptr.042, i64 0, i32 2\l  %152 = load i32, i32* %h_samp_factor, align 8, !tbaa !34\l  %conv11 = sext i32 %152 to i64\l  %div = sdiv i64 %mul10, %conv11\l  %conv12 = trunc i64 %div to i32\l  %153 = lshr i64 %151, 32\l  %154 = trunc i64 %153 to i32\l  %call13 = tail call i8** %149(%struct.jpeg_common_struct* nonnull %.pre-phi,\l... i32 1, i32 %conv12, i32 %154) #3\l  %arrayidx = getelementptr inbounds [10 x i8**], [10 x i8**]* %146, i64 0,\l... i64 %indvars.iv\l  store i8** %call13, i8*** %arrayidx, align 8, !tbaa !35\l  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1\l  %incdec.ptr = getelementptr inbounds %struct.jpeg_component_info,\l... %struct.jpeg_component_info* %compptr.042, i64 1\l  %155 = load i32, i32* %num_components, align 4, !tbaa !28\l  %156 = sext i32 %155 to i64\l  %cmp = icmp slt i64 %indvars.iv.next, %156\l  br i1 %cmp, label %for.body, label %if.end14.loopexit, !prof !40\l|{<s0>T|<s1>F}}"];
	Node0x5d26ed0:s0 -> Node0x5d26ed0;
	Node0x5d26ed0:s1 -> Node0x5d1a400;
	Node0x5d1a400 [shape=record, style = filled, fillcolor = blue, label="{if.end14.loopexit:                                \l  br label %if.end14\l}"];
	Node0x5d1a400 -> Node0x5d141e0;
	Node0x5d22830 [shape=record, style = filled, fillcolor = blue, label="{if.end14.loopexit83:                              \l  br label %if.end14\l}"];
	Node0x5d22830 -> Node0x5d141e0;
	Node0x5d258d0 [shape=record, style = filled, fillcolor = blue, label="{if.end14.loopexit84:                              \l  br label %if.end14\l}"];
	Node0x5d258d0 -> Node0x5d141e0;
	Node0x5d141e0 [shape=record, style = filled, fillcolor = skyblue, label="{if.end14:                                         \l  ret void\l}"];
}
