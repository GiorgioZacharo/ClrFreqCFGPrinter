; ModuleID = 'jdatadst.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_compress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32, %struct.jpeg_destination_mgr*, i32, i32, i32, i32, double, i32, i32, i32, %struct.jpeg_component_info*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], [16 x i8], [16 x i8], [16 x i8], i32, %struct.jpeg_scan_info*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i16, i16, i32, i32, i32, i32, i32, i32, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, %struct.jpeg_comp_master*, %struct.jpeg_c_main_controller*, %struct.jpeg_c_prep_controller*, %struct.jpeg_c_coef_controller*, %struct.jpeg_marker_writer*, %struct.jpeg_color_converter*, %struct.jpeg_downsampler*, %struct.jpeg_forward_dct*, %struct.jpeg_entropy_encoder* }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_destination_mgr = type { i8*, i64, void (%struct.jpeg_compress_struct*)*, i32 (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)* }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_scan_info = type { i32, [4 x i32], i32, i32, i32, i32 }
%struct.jpeg_comp_master = type opaque
%struct.jpeg_c_main_controller = type opaque
%struct.jpeg_c_prep_controller = type opaque
%struct.jpeg_c_coef_controller = type opaque
%struct.jpeg_marker_writer = type opaque
%struct.jpeg_color_converter = type opaque
%struct.jpeg_downsampler = type opaque
%struct.jpeg_forward_dct = type opaque
%struct.jpeg_entropy_encoder = type opaque
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.my_destination_mgr = type { %struct.jpeg_destination_mgr, %struct._IO_FILE*, i8* }

; Function Attrs: nounwind uwtable
define void @jpeg_stdio_dest(%struct.jpeg_compress_struct* %cinfo, %struct._IO_FILE* %outfile) #0 !prof !2 {
entry:
  %dest1 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 5
  %0 = load %struct.jpeg_destination_mgr*, %struct.jpeg_destination_mgr** %dest1, align 8, !tbaa !3
  %cmp = icmp eq %struct.jpeg_destination_mgr* %0, null
  %1 = bitcast %struct.jpeg_destination_mgr* %0 to %struct.my_destination_mgr*
  br i1 %cmp, label %if.then, label %if.end, !prof !11

if.then:                                          ; preds = %entry
  %mem = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 1
  %2 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !12
  %alloc_small = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %2, i64 0, i32 0
  %3 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_small, align 8, !tbaa !13
  %4 = bitcast %struct.jpeg_compress_struct* %cinfo to %struct.jpeg_common_struct*
  %call = tail call i8* %3(%struct.jpeg_common_struct* %4, i32 0, i64 56) #3
  %5 = bitcast %struct.jpeg_destination_mgr** %dest1 to i8**
  store i8* %call, i8** %5, align 8, !tbaa !3
  %6 = bitcast i8* %call to %struct.my_destination_mgr*
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = phi %struct.my_destination_mgr* [ %6, %if.then ], [ %1, %entry ]
  %init_destination = getelementptr inbounds %struct.my_destination_mgr, %struct.my_destination_mgr* %7, i64 0, i32 0, i32 2
  store void (%struct.jpeg_compress_struct*)* @init_destination, void (%struct.jpeg_compress_struct*)** %init_destination, align 8, !tbaa !16
  %empty_output_buffer = getelementptr inbounds %struct.my_destination_mgr, %struct.my_destination_mgr* %7, i64 0, i32 0, i32 3
  store i32 (%struct.jpeg_compress_struct*)* @empty_output_buffer, i32 (%struct.jpeg_compress_struct*)** %empty_output_buffer, align 8, !tbaa !19
  %term_destination = getelementptr inbounds %struct.my_destination_mgr, %struct.my_destination_mgr* %7, i64 0, i32 0, i32 4
  store void (%struct.jpeg_compress_struct*)* @term_destination, void (%struct.jpeg_compress_struct*)** %term_destination, align 8, !tbaa !20
  %outfile6 = getelementptr inbounds %struct.my_destination_mgr, %struct.my_destination_mgr* %7, i64 0, i32 1
  store %struct._IO_FILE* %outfile, %struct._IO_FILE** %outfile6, align 8, !tbaa !21
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @init_destination(%struct.jpeg_compress_struct* %cinfo) #0 !prof !2 {
entry:
  %dest1 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 5
  %0 = bitcast %struct.jpeg_destination_mgr** %dest1 to %struct.my_destination_mgr**
  %1 = load %struct.my_destination_mgr*, %struct.my_destination_mgr** %0, align 8, !tbaa !3
  %mem = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 1
  %2 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !12
  %alloc_small = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %2, i64 0, i32 0
  %3 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_small, align 8, !tbaa !13
  %4 = bitcast %struct.jpeg_compress_struct* %cinfo to %struct.jpeg_common_struct*
  %call = tail call i8* %3(%struct.jpeg_common_struct* %4, i32 1, i64 4096) #3
  %buffer = getelementptr inbounds %struct.my_destination_mgr, %struct.my_destination_mgr* %1, i64 0, i32 2
  store i8* %call, i8** %buffer, align 8, !tbaa !22
  %next_output_byte = getelementptr inbounds %struct.my_destination_mgr, %struct.my_destination_mgr* %1, i64 0, i32 0, i32 0
  store i8* %call, i8** %next_output_byte, align 8, !tbaa !23
  %free_in_buffer = getelementptr inbounds %struct.my_destination_mgr, %struct.my_destination_mgr* %1, i64 0, i32 0, i32 1
  store i64 4096, i64* %free_in_buffer, align 8, !tbaa !24
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @empty_output_buffer(%struct.jpeg_compress_struct* %cinfo) #0 !prof !25 {
entry:
  %dest1 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 5
  %0 = bitcast %struct.jpeg_destination_mgr** %dest1 to %struct.my_destination_mgr**
  %1 = load %struct.my_destination_mgr*, %struct.my_destination_mgr** %0, align 8, !tbaa !3
  %buffer = getelementptr inbounds %struct.my_destination_mgr, %struct.my_destination_mgr* %1, i64 0, i32 2
  %2 = load i8*, i8** %buffer, align 8, !tbaa !22
  %outfile = getelementptr inbounds %struct.my_destination_mgr, %struct.my_destination_mgr* %1, i64 0, i32 1
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile, align 8, !tbaa !21
  %call = tail call i64 @fwrite(i8* %2, i64 1, i64 4096, %struct._IO_FILE* %3)
  %cmp = icmp eq i64 %call, 4096
  br i1 %cmp, label %if.end, label %if.then, !prof !26

if.then:                                          ; preds = %entry
  %err = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 0
  %4 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8, !tbaa !27
  %msg_code = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %4, i64 0, i32 5
  store i32 36, i32* %msg_code, align 8, !tbaa !28
  %error_exit = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %4, i64 0, i32 0
  %5 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit, align 8, !tbaa !30
  %6 = bitcast %struct.jpeg_compress_struct* %cinfo to %struct.jpeg_common_struct*
  tail call void %5(%struct.jpeg_common_struct* %6) #3
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %7 = bitcast i8** %buffer to i64*
  %8 = load i64, i64* %7, align 8, !tbaa !22
  %9 = bitcast %struct.my_destination_mgr* %1 to i64*
  store i64 %8, i64* %9, align 8, !tbaa !23
  %free_in_buffer = getelementptr inbounds %struct.my_destination_mgr, %struct.my_destination_mgr* %1, i64 0, i32 0, i32 1
  store i64 4096, i64* %free_in_buffer, align 8, !tbaa !24
  ret i32 1
}

; Function Attrs: nounwind uwtable
define internal void @term_destination(%struct.jpeg_compress_struct* %cinfo) #0 !prof !2 {
entry:
  %dest1 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 5
  %0 = bitcast %struct.jpeg_destination_mgr** %dest1 to %struct.my_destination_mgr**
  %1 = load %struct.my_destination_mgr*, %struct.my_destination_mgr** %0, align 8, !tbaa !3
  %free_in_buffer = getelementptr inbounds %struct.my_destination_mgr, %struct.my_destination_mgr* %1, i64 0, i32 0, i32 1
  %2 = load i64, i64* %free_in_buffer, align 8, !tbaa !24
  %sub = sub i64 4096, %2
  %cmp = icmp eq i64 %sub, 0
  br i1 %cmp, label %entry.if.end5_crit_edge, label %if.then, !prof !31

entry.if.end5_crit_edge:                          ; preds = %entry
  %.pre = getelementptr inbounds %struct.my_destination_mgr, %struct.my_destination_mgr* %1, i64 0, i32 1
  br label %if.end5

if.then:                                          ; preds = %entry
  %buffer = getelementptr inbounds %struct.my_destination_mgr, %struct.my_destination_mgr* %1, i64 0, i32 2
  %3 = load i8*, i8** %buffer, align 8, !tbaa !22
  %outfile = getelementptr inbounds %struct.my_destination_mgr, %struct.my_destination_mgr* %1, i64 0, i32 1
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile, align 8, !tbaa !21
  %call = tail call i64 @fwrite(i8* %3, i64 1, i64 %sub, %struct._IO_FILE* %4)
  %cmp2 = icmp eq i64 %call, %sub
  br i1 %cmp2, label %if.end5, label %if.then3, !prof !11

if.then3:                                         ; preds = %if.then
  %err = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 0
  %5 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8, !tbaa !27
  %msg_code = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %5, i64 0, i32 5
  store i32 36, i32* %msg_code, align 8, !tbaa !28
  %error_exit = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %5, i64 0, i32 0
  %6 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit, align 8, !tbaa !30
  %7 = bitcast %struct.jpeg_compress_struct* %cinfo to %struct.jpeg_common_struct*
  tail call void %6(%struct.jpeg_common_struct* %7) #3
  br label %if.end5

if.end5:                                          ; preds = %entry.if.end5_crit_edge, %if.then, %if.then3
  %outfile6.pre-phi = phi %struct._IO_FILE** [ %.pre, %entry.if.end5_crit_edge ], [ %outfile, %if.then ], [ %outfile, %if.then3 ]
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile6.pre-phi, align 8, !tbaa !21
  %call7 = tail call i32 @fflush(%struct._IO_FILE* %8)
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile6.pre-phi, align 8, !tbaa !21
  %call9 = tail call i32 @ferror(%struct._IO_FILE* %9) #3
  %tobool = icmp eq i32 %call9, 0
  br i1 %tobool, label %if.end15, label %if.then10, !prof !11

if.then10:                                        ; preds = %if.end5
  %err11 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 0
  %10 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err11, align 8, !tbaa !27
  %msg_code12 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %10, i64 0, i32 5
  store i32 36, i32* %msg_code12, align 8, !tbaa !28
  %error_exit14 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %10, i64 0, i32 0
  %11 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit14, align 8, !tbaa !30
  %12 = bitcast %struct.jpeg_compress_struct* %cinfo to %struct.jpeg_common_struct*
  tail call void %11(%struct.jpeg_common_struct* %12) #3
  br label %if.end15

if.end15:                                         ; preds = %if.end5, %if.then10
  ret void
}

; Function Attrs: nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) #1

; Function Attrs: nounwind
declare i32 @fflush(%struct._IO_FILE* nocapture) #1

; Function Attrs: nounwind readonly
declare i32 @ferror(%struct._IO_FILE* nocapture) #2

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"MaxFunctionCount", i32 150581}
!1 = !{!"clang version 3.8.0 (trunk 257473)"}
!2 = !{!"function_entry_count", i64 1}
!3 = !{!4, !5, i64 32}
!4 = !{!"jpeg_compress_struct", !5, i64 0, !5, i64 8, !5, i64 16, !8, i64 24, !8, i64 28, !5, i64 32, !8, i64 40, !8, i64 44, !8, i64 48, !6, i64 52, !9, i64 56, !8, i64 64, !8, i64 68, !6, i64 72, !5, i64 80, !6, i64 88, !6, i64 120, !6, i64 152, !6, i64 184, !6, i64 200, !6, i64 216, !8, i64 232, !5, i64 240, !8, i64 248, !8, i64 252, !8, i64 256, !8, i64 260, !8, i64 264, !6, i64 268, !8, i64 272, !8, i64 276, !8, i64 280, !6, i64 284, !10, i64 286, !10, i64 288, !8, i64 292, !8, i64 296, !8, i64 300, !8, i64 304, !8, i64 308, !8, i64 312, !8, i64 316, !6, i64 320, !8, i64 352, !8, i64 356, !8, i64 360, !6, i64 364, !8, i64 404, !8, i64 408, !8, i64 412, !8, i64 416, !5, i64 424, !5, i64 432, !5, i64 440, !5, i64 448, !5, i64 456, !5, i64 464, !5, i64 472, !5, i64 480, !5, i64 488}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = !{!"int", !6, i64 0}
!9 = !{!"double", !6, i64 0}
!10 = !{!"short", !6, i64 0}
!11 = !{!"branch_weights", i32 2, i32 1}
!12 = !{!4, !5, i64 8}
!13 = !{!14, !5, i64 0}
!14 = !{!"jpeg_memory_mgr", !5, i64 0, !5, i64 8, !5, i64 16, !5, i64 24, !5, i64 32, !5, i64 40, !5, i64 48, !5, i64 56, !5, i64 64, !5, i64 72, !5, i64 80, !15, i64 88}
!15 = !{!"long", !6, i64 0}
!16 = !{!17, !5, i64 16}
!17 = !{!"", !18, i64 0, !5, i64 40, !5, i64 48}
!18 = !{!"jpeg_destination_mgr", !5, i64 0, !15, i64 8, !5, i64 16, !5, i64 24, !5, i64 32}
!19 = !{!17, !5, i64 24}
!20 = !{!17, !5, i64 32}
!21 = !{!17, !5, i64 40}
!22 = !{!17, !5, i64 48}
!23 = !{!17, !5, i64 0}
!24 = !{!17, !15, i64 8}
!25 = !{!"function_entry_count", i64 6}
!26 = !{!"branch_weights", i32 7, i32 1}
!27 = !{!4, !5, i64 0}
!28 = !{!29, !8, i64 40}
!29 = !{!"jpeg_error_mgr", !5, i64 0, !5, i64 8, !5, i64 16, !5, i64 24, !5, i64 32, !8, i64 40, !6, i64 44, !8, i64 124, !15, i64 128, !5, i64 136, !8, i64 144, !5, i64 152, !8, i64 160, !8, i64 164}
!30 = !{!29, !5, i64 0}
!31 = !{!"branch_weights", i32 1, i32 2}
