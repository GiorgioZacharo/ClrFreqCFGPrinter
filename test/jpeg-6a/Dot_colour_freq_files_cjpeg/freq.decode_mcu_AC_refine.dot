digraph "CFG for 'decode_mcu_AC_refine' function" {
	label="CFG for 'decode_mcu_AC_refine' function";

	Node0x4fdf0d0 [shape=record, style = filled, fillcolor = blue, label="{entry:\l  %br_state = alloca %struct.bitread_working_state, align 16\l  %newnz_pos = alloca [64 x i32], align 16\l  %entropy1 = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 79\l  %0 = bitcast %struct.jpeg_entropy_decoder** %entropy1 to\l... %struct.phuff_entropy_decoder**\l  %1 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder**\l... %0, align 8, !tbaa !2\l  %Se2 = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 69\l  %2 = load i32, i32* %Se2, align 8, !tbaa !10\l  %Al = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 71\l  %3 = bitcast i32* %Al to i64*\l  %4 = load i64, i64* %3, align 8\l  %5 = trunc i64 %4 to i32\l  %shl = shl i32 1, %5\l  %shl4 = shl i32 -1, %5\l  %6 = bitcast %struct.bitread_working_state* %br_state to i8*\l  call void @llvm.lifetime.start(i64 56, i8* %6) #3\l  %7 = bitcast [64 x i32]* %newnz_pos to i8*\l  call void @llvm.lifetime.start(i64 256, i8* %7) #3\l  %restart_interval = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 49\l  %8 = load i32, i32* %restart_interval, align 8, !tbaa !11\l  %tobool = icmp eq i32 %8, 0\l  %9 = lshr i64 %4, 32\l  %10 = trunc i64 %9 to i32\l  br i1 %tobool, label %if.end9, label %if.then\l|{<s0>T|<s1>F}}"];
	Node0x4fdf0d0:s0 -> Node0x4fe0570;
	Node0x4fdf0d0:s1 -> Node0x4fdf020;
	Node0x4fdf020 [shape=record, style = filled, fillcolor = blue, label="{if.then:                                          \l  %restarts_to_go = getelementptr inbounds %struct.phuff_entropy_decoder,\l... %struct.phuff_entropy_decoder* %1, i64 0, i32 3\l  %11 = load i32, i32* %restarts_to_go, align 4, !tbaa !12\l  %cmp = icmp eq i32 %11, 0\l  br i1 %cmp, label %if.then5, label %if.end9\l|{<s0>T|<s1>F}}"];
	Node0x4fdf020:s0 -> Node0x4fe1100;
	Node0x4fdf020:s1 -> Node0x4fe0570;
	Node0x4fe1100 [shape=record, style = filled, fillcolor = blue, label="{if.then5:                                         \l  %bits_left.i = getelementptr inbounds %struct.phuff_entropy_decoder,\l... %struct.phuff_entropy_decoder* %1, i64 0, i32 1, i32 1\l  %12 = load i32, i32* %bits_left.i, align 8, !tbaa !18\l  %div.i = sdiv i32 %12, 8\l  %marker.i = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 78\l  %13 = load %struct.jpeg_marker_reader*, %struct.jpeg_marker_reader**\l... %marker.i, align 8, !tbaa !19\l  %discarded_bytes.i = getelementptr inbounds %struct.jpeg_marker_reader,\l... %struct.jpeg_marker_reader* %13, i64 0, i32 8\l  %14 = load i32, i32* %discarded_bytes.i, align 4, !tbaa !20\l  %add.i = add i32 %14, %div.i\l  store i32 %add.i, i32* %discarded_bytes.i, align 4, !tbaa !20\l  store i32 0, i32* %bits_left.i, align 8, !tbaa !18\l  %read_restart_marker.i = getelementptr inbounds %struct.jpeg_marker_reader,\l... %struct.jpeg_marker_reader* %13, i64 0, i32 2\l  %15 = load i32 (%struct.jpeg_decompress_struct*)*, i32\l... (%struct.jpeg_decompress_struct*)** %read_restart_marker.i, align 8, !tbaa !22\l  %call.i = tail call i32 %15(%struct.jpeg_decompress_struct* nonnull %cinfo)\l... #3\l  %tobool.i = icmp eq i32 %call.i, 0\l  br i1 %tobool.i, label %cleanup251, label %for.cond.preheader.i\l|{<s0>T|<s1>F}}"];
	Node0x4fe1100:s0 -> Node0x4fe0dd0;
	Node0x4fe1100:s1 -> Node0x4fe0ee0;
	Node0x4fe0ee0 [shape=record, style = filled, fillcolor = blue, label="{for.cond.preheader.i:                             \l  %comps_in_scan.i = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 62\l  %16 = load i32, i32* %comps_in_scan.i, align 8, !tbaa !23\l  %cmp22.i = icmp sgt i32 %16, 0\l  br i1 %cmp22.i, label %for.body.i.preheader, label %process_restart.exit\l|{<s0>T|<s1>F}}"];
	Node0x4fe0ee0:s0 -> Node0x4fe2140;
	Node0x4fe0ee0:s1 -> Node0x4fe2240;
	Node0x4fe2140 [shape=record, style = filled, fillcolor = blue, label="{for.body.i.preheader:                             \l  br label %for.body.i\l}"];
	Node0x4fe2140 -> Node0x4fe23d0;
	Node0x4fe23d0 [shape=record, style = filled, fillcolor = blue, label="{for.body.i:                                       \l  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %for.body.i ], [ 0,\l... %for.body.i.preheader ]\l  %arrayidx.i = getelementptr inbounds %struct.phuff_entropy_decoder,\l... %struct.phuff_entropy_decoder* %1, i64 0, i32 2, i32 1, i64 %indvars.iv.i\l  store i32 0, i32* %arrayidx.i, align 4, !tbaa !24\l  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1\l  %17 = load i32, i32* %comps_in_scan.i, align 8, !tbaa !23\l  %18 = sext i32 %17 to i64\l  %cmp.i = icmp slt i64 %indvars.iv.next.i, %18\l  br i1 %cmp.i, label %for.body.i, label %process_restart.exit.loopexit\l|{<s0>T|<s1>F}}"];
	Node0x4fe23d0:s0 -> Node0x4fe23d0;
	Node0x4fe23d0:s1 -> Node0x4fe28e0;
	Node0x4fe28e0 [shape=record, style = filled, fillcolor = blue, label="{process_restart.exit.loopexit:                    \l  br label %process_restart.exit\l}"];
	Node0x4fe28e0 -> Node0x4fe2240;
	Node0x4fe2240 [shape=record, style = filled, fillcolor = blue, label="{process_restart.exit:                             \l  %EOBRUN.i = getelementptr inbounds %struct.phuff_entropy_decoder,\l... %struct.phuff_entropy_decoder* %1, i64 0, i32 2, i32 0\l  store i32 0, i32* %EOBRUN.i, align 8, !tbaa !25\l  %19 = load i32, i32* %restart_interval, align 8, !tbaa !11\l  store i32 %19, i32* %restarts_to_go, align 4, !tbaa !12\l  %printed_eod.i = getelementptr inbounds %struct.phuff_entropy_decoder,\l... %struct.phuff_entropy_decoder* %1, i64 0, i32 1, i32 2\l  store i32 0, i32* %printed_eod.i, align 4, !tbaa !26\l  %unread_marker.phi.trans.insert = getelementptr inbounds\l... %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64\l... 0, i32 72\l  %.pre = load i32, i32* %unread_marker.phi.trans.insert, align 4, !tbaa !27\l  br label %if.end9\l}"];
	Node0x4fe2240 -> Node0x4fe0570;
	Node0x4fe0570 [shape=record, style = filled, fillcolor = blue, label="{if.end9:                                          \l  %20 = phi i32 [ %.pre, %process_restart.exit ], [ %10, %entry ], [ %10,\l... %if.then ]\l  %cinfo10 = getelementptr inbounds %struct.bitread_working_state,\l... %struct.bitread_working_state* %br_state, i64 0, i32 5\l  store %struct.jpeg_decompress_struct* %cinfo,\l... %struct.jpeg_decompress_struct** %cinfo10, align 8, !tbaa !28\l  %src = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 5\l  %21 = bitcast %struct.jpeg_source_mgr** %src to \<2 x i64\>**\l  %22 = load \<2 x i64\>*, \<2 x i64\>** %21, align 8, !tbaa !30\l  %23 = load \<2 x i64\>, \<2 x i64\>* %22, align 8, !tbaa !31\l  %24 = bitcast %struct.bitread_working_state* %br_state to \<2 x i64\>*\l  store \<2 x i64\> %23, \<2 x i64\>* %24, align 16, !tbaa !31\l  %unread_marker = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 72\l  %unread_marker14 = getelementptr inbounds %struct.bitread_working_state,\l... %struct.bitread_working_state* %br_state, i64 0, i32 2\l  store i32 %20, i32* %unread_marker14, align 16, !tbaa !32\l  %get_buffer15 = getelementptr inbounds %struct.phuff_entropy_decoder,\l... %struct.phuff_entropy_decoder* %1, i64 0, i32 1, i32 0\l  %25 = load i64, i64* %get_buffer15, align 8, !tbaa !33\l  %bits_left17 = getelementptr inbounds %struct.phuff_entropy_decoder,\l... %struct.phuff_entropy_decoder* %1, i64 0, i32 1, i32 1\l  %26 = load i32, i32* %bits_left17, align 8, !tbaa !18\l  %printed_eod = getelementptr inbounds %struct.phuff_entropy_decoder,\l... %struct.phuff_entropy_decoder* %1, i64 0, i32 1, i32 2\l  %printed_eod_ptr = getelementptr inbounds %struct.bitread_working_state,\l... %struct.bitread_working_state* %br_state, i64 0, i32 6\l  store i32* %printed_eod, i32** %printed_eod_ptr, align 16, !tbaa !34\l  %EOBRUN19 = getelementptr inbounds %struct.phuff_entropy_decoder,\l... %struct.phuff_entropy_decoder* %1, i64 0, i32 2, i32 0\l  %27 = load i32, i32* %EOBRUN19, align 8, !tbaa !25\l  %28 = load [64 x i16]*, [64 x i16]** %MCU_data, align 8, !tbaa !35\l  %ac_derived_tbl = getelementptr inbounds %struct.phuff_entropy_decoder,\l... %struct.phuff_entropy_decoder* %1, i64 0, i32 5\l  %29 = load %struct.d_derived_tbl*, %struct.d_derived_tbl** %ac_derived_tbl,\l... align 8, !tbaa !36\l  %Ss = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 68\l  %30 = load i32, i32* %Ss, align 4, !tbaa !37\l  %cmp20 = icmp eq i32 %27, 0\l  br i1 %cmp20, label %for.cond.preheader, label %for.cond173.preheader\l|{<s0>T|<s1>F}}"];
	Node0x4fe0570:s0 -> Node0x4fc1500;
	Node0x4fe0570:s1 -> Node0x4fc1600;
	Node0x4fc1500 [shape=record, style = filled, fillcolor = blue, label="{for.cond.preheader:                               \l  %cmp22432 = icmp sgt i32 %30, %2\l  br i1 %cmp22432, label %if.end227, label %for.body.lr.ph\l|{<s0>T|<s1>F}}"];
	Node0x4fc1500:s0 -> Node0x4fe4d80;
	Node0x4fc1500:s1 -> Node0x4fe4e00;
	Node0x4fe4e00 [shape=record, style = filled, fillcolor = blue, label="{for.body.lr.ph:                                   \l  %get_buffer29 = getelementptr inbounds %struct.bitread_working_state,\l... %struct.bitread_working_state* %br_state, i64 0, i32 3\l  %bits_left30 = getelementptr inbounds %struct.bitread_working_state,\l... %struct.bitread_working_state* %br_state, i64 0, i32 4\l  %err = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0\l  %31 = bitcast %struct.jpeg_decompress_struct* %cinfo to\l... %struct.jpeg_common_struct*\l  %32 = sext i32 %2 to i64\l  br label %for.body\l}"];
	Node0x4fe4e00 -> Node0x4fe2000;
	Node0x4fe2000 [shape=record, style = filled, fillcolor = blue, label="{for.body:                                         \l  %num_newnz.0436 = phi i32 [ 0, %for.body.lr.ph ], [ %num_newnz.1, %for.inc ]\l  %k.0435 = phi i32 [ %30, %for.body.lr.ph ], [ %inc168, %for.inc ]\l  %bits_left.0434 = phi i32 [ %26, %for.body.lr.ph ], [ %bits_left.10,\l... %for.inc ]\l  %get_buffer.0433 = phi i64 [ %25, %for.body.lr.ph ], [ %get_buffer.10,\l... %for.inc ]\l  %cmp23 = icmp slt i32 %bits_left.0434, 8\l  br i1 %cmp23, label %if.then24, label %if.end34\l|{<s0>T|<s1>F}}"];
	Node0x4fe2000:s0 -> Node0x4fe5bb0;
	Node0x4fe2000:s1 -> Node0x4fe5c90;
	Node0x4fe5bb0 [shape=record, style = filled, fillcolor = blue, label="{if.then24:                                        \l  %call25 = call i32 @jpeg_fill_bit_buffer(%struct.bitread_working_state*\l... nonnull %br_state, i64 %get_buffer.0433, i32 %bits_left.0434, i32 0) #3\l  %tobool26 = icmp eq i32 %call25, 0\l  br i1 %tobool26, label %while.cond.preheader.loopexit490, label %if.end28\l|{<s0>T|<s1>F}}"];
	Node0x4fe5bb0:s0 -> Node0x4fe6060;
	Node0x4fe5bb0:s1 -> Node0x4fe6120;
	Node0x4fe6290 [shape=record, style = filled, fillcolor = blue, label="{while.cond.preheader.loopexit:                    \l  br label %while.cond.preheader\l}"];
	Node0x4fe6290 -> Node0x4fe63b0;
	Node0x4fe6490 [shape=record, style = filled, fillcolor = blue, label="{while.cond.preheader.loopexit489:                 \l  %num_newnz.0436.lcssa504 = phi i32 [ %num_newnz.0436, %if.then115 ]\l  br label %while.cond.preheader\l}"];
	Node0x4fe6490 -> Node0x4fe63b0;
	Node0x4fe6060 [shape=record, style = filled, fillcolor = blue, label="{while.cond.preheader.loopexit490:                 \l  %num_newnz.0436.lcssa = phi i32 [ %num_newnz.0436, %if.then24 ], [\l... %num_newnz.0436, %label3 ], [ %num_newnz.0436, %if.then63 ]\l  br label %while.cond.preheader\l}"];
	Node0x4fe6060 -> Node0x4fe63b0;
	Node0x4fe63b0 [shape=record, style = filled, fillcolor = blue, label="{while.cond.preheader:                             \l  %num_newnz.3.ph = phi i32 [ %num_newnz.0436.lcssa503, %if.then89 ], [\l... %num_newnz.2403.ph, %while.cond.preheader.loopexit ], [\l... %num_newnz.0436.lcssa504, %while.cond.preheader.loopexit489 ], [\l... %num_newnz.0436.lcssa, %while.cond.preheader.loopexit490 ]\l  %cmp244425 = icmp sgt i32 %num_newnz.3.ph, 0\l  br i1 %cmp244425, label %while.body.preheader, label %cleanup251\l|{<s0>T|<s1>F}}"];
	Node0x4fe63b0:s0 -> Node0x4fe6db0;
	Node0x4fe63b0:s1 -> Node0x4fe0dd0;
	Node0x4fe6db0 [shape=record, style = filled, fillcolor = blue, label="{while.body.preheader:                             \l  %33 = sext i32 %num_newnz.3.ph to i64\l  br label %while.body\l}"];
	Node0x4fe6db0 -> Node0x4fe6f40;
	Node0x4fe6120 [shape=record, style = filled, fillcolor = blue, label="{if.end28:                                         \l  %34 = load i64, i64* %get_buffer29, align 8, !tbaa !38\l  %35 = load i32, i32* %bits_left30, align 16, !tbaa !39\l  %cmp31 = icmp slt i32 %35, 8\l  br i1 %cmp31, label %label3, label %if.end34\l|{<s0>T|<s1>F}}"];
	Node0x4fe6120:s0 -> Node0x4fe6750;
	Node0x4fe6120:s1 -> Node0x4fe5c90;
	Node0x4fe5c90 [shape=record, style = filled, fillcolor = blue, label="{if.end34:                                         \l  %get_buffer.1 = phi i64 [ %34, %if.end28 ], [ %get_buffer.0433, %for.body ]\l  %bits_left.1 = phi i32 [ %35, %if.end28 ], [ %bits_left.0434, %for.body ]\l  %sub = add nsw i32 %bits_left.1, -8\l  %sh_prom = zext i32 %sub to i64\l  %shr = ashr i64 %get_buffer.1, %sh_prom\l  %and = and i64 %shr, 255\l  %arrayidx35 = getelementptr inbounds %struct.d_derived_tbl,\l... %struct.d_derived_tbl* %29, i64 0, i32 4, i64 %and\l  %36 = load i32, i32* %arrayidx35, align 4, !tbaa !24\l  %cmp36 = icmp eq i32 %36, 0\l  br i1 %cmp36, label %label3, label %if.then38\l|{<s0>T|<s1>F}}"];
	Node0x4fe5c90:s0 -> Node0x4fe6750;
	Node0x4fe5c90:s1 -> Node0x4fe7740;
	Node0x4fe7740 [shape=record, style = filled, fillcolor = blue, label="{if.then38:                                        \l  %sub39 = sub nsw i32 %bits_left.1, %36\l  %arrayidx41 = getelementptr inbounds %struct.d_derived_tbl,\l... %struct.d_derived_tbl* %29, i64 0, i32 5, i64 %and\l  %37 = load i8, i8* %arrayidx41, align 1, !tbaa !31\l  %conv42 = zext i8 %37 to i32\l  br label %cleanup.cont\l}"];
	Node0x4fe7740 -> Node0x4fe48c0;
	Node0x4fe6750 [shape=record, style = filled, fillcolor = blue, label="{label3:                                           \l  %get_buffer.2 = phi i64 [ %34, %if.end28 ], [ %get_buffer.1, %if.end34 ]\l  %bits_left.2 = phi i32 [ %35, %if.end28 ], [ %bits_left.1, %if.end34 ]\l  %nb.0 = phi i32 [ 1, %if.end28 ], [ 9, %if.end34 ]\l  %call43 = call i32 @jpeg_huff_decode(%struct.bitread_working_state* nonnull\l... %br_state, i64 %get_buffer.2, i32 %bits_left.2, %struct.d_derived_tbl* %29,\l... i32 %nb.0) #3\l  %cmp44 = icmp slt i32 %call43, 0\l  br i1 %cmp44, label %while.cond.preheader.loopexit490, label %if.end47\l|{<s0>T|<s1>F}}"];
	Node0x4fe6750:s0 -> Node0x4fe6060;
	Node0x4fe6750:s1 -> Node0x4fe86b0;
	Node0x4fe86b0 [shape=record, style = filled, fillcolor = blue, label="{if.end47:                                         \l  %38 = load i64, i64* %get_buffer29, align 8, !tbaa !38\l  %39 = load i32, i32* %bits_left30, align 16, !tbaa !39\l  br label %cleanup.cont\l}"];
	Node0x4fe86b0 -> Node0x4fe48c0;
	Node0x4fe48c0 [shape=record, style = filled, fillcolor = blue, label="{cleanup.cont:                                     \l  %get_buffer.4.ph = phi i64 [ %get_buffer.1, %if.then38 ], [ %38, %if.end47 ]\l  %bits_left.4.ph = phi i32 [ %sub39, %if.then38 ], [ %39, %if.end47 ]\l  %s.2.ph = phi i32 [ %conv42, %if.then38 ], [ %call43, %if.end47 ]\l  %shr52 = ashr i32 %s.2.ph, 4\l  %and53 = and i32 %s.2.ph, 15\l  switch i32 %and53, label %if.then58 [\l    i32 0, label %if.else80\l    i32 1, label %if.end60\l  ]\l|{<s0>def|<s1>0|<s2>1}}"];
	Node0x4fe48c0:s0 -> Node0x4fe8bf0;
	Node0x4fe48c0:s1 -> Node0x4fe8cd0;
	Node0x4fe48c0:s2 -> Node0x4fe8db0;
	Node0x4fe8bf0 [shape=record, style = filled, fillcolor = blue, label="{if.then58:                                        \l  %40 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8,\l... !tbaa !40\l  %msg_code = getelementptr inbounds %struct.jpeg_error_mgr,\l... %struct.jpeg_error_mgr* %40, i64 0, i32 5\l  store i32 114, i32* %msg_code, align 8, !tbaa !41\l  %emit_message = getelementptr inbounds %struct.jpeg_error_mgr,\l... %struct.jpeg_error_mgr* %40, i64 0, i32 1\l  %41 = load void (%struct.jpeg_common_struct*, i32)*, void\l... (%struct.jpeg_common_struct*, i32)** %emit_message, align 8, !tbaa !43\l  call void %41(%struct.jpeg_common_struct* %31, i32 -1) #3\l  br label %if.end60\l}"];
	Node0x4fe8bf0 -> Node0x4fe8db0;
	Node0x4fe8db0 [shape=record, style = filled, fillcolor = blue, label="{if.end60:                                         \l  %cmp61 = icmp slt i32 %bits_left.4.ph, 1\l  br i1 %cmp61, label %if.then63, label %if.end70\l|{<s0>T|<s1>F}}"];
	Node0x4fe8db0:s0 -> Node0x4fe67c0;
	Node0x4fe8db0:s1 -> Node0x4fe9480;
	Node0x4fe67c0 [shape=record, style = filled, fillcolor = blue, label="{if.then63:                                        \l  %call64 = call i32 @jpeg_fill_bit_buffer(%struct.bitread_working_state*\l... nonnull %br_state, i64 %get_buffer.4.ph, i32 %bits_left.4.ph, i32 1) #3\l  %tobool65 = icmp eq i32 %call64, 0\l  br i1 %tobool65, label %while.cond.preheader.loopexit490, label %if.end67\l|{<s0>T|<s1>F}}"];
	Node0x4fe67c0:s0 -> Node0x4fe6060;
	Node0x4fe67c0:s1 -> Node0x4fe97d0;
	Node0x4fe97d0 [shape=record, style = filled, fillcolor = blue, label="{if.end67:                                         \l  %42 = load i64, i64* %get_buffer29, align 8, !tbaa !38\l  %43 = load i32, i32* %bits_left30, align 16, !tbaa !39\l  br label %if.end70\l}"];
	Node0x4fe97d0 -> Node0x4fe9480;
	Node0x4fe9480 [shape=record, style = filled, fillcolor = blue, label="{if.end70:                                         \l  %get_buffer.5 = phi i64 [ %42, %if.end67 ], [ %get_buffer.4.ph, %if.end60 ]\l  %bits_left.5 = phi i32 [ %43, %if.end67 ], [ %bits_left.4.ph, %if.end60 ]\l  %sub71 = add nsw i32 %bits_left.5, -1\l  %sh_prom72 = zext i32 %sub71 to i64\l  %44 = shl i64 1, %sh_prom72\l  %and75396 = and i64 %44, %get_buffer.5\l  %tobool76 = icmp eq i64 %and75396, 0\l  %shl4.shl = select i1 %tobool76, i32 %shl4, i32 %shl\l  br label %do.body.preheader\l}"];
	Node0x4fe9480 -> Node0x4fe9eb0;
	Node0x4fe9eb0 [shape=record, style = filled, fillcolor = blue, label="{do.body.preheader:                                \l  %r.0.ph = phi i32 [ %shr52, %if.end70 ], [ 15, %if.else80 ]\l  %get_buffer.7.ph = phi i64 [ %get_buffer.5, %if.end70 ], [ %get_buffer.4.ph,\l... %if.else80 ]\l  %bits_left.7.ph = phi i32 [ %sub71, %if.end70 ], [ %bits_left.4.ph,\l... %if.else80 ]\l  %s.3.ph = phi i32 [ %shl4.shl, %if.end70 ], [ 0, %if.else80 ]\l  %45 = sext i32 %k.0435 to i64\l  br label %do.body\l}"];
	Node0x4fe9eb0 -> Node0x4fea350;
	Node0x4fe8cd0 [shape=record, style = filled, fillcolor = blue, label="{if.else80:                                        \l  %cmp81 = icmp eq i32 %shr52, 15\l  br i1 %cmp81, label %do.body.preheader, label %if.then83\l|{<s0>T|<s1>F}}"];
	Node0x4fe8cd0:s0 -> Node0x4fe9eb0;
	Node0x4fe8cd0:s1 -> Node0x4fea520;
	Node0x4fea520 [shape=record, style = filled, fillcolor = blue, label="{if.then83:                                        \l  %shr52.lcssa = phi i32 [ %shr52, %if.else80 ]\l  %bits_left.4.ph.lcssa = phi i32 [ %bits_left.4.ph, %if.else80 ]\l  %get_buffer.4.ph.lcssa = phi i64 [ %get_buffer.4.ph, %if.else80 ]\l  %k.0435.lcssa506 = phi i32 [ %k.0435, %if.else80 ]\l  %num_newnz.0436.lcssa503 = phi i32 [ %num_newnz.0436, %if.else80 ]\l  %shl84 = shl i32 1, %shr52.lcssa\l  %tobool85 = icmp eq i32 %shr52.lcssa, 0\l  br i1 %tobool85, label %for.cond173.preheader, label %if.then86\l|{<s0>T|<s1>F}}"];
	Node0x4fea520:s0 -> Node0x4fc1600;
	Node0x4fea520:s1 -> Node0x4fc7520;
	Node0x4fc7520 [shape=record, style = filled, fillcolor = blue, label="{if.then86:                                        \l  %cmp87 = icmp slt i32 %bits_left.4.ph.lcssa, %shr52.lcssa\l  br i1 %cmp87, label %if.then89, label %if.end169\l|{<s0>T|<s1>F}}"];
	Node0x4fc7520:s0 -> Node0x4fe6a10;
	Node0x4fc7520:s1 -> Node0x4fc76a0;
	Node0x4fe6a10 [shape=record, style = filled, fillcolor = blue, label="{if.then89:                                        \l  %call90 = call i32 @jpeg_fill_bit_buffer(%struct.bitread_working_state*\l... nonnull %br_state, i64 %get_buffer.4.ph.lcssa, i32 %bits_left.4.ph.lcssa, i32\l... %shr52.lcssa) #3\l  %tobool91 = icmp eq i32 %call90, 0\l  br i1 %tobool91, label %while.cond.preheader, label %if.end93\l|{<s0>T|<s1>F}}"];
	Node0x4fe6a10:s0 -> Node0x4fe63b0;
	Node0x4fe6a10:s1 -> Node0x4fc79e0;
	Node0x4fc79e0 [shape=record, style = filled, fillcolor = blue, label="{if.end93:                                         \l  %46 = load i64, i64* %get_buffer29, align 8, !tbaa !38\l  %47 = load i32, i32* %bits_left30, align 16, !tbaa !39\l  br label %if.end169\l}"];
	Node0x4fc79e0 -> Node0x4fc76a0;
	Node0x4fea350 [shape=record, style = filled, fillcolor = blue, label="{do.body:                                          \l  %indvars.iv458 = phi i64 [ %45, %do.body.preheader ], [ %indvars.iv.next459,\l... %if.end154 ]\l  %r.0 = phi i32 [ %r.0.ph, %do.body.preheader ], [ %r.1, %if.end154 ]\l  %get_buffer.7 = phi i64 [ %get_buffer.7.ph, %do.body.preheader ], [\l... %get_buffer.9, %if.end154 ]\l  %bits_left.7 = phi i32 [ %bits_left.7.ph, %do.body.preheader ], [\l... %bits_left.9, %if.end154 ]\l  %k.1 = phi i32 [ %k.0435, %do.body.preheader ], [ %inc, %if.end154 ]\l  %arrayidx108 = getelementptr inbounds [0 x i32], [0 x i32]*\l... @jpeg_natural_order, i64 0, i64 %indvars.iv458\l  %48 = load i32, i32* %arrayidx108, align 4, !tbaa !24\l  %idx.ext = sext i32 %48 to i64\l  %add.ptr = getelementptr inbounds [64 x i16], [64 x i16]* %28, i64 0, i64\l... %idx.ext\l  %49 = load i16, i16* %add.ptr, align 2, !tbaa !44\l  %cmp110 = icmp eq i16 %49, 0\l  br i1 %cmp110, label %if.else149, label %if.then112\l|{<s0>T|<s1>F}}"];
	Node0x4fea350:s0 -> Node0x4fc87a0;
	Node0x4fea350:s1 -> Node0x4fc8880;
	Node0x4fc8880 [shape=record, style = filled, fillcolor = blue, label="{if.then112:                                       \l  %cmp113 = icmp slt i32 %bits_left.7, 1\l  br i1 %cmp113, label %if.then115, label %if.end122\l|{<s0>T|<s1>F}}"];
	Node0x4fc8880:s0 -> Node0x4fe6580;
	Node0x4fc8880:s1 -> Node0x4fc8a90;
	Node0x4fe6580 [shape=record, style = filled, fillcolor = blue, label="{if.then115:                                       \l  %call116 = call i32 @jpeg_fill_bit_buffer(%struct.bitread_working_state*\l... nonnull %br_state, i64 %get_buffer.7, i32 %bits_left.7, i32 1) #3\l  %tobool117 = icmp eq i32 %call116, 0\l  br i1 %tobool117, label %while.cond.preheader.loopexit489, label %if.end119\l|{<s0>T|<s1>F}}"];
	Node0x4fe6580:s0 -> Node0x4fe6490;
	Node0x4fe6580:s1 -> Node0x4fc8e00;
	Node0x4fc8e00 [shape=record, style = filled, fillcolor = blue, label="{if.end119:                                        \l  %50 = load i64, i64* %get_buffer29, align 8, !tbaa !38\l  %51 = load i32, i32* %bits_left30, align 16, !tbaa !39\l  br label %if.end122\l}"];
	Node0x4fc8e00 -> Node0x4fc8a90;
	Node0x4fc8a90 [shape=record, style = filled, fillcolor = blue, label="{if.end122:                                        \l  %get_buffer.8 = phi i64 [ %50, %if.end119 ], [ %get_buffer.7, %if.then112 ]\l  %bits_left.8 = phi i32 [ %51, %if.end119 ], [ %bits_left.7, %if.then112 ]\l  %sub123 = add nsw i32 %bits_left.8, -1\l  %sh_prom124 = zext i32 %sub123 to i64\l  %52 = shl i64 1, %sh_prom124\l  %and127394 = and i64 %52, %get_buffer.8\l  %tobool128 = icmp eq i64 %and127394, 0\l  br i1 %tobool128, label %if.end154, label %if.then129\l|{<s0>T|<s1>F}}"];
	Node0x4fc8a90:s0 -> Node0x4fc7be0;
	Node0x4fc8a90:s1 -> Node0x4fc93f0;
	Node0x4fc93f0 [shape=record, style = filled, fillcolor = blue, label="{if.then129:                                       \l  %53 = load i16, i16* %add.ptr, align 2, !tbaa !44\l  %conv130 = sext i16 %53 to i32\l  %and131 = and i32 %conv130, %shl\l  %cmp132 = icmp eq i32 %and131, 0\l  br i1 %cmp132, label %if.then134, label %if.end154\l|{<s0>T|<s1>F}}"];
	Node0x4fc93f0:s0 -> Node0x4fc9720;
	Node0x4fc93f0:s1 -> Node0x4fc7be0;
	Node0x4fc9720 [shape=record, style = filled, fillcolor = blue, label="{if.then134:                                       \l  %cmp136 = icmp sgt i16 %53, -1\l  br i1 %cmp136, label %if.then138, label %if.else142\l|{<s0>T|<s1>F}}"];
	Node0x4fc9720:s0 -> Node0x4fc9970;
	Node0x4fc9720:s1 -> Node0x4fc99f0;
	Node0x4fc9970 [shape=record, style = filled, fillcolor = blue, label="{if.then138:                                       \l  %add140 = add nsw i32 %conv130, %shl\l  %conv141 = trunc i32 %add140 to i16\l  store i16 %conv141, i16* %add.ptr, align 2, !tbaa !44\l  br label %if.end154\l}"];
	Node0x4fc9970 -> Node0x4fc7be0;
	Node0x4fc99f0 [shape=record, style = filled, fillcolor = blue, label="{if.else142:                                       \l  %add144 = add nsw i32 %conv130, %shl4\l  %conv145 = trunc i32 %add144 to i16\l  store i16 %conv145, i16* %add.ptr, align 2, !tbaa !44\l  br label %if.end154\l}"];
	Node0x4fc99f0 -> Node0x4fc7be0;
	Node0x4fc87a0 [shape=record, style = filled, fillcolor = blue, label="{if.else149:                                       \l  %dec = add nsw i32 %r.0, -1\l  %cmp150 = icmp slt i32 %r.0, 1\l  %54 = trunc i64 %indvars.iv458 to i32\l  br i1 %cmp150, label %do.end, label %if.end154\l|{<s0>T|<s1>F}}"];
	Node0x4fc87a0:s0 -> Node0x4fc9fe0;
	Node0x4fc87a0:s1 -> Node0x4fc7be0;
	Node0x4fc7be0 [shape=record, style = filled, fillcolor = blue, label="{if.end154:                                        \l  %r.1 = phi i32 [ %r.0, %if.then138 ], [ %r.0, %if.else142 ], [ %r.0,\l... %if.then129 ], [ %r.0, %if.end122 ], [ %dec, %if.else149 ]\l  %get_buffer.9 = phi i64 [ %get_buffer.8, %if.then138 ], [ %get_buffer.8,\l... %if.else142 ], [ %get_buffer.8, %if.then129 ], [ %get_buffer.8, %if.end122 ],\l... [ %get_buffer.7, %if.else149 ]\l  %bits_left.9 = phi i32 [ %sub123, %if.then138 ], [ %sub123, %if.else142 ], [\l... %sub123, %if.then129 ], [ %sub123, %if.end122 ], [ %bits_left.7, %if.else149 ]\l  %inc = add nsw i32 %k.1, 1\l  %cmp155 = icmp slt i64 %indvars.iv458, %32\l  %indvars.iv.next459 = add nsw i64 %indvars.iv458, 1\l  br i1 %cmp155, label %do.body, label %do.end\l|{<s0>T|<s1>F}}"];
	Node0x4fc7be0:s0 -> Node0x4fea350;
	Node0x4fc7be0:s1 -> Node0x4fc9fe0;
	Node0x4fc9fe0 [shape=record, style = filled, fillcolor = blue, label="{do.end:                                           \l  %get_buffer.10 = phi i64 [ %get_buffer.9, %if.end154 ], [ %get_buffer.7,\l... %if.else149 ]\l  %bits_left.10 = phi i32 [ %bits_left.9, %if.end154 ], [ %bits_left.7,\l... %if.else149 ]\l  %k.2 = phi i32 [ %inc, %if.end154 ], [ %54, %if.else149 ]\l  %tobool157 = icmp eq i32 %s.3.ph, 0\l  br i1 %tobool157, label %for.inc, label %if.then158\l|{<s0>T|<s1>F}}"];
	Node0x4fc9fe0:s0 -> Node0x4fe5490;
	Node0x4fc9fe0:s1 -> Node0x4fca6a0;
	Node0x4fca6a0 [shape=record, style = filled, fillcolor = blue, label="{if.then158:                                       \l  %idxprom159 = sext i32 %k.2 to i64\l  %arrayidx160 = getelementptr inbounds [0 x i32], [0 x i32]*\l... @jpeg_natural_order, i64 0, i64 %idxprom159\l  %55 = load i32, i32* %arrayidx160, align 4, !tbaa !24\l  %conv161 = trunc i32 %s.3.ph to i16\l  %idxprom162 = sext i32 %55 to i64\l  %arrayidx163 = getelementptr inbounds [64 x i16], [64 x i16]* %28, i64 0,\l... i64 %idxprom162\l  store i16 %conv161, i16* %arrayidx163, align 2, !tbaa !44\l  %inc164 = add nsw i32 %num_newnz.0436, 1\l  %idxprom165 = sext i32 %num_newnz.0436 to i64\l  %arrayidx166 = getelementptr inbounds [64 x i32], [64 x i32]* %newnz_pos,\l... i64 0, i64 %idxprom165\l  store i32 %55, i32* %arrayidx166, align 4, !tbaa !24\l  br label %for.inc\l}"];
	Node0x4fca6a0 -> Node0x4fe5490;
	Node0x4fe5490 [shape=record, style = filled, fillcolor = blue, label="{for.inc:                                          \l  %num_newnz.1 = phi i32 [ %inc164, %if.then158 ], [ %num_newnz.0436, %do.end ]\l  %inc168 = add nsw i32 %k.2, 1\l  %cmp22 = icmp slt i32 %k.2, %2\l  br i1 %cmp22, label %for.body, label %if.end227.loopexit\l|{<s0>T|<s1>F}}"];
	Node0x4fe5490:s0 -> Node0x4fe2000;
	Node0x4fe5490:s1 -> Node0x4fcaf70;
	Node0x4fc76a0 [shape=record, style = filled, fillcolor = blue, label="{if.end169:                                        \l  %get_buffer.6 = phi i64 [ %46, %if.end93 ], [ %get_buffer.4.ph.lcssa,\l... %if.then86 ]\l  %bits_left.6 = phi i32 [ %47, %if.end93 ], [ %bits_left.4.ph.lcssa,\l... %if.then86 ]\l  %sub97 = sub nsw i32 %bits_left.6, %shr52.lcssa\l  %sh_prom98 = zext i32 %sub97 to i64\l  %shr99 = ashr i64 %get_buffer.6, %sh_prom98\l  %conv100 = trunc i64 %shr99 to i32\l  %sub102 = add nsw i32 %shl84, -1\l  %and103 = and i32 %conv100, %sub102\l  %add = add i32 %and103, %shl84\l  %cmp170 = icmp eq i32 %add, 0\l  br i1 %cmp170, label %if.end227, label %for.cond173.preheader\l|{<s0>T|<s1>F}}"];
	Node0x4fc76a0:s0 -> Node0x4fe4d80;
	Node0x4fc76a0:s1 -> Node0x4fc1600;
	Node0x4fc1600 [shape=record, style = filled, fillcolor = blue, label="{for.cond173.preheader:                            \l  %num_newnz.2403.ph = phi i32 [ %num_newnz.0436.lcssa503, %if.then83 ], [ 0,\l... %if.end9 ], [ %num_newnz.0436.lcssa503, %if.end169 ]\l  %EOBRUN.0402.ph = phi i32 [ %shl84, %if.then83 ], [ %27, %if.end9 ], [ %add,\l... %if.end169 ]\l  %get_buffer.12.ph = phi i64 [ %get_buffer.4.ph.lcssa, %if.then83 ], [ %25,\l... %if.end9 ], [ %get_buffer.6, %if.end169 ]\l  %bits_left.12.ph = phi i32 [ %bits_left.4.ph.lcssa, %if.then83 ], [ %26,\l... %if.end9 ], [ %sub97, %if.end169 ]\l  %k.4.ph = phi i32 [ %k.0435.lcssa506, %if.then83 ], [ %30, %if.end9 ], [\l... %k.0435.lcssa506, %if.end169 ]\l  %cmp174427 = icmp sgt i32 %k.4.ph, %2\l  br i1 %cmp174427, label %for.end225, label %for.body176.lr.ph\l|{<s0>T|<s1>F}}"];
	Node0x4fc1600:s0 -> Node0x4fe8370;
	Node0x4fc1600:s1 -> Node0x4ff3e30;
	Node0x4ff3e30 [shape=record, style = filled, fillcolor = blue, label="{for.body176.lr.ph:                                \l  %get_buffer193 = getelementptr inbounds %struct.bitread_working_state,\l... %struct.bitread_working_state* %br_state, i64 0, i32 3\l  %bits_left194 = getelementptr inbounds %struct.bitread_working_state,\l... %struct.bitread_working_state* %br_state, i64 0, i32 4\l  %56 = sext i32 %k.4.ph to i64\l  %57 = sext i32 %2 to i64\l  br label %for.body176\l}"];
	Node0x4ff3e30 -> Node0x4ff4140;
	Node0x4ff4140 [shape=record, style = filled, fillcolor = blue, label="{for.body176:                                      \l  %indvars.iv456 = phi i64 [ %indvars.iv.next457, %for.inc223 ], [ %56,\l... %for.body176.lr.ph ]\l  %bits_left.12429 = phi i32 [ %bits_left.14, %for.inc223 ], [\l... %bits_left.12.ph, %for.body176.lr.ph ]\l  %get_buffer.12428 = phi i64 [ %get_buffer.14, %for.inc223 ], [\l... %get_buffer.12.ph, %for.body176.lr.ph ]\l  %arrayidx179 = getelementptr inbounds [0 x i32], [0 x i32]*\l... @jpeg_natural_order, i64 0, i64 %indvars.iv456\l  %58 = load i32, i32* %arrayidx179, align 4, !tbaa !24\l  %idx.ext180 = sext i32 %58 to i64\l  %add.ptr181 = getelementptr inbounds [64 x i16], [64 x i16]* %28, i64 0, i64\l... %idx.ext180\l  %59 = load i16, i16* %add.ptr181, align 2, !tbaa !44\l  %cmp183 = icmp eq i16 %59, 0\l  br i1 %cmp183, label %for.inc223, label %if.then185\l|{<s0>T|<s1>F}}"];
	Node0x4ff4140:s0 -> Node0x4ff42b0;
	Node0x4ff4140:s1 -> Node0x4ff4ac0;
	Node0x4ff4ac0 [shape=record, style = filled, fillcolor = blue, label="{if.then185:                                       \l  %cmp186 = icmp slt i32 %bits_left.12429, 1\l  br i1 %cmp186, label %if.then188, label %if.end195\l|{<s0>T|<s1>F}}"];
	Node0x4ff4ac0:s0 -> Node0x4ff4cd0;
	Node0x4ff4ac0:s1 -> Node0x4ff4d20;
	Node0x4ff4cd0 [shape=record, style = filled, fillcolor = blue, label="{if.then188:                                       \l  %call189 = call i32 @jpeg_fill_bit_buffer(%struct.bitread_working_state*\l... nonnull %br_state, i64 %get_buffer.12428, i32 %bits_left.12429, i32 1) #3\l  %tobool190 = icmp eq i32 %call189, 0\l  br i1 %tobool190, label %while.cond.preheader.loopexit, label %if.end192\l|{<s0>T|<s1>F}}"];
	Node0x4ff4cd0:s0 -> Node0x4fe6290;
	Node0x4ff4cd0:s1 -> Node0x4ff50f0;
	Node0x4ff50f0 [shape=record, style = filled, fillcolor = blue, label="{if.end192:                                        \l  %60 = load i64, i64* %get_buffer193, align 8, !tbaa !38\l  %61 = load i32, i32* %bits_left194, align 16, !tbaa !39\l  br label %if.end195\l}"];
	Node0x4ff50f0 -> Node0x4ff4d20;
	Node0x4ff4d20 [shape=record, style = filled, fillcolor = blue, label="{if.end195:                                        \l  %get_buffer.13 = phi i64 [ %60, %if.end192 ], [ %get_buffer.12428,\l... %if.then185 ]\l  %bits_left.13 = phi i32 [ %61, %if.end192 ], [ %bits_left.12429, %if.then185\l... ]\l  %sub196 = add nsw i32 %bits_left.13, -1\l  %sh_prom197 = zext i32 %sub196 to i64\l  %62 = shl i64 1, %sh_prom197\l  %and200391 = and i64 %62, %get_buffer.13\l  %tobool201 = icmp eq i64 %and200391, 0\l  br i1 %tobool201, label %for.inc223, label %if.then202\l|{<s0>T|<s1>F}}"];
	Node0x4ff4d20:s0 -> Node0x4ff42b0;
	Node0x4ff4d20:s1 -> Node0x4ff56e0;
	Node0x4ff56e0 [shape=record, style = filled, fillcolor = blue, label="{if.then202:                                       \l  %63 = load i16, i16* %add.ptr181, align 2, !tbaa !44\l  %conv203 = sext i16 %63 to i32\l  %and204 = and i32 %conv203, %shl\l  %cmp205 = icmp eq i32 %and204, 0\l  br i1 %cmp205, label %if.then207, label %for.inc223\l|{<s0>T|<s1>F}}"];
	Node0x4ff56e0:s0 -> Node0x4ff5a10;
	Node0x4ff56e0:s1 -> Node0x4ff42b0;
	Node0x4ff5a10 [shape=record, style = filled, fillcolor = blue, label="{if.then207:                                       \l  %cmp209 = icmp sgt i16 %63, -1\l  br i1 %cmp209, label %if.then211, label %if.else215\l|{<s0>T|<s1>F}}"];
	Node0x4ff5a10:s0 -> Node0x4ff5c20;
	Node0x4ff5a10:s1 -> Node0x4ff5ca0;
	Node0x4ff5c20 [shape=record, style = filled, fillcolor = blue, label="{if.then211:                                       \l  %add213 = add nsw i32 %conv203, %shl\l  %conv214 = trunc i32 %add213 to i16\l  store i16 %conv214, i16* %add.ptr181, align 2, !tbaa !44\l  br label %for.inc223\l}"];
	Node0x4ff5c20 -> Node0x4ff42b0;
	Node0x4ff5ca0 [shape=record, style = filled, fillcolor = blue, label="{if.else215:                                       \l  %add217 = add nsw i32 %conv203, %shl4\l  %conv218 = trunc i32 %add217 to i16\l  store i16 %conv218, i16* %add.ptr181, align 2, !tbaa !44\l  br label %for.inc223\l}"];
	Node0x4ff5ca0 -> Node0x4ff42b0;
	Node0x4ff42b0 [shape=record, style = filled, fillcolor = blue, label="{for.inc223:                                       \l  %get_buffer.14 = phi i64 [ %get_buffer.13, %if.then211 ], [ %get_buffer.13,\l... %if.else215 ], [ %get_buffer.13, %if.then202 ], [ %get_buffer.13, %if.end195\l... ], [ %get_buffer.12428, %for.body176 ]\l  %bits_left.14 = phi i32 [ %sub196, %if.then211 ], [ %sub196, %if.else215 ],\l... [ %sub196, %if.then202 ], [ %sub196, %if.end195 ], [ %bits_left.12429,\l... %for.body176 ]\l  %cmp174 = icmp slt i64 %indvars.iv456, %57\l  %indvars.iv.next457 = add nsw i64 %indvars.iv456, 1\l  br i1 %cmp174, label %for.body176, label %for.end225.loopexit\l|{<s0>T|<s1>F}}"];
	Node0x4ff42b0:s0 -> Node0x4ff4140;
	Node0x4ff42b0:s1 -> Node0x4ff6430;
	Node0x4ff6430 [shape=record, style = filled, fillcolor = blue, label="{for.end225.loopexit:                              \l  %bits_left.14.lcssa = phi i32 [ %bits_left.14, %for.inc223 ]\l  %get_buffer.14.lcssa = phi i64 [ %get_buffer.14, %for.inc223 ]\l  br label %for.end225\l}"];
	Node0x4ff6430 -> Node0x4fe8370;
	Node0x4fe8370 [shape=record, style = filled, fillcolor = blue, label="{for.end225:                                       \l  %bits_left.12.lcssa = phi i32 [ %bits_left.12.ph, %for.cond173.preheader ],\l... [ %bits_left.14.lcssa, %for.end225.loopexit ]\l  %get_buffer.12.lcssa = phi i64 [ %get_buffer.12.ph, %for.cond173.preheader\l... ], [ %get_buffer.14.lcssa, %for.end225.loopexit ]\l  %dec226 = add i32 %EOBRUN.0402.ph, -1\l  br label %if.end227\l}"];
	Node0x4fe8370 -> Node0x4fe4d80;
	Node0x4fcaf70 [shape=record, style = filled, fillcolor = blue, label="{if.end227.loopexit:                               \l  %bits_left.10.lcssa = phi i32 [ %bits_left.10, %for.inc ]\l  %get_buffer.10.lcssa = phi i64 [ %get_buffer.10, %for.inc ]\l  br label %if.end227\l}"];
	Node0x4fcaf70 -> Node0x4fe4d80;
	Node0x4fe4d80 [shape=record, style = filled, fillcolor = blue, label="{if.end227:                                        \l  %EOBRUN.1 = phi i32 [ %dec226, %for.end225 ], [ 0, %if.end169 ], [ 0,\l... %for.cond.preheader ], [ 0, %if.end227.loopexit ]\l  %get_buffer.15 = phi i64 [ %get_buffer.12.lcssa, %for.end225 ], [\l... %get_buffer.6, %if.end169 ], [ %25, %for.cond.preheader ], [\l... %get_buffer.10.lcssa, %if.end227.loopexit ]\l  %bits_left.15 = phi i32 [ %bits_left.12.lcssa, %for.end225 ], [ %sub97,\l... %if.end169 ], [ %26, %for.cond.preheader ], [ %bits_left.10.lcssa,\l... %if.end227.loopexit ]\l  %64 = bitcast %struct.jpeg_source_mgr** %src to \<2 x i64\>**\l  %65 = load \<2 x i64\>*, \<2 x i64\>** %64, align 8, !tbaa !30\l  %66 = bitcast %struct.bitread_working_state* %br_state to \<2 x i64\>*\l  %67 = load \<2 x i64\>, \<2 x i64\>* %66, align 16, !tbaa !31\l  store \<2 x i64\> %67, \<2 x i64\>* %65, align 8, !tbaa !31\l  %68 = load i32, i32* %unread_marker14, align 16, !tbaa !32\l  store i32 %68, i32* %unread_marker, align 4, !tbaa !27\l  store i64 %get_buffer.15, i64* %get_buffer15, align 8, !tbaa !33\l  store i32 %bits_left.15, i32* %bits_left17, align 8, !tbaa !18\l  store i32 %EOBRUN.1, i32* %EOBRUN19, align 8, !tbaa !25\l  %restarts_to_go242 = getelementptr inbounds %struct.phuff_entropy_decoder,\l... %struct.phuff_entropy_decoder* %1, i64 0, i32 3\l  %69 = load i32, i32* %restarts_to_go242, align 4, !tbaa !12\l  %dec243 = add i32 %69, -1\l  store i32 %dec243, i32* %restarts_to_go242, align 4, !tbaa !12\l  br label %cleanup251\l}"];
	Node0x4fe4d80 -> Node0x4fe0dd0;
	Node0x4fe6f40 [shape=record, style = filled, fillcolor = blue, label="{while.body:                                       \l  %indvars.iv = phi i64 [ %33, %while.body.preheader ], [ %indvars.iv.next,\l... %while.body ]\l  %indvars.iv.next = add nsw i64 %indvars.iv, -1\l  %arrayidx248 = getelementptr inbounds [64 x i32], [64 x i32]* %newnz_pos,\l... i64 0, i64 %indvars.iv.next\l  %70 = load i32, i32* %arrayidx248, align 4, !tbaa !24\l  %idxprom249 = sext i32 %70 to i64\l  %arrayidx250 = getelementptr inbounds [64 x i16], [64 x i16]* %28, i64 0,\l... i64 %idxprom249\l  store i16 0, i16* %arrayidx250, align 2, !tbaa !44\l  %cmp244 = icmp sgt i64 %indvars.iv, 1\l  br i1 %cmp244, label %while.body, label %cleanup251.loopexit\l|{<s0>T|<s1>F}}"];
	Node0x4fe6f40:s0 -> Node0x4fe6f40;
	Node0x4fe6f40:s1 -> Node0x4ff7a70;
	Node0x4ff7a70 [shape=record, style = filled, fillcolor = blue, label="{cleanup251.loopexit:                              \l  br label %cleanup251\l}"];
	Node0x4ff7a70 -> Node0x4fe0dd0;
	Node0x4fe0dd0 [shape=record, style = filled, fillcolor = blue, label="{cleanup251:                                       \l  %retval.0 = phi i32 [ 1, %if.end227 ], [ 0, %if.then5 ], [ 0,\l... %while.cond.preheader ], [ 0, %cleanup251.loopexit ]\l  call void @llvm.lifetime.end(i64 256, i8* %7) #3\l  call void @llvm.lifetime.end(i64 56, i8* %6) #3\l  ret i32 %retval.0\l}"];
}
