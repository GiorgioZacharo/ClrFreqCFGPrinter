; ModuleID = 'jdatasrc.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_decompress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32, %struct.jpeg_source_mgr*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i16, i16, i32, i8, i32, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master*, %struct.jpeg_d_main_controller*, %struct.jpeg_d_coef_controller*, %struct.jpeg_d_post_controller*, %struct.jpeg_input_controller*, %struct.jpeg_marker_reader*, %struct.jpeg_entropy_decoder*, %struct.jpeg_inverse_dct*, %struct.jpeg_upsampler*, %struct.jpeg_color_deconverter*, %struct.jpeg_color_quantizer* }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_source_mgr = type { i8*, i64, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i64)*, i32 (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*)* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.jpeg_decomp_master = type opaque
%struct.jpeg_d_main_controller = type opaque
%struct.jpeg_d_coef_controller = type opaque
%struct.jpeg_d_post_controller = type opaque
%struct.jpeg_input_controller = type opaque
%struct.jpeg_marker_reader = type opaque
%struct.jpeg_entropy_decoder = type opaque
%struct.jpeg_inverse_dct = type opaque
%struct.jpeg_upsampler = type opaque
%struct.jpeg_color_deconverter = type opaque
%struct.jpeg_color_quantizer = type opaque
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.my_source_mgr = type { %struct.jpeg_source_mgr, %struct._IO_FILE*, i8*, i32 }

; Function Attrs: nounwind uwtable
define void @jpeg_stdio_src(%struct.jpeg_decompress_struct* %cinfo, %struct._IO_FILE* %infile) #0 {
entry:
  %src1 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 5
  %0 = load %struct.jpeg_source_mgr*, %struct.jpeg_source_mgr** %src1, align 8, !tbaa !2
  %cmp = icmp eq %struct.jpeg_source_mgr* %0, null
  br i1 %cmp, label %if.then, label %entry.if.end_crit_edge

entry.if.end_crit_edge:                           ; preds = %entry
  %1 = bitcast %struct.jpeg_source_mgr* %0 to %struct.my_source_mgr*
  br label %if.end

if.then:                                          ; preds = %entry
  %mem = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 1
  %2 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !10
  %alloc_small = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %2, i64 0, i32 0
  %3 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_small, align 8, !tbaa !11
  %4 = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  %call = tail call i8* %3(%struct.jpeg_common_struct* %4, i32 0, i64 80) #6
  %5 = bitcast %struct.jpeg_source_mgr** %src1 to i8**
  store i8* %call, i8** %5, align 8, !tbaa !2
  %6 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !10
  %alloc_small5 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %6, i64 0, i32 0
  %7 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_small5, align 8, !tbaa !11
  %call6 = tail call i8* %7(%struct.jpeg_common_struct* %4, i32 0, i64 4096) #6
  %buffer = getelementptr inbounds i8, i8* %call, i64 64
  %8 = bitcast i8* %buffer to i8**
  store i8* %call6, i8** %8, align 8, !tbaa !14
  %.phi.trans.insert = bitcast %struct.jpeg_source_mgr** %src1 to %struct.my_source_mgr**
  %.pre = load %struct.my_source_mgr*, %struct.my_source_mgr** %.phi.trans.insert, align 8, !tbaa !2
  br label %if.end

if.end:                                           ; preds = %entry.if.end_crit_edge, %if.then
  %9 = phi %struct.my_source_mgr* [ %.pre, %if.then ], [ %1, %entry.if.end_crit_edge ]
  %init_source = getelementptr inbounds %struct.my_source_mgr, %struct.my_source_mgr* %9, i64 0, i32 0, i32 2
  store void (%struct.jpeg_decompress_struct*)* @init_source, void (%struct.jpeg_decompress_struct*)** %init_source, align 8, !tbaa !17
  %fill_input_buffer = getelementptr inbounds %struct.my_source_mgr, %struct.my_source_mgr* %9, i64 0, i32 0, i32 3
  store i32 (%struct.jpeg_decompress_struct*)* @fill_input_buffer, i32 (%struct.jpeg_decompress_struct*)** %fill_input_buffer, align 8, !tbaa !18
  %skip_input_data = getelementptr inbounds %struct.my_source_mgr, %struct.my_source_mgr* %9, i64 0, i32 0, i32 4
  store void (%struct.jpeg_decompress_struct*, i64)* @skip_input_data, void (%struct.jpeg_decompress_struct*, i64)** %skip_input_data, align 8, !tbaa !19
  %resync_to_restart = getelementptr inbounds %struct.my_source_mgr, %struct.my_source_mgr* %9, i64 0, i32 0, i32 5
  store i32 (%struct.jpeg_decompress_struct*, i32)* @jpeg_resync_to_restart, i32 (%struct.jpeg_decompress_struct*, i32)** %resync_to_restart, align 8, !tbaa !20
  %term_source = getelementptr inbounds %struct.my_source_mgr, %struct.my_source_mgr* %9, i64 0, i32 0, i32 6
  store void (%struct.jpeg_decompress_struct*)* @term_source, void (%struct.jpeg_decompress_struct*)** %term_source, align 8, !tbaa !21
  %infile12 = getelementptr inbounds %struct.my_source_mgr, %struct.my_source_mgr* %9, i64 0, i32 1
  store %struct._IO_FILE* %infile, %struct._IO_FILE** %infile12, align 8, !tbaa !22
  %10 = bitcast %struct.my_source_mgr* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* %10, i8 0, i64 16, i32 8, i1 false)
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define internal void @init_source(%struct.jpeg_decompress_struct* nocapture readonly %cinfo) #1 {
entry:
  %src1 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 5
  %0 = bitcast %struct.jpeg_source_mgr** %src1 to %struct.my_source_mgr**
  %1 = load %struct.my_source_mgr*, %struct.my_source_mgr** %0, align 8, !tbaa !2
  %start_of_file = getelementptr inbounds %struct.my_source_mgr, %struct.my_source_mgr* %1, i64 0, i32 3
  store i32 1, i32* %start_of_file, align 8, !tbaa !23
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @fill_input_buffer(%struct.jpeg_decompress_struct* %cinfo) #0 {
entry:
  %src1 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 5
  %0 = bitcast %struct.jpeg_source_mgr** %src1 to %struct.my_source_mgr**
  %1 = load %struct.my_source_mgr*, %struct.my_source_mgr** %0, align 8, !tbaa !2
  %buffer = getelementptr inbounds %struct.my_source_mgr, %struct.my_source_mgr* %1, i64 0, i32 2
  %2 = load i8*, i8** %buffer, align 8, !tbaa !14
  %infile = getelementptr inbounds %struct.my_source_mgr, %struct.my_source_mgr* %1, i64 0, i32 1
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %infile, align 8, !tbaa !22
  %call = tail call i64 @fread(i8* %2, i64 1, i64 4096, %struct._IO_FILE* %3)
  %cmp = icmp eq i64 %call, 0
  %start_of_file = getelementptr inbounds %struct.my_source_mgr, %struct.my_source_mgr* %1, i64 0, i32 3
  br i1 %cmp, label %if.then, label %if.end10

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %start_of_file, align 8, !tbaa !23
  %tobool = icmp eq i32 %4, 0
  %.pre = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0
  br i1 %tobool, label %if.then.if.end_crit_edge, label %if.then2

if.then.if.end_crit_edge:                         ; preds = %if.then
  %.pre31 = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  br label %if.end

if.then2:                                         ; preds = %if.then
  %5 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %.pre, align 8, !tbaa !24
  %msg_code = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %5, i64 0, i32 5
  store i32 41, i32* %msg_code, align 8, !tbaa !25
  %error_exit = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %5, i64 0, i32 0
  %6 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit, align 8, !tbaa !27
  %7 = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  tail call void %6(%struct.jpeg_common_struct* %7) #6
  br label %if.end

if.end:                                           ; preds = %if.then.if.end_crit_edge, %if.then2
  %.pre-phi = phi %struct.jpeg_common_struct* [ %.pre31, %if.then.if.end_crit_edge ], [ %7, %if.then2 ]
  %8 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %.pre, align 8, !tbaa !24
  %msg_code5 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %8, i64 0, i32 5
  store i32 116, i32* %msg_code5, align 8, !tbaa !25
  %emit_message = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %8, i64 0, i32 1
  %9 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %emit_message, align 8, !tbaa !28
  tail call void %9(%struct.jpeg_common_struct* %.pre-phi, i32 -1) #6
  %10 = load i8*, i8** %buffer, align 8, !tbaa !14
  store i8 -1, i8* %10, align 1, !tbaa !29
  %11 = load i8*, i8** %buffer, align 8, !tbaa !14
  %arrayidx9 = getelementptr inbounds i8, i8* %11, i64 1
  store i8 -39, i8* %arrayidx9, align 1, !tbaa !29
  br label %if.end10

if.end10:                                         ; preds = %entry, %if.end
  %nbytes.0 = phi i64 [ 2, %if.end ], [ %call, %entry ]
  %12 = bitcast i8** %buffer to i64*
  %13 = load i64, i64* %12, align 8, !tbaa !14
  %14 = bitcast %struct.my_source_mgr* %1 to i64*
  store i64 %13, i64* %14, align 8, !tbaa !30
  %bytes_in_buffer = getelementptr inbounds %struct.my_source_mgr, %struct.my_source_mgr* %1, i64 0, i32 0, i32 1
  store i64 %nbytes.0, i64* %bytes_in_buffer, align 8, !tbaa !31
  store i32 0, i32* %start_of_file, align 8, !tbaa !23
  ret i32 1
}

; Function Attrs: nounwind uwtable
define internal void @skip_input_data(%struct.jpeg_decompress_struct* %cinfo, i64 %num_bytes) #0 {
entry:
  %src1 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 5
  %0 = bitcast %struct.jpeg_source_mgr** %src1 to %struct.my_source_mgr**
  %1 = load %struct.my_source_mgr*, %struct.my_source_mgr** %0, align 8, !tbaa !2
  %cmp = icmp sgt i64 %num_bytes, 0
  br i1 %cmp, label %while.cond.preheader, label %if.end

while.cond.preheader:                             ; preds = %entry
  %bytes_in_buffer = getelementptr inbounds %struct.my_source_mgr, %struct.my_source_mgr* %1, i64 0, i32 0, i32 1
  %2 = load i64, i64* %bytes_in_buffer, align 8, !tbaa !31
  %cmp218 = icmp slt i64 %2, %num_bytes
  br i1 %cmp218, label %while.body.lr.ph, label %while.end

while.body.lr.ph:                                 ; preds = %while.cond.preheader
  %.pre.i = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0
  %.pre31.i = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  br label %while.body

while.body:                                       ; preds = %fill_input_buffer.exit.while.body_crit_edge, %while.body.lr.ph
  %3 = phi %struct.my_source_mgr* [ %1, %while.body.lr.ph ], [ %.pre, %fill_input_buffer.exit.while.body_crit_edge ]
  %4 = phi i64 [ %2, %while.body.lr.ph ], [ %17, %fill_input_buffer.exit.while.body_crit_edge ]
  %num_bytes.addr.019 = phi i64 [ %num_bytes, %while.body.lr.ph ], [ %sub, %fill_input_buffer.exit.while.body_crit_edge ]
  %sub = sub nsw i64 %num_bytes.addr.019, %4
  %buffer.i = getelementptr inbounds %struct.my_source_mgr, %struct.my_source_mgr* %3, i64 0, i32 2
  %5 = load i8*, i8** %buffer.i, align 8, !tbaa !14
  %infile.i = getelementptr inbounds %struct.my_source_mgr, %struct.my_source_mgr* %3, i64 0, i32 1
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %infile.i, align 8, !tbaa !22
  %call.i = tail call i64 @fread(i8* %5, i64 1, i64 4096, %struct._IO_FILE* %6) #6
  %cmp.i = icmp eq i64 %call.i, 0
  %start_of_file.i = getelementptr inbounds %struct.my_source_mgr, %struct.my_source_mgr* %3, i64 0, i32 3
  br i1 %cmp.i, label %if.then.i, label %fill_input_buffer.exit

if.then.i:                                        ; preds = %while.body
  %7 = load i32, i32* %start_of_file.i, align 8, !tbaa !23
  %tobool.i = icmp eq i32 %7, 0
  br i1 %tobool.i, label %if.end.i, label %if.then2.i

if.then2.i:                                       ; preds = %if.then.i
  %8 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %.pre.i, align 8, !tbaa !24
  %msg_code.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %8, i64 0, i32 5
  store i32 41, i32* %msg_code.i, align 8, !tbaa !25
  %error_exit.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %8, i64 0, i32 0
  %9 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit.i, align 8, !tbaa !27
  tail call void %9(%struct.jpeg_common_struct* %.pre31.i) #6
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %if.then2.i
  %10 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %.pre.i, align 8, !tbaa !24
  %msg_code5.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %10, i64 0, i32 5
  store i32 116, i32* %msg_code5.i, align 8, !tbaa !25
  %emit_message.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %10, i64 0, i32 1
  %11 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %emit_message.i, align 8, !tbaa !28
  tail call void %11(%struct.jpeg_common_struct* %.pre31.i, i32 -1) #6
  %12 = load i8*, i8** %buffer.i, align 8, !tbaa !14
  store i8 -1, i8* %12, align 1, !tbaa !29
  %13 = load i8*, i8** %buffer.i, align 8, !tbaa !14
  %arrayidx9.i = getelementptr inbounds i8, i8* %13, i64 1
  store i8 -39, i8* %arrayidx9.i, align 1, !tbaa !29
  br label %fill_input_buffer.exit

fill_input_buffer.exit:                           ; preds = %while.body, %if.end.i
  %nbytes.0.i = phi i64 [ 2, %if.end.i ], [ %call.i, %while.body ]
  %14 = bitcast i8** %buffer.i to i64*
  %15 = load i64, i64* %14, align 8, !tbaa !14
  %16 = bitcast %struct.my_source_mgr* %3 to i64*
  store i64 %15, i64* %16, align 8, !tbaa !30
  %bytes_in_buffer.i = getelementptr inbounds %struct.my_source_mgr, %struct.my_source_mgr* %3, i64 0, i32 0, i32 1
  store i64 %nbytes.0.i, i64* %bytes_in_buffer.i, align 8, !tbaa !31
  store i32 0, i32* %start_of_file.i, align 8, !tbaa !23
  %17 = load i64, i64* %bytes_in_buffer, align 8, !tbaa !31
  %cmp2 = icmp sgt i64 %sub, %17
  br i1 %cmp2, label %fill_input_buffer.exit.while.body_crit_edge, label %while.end.loopexit

fill_input_buffer.exit.while.body_crit_edge:      ; preds = %fill_input_buffer.exit
  %.pre = load %struct.my_source_mgr*, %struct.my_source_mgr** %0, align 8, !tbaa !2
  br label %while.body

while.end.loopexit:                               ; preds = %fill_input_buffer.exit
  %.lcssa = phi i64 [ %17, %fill_input_buffer.exit ]
  %sub.lcssa = phi i64 [ %sub, %fill_input_buffer.exit ]
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %while.cond.preheader
  %18 = phi i64 [ %2, %while.cond.preheader ], [ %.lcssa, %while.end.loopexit ]
  %num_bytes.addr.0.lcssa = phi i64 [ %num_bytes, %while.cond.preheader ], [ %sub.lcssa, %while.end.loopexit ]
  %next_input_byte = getelementptr inbounds %struct.my_source_mgr, %struct.my_source_mgr* %1, i64 0, i32 0, i32 0
  %19 = load i8*, i8** %next_input_byte, align 8, !tbaa !30
  %add.ptr = getelementptr inbounds i8, i8* %19, i64 %num_bytes.addr.0.lcssa
  store i8* %add.ptr, i8** %next_input_byte, align 8, !tbaa !30
  %sub8 = sub i64 %18, %num_bytes.addr.0.lcssa
  store i64 %sub8, i64* %bytes_in_buffer, align 8, !tbaa !31
  br label %if.end

if.end:                                           ; preds = %while.end, %entry
  ret void
}

declare i32 @jpeg_resync_to_restart(%struct.jpeg_decompress_struct*, i32) #2

; Function Attrs: norecurse nounwind readnone uwtable
define internal void @term_source(%struct.jpeg_decompress_struct* nocapture %cinfo) #3 {
entry:
  ret void
}

; Function Attrs: nounwind
declare i64 @fread(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #5

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"MaxFunctionCount", i32 150581}
!1 = !{!"clang version 3.8.0 (trunk 257473)"}
!2 = !{!3, !4, i64 32}
!3 = !{!"jpeg_decompress_struct", !4, i64 0, !4, i64 8, !4, i64 16, !7, i64 24, !7, i64 28, !4, i64 32, !7, i64 40, !7, i64 44, !7, i64 48, !5, i64 52, !5, i64 56, !7, i64 60, !7, i64 64, !8, i64 72, !7, i64 80, !7, i64 84, !5, i64 88, !7, i64 92, !7, i64 96, !7, i64 100, !5, i64 104, !7, i64 108, !7, i64 112, !7, i64 116, !7, i64 120, !7, i64 124, !7, i64 128, !7, i64 132, !7, i64 136, !7, i64 140, !7, i64 144, !7, i64 148, !4, i64 152, !7, i64 160, !7, i64 164, !7, i64 168, !7, i64 172, !7, i64 176, !4, i64 184, !5, i64 192, !5, i64 224, !5, i64 256, !7, i64 288, !4, i64 296, !7, i64 304, !7, i64 308, !5, i64 312, !5, i64 328, !5, i64 344, !7, i64 360, !7, i64 364, !5, i64 368, !9, i64 370, !9, i64 372, !7, i64 376, !5, i64 380, !7, i64 384, !7, i64 388, !7, i64 392, !7, i64 396, !7, i64 400, !4, i64 408, !7, i64 416, !5, i64 424, !7, i64 456, !7, i64 460, !7, i64 464, !5, i64 468, !7, i64 508, !7, i64 512, !7, i64 516, !7, i64 520, !7, i64 524, !4, i64 528, !4, i64 536, !4, i64 544, !4, i64 552, !4, i64 560, !4, i64 568, !4, i64 576, !4, i64 584, !4, i64 592, !4, i64 600, !4, i64 608}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!"int", !5, i64 0}
!8 = !{!"double", !5, i64 0}
!9 = !{!"short", !5, i64 0}
!10 = !{!3, !4, i64 8}
!11 = !{!12, !4, i64 0}
!12 = !{!"jpeg_memory_mgr", !4, i64 0, !4, i64 8, !4, i64 16, !4, i64 24, !4, i64 32, !4, i64 40, !4, i64 48, !4, i64 56, !4, i64 64, !4, i64 72, !4, i64 80, !13, i64 88}
!13 = !{!"long", !5, i64 0}
!14 = !{!15, !4, i64 64}
!15 = !{!"", !16, i64 0, !4, i64 56, !4, i64 64, !7, i64 72}
!16 = !{!"jpeg_source_mgr", !4, i64 0, !13, i64 8, !4, i64 16, !4, i64 24, !4, i64 32, !4, i64 40, !4, i64 48}
!17 = !{!15, !4, i64 16}
!18 = !{!15, !4, i64 24}
!19 = !{!15, !4, i64 32}
!20 = !{!15, !4, i64 40}
!21 = !{!15, !4, i64 48}
!22 = !{!15, !4, i64 56}
!23 = !{!15, !7, i64 72}
!24 = !{!3, !4, i64 0}
!25 = !{!26, !7, i64 40}
!26 = !{!"jpeg_error_mgr", !4, i64 0, !4, i64 8, !4, i64 16, !4, i64 24, !4, i64 32, !7, i64 40, !5, i64 44, !7, i64 124, !13, i64 128, !4, i64 136, !7, i64 144, !4, i64 152, !7, i64 160, !7, i64 164}
!27 = !{!26, !4, i64 0}
!28 = !{!26, !4, i64 8}
!29 = !{!5, !5, i64 0}
!30 = !{!15, !4, i64 0}
!31 = !{!15, !13, i64 8}
