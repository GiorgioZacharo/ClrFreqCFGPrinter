digraph "CFG for 'post_process_2pass' function" {
	label="CFG for 'post_process_2pass' function";

	Node0x4dd8e10 [shape=record, style = filled, fillcolor = blue, label="{entry:\l  %post1 = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 76\l  %0 = bitcast %struct.jpeg_d_post_controller** %post1 to\l... %struct.my_post_controller**\l  %1 = load %struct.my_post_controller*, %struct.my_post_controller** %0,\l... align 8, !tbaa !2\l  %next_row = getelementptr inbounds %struct.my_post_controller,\l... %struct.my_post_controller* %1, i64 0, i32 5\l  %2 = load i32, i32* %next_row, align 8, !tbaa !10\l  %cmp = icmp eq i32 %2, 0\l  br i1 %cmp, label %if.then, label %entry.if.end_crit_edge\l|{<s0>T|<s1>F}}"];
	Node0x4dd8e10:s0 -> Node0x4dd94d0;
	Node0x4dd8e10:s1 -> Node0x4dd95b0;
	Node0x4dd95b0 [shape=record, style = filled, fillcolor = blue, label="{entry.if.end_crit_edge:                           \l  %buffer13.phi.trans.insert = getelementptr inbounds\l... %struct.my_post_controller, %struct.my_post_controller* %1, i64 0, i32 2\l  %.pre60 = load i8**, i8*** %buffer13.phi.trans.insert, align 8, !tbaa !13\l  %.pre61 = getelementptr inbounds %struct.my_post_controller,\l... %struct.my_post_controller* %1, i64 0, i32 3\l  %.pre62 = getelementptr inbounds %struct.my_post_controller,\l... %struct.my_post_controller* %1, i64 0, i32 4\l  br label %if.end\l}"];
	Node0x4dd95b0 -> Node0x4dd9ac0;
	Node0x4dd94d0 [shape=record, style = filled, fillcolor = blue, label="{if.then:                                          \l  %mem = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 1\l  %3 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8,\l... !tbaa !14\l  %access_virt_sarray = getelementptr inbounds %struct.jpeg_memory_mgr,\l... %struct.jpeg_memory_mgr* %3, i64 0, i32 7\l  %4 = load i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*,\l... i32, i32, i32)*, i8** (%struct.jpeg_common_struct*,\l... %struct.jvirt_sarray_control*, i32, i32, i32)** %access_virt_sarray, align 8,\l... !tbaa !15\l  %5 = bitcast %struct.jpeg_decompress_struct* %cinfo to\l... %struct.jpeg_common_struct*\l  %whole_image = getelementptr inbounds %struct.my_post_controller,\l... %struct.my_post_controller* %1, i64 0, i32 1\l  %6 = load %struct.jvirt_sarray_control*, %struct.jvirt_sarray_control**\l... %whole_image, align 8, !tbaa !18\l  %starting_row = getelementptr inbounds %struct.my_post_controller,\l... %struct.my_post_controller* %1, i64 0, i32 4\l  %7 = load i32, i32* %starting_row, align 4, !tbaa !19\l  %strip_height = getelementptr inbounds %struct.my_post_controller,\l... %struct.my_post_controller* %1, i64 0, i32 3\l  %8 = load i32, i32* %strip_height, align 8, !tbaa !20\l  %call = tail call i8** %4(%struct.jpeg_common_struct* %5,\l... %struct.jvirt_sarray_control* %6, i32 %7, i32 %8, i32 0) #3\l  %buffer = getelementptr inbounds %struct.my_post_controller,\l... %struct.my_post_controller* %1, i64 0, i32 2\l  store i8** %call, i8*** %buffer, align 8, !tbaa !13\l  %.pre = load i32, i32* %next_row, align 8, !tbaa !10\l  br label %if.end\l}"];
	Node0x4dd94d0 -> Node0x4dd9ac0;
	Node0x4dd9ac0 [shape=record, style = filled, fillcolor = blue, label="{if.end:                                           \l  %starting_row8.pre-phi = phi i32* [ %.pre62, %entry.if.end_crit_edge ], [\l... %starting_row, %if.then ]\l  %strip_height2.pre-phi = phi i32* [ %.pre61, %entry.if.end_crit_edge ], [\l... %strip_height, %if.then ]\l  %9 = phi i8** [ %.pre60, %entry.if.end_crit_edge ], [ %call, %if.then ]\l  %10 = phi i32 [ %2, %entry.if.end_crit_edge ], [ %.pre, %if.then ]\l  %11 = bitcast i32* %strip_height2.pre-phi to i64*\l  %12 = load i64, i64* %11, align 8\l  %13 = trunc i64 %12 to i32\l  %sub = sub i32 %13, %10\l  %14 = load i32, i32* %out_row_ctr, align 4, !tbaa !21\l  %sub4 = sub i32 %out_rows_avail, %14\l  %cmp5 = icmp ugt i32 %sub, %sub4\l  %sub4.sub = select i1 %cmp5, i32 %sub4, i32 %sub\l  %output_height = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 27\l  %15 = load i32, i32* %output_height, align 4, !tbaa !22\l  %16 = lshr i64 %12, 32\l  %17 = trunc i64 %16 to i32\l  %sub9 = sub i32 %15, %17\l  %cmp10 = icmp ugt i32 %sub4.sub, %sub9\l  %num_rows.1 = select i1 %cmp10, i32 %sub9, i32 %sub4.sub\l  %cquantize = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 83\l  %18 = load %struct.jpeg_color_quantizer*, %struct.jpeg_color_quantizer**\l... %cquantize, align 8, !tbaa !23\l  %color_quantize = getelementptr inbounds %struct.jpeg_color_quantizer,\l... %struct.jpeg_color_quantizer* %18, i64 0, i32 1\l  %19 = load void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)*, void\l... (%struct.jpeg_decompress_struct*, i8**, i8**, i32)** %color_quantize, align\l... 8, !tbaa !24\l  %idx.ext = zext i32 %10 to i64\l  %add.ptr = getelementptr inbounds i8*, i8** %9, i64 %idx.ext\l  %idx.ext15 = zext i32 %14 to i64\l  %add.ptr16 = getelementptr inbounds i8*, i8** %output_buf, i64 %idx.ext15\l  tail call void %19(%struct.jpeg_decompress_struct* nonnull %cinfo, i8**\l... %add.ptr, i8** %add.ptr16, i32 %num_rows.1) #3\l  %20 = load i32, i32* %out_row_ctr, align 4, !tbaa !21\l  %add = add i32 %20, %num_rows.1\l  store i32 %add, i32* %out_row_ctr, align 4, !tbaa !21\l  %21 = load i32, i32* %next_row, align 8, !tbaa !10\l  %add18 = add i32 %21, %num_rows.1\l  store i32 %add18, i32* %next_row, align 8, !tbaa !10\l  %22 = load i64, i64* %11, align 8\l  %23 = trunc i64 %22 to i32\l  %cmp21 = icmp ult i32 %add18, %23\l  br i1 %cmp21, label %if.end27, label %if.then22\l|{<s0>T|<s1>F}}"];
	Node0x4dd9ac0:s0 -> Node0x4dcfe80;
	Node0x4dd9ac0:s1 -> Node0x4dcff30;
	Node0x4dcff30 [shape=record, style = filled, fillcolor = blue, label="{if.then22:                                        \l  %24 = lshr i64 %22, 32\l  %25 = trunc i64 %24 to i32\l  %add25 = add i32 %25, %23\l  store i32 %add25, i32* %starting_row8.pre-phi, align 4, !tbaa !19\l  store i32 0, i32* %next_row, align 8, !tbaa !10\l  br label %if.end27\l}"];
	Node0x4dcff30 -> Node0x4dcfe80;
	Node0x4dcfe80 [shape=record, style = filled, fillcolor = blue, label="{if.end27:                                         \l  ret void\l}"];
}
