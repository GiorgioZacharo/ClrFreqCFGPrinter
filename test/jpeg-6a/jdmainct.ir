; ModuleID = 'jdmainct.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_decompress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32, %struct.jpeg_source_mgr*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i16, i16, i32, i8, i32, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master*, %struct.jpeg_d_main_controller*, %struct.jpeg_d_coef_controller*, %struct.jpeg_d_post_controller*, %struct.jpeg_input_controller*, %struct.jpeg_marker_reader*, %struct.jpeg_entropy_decoder*, %struct.jpeg_inverse_dct*, %struct.jpeg_upsampler*, %struct.jpeg_color_deconverter*, %struct.jpeg_color_quantizer* }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_source_mgr = type { i8*, i64, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i64)*, i32 (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*)* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.jpeg_decomp_master = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32 }
%struct.jpeg_d_main_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)* }
%struct.jpeg_d_coef_controller = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*, i8***)*, %struct.jvirt_barray_control** }
%struct.jpeg_d_post_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)* }
%struct.jpeg_input_controller = type { i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32, i32 }
%struct.jpeg_marker_reader = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, [16 x i32 (%struct.jpeg_decompress_struct*)*], i32, i32, i32, i32 }
%struct.jpeg_entropy_decoder = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)* }
%struct.jpeg_inverse_dct = type { void (%struct.jpeg_decompress_struct*)*, [10 x void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)*] }
%struct.jpeg_upsampler = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)*, i32 }
%struct.jpeg_color_deconverter = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* }
%struct.jpeg_color_quantizer = type { {}*, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)* }
%struct.my_main_controller = type { %struct.jpeg_d_main_controller, [10 x i8**], i32, i32, [2 x i8***], i32, i32, i32, i32 }

; Function Attrs: nounwind uwtable
define void @jinit_d_main_controller(%struct.jpeg_decompress_struct* %cinfo, i32 %need_full_buffer) #0 {
entry:
  %mem = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 1
  %0 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !2
  %alloc_small = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %0, i64 0, i32 0
  %1 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_small, align 8, !tbaa !10
  %2 = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  %call = tail call i8* %1(%struct.jpeg_common_struct* %2, i32 1, i64 136) #1
  %main1 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 74
  %3 = bitcast %struct.jpeg_d_main_controller** %main1 to i8**
  store i8* %call, i8** %3, align 8, !tbaa !13
  %start_pass = bitcast i8* %call to void (%struct.jpeg_decompress_struct*, i32)**
  store void (%struct.jpeg_decompress_struct*, i32)* @start_pass_main, void (%struct.jpeg_decompress_struct*, i32)** %start_pass, align 8, !tbaa !14
  %tobool = icmp eq i32 %need_full_buffer, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %err = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0
  %4 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8, !tbaa !17
  %msg_code = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %4, i64 0, i32 5
  store i32 4, i32* %msg_code, align 8, !tbaa !18
  %error_exit = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %4, i64 0, i32 0
  %5 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit, align 8, !tbaa !20
  tail call void %5(%struct.jpeg_common_struct* %2) #1
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %upsample = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 81
  %6 = load %struct.jpeg_upsampler*, %struct.jpeg_upsampler** %upsample, align 8, !tbaa !21
  %need_context_rows = getelementptr inbounds %struct.jpeg_upsampler, %struct.jpeg_upsampler* %6, i64 0, i32 2
  %7 = load i32, i32* %need_context_rows, align 8, !tbaa !22
  %tobool3 = icmp eq i32 %7, 0
  %min_DCT_scaled_size = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 59
  %8 = load i32, i32* %min_DCT_scaled_size, align 4, !tbaa !24
  br i1 %tobool3, label %if.end.if.end13_crit_edge, label %if.then4

if.end.if.end13_crit_edge:                        ; preds = %if.end
  %num_components.phi.trans.insert = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 8
  %.pre54 = load i32, i32* %num_components.phi.trans.insert, align 8, !tbaa !25
  br label %if.end13

if.then4:                                         ; preds = %if.end
  %cmp = icmp slt i32 %8, 2
  br i1 %cmp, label %if.then5, label %if.end10

if.then5:                                         ; preds = %if.then4
  %err6 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0
  %9 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err6, align 8, !tbaa !17
  %msg_code7 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %9, i64 0, i32 5
  store i32 46, i32* %msg_code7, align 8, !tbaa !18
  %error_exit9 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %9, i64 0, i32 0
  %10 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit9, align 8, !tbaa !20
  tail call void %10(%struct.jpeg_common_struct* nonnull %2) #1
  %.pre = load i32, i32* %min_DCT_scaled_size, align 4, !tbaa !24
  br label %if.end10

if.end10:                                         ; preds = %if.then5, %if.then4
  %11 = phi i32 [ %.pre, %if.then5 ], [ %8, %if.then4 ]
  %12 = bitcast %struct.jpeg_d_main_controller** %main1 to %struct.my_main_controller**
  %13 = load %struct.my_main_controller*, %struct.my_main_controller** %12, align 8, !tbaa !13
  %14 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !2
  %alloc_small.i = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %14, i64 0, i32 0
  %15 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_small.i, align 8, !tbaa !10
  %num_components.i = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 8
  %16 = load i32, i32* %num_components.i, align 8, !tbaa !25
  %mul.i = shl nsw i32 %16, 1
  %conv.i = sext i32 %mul.i to i64
  %mul2.i = shl nsw i64 %conv.i, 3
  %call.i = tail call i8* %15(%struct.jpeg_common_struct* nonnull %2, i32 1, i64 %mul2.i) #1
  %17 = bitcast i8* %call.i to i8***
  %xbuffer.i = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %13, i64 0, i32 4
  %arrayidx.i = getelementptr inbounds [2 x i8***], [2 x i8***]* %xbuffer.i, i64 0, i64 0
  %18 = bitcast [2 x i8***]* %xbuffer.i to i8**
  store i8* %call.i, i8** %18, align 8, !tbaa !26
  %19 = load i32, i32* %num_components.i, align 8, !tbaa !25
  %idx.ext.i = sext i32 %19 to i64
  %add.ptr.i = getelementptr inbounds i8**, i8*** %17, i64 %idx.ext.i
  %arrayidx7.i = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %13, i64 0, i32 4, i64 1
  store i8*** %add.ptr.i, i8**** %arrayidx7.i, align 8, !tbaa !26
  %cmp63.i = icmp sgt i32 %19, 0
  br i1 %cmp63.i, label %for.body.lr.ph.i, label %alloc_funny_pointers.exit

for.body.lr.ph.i:                                 ; preds = %if.end10
  %comp_info.i = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 43
  %20 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %comp_info.i, align 8, !tbaa !27
  %add.i = add nsw i32 %11, 4
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %for.body.lr.ph.i
  %indvars.iv.i = phi i64 [ 0, %for.body.lr.ph.i ], [ %indvars.iv.next.i, %for.body.i ]
  %compptr.064.i = phi %struct.jpeg_component_info* [ %20, %for.body.lr.ph.i ], [ %incdec.ptr.i, %for.body.i ]
  %v_samp_factor.i = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr.064.i, i64 0, i32 3
  %21 = load i32, i32* %v_samp_factor.i, align 4, !tbaa !28
  %DCT_scaled_size.i = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr.064.i, i64 0, i32 9
  %22 = load i32, i32* %DCT_scaled_size.i, align 4, !tbaa !30
  %mul10.i = mul nsw i32 %22, %21
  %23 = load i32, i32* %min_DCT_scaled_size, align 4, !tbaa !24
  %div.i = sdiv i32 %mul10.i, %23
  %24 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !2
  %alloc_small13.i = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %24, i64 0, i32 0
  %25 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_small13.i, align 8, !tbaa !10
  %mul14.i = mul nsw i32 %div.i, %add.i
  %mul15.i = shl nsw i32 %mul14.i, 1
  %conv16.i = sext i32 %mul15.i to i64
  %mul17.i = shl nsw i64 %conv16.i, 3
  %call18.i = tail call i8* %25(%struct.jpeg_common_struct* nonnull %2, i32 1, i64 %mul17.i) #1
  %26 = bitcast i8* %call18.i to i8**
  %idx.ext19.i = sext i32 %div.i to i64
  %add.ptr20.i = getelementptr inbounds i8*, i8** %26, i64 %idx.ext19.i
  %27 = load i8***, i8**** %arrayidx.i, align 8, !tbaa !26
  %arrayidx23.i = getelementptr inbounds i8**, i8*** %27, i64 %indvars.iv.i
  store i8** %add.ptr20.i, i8*** %arrayidx23.i, align 8, !tbaa !26
  %idx.ext26.i = sext i32 %mul14.i to i64
  %add.ptr27.i = getelementptr inbounds i8*, i8** %add.ptr20.i, i64 %idx.ext26.i
  %28 = load i8***, i8**** %arrayidx7.i, align 8, !tbaa !26
  %arrayidx31.i = getelementptr inbounds i8**, i8*** %28, i64 %indvars.iv.i
  store i8** %add.ptr27.i, i8*** %arrayidx31.i, align 8, !tbaa !26
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %incdec.ptr.i = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr.064.i, i64 1
  %29 = load i32, i32* %num_components.i, align 8, !tbaa !25
  %30 = sext i32 %29 to i64
  %cmp.i = icmp slt i64 %indvars.iv.next.i, %30
  br i1 %cmp.i, label %for.body.i, label %alloc_funny_pointers.exit.loopexit

alloc_funny_pointers.exit.loopexit:               ; preds = %for.body.i
  %.lcssa = phi i32 [ %29, %for.body.i ]
  br label %alloc_funny_pointers.exit

alloc_funny_pointers.exit:                        ; preds = %alloc_funny_pointers.exit.loopexit, %if.end10
  %31 = phi i32 [ %19, %if.end10 ], [ %.lcssa, %alloc_funny_pointers.exit.loopexit ]
  %32 = load i32, i32* %min_DCT_scaled_size, align 4, !tbaa !24
  %add = add nsw i32 %32, 2
  br label %if.end13

if.end13:                                         ; preds = %if.end.if.end13_crit_edge, %alloc_funny_pointers.exit
  %num_components.pre-phi = phi i32* [ %num_components.phi.trans.insert, %if.end.if.end13_crit_edge ], [ %num_components.i, %alloc_funny_pointers.exit ]
  %33 = phi i32 [ %8, %if.end.if.end13_crit_edge ], [ %32, %alloc_funny_pointers.exit ]
  %34 = phi i32 [ %.pre54, %if.end.if.end13_crit_edge ], [ %31, %alloc_funny_pointers.exit ]
  %ngroups.0 = phi i32 [ %8, %if.end.if.end13_crit_edge ], [ %add, %alloc_funny_pointers.exit ]
  %cmp1451 = icmp sgt i32 %34, 0
  br i1 %cmp1451, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %if.end13
  %comp_info = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 43
  %35 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %comp_info, align 8, !tbaa !27
  %buffer = getelementptr inbounds i8, i8* %call, i64 16
  %36 = bitcast i8* %buffer to [10 x i8**]*
  br label %for.body

for.body:                                         ; preds = %for.body.for.body_crit_edge, %for.body.lr.ph
  %37 = phi i32 [ %33, %for.body.lr.ph ], [ %.pre55, %for.body.for.body_crit_edge ]
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body.for.body_crit_edge ]
  %compptr.053 = phi %struct.jpeg_component_info* [ %35, %for.body.lr.ph ], [ %incdec.ptr, %for.body.for.body_crit_edge ]
  %v_samp_factor = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr.053, i64 0, i32 3
  %38 = load i32, i32* %v_samp_factor, align 4, !tbaa !28
  %DCT_scaled_size = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr.053, i64 0, i32 9
  %39 = load i32, i32* %DCT_scaled_size, align 4, !tbaa !30
  %mul = mul nsw i32 %39, %38
  %div = sdiv i32 %mul, %37
  %40 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !2
  %alloc_sarray = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %40, i64 0, i32 2
  %41 = load i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)** %alloc_sarray, align 8, !tbaa !31
  %width_in_blocks = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr.053, i64 0, i32 7
  %42 = load i32, i32* %width_in_blocks, align 4, !tbaa !32
  %mul18 = mul i32 %42, %39
  %mul19 = mul nsw i32 %div, %ngroups.0
  %call20 = tail call i8** %41(%struct.jpeg_common_struct* nonnull %2, i32 1, i32 %mul18, i32 %mul19) #1
  %arrayidx = getelementptr inbounds [10 x i8**], [10 x i8**]* %36, i64 0, i64 %indvars.iv
  store i8** %call20, i8*** %arrayidx, align 8, !tbaa !26
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %43 = load i32, i32* %num_components.pre-phi, align 8, !tbaa !25
  %44 = sext i32 %43 to i64
  %cmp14 = icmp slt i64 %indvars.iv.next, %44
  br i1 %cmp14, label %for.body.for.body_crit_edge, label %for.end.loopexit

for.body.for.body_crit_edge:                      ; preds = %for.body
  %incdec.ptr = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr.053, i64 1
  %.pre55 = load i32, i32* %min_DCT_scaled_size, align 4, !tbaa !24
  br label %for.body

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %if.end13
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @start_pass_main(%struct.jpeg_decompress_struct* %cinfo, i32 %pass_mode) #0 {
entry:
  %main1 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 74
  %0 = bitcast %struct.jpeg_d_main_controller** %main1 to %struct.my_main_controller**
  %1 = load %struct.my_main_controller*, %struct.my_main_controller** %0, align 8, !tbaa !13
  switch i32 %pass_mode, label %sw.default [
    i32 0, label %sw.bb
    i32 2, label %sw.bb4
  ]

sw.bb:                                            ; preds = %entry
  %upsample = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 81
  %2 = load %struct.jpeg_upsampler*, %struct.jpeg_upsampler** %upsample, align 8, !tbaa !21
  %need_context_rows = getelementptr inbounds %struct.jpeg_upsampler, %struct.jpeg_upsampler* %2, i64 0, i32 2
  %3 = load i32, i32* %need_context_rows, align 8, !tbaa !22
  %tobool = icmp eq i32 %3, 0
  %process_data = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %1, i64 0, i32 0, i32 1
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %sw.bb
  store void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)* @process_data_context_main, void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)** %process_data, align 8, !tbaa !33
  %min_DCT_scaled_size.i = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 59
  %4 = load i32, i32* %min_DCT_scaled_size.i, align 4, !tbaa !24
  %num_components.i = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 8
  %5 = load i32, i32* %num_components.i, align 8, !tbaa !25
  %cmp114.i = icmp sgt i32 %5, 0
  br i1 %cmp114.i, label %for.body.lr.ph.i, label %make_funny_pointers.exit

for.body.lr.ph.i:                                 ; preds = %if.then
  %comp_info.i = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 43
  %6 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %comp_info.i, align 8, !tbaa !27
  %arrayidx.i = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %1, i64 0, i32 4, i64 0
  %arrayidx6.i = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %1, i64 0, i32 4, i64 1
  %add.i = add nsw i32 %4, 2
  %sub.i = add nsw i32 %4, -2
  %7 = sext i32 %5 to i64
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc54.i, %for.body.lr.ph.i
  %indvars.iv124.i = phi i64 [ 0, %for.body.lr.ph.i ], [ %indvars.iv.next125.i, %for.inc54.i ]
  %compptr.0115.i = phi %struct.jpeg_component_info* [ %6, %for.body.lr.ph.i ], [ %incdec.ptr.i, %for.inc54.i ]
  %v_samp_factor.i = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr.0115.i, i64 0, i32 3
  %8 = load i32, i32* %v_samp_factor.i, align 4, !tbaa !28
  %DCT_scaled_size.i = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr.0115.i, i64 0, i32 9
  %9 = load i32, i32* %DCT_scaled_size.i, align 4, !tbaa !30
  %mul.i = mul nsw i32 %9, %8
  %div.i = sdiv i32 %mul.i, %4
  %10 = load i8***, i8**** %arrayidx.i, align 8, !tbaa !26
  %arrayidx3.i = getelementptr inbounds i8**, i8*** %10, i64 %indvars.iv124.i
  %11 = load i8**, i8*** %arrayidx3.i, align 8, !tbaa !26
  %12 = load i8***, i8**** %arrayidx6.i, align 8, !tbaa !26
  %arrayidx7.i = getelementptr inbounds i8**, i8*** %12, i64 %indvars.iv124.i
  %13 = load i8**, i8*** %arrayidx7.i, align 8, !tbaa !26
  %arrayidx9.i = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %1, i64 0, i32 1, i64 %indvars.iv124.i
  %14 = load i8**, i8*** %arrayidx9.i, align 8, !tbaa !26
  %mul11.i = mul i32 %div.i, %add.i
  %cmp12108.i = icmp sgt i32 %mul11.i, 0
  br i1 %cmp12108.i, label %for.body13.i.preheader, label %for.cond20.preheader.i

for.body13.i.preheader:                           ; preds = %for.body.i
  %15 = mul i32 %add.i, %div.i
  %16 = add i32 %15, -1
  %17 = zext i32 %16 to i64
  %18 = add nuw nsw i64 %17, 1
  %min.iters.check71 = icmp ult i64 %18, 4
  br i1 %min.iters.check71, label %for.body13.i.preheader109, label %min.iters.checked72

for.body13.i.preheader109:                        ; preds = %middle.block69, %vector.memcheck95, %min.iters.checked72, %for.body13.i.preheader
  %indvars.iv.i.ph = phi i64 [ 0, %vector.memcheck95 ], [ 0, %min.iters.checked72 ], [ 0, %for.body13.i.preheader ], [ %n.vec74, %middle.block69 ]
  %19 = mul i32 %add.i, %div.i
  %20 = add i32 %19, 1
  %21 = or i64 %indvars.iv.i.ph, 1
  %22 = trunc i64 %21 to i32
  %23 = sub i32 %20, %22
  %24 = sub i32 %19, %22
  %xtraiter110 = and i32 %23, 3
  %lcmp.mod111 = icmp eq i32 %xtraiter110, 0
  br i1 %lcmp.mod111, label %for.body13.i.preheader109.split, label %for.body13.i.prol.preheader

for.body13.i.prol.preheader:                      ; preds = %for.body13.i.preheader109
  br label %for.body13.i.prol

for.body13.i.prol:                                ; preds = %for.body13.i.prol, %for.body13.i.prol.preheader
  %indvars.iv.i.prol = phi i64 [ %indvars.iv.next.i.prol, %for.body13.i.prol ], [ %indvars.iv.i.ph, %for.body13.i.prol.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %for.body13.i.prol ], [ %xtraiter110, %for.body13.i.prol.preheader ]
  %arrayidx15.i.prol = getelementptr inbounds i8*, i8** %14, i64 %indvars.iv.i.prol
  %25 = bitcast i8** %arrayidx15.i.prol to i64*
  %26 = load i64, i64* %25, align 8, !tbaa !26
  %arrayidx17.i.prol = getelementptr inbounds i8*, i8** %13, i64 %indvars.iv.i.prol
  %27 = bitcast i8** %arrayidx17.i.prol to i64*
  store i64 %26, i64* %27, align 8, !tbaa !26
  %arrayidx19.i.prol = getelementptr inbounds i8*, i8** %11, i64 %indvars.iv.i.prol
  %28 = bitcast i8** %arrayidx19.i.prol to i64*
  store i64 %26, i64* %28, align 8, !tbaa !26
  %indvars.iv.next.i.prol = add nuw nsw i64 %indvars.iv.i.prol, 1
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %for.body13.i.preheader109.split.loopexit, label %for.body13.i.prol, !llvm.loop !34

for.body13.i.preheader109.split.loopexit:         ; preds = %for.body13.i.prol
  %indvars.iv.next.i.prol.lcssa = phi i64 [ %indvars.iv.next.i.prol, %for.body13.i.prol ]
  br label %for.body13.i.preheader109.split

for.body13.i.preheader109.split:                  ; preds = %for.body13.i.preheader109, %for.body13.i.preheader109.split.loopexit
  %indvars.iv.i.unr = phi i64 [ %indvars.iv.i.ph, %for.body13.i.preheader109 ], [ %indvars.iv.next.i.prol.lcssa, %for.body13.i.preheader109.split.loopexit ]
  %29 = icmp ult i32 %24, 3
  br i1 %29, label %for.cond20.preheader.i.loopexit, label %for.body13.i.preheader109.split.split

for.body13.i.preheader109.split.split:            ; preds = %for.body13.i.preheader109.split
  br label %for.body13.i

min.iters.checked72:                              ; preds = %for.body13.i.preheader
  %n.vec74 = and i64 %18, 8589934588
  %cmp.zero75 = icmp eq i64 %n.vec74, 0
  br i1 %cmp.zero75, label %for.body13.i.preheader109, label %vector.memcheck95

vector.memcheck95:                                ; preds = %min.iters.checked72
  %30 = mul i32 %add.i, %div.i
  %31 = add i32 %30, -1
  %32 = zext i32 %31 to i64
  %scevgep77 = getelementptr i8*, i8** %13, i64 %32
  %scevgep79 = getelementptr i8*, i8** %11, i64 %32
  %scevgep81 = getelementptr i8*, i8** %14, i64 %32
  %bound083 = icmp ule i8** %13, %scevgep79
  %bound184 = icmp ule i8** %11, %scevgep77
  %found.conflict85 = and i1 %bound083, %bound184
  %bound086 = icmp ule i8** %13, %scevgep81
  %bound187 = icmp ule i8** %14, %scevgep77
  %found.conflict88 = and i1 %bound086, %bound187
  %conflict.rdx89 = or i1 %found.conflict85, %found.conflict88
  %bound090 = icmp ule i8** %11, %scevgep81
  %bound191 = icmp ule i8** %14, %scevgep79
  %found.conflict92 = and i1 %bound090, %bound191
  %conflict.rdx93 = or i1 %conflict.rdx89, %found.conflict92
  br i1 %conflict.rdx93, label %for.body13.i.preheader109, label %vector.body68.preheader

vector.body68.preheader:                          ; preds = %vector.memcheck95
  %33 = mul i32 %add.i, %div.i
  %34 = add i32 %33, -1
  %35 = zext i32 %34 to i64
  %36 = add nuw nsw i64 %35, 1
  %37 = and i64 %36, 8589934588
  %38 = add nsw i64 %37, -4
  %39 = lshr exact i64 %38, 2
  %40 = and i64 %39, 1
  %lcmp.mod = icmp eq i64 %40, 0
  br i1 %lcmp.mod, label %vector.body68.prol, label %vector.body68.preheader.split

vector.body68.prol:                               ; preds = %vector.body68.preheader
  %41 = bitcast i8** %14 to <2 x i64>*
  %wide.load105.prol = load <2 x i64>, <2 x i64>* %41, align 8, !tbaa !26
  %42 = getelementptr i8*, i8** %14, i64 2
  %43 = bitcast i8** %42 to <2 x i64>*
  %wide.load106.prol = load <2 x i64>, <2 x i64>* %43, align 8, !tbaa !26
  %44 = bitcast i8** %13 to <2 x i64>*
  store <2 x i64> %wide.load105.prol, <2 x i64>* %44, align 8, !tbaa !26
  %45 = getelementptr i8*, i8** %13, i64 2
  %46 = bitcast i8** %45 to <2 x i64>*
  store <2 x i64> %wide.load106.prol, <2 x i64>* %46, align 8, !tbaa !26
  %47 = bitcast i8** %11 to <2 x i64>*
  store <2 x i64> %wide.load105.prol, <2 x i64>* %47, align 8, !tbaa !26
  %48 = getelementptr i8*, i8** %11, i64 2
  %49 = bitcast i8** %48 to <2 x i64>*
  store <2 x i64> %wide.load106.prol, <2 x i64>* %49, align 8, !tbaa !26
  br label %vector.body68.preheader.split

vector.body68.preheader.split:                    ; preds = %vector.body68.prol, %vector.body68.preheader
  %index97.unr = phi i64 [ 0, %vector.body68.preheader ], [ 4, %vector.body68.prol ]
  %50 = icmp eq i64 %39, 0
  br i1 %50, label %middle.block69, label %vector.body68.preheader.split.split

vector.body68.preheader.split.split:              ; preds = %vector.body68.preheader.split
  br label %vector.body68

vector.body68:                                    ; preds = %vector.body68, %vector.body68.preheader.split.split
  %index97 = phi i64 [ %index97.unr, %vector.body68.preheader.split.split ], [ %index.next98.1, %vector.body68 ]
  %51 = getelementptr inbounds i8*, i8** %14, i64 %index97
  %52 = bitcast i8** %51 to <2 x i64>*
  %wide.load105 = load <2 x i64>, <2 x i64>* %52, align 8, !tbaa !26
  %53 = getelementptr i8*, i8** %51, i64 2
  %54 = bitcast i8** %53 to <2 x i64>*
  %wide.load106 = load <2 x i64>, <2 x i64>* %54, align 8, !tbaa !26
  %55 = getelementptr inbounds i8*, i8** %13, i64 %index97
  %56 = bitcast i8** %55 to <2 x i64>*
  store <2 x i64> %wide.load105, <2 x i64>* %56, align 8, !tbaa !26
  %57 = getelementptr i8*, i8** %55, i64 2
  %58 = bitcast i8** %57 to <2 x i64>*
  store <2 x i64> %wide.load106, <2 x i64>* %58, align 8, !tbaa !26
  %59 = getelementptr inbounds i8*, i8** %11, i64 %index97
  %60 = bitcast i8** %59 to <2 x i64>*
  store <2 x i64> %wide.load105, <2 x i64>* %60, align 8, !tbaa !26
  %61 = getelementptr i8*, i8** %59, i64 2
  %62 = bitcast i8** %61 to <2 x i64>*
  store <2 x i64> %wide.load106, <2 x i64>* %62, align 8, !tbaa !26
  %index.next98 = add i64 %index97, 4
  %63 = getelementptr inbounds i8*, i8** %14, i64 %index.next98
  %64 = bitcast i8** %63 to <2 x i64>*
  %wide.load105.1 = load <2 x i64>, <2 x i64>* %64, align 8, !tbaa !26
  %65 = getelementptr i8*, i8** %63, i64 2
  %66 = bitcast i8** %65 to <2 x i64>*
  %wide.load106.1 = load <2 x i64>, <2 x i64>* %66, align 8, !tbaa !26
  %67 = getelementptr inbounds i8*, i8** %13, i64 %index.next98
  %68 = bitcast i8** %67 to <2 x i64>*
  store <2 x i64> %wide.load105.1, <2 x i64>* %68, align 8, !tbaa !26
  %69 = getelementptr i8*, i8** %67, i64 2
  %70 = bitcast i8** %69 to <2 x i64>*
  store <2 x i64> %wide.load106.1, <2 x i64>* %70, align 8, !tbaa !26
  %71 = getelementptr inbounds i8*, i8** %11, i64 %index.next98
  %72 = bitcast i8** %71 to <2 x i64>*
  store <2 x i64> %wide.load105.1, <2 x i64>* %72, align 8, !tbaa !26
  %73 = getelementptr i8*, i8** %71, i64 2
  %74 = bitcast i8** %73 to <2 x i64>*
  store <2 x i64> %wide.load106.1, <2 x i64>* %74, align 8, !tbaa !26
  %index.next98.1 = add i64 %index97, 8
  %75 = icmp eq i64 %index.next98.1, %n.vec74
  br i1 %75, label %middle.block69.unr-lcssa, label %vector.body68, !llvm.loop !36

middle.block69.unr-lcssa:                         ; preds = %vector.body68
  br label %middle.block69

middle.block69:                                   ; preds = %vector.body68.preheader.split, %middle.block69.unr-lcssa
  %cmp.n100 = icmp eq i64 %18, %n.vec74
  br i1 %cmp.n100, label %for.cond20.preheader.i, label %for.body13.i.preheader109

for.cond20.preheader.i.loopexit.unr-lcssa:        ; preds = %for.body13.i
  br label %for.cond20.preheader.i.loopexit

for.cond20.preheader.i.loopexit:                  ; preds = %for.body13.i.preheader109.split, %for.cond20.preheader.i.loopexit.unr-lcssa
  br label %for.cond20.preheader.i

for.cond20.preheader.i:                           ; preds = %for.cond20.preheader.i.loopexit, %middle.block69, %for.body.i
  %cmp22110.i = icmp sgt i32 %div.i, 0
  br i1 %cmp22110.i, label %for.body23.lr.ph.i, label %for.inc54.i

for.body23.lr.ph.i:                               ; preds = %for.cond20.preheader.i
  %mul21.i = shl nsw i32 %div.i, 1
  %mul24.i = mul nsw i32 %div.i, %4
  %mul28.i = mul nsw i32 %div.i, %sub.i
  %76 = sext i32 %mul28.i to i64
  %77 = sext i32 %mul24.i to i64
  %78 = sext i32 %mul21.i to i64
  %79 = sext i32 %mul21.i to i64
  %80 = icmp sgt i64 %79, 1
  %smax = select i1 %80, i64 %79, i64 1
  %min.iters.check = icmp ult i64 %smax, 4
  br i1 %min.iters.check, label %for.body23.i.preheader, label %min.iters.checked

for.body23.i.preheader:                           ; preds = %middle.block, %vector.memcheck, %min.iters.checked, %for.body23.lr.ph.i
  %indvars.iv117.i.ph = phi i64 [ 0, %vector.memcheck ], [ 0, %min.iters.checked ], [ 0, %for.body23.lr.ph.i ], [ %n.vec, %middle.block ]
  br label %for.body23.i

min.iters.checked:                                ; preds = %for.body23.lr.ph.i
  %n.vec = and i64 %smax, -4
  %cmp.zero = icmp eq i64 %n.vec, 0
  br i1 %cmp.zero, label %for.body23.i.preheader, label %vector.memcheck

vector.memcheck:                                  ; preds = %min.iters.checked
  %81 = mul i32 %sub.i, %div.i
  %82 = sext i32 %81 to i64
  %scevgep = getelementptr i8*, i8** %13, i64 %82
  %scevgep24 = getelementptr i8*, i8** %13, i64 -1
  %83 = shl i32 %div.i, 1
  %84 = sext i32 %83 to i64
  %85 = icmp sgt i64 %84, 1
  %smax25 = select i1 %85, i64 %84, i64 1
  %86 = add nsw i64 %smax25, %82
  %scevgep26 = getelementptr i8*, i8** %scevgep24, i64 %86
  %87 = mul i32 %4, %div.i
  %88 = sext i32 %87 to i64
  %scevgep28 = getelementptr i8*, i8** %13, i64 %88
  %scevgep30 = getelementptr i8*, i8** %13, i64 -1
  %89 = add nsw i64 %smax25, %88
  %scevgep31 = getelementptr i8*, i8** %scevgep30, i64 %89
  %scevgep33 = getelementptr i8*, i8** %14, i64 %88
  %scevgep35 = getelementptr i8*, i8** %14, i64 -1
  %scevgep36 = getelementptr i8*, i8** %scevgep35, i64 %89
  %scevgep38 = getelementptr i8*, i8** %14, i64 %82
  %scevgep40 = getelementptr i8*, i8** %14, i64 -1
  %scevgep41 = getelementptr i8*, i8** %scevgep40, i64 %86
  %bound0 = icmp ule i8** %scevgep, %scevgep31
  %bound1 = icmp ule i8** %scevgep28, %scevgep26
  %found.conflict = and i1 %bound0, %bound1
  %bound043 = icmp ule i8** %scevgep, %scevgep36
  %bound144 = icmp ule i8** %scevgep33, %scevgep26
  %found.conflict45 = and i1 %bound043, %bound144
  %conflict.rdx = or i1 %found.conflict, %found.conflict45
  %bound046 = icmp ule i8** %scevgep, %scevgep41
  %bound147 = icmp ule i8** %scevgep38, %scevgep26
  %found.conflict48 = and i1 %bound046, %bound147
  %conflict.rdx49 = or i1 %conflict.rdx, %found.conflict48
  %bound050 = icmp ule i8** %scevgep28, %scevgep36
  %bound151 = icmp ule i8** %scevgep33, %scevgep31
  %found.conflict52 = and i1 %bound050, %bound151
  %conflict.rdx53 = or i1 %conflict.rdx49, %found.conflict52
  %bound054 = icmp ule i8** %scevgep28, %scevgep41
  %bound155 = icmp ule i8** %scevgep38, %scevgep31
  %found.conflict56 = and i1 %bound054, %bound155
  %conflict.rdx57 = or i1 %conflict.rdx53, %found.conflict56
  br i1 %conflict.rdx57, label %for.body23.i.preheader, label %vector.body.preheader

vector.body.preheader:                            ; preds = %vector.memcheck
  %90 = shl i32 %div.i, 1
  %91 = sext i32 %90 to i64
  %92 = icmp sgt i64 %91, 1
  %smax112 = select i1 %92, i64 %91, i64 1
  %93 = add nsw i64 %smax112, -4
  %94 = lshr i64 %93, 2
  %95 = and i64 %94, 1
  %lcmp.mod114 = icmp eq i64 %95, 0
  br i1 %lcmp.mod114, label %vector.body.prol, label %vector.body.preheader.split

vector.body.prol:                                 ; preds = %vector.body.preheader
  %96 = getelementptr inbounds i8*, i8** %14, i64 %77
  %97 = bitcast i8** %96 to <2 x i64>*
  %wide.load.prol = load <2 x i64>, <2 x i64>* %97, align 8, !tbaa !26
  %98 = getelementptr i8*, i8** %96, i64 2
  %99 = bitcast i8** %98 to <2 x i64>*
  %wide.load61.prol = load <2 x i64>, <2 x i64>* %99, align 8, !tbaa !26
  %100 = getelementptr inbounds i8*, i8** %13, i64 %76
  %101 = bitcast i8** %100 to <2 x i64>*
  store <2 x i64> %wide.load.prol, <2 x i64>* %101, align 8, !tbaa !26
  %102 = getelementptr i8*, i8** %100, i64 2
  %103 = bitcast i8** %102 to <2 x i64>*
  store <2 x i64> %wide.load61.prol, <2 x i64>* %103, align 8, !tbaa !26
  %104 = getelementptr inbounds i8*, i8** %14, i64 %76
  %105 = bitcast i8** %104 to <2 x i64>*
  %wide.load64.prol = load <2 x i64>, <2 x i64>* %105, align 8, !tbaa !26
  %106 = getelementptr i8*, i8** %104, i64 2
  %107 = bitcast i8** %106 to <2 x i64>*
  %wide.load65.prol = load <2 x i64>, <2 x i64>* %107, align 8, !tbaa !26
  %108 = getelementptr inbounds i8*, i8** %13, i64 %77
  %109 = bitcast i8** %108 to <2 x i64>*
  store <2 x i64> %wide.load64.prol, <2 x i64>* %109, align 8, !tbaa !26
  %110 = getelementptr i8*, i8** %108, i64 2
  %111 = bitcast i8** %110 to <2 x i64>*
  store <2 x i64> %wide.load65.prol, <2 x i64>* %111, align 8, !tbaa !26
  br label %vector.body.preheader.split

vector.body.preheader.split:                      ; preds = %vector.body.prol, %vector.body.preheader
  %index.unr = phi i64 [ 0, %vector.body.preheader ], [ 4, %vector.body.prol ]
  %112 = icmp eq i64 %94, 0
  br i1 %112, label %middle.block, label %vector.body.preheader.split.split

vector.body.preheader.split.split:                ; preds = %vector.body.preheader.split
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.body.preheader.split.split
  %index = phi i64 [ %index.unr, %vector.body.preheader.split.split ], [ %index.next.1, %vector.body ]
  %113 = add i64 %index, %77
  %114 = getelementptr inbounds i8*, i8** %14, i64 %113
  %115 = bitcast i8** %114 to <2 x i64>*
  %wide.load = load <2 x i64>, <2 x i64>* %115, align 8, !tbaa !26
  %116 = getelementptr i8*, i8** %114, i64 2
  %117 = bitcast i8** %116 to <2 x i64>*
  %wide.load61 = load <2 x i64>, <2 x i64>* %117, align 8, !tbaa !26
  %118 = add i64 %index, %76
  %119 = getelementptr inbounds i8*, i8** %13, i64 %118
  %120 = bitcast i8** %119 to <2 x i64>*
  store <2 x i64> %wide.load, <2 x i64>* %120, align 8, !tbaa !26
  %121 = getelementptr i8*, i8** %119, i64 2
  %122 = bitcast i8** %121 to <2 x i64>*
  store <2 x i64> %wide.load61, <2 x i64>* %122, align 8, !tbaa !26
  %123 = getelementptr inbounds i8*, i8** %14, i64 %118
  %124 = bitcast i8** %123 to <2 x i64>*
  %wide.load64 = load <2 x i64>, <2 x i64>* %124, align 8, !tbaa !26
  %125 = getelementptr i8*, i8** %123, i64 2
  %126 = bitcast i8** %125 to <2 x i64>*
  %wide.load65 = load <2 x i64>, <2 x i64>* %126, align 8, !tbaa !26
  %127 = getelementptr inbounds i8*, i8** %13, i64 %113
  %128 = bitcast i8** %127 to <2 x i64>*
  store <2 x i64> %wide.load64, <2 x i64>* %128, align 8, !tbaa !26
  %129 = getelementptr i8*, i8** %127, i64 2
  %130 = bitcast i8** %129 to <2 x i64>*
  store <2 x i64> %wide.load65, <2 x i64>* %130, align 8, !tbaa !26
  %index.next = add i64 %index, 4
  %131 = add i64 %index.next, %77
  %132 = getelementptr inbounds i8*, i8** %14, i64 %131
  %133 = bitcast i8** %132 to <2 x i64>*
  %wide.load.1 = load <2 x i64>, <2 x i64>* %133, align 8, !tbaa !26
  %134 = getelementptr i8*, i8** %132, i64 2
  %135 = bitcast i8** %134 to <2 x i64>*
  %wide.load61.1 = load <2 x i64>, <2 x i64>* %135, align 8, !tbaa !26
  %136 = add i64 %index.next, %76
  %137 = getelementptr inbounds i8*, i8** %13, i64 %136
  %138 = bitcast i8** %137 to <2 x i64>*
  store <2 x i64> %wide.load.1, <2 x i64>* %138, align 8, !tbaa !26
  %139 = getelementptr i8*, i8** %137, i64 2
  %140 = bitcast i8** %139 to <2 x i64>*
  store <2 x i64> %wide.load61.1, <2 x i64>* %140, align 8, !tbaa !26
  %141 = getelementptr inbounds i8*, i8** %14, i64 %136
  %142 = bitcast i8** %141 to <2 x i64>*
  %wide.load64.1 = load <2 x i64>, <2 x i64>* %142, align 8, !tbaa !26
  %143 = getelementptr i8*, i8** %141, i64 2
  %144 = bitcast i8** %143 to <2 x i64>*
  %wide.load65.1 = load <2 x i64>, <2 x i64>* %144, align 8, !tbaa !26
  %145 = getelementptr inbounds i8*, i8** %13, i64 %131
  %146 = bitcast i8** %145 to <2 x i64>*
  store <2 x i64> %wide.load64.1, <2 x i64>* %146, align 8, !tbaa !26
  %147 = getelementptr i8*, i8** %145, i64 2
  %148 = bitcast i8** %147 to <2 x i64>*
  store <2 x i64> %wide.load65.1, <2 x i64>* %148, align 8, !tbaa !26
  %index.next.1 = add i64 %index, 8
  %149 = icmp eq i64 %index.next.1, %n.vec
  br i1 %149, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !39

middle.block.unr-lcssa:                           ; preds = %vector.body
  br label %middle.block

middle.block:                                     ; preds = %vector.body.preheader.split, %middle.block.unr-lcssa
  %cmp.n = icmp eq i64 %smax, %n.vec
  br i1 %cmp.n, label %for.body46.lr.ph.i, label %for.body23.i.preheader

for.body13.i:                                     ; preds = %for.body13.i, %for.body13.i.preheader109.split.split
  %indvars.iv.i = phi i64 [ %indvars.iv.i.unr, %for.body13.i.preheader109.split.split ], [ %indvars.iv.next.i.3, %for.body13.i ]
  %arrayidx15.i = getelementptr inbounds i8*, i8** %14, i64 %indvars.iv.i
  %150 = bitcast i8** %arrayidx15.i to i64*
  %151 = load i64, i64* %150, align 8, !tbaa !26
  %arrayidx17.i = getelementptr inbounds i8*, i8** %13, i64 %indvars.iv.i
  %152 = bitcast i8** %arrayidx17.i to i64*
  store i64 %151, i64* %152, align 8, !tbaa !26
  %arrayidx19.i = getelementptr inbounds i8*, i8** %11, i64 %indvars.iv.i
  %153 = bitcast i8** %arrayidx19.i to i64*
  store i64 %151, i64* %153, align 8, !tbaa !26
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %arrayidx15.i.1 = getelementptr inbounds i8*, i8** %14, i64 %indvars.iv.next.i
  %154 = bitcast i8** %arrayidx15.i.1 to i64*
  %155 = load i64, i64* %154, align 8, !tbaa !26
  %arrayidx17.i.1 = getelementptr inbounds i8*, i8** %13, i64 %indvars.iv.next.i
  %156 = bitcast i8** %arrayidx17.i.1 to i64*
  store i64 %155, i64* %156, align 8, !tbaa !26
  %arrayidx19.i.1 = getelementptr inbounds i8*, i8** %11, i64 %indvars.iv.next.i
  %157 = bitcast i8** %arrayidx19.i.1 to i64*
  store i64 %155, i64* %157, align 8, !tbaa !26
  %indvars.iv.next.i.1 = add nsw i64 %indvars.iv.i, 2
  %arrayidx15.i.2 = getelementptr inbounds i8*, i8** %14, i64 %indvars.iv.next.i.1
  %158 = bitcast i8** %arrayidx15.i.2 to i64*
  %159 = load i64, i64* %158, align 8, !tbaa !26
  %arrayidx17.i.2 = getelementptr inbounds i8*, i8** %13, i64 %indvars.iv.next.i.1
  %160 = bitcast i8** %arrayidx17.i.2 to i64*
  store i64 %159, i64* %160, align 8, !tbaa !26
  %arrayidx19.i.2 = getelementptr inbounds i8*, i8** %11, i64 %indvars.iv.next.i.1
  %161 = bitcast i8** %arrayidx19.i.2 to i64*
  store i64 %159, i64* %161, align 8, !tbaa !26
  %indvars.iv.next.i.2 = add nsw i64 %indvars.iv.i, 3
  %arrayidx15.i.3 = getelementptr inbounds i8*, i8** %14, i64 %indvars.iv.next.i.2
  %162 = bitcast i8** %arrayidx15.i.3 to i64*
  %163 = load i64, i64* %162, align 8, !tbaa !26
  %arrayidx17.i.3 = getelementptr inbounds i8*, i8** %13, i64 %indvars.iv.next.i.2
  %164 = bitcast i8** %arrayidx17.i.3 to i64*
  store i64 %163, i64* %164, align 8, !tbaa !26
  %arrayidx19.i.3 = getelementptr inbounds i8*, i8** %11, i64 %indvars.iv.next.i.2
  %165 = bitcast i8** %arrayidx19.i.3 to i64*
  store i64 %163, i64* %165, align 8, !tbaa !26
  %indvars.iv.next.i.3 = add nsw i64 %indvars.iv.i, 4
  %lftr.wideiv.3 = trunc i64 %indvars.iv.next.i.3 to i32
  %exitcond.3 = icmp eq i32 %lftr.wideiv.3, %mul11.i
  br i1 %exitcond.3, label %for.cond20.preheader.i.loopexit.unr-lcssa, label %for.body13.i, !llvm.loop !40

for.body46.lr.ph.i.loopexit:                      ; preds = %for.body23.i
  br label %for.body46.lr.ph.i

for.body46.lr.ph.i:                               ; preds = %for.body46.lr.ph.i.loopexit, %middle.block
  %166 = bitcast i8** %11 to i64*
  %167 = zext i32 %div.i to i64
  %168 = zext i32 %div.i to i64
  %169 = add nsw i64 %168, -1
  %xtraiter115 = and i64 %168, 3
  %lcmp.mod116 = icmp eq i64 %xtraiter115, 0
  br i1 %lcmp.mod116, label %for.body46.lr.ph.i.split, label %for.body46.i.prol.preheader

for.body46.i.prol.preheader:                      ; preds = %for.body46.lr.ph.i
  br label %for.body46.i.prol

for.body46.i.prol:                                ; preds = %for.body46.i.prol, %for.body46.i.prol.preheader
  %indvars.iv.prol = phi i64 [ %indvars.iv.next.prol, %for.body46.i.prol ], [ 0, %for.body46.i.prol.preheader ]
  %i.2113.i.prol = phi i32 [ %inc52.i.prol, %for.body46.i.prol ], [ 0, %for.body46.i.prol.preheader ]
  %prol.iter117 = phi i64 [ %prol.iter117.sub, %for.body46.i.prol ], [ %xtraiter115, %for.body46.i.prol.preheader ]
  %170 = load i64, i64* %166, align 8, !tbaa !26
  %sub48.i.prol = sub nsw i32 %i.2113.i.prol, %div.i
  %idxprom49.i.prol = sext i32 %sub48.i.prol to i64
  %arrayidx50.i.prol = getelementptr inbounds i8*, i8** %11, i64 %idxprom49.i.prol
  %171 = bitcast i8** %arrayidx50.i.prol to i64*
  store i64 %170, i64* %171, align 8, !tbaa !26
  %indvars.iv.next.prol = add nuw nsw i64 %indvars.iv.prol, 1
  %inc52.i.prol = add nuw nsw i32 %i.2113.i.prol, 1
  %prol.iter117.sub = add i64 %prol.iter117, -1
  %prol.iter117.cmp = icmp eq i64 %prol.iter117.sub, 0
  br i1 %prol.iter117.cmp, label %for.body46.lr.ph.i.split.loopexit, label %for.body46.i.prol, !llvm.loop !41

for.body46.lr.ph.i.split.loopexit:                ; preds = %for.body46.i.prol
  %inc52.i.prol.lcssa = phi i32 [ %inc52.i.prol, %for.body46.i.prol ]
  %indvars.iv.next.prol.lcssa = phi i64 [ %indvars.iv.next.prol, %for.body46.i.prol ]
  br label %for.body46.lr.ph.i.split

for.body46.lr.ph.i.split:                         ; preds = %for.body46.lr.ph.i, %for.body46.lr.ph.i.split.loopexit
  %indvars.iv.unr = phi i64 [ 0, %for.body46.lr.ph.i ], [ %indvars.iv.next.prol.lcssa, %for.body46.lr.ph.i.split.loopexit ]
  %i.2113.i.unr = phi i32 [ 0, %for.body46.lr.ph.i ], [ %inc52.i.prol.lcssa, %for.body46.lr.ph.i.split.loopexit ]
  %172 = icmp ult i64 %169, 3
  br i1 %172, label %for.inc54.i.loopexit, label %for.body46.lr.ph.i.split.split

for.body46.lr.ph.i.split.split:                   ; preds = %for.body46.lr.ph.i.split
  br label %for.body46.i

for.body23.i:                                     ; preds = %for.body23.i.preheader, %for.body23.i
  %indvars.iv117.i = phi i64 [ %indvars.iv.next118.i, %for.body23.i ], [ %indvars.iv117.i.ph, %for.body23.i.preheader ]
  %173 = add nsw i64 %indvars.iv117.i, %77
  %arrayidx27.i = getelementptr inbounds i8*, i8** %14, i64 %173
  %174 = bitcast i8** %arrayidx27.i to i64*
  %175 = load i64, i64* %174, align 8, !tbaa !26
  %176 = add nsw i64 %indvars.iv117.i, %76
  %arrayidx31.i = getelementptr inbounds i8*, i8** %13, i64 %176
  %177 = bitcast i8** %arrayidx31.i to i64*
  store i64 %175, i64* %177, align 8, !tbaa !26
  %arrayidx36.i = getelementptr inbounds i8*, i8** %14, i64 %176
  %178 = bitcast i8** %arrayidx36.i to i64*
  %179 = load i64, i64* %178, align 8, !tbaa !26
  %arrayidx40.i = getelementptr inbounds i8*, i8** %13, i64 %173
  %180 = bitcast i8** %arrayidx40.i to i64*
  store i64 %179, i64* %180, align 8, !tbaa !26
  %indvars.iv.next118.i = add nuw nsw i64 %indvars.iv117.i, 1
  %cmp22.i = icmp slt i64 %indvars.iv.next118.i, %78
  br i1 %cmp22.i, label %for.body23.i, label %for.body46.lr.ph.i.loopexit, !llvm.loop !42

for.body46.i:                                     ; preds = %for.body46.i, %for.body46.lr.ph.i.split.split
  %indvars.iv = phi i64 [ %indvars.iv.unr, %for.body46.lr.ph.i.split.split ], [ %indvars.iv.next.3, %for.body46.i ]
  %i.2113.i = phi i32 [ %i.2113.i.unr, %for.body46.lr.ph.i.split.split ], [ %inc52.i.3, %for.body46.i ]
  %181 = load i64, i64* %166, align 8, !tbaa !26
  %sub48.i = sub nsw i32 %i.2113.i, %div.i
  %idxprom49.i = sext i32 %sub48.i to i64
  %arrayidx50.i = getelementptr inbounds i8*, i8** %11, i64 %idxprom49.i
  %182 = bitcast i8** %arrayidx50.i to i64*
  store i64 %181, i64* %182, align 8, !tbaa !26
  %inc52.i = add nuw nsw i32 %i.2113.i, 1
  %183 = load i64, i64* %166, align 8, !tbaa !26
  %sub48.i.1 = sub nsw i32 %inc52.i, %div.i
  %idxprom49.i.1 = sext i32 %sub48.i.1 to i64
  %arrayidx50.i.1 = getelementptr inbounds i8*, i8** %11, i64 %idxprom49.i.1
  %184 = bitcast i8** %arrayidx50.i.1 to i64*
  store i64 %183, i64* %184, align 8, !tbaa !26
  %inc52.i.1 = add nsw i32 %i.2113.i, 2
  %185 = load i64, i64* %166, align 8, !tbaa !26
  %sub48.i.2 = sub nsw i32 %inc52.i.1, %div.i
  %idxprom49.i.2 = sext i32 %sub48.i.2 to i64
  %arrayidx50.i.2 = getelementptr inbounds i8*, i8** %11, i64 %idxprom49.i.2
  %186 = bitcast i8** %arrayidx50.i.2 to i64*
  store i64 %185, i64* %186, align 8, !tbaa !26
  %inc52.i.2 = add nsw i32 %i.2113.i, 3
  %187 = load i64, i64* %166, align 8, !tbaa !26
  %sub48.i.3 = sub nsw i32 %inc52.i.2, %div.i
  %idxprom49.i.3 = sext i32 %sub48.i.3 to i64
  %arrayidx50.i.3 = getelementptr inbounds i8*, i8** %11, i64 %idxprom49.i.3
  %188 = bitcast i8** %arrayidx50.i.3 to i64*
  store i64 %187, i64* %188, align 8, !tbaa !26
  %indvars.iv.next.3 = add nsw i64 %indvars.iv, 4
  %inc52.i.3 = add nsw i32 %i.2113.i, 4
  %exitcond123.i.3 = icmp eq i64 %indvars.iv.next.3, %167
  br i1 %exitcond123.i.3, label %for.inc54.i.loopexit.unr-lcssa, label %for.body46.i

for.inc54.i.loopexit.unr-lcssa:                   ; preds = %for.body46.i
  br label %for.inc54.i.loopexit

for.inc54.i.loopexit:                             ; preds = %for.body46.lr.ph.i.split, %for.inc54.i.loopexit.unr-lcssa
  br label %for.inc54.i

for.inc54.i:                                      ; preds = %for.inc54.i.loopexit, %for.cond20.preheader.i
  %indvars.iv.next125.i = add nuw nsw i64 %indvars.iv124.i, 1
  %incdec.ptr.i = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr.0115.i, i64 1
  %exitcond20 = icmp eq i64 %indvars.iv.next125.i, %7
  br i1 %exitcond20, label %make_funny_pointers.exit.loopexit, label %for.body.i

make_funny_pointers.exit.loopexit:                ; preds = %for.inc54.i
  br label %make_funny_pointers.exit

make_funny_pointers.exit:                         ; preds = %make_funny_pointers.exit.loopexit, %if.then
  %whichptr = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %1, i64 0, i32 5
  store i32 0, i32* %whichptr, align 8, !tbaa !43
  %context_state = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %1, i64 0, i32 6
  store i32 0, i32* %context_state, align 4, !tbaa !44
  %iMCU_row_ctr = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %1, i64 0, i32 8
  store i32 0, i32* %iMCU_row_ctr, align 4, !tbaa !45
  br label %if.end

if.else:                                          ; preds = %sw.bb
  store void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)* @process_data_simple_main, void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)** %process_data, align 8, !tbaa !33
  br label %if.end

if.end:                                           ; preds = %if.else, %make_funny_pointers.exit
  %buffer_full = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %1, i64 0, i32 2
  store i32 0, i32* %buffer_full, align 8, !tbaa !46
  %rowgroup_ctr = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %1, i64 0, i32 3
  store i32 0, i32* %rowgroup_ctr, align 4, !tbaa !47
  br label %sw.epilog

sw.bb4:                                           ; preds = %entry
  %process_data6 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %1, i64 0, i32 0, i32 1
  store void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)* @process_data_crank_post, void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)** %process_data6, align 8, !tbaa !33
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  %err = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0
  %189 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8, !tbaa !17
  %msg_code = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %189, i64 0, i32 5
  store i32 4, i32* %msg_code, align 8, !tbaa !18
  %error_exit = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %189, i64 0, i32 0
  %190 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit, align 8, !tbaa !20
  %191 = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  tail call void %190(%struct.jpeg_common_struct* %191) #1
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb4, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @process_data_context_main(%struct.jpeg_decompress_struct* %cinfo, i8** %output_buf, i32* %out_row_ctr, i32 %out_rows_avail) #0 {
entry:
  %main1 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 74
  %0 = bitcast %struct.jpeg_d_main_controller** %main1 to %struct.my_main_controller**
  %1 = load %struct.my_main_controller*, %struct.my_main_controller** %0, align 8, !tbaa !13
  %buffer_full = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %1, i64 0, i32 2
  %2 = load i32, i32* %buffer_full, align 8, !tbaa !46
  %tobool = icmp eq i32 %2, 0
  br i1 %tobool, label %if.then, label %if.end5

if.then:                                          ; preds = %entry
  %coef = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 75
  %3 = load %struct.jpeg_d_coef_controller*, %struct.jpeg_d_coef_controller** %coef, align 8, !tbaa !48
  %decompress_data = getelementptr inbounds %struct.jpeg_d_coef_controller, %struct.jpeg_d_coef_controller* %3, i64 0, i32 3
  %4 = load i32 (%struct.jpeg_decompress_struct*, i8***)*, i32 (%struct.jpeg_decompress_struct*, i8***)** %decompress_data, align 8, !tbaa !49
  %whichptr = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %1, i64 0, i32 5
  %5 = load i32, i32* %whichptr, align 8, !tbaa !43
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %1, i64 0, i32 4, i64 %idxprom
  %6 = load i8***, i8**** %arrayidx, align 8, !tbaa !26
  %call = tail call i32 %4(%struct.jpeg_decompress_struct* nonnull %cinfo, i8*** %6) #1
  %tobool2 = icmp eq i32 %call, 0
  br i1 %tobool2, label %cleanup, label %if.end

if.end:                                           ; preds = %if.then
  store i32 1, i32* %buffer_full, align 8, !tbaa !46
  %iMCU_row_ctr = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %1, i64 0, i32 8
  %7 = load i32, i32* %iMCU_row_ctr, align 4, !tbaa !45
  %inc = add i32 %7, 1
  store i32 %inc, i32* %iMCU_row_ctr, align 4, !tbaa !45
  br label %if.end5

if.end5:                                          ; preds = %entry, %if.end
  %context_state = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %1, i64 0, i32 6
  %8 = load i32, i32* %context_state, align 4, !tbaa !44
  switch i32 %8, label %cleanup [
    i32 2, label %sw.bb
    i32 0, label %if.end5.sw.bb18_crit_edge
    i32 1, label %if.end5.sw.bb26_crit_edge
  ]

if.end5.sw.bb26_crit_edge:                        ; preds = %if.end5
  %.pre125 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %1, i64 0, i32 3
  %.pre126 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %1, i64 0, i32 7
  br label %sw.bb26

if.end5.sw.bb18_crit_edge:                        ; preds = %if.end5
  %iMCU_row_ctr21.phi.trans.insert = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %1, i64 0, i32 8
  %.pre = load i32, i32* %iMCU_row_ctr21.phi.trans.insert, align 4, !tbaa !45
  %.pre122 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %1, i64 0, i32 3
  %.pre123 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %1, i64 0, i32 7
  br label %sw.bb18

sw.bb:                                            ; preds = %if.end5
  %post = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 76
  %9 = load %struct.jpeg_d_post_controller*, %struct.jpeg_d_post_controller** %post, align 8, !tbaa !51
  %post_process_data = getelementptr inbounds %struct.jpeg_d_post_controller, %struct.jpeg_d_post_controller* %9, i64 0, i32 1
  %10 = load void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)** %post_process_data, align 8, !tbaa !52
  %whichptr6 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %1, i64 0, i32 5
  %11 = load i32, i32* %whichptr6, align 8, !tbaa !43
  %idxprom7 = sext i32 %11 to i64
  %arrayidx9 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %1, i64 0, i32 4, i64 %idxprom7
  %12 = load i8***, i8**** %arrayidx9, align 8, !tbaa !26
  %rowgroup_ctr = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %1, i64 0, i32 3
  %rowgroups_avail = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %1, i64 0, i32 7
  %13 = load i32, i32* %rowgroups_avail, align 8, !tbaa !54
  tail call void %10(%struct.jpeg_decompress_struct* nonnull %cinfo, i8*** %12, i32* %rowgroup_ctr, i32 %13, i8** %output_buf, i32* %out_row_ctr, i32 %out_rows_avail) #1
  %14 = load i32, i32* %rowgroup_ctr, align 4, !tbaa !47
  %15 = bitcast i32* %rowgroups_avail to i64*
  %16 = load i64, i64* %15, align 8
  %17 = trunc i64 %16 to i32
  %cmp = icmp ult i32 %14, %17
  br i1 %cmp, label %cleanup, label %if.end13

if.end13:                                         ; preds = %sw.bb
  %18 = lshr i64 %16, 32
  %19 = trunc i64 %18 to i32
  store i32 0, i32* %context_state, align 4, !tbaa !44
  %20 = load i32, i32* %out_row_ctr, align 4, !tbaa !55
  %cmp15 = icmp ult i32 %20, %out_rows_avail
  br i1 %cmp15, label %sw.bb18, label %cleanup

sw.bb18:                                          ; preds = %if.end13, %if.end5.sw.bb18_crit_edge
  %rowgroups_avail20.pre-phi = phi i32* [ %.pre123, %if.end5.sw.bb18_crit_edge ], [ %rowgroups_avail, %if.end13 ]
  %rowgroup_ctr19.pre-phi = phi i32* [ %.pre122, %if.end5.sw.bb18_crit_edge ], [ %rowgroup_ctr, %if.end13 ]
  %21 = phi i32 [ %.pre, %if.end5.sw.bb18_crit_edge ], [ %19, %if.end13 ]
  store i32 0, i32* %rowgroup_ctr19.pre-phi, align 4, !tbaa !47
  %min_DCT_scaled_size = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 59
  %22 = load i32, i32* %min_DCT_scaled_size, align 4, !tbaa !24
  %sub = add nsw i32 %22, -1
  store i32 %sub, i32* %rowgroups_avail20.pre-phi, align 8, !tbaa !54
  %total_iMCU_rows = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 60
  %23 = load i32, i32* %total_iMCU_rows, align 8, !tbaa !56
  %cmp22 = icmp eq i32 %21, %23
  br i1 %cmp22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %sw.bb18
  %24 = load %struct.my_main_controller*, %struct.my_main_controller** %0, align 8, !tbaa !13
  %num_components.i = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 8
  %25 = load i32, i32* %num_components.i, align 8, !tbaa !25
  %cmp52.i = icmp sgt i32 %25, 0
  br i1 %cmp52.i, label %for.body.lr.ph.i, label %if.end24

for.body.lr.ph.i:                                 ; preds = %if.then23
  %comp_info.i = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 43
  %26 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %comp_info.i, align 8, !tbaa !27
  %27 = load i32, i32* %min_DCT_scaled_size, align 4
  %rowgroups_avail.i = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %24, i64 0, i32 7
  %whichptr.i = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %24, i64 0, i32 5
  %28 = sext i32 %25 to i64
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc19.i, %for.body.lr.ph.i
  %indvars.iv56.i = phi i64 [ 0, %for.body.lr.ph.i ], [ %indvars.iv.next57.i, %for.inc19.i ]
  %compptr.053.i = phi %struct.jpeg_component_info* [ %26, %for.body.lr.ph.i ], [ %incdec.ptr.i, %for.inc19.i ]
  %v_samp_factor.i = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr.053.i, i64 0, i32 3
  %29 = load i32, i32* %v_samp_factor.i, align 4, !tbaa !28
  %DCT_scaled_size.i = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr.053.i, i64 0, i32 9
  %30 = load i32, i32* %DCT_scaled_size.i, align 4, !tbaa !30
  %mul.i = mul nsw i32 %30, %29
  %div.i = sdiv i32 %mul.i, %27
  %downsampled_height.i = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr.053.i, i64 0, i32 11
  %31 = load i32, i32* %downsampled_height.i, align 4, !tbaa !57
  %rem.i = urem i32 %31, %mul.i
  %cmp2.i = icmp eq i32 %rem.i, 0
  %mul.rem.i = select i1 %cmp2.i, i32 %mul.i, i32 %rem.i
  %cmp3.i = icmp eq i64 %indvars.iv56.i, 0
  br i1 %cmp3.i, label %if.then4.i, label %if.end6.i

if.then4.i:                                       ; preds = %for.body.i
  %sub.i = add nsw i32 %mul.rem.i, -1
  %div5.i = sdiv i32 %sub.i, %div.i
  %add.i = add nsw i32 %div5.i, 1
  store i32 %add.i, i32* %rowgroups_avail.i, align 8, !tbaa !54
  br label %if.end6.i

if.end6.i:                                        ; preds = %if.then4.i, %for.body.i
  %32 = load i32, i32* %whichptr.i, align 8, !tbaa !43
  %idxprom7.i = sext i32 %32 to i64
  %arrayidx.i = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %24, i64 0, i32 4, i64 %idxprom7.i
  %33 = load i8***, i8**** %arrayidx.i, align 8, !tbaa !26
  %arrayidx8.i = getelementptr inbounds i8**, i8*** %33, i64 %indvars.iv56.i
  %34 = load i8**, i8*** %arrayidx8.i, align 8, !tbaa !26
  %cmp1150.i = icmp sgt i32 %div.i, 0
  br i1 %cmp1150.i, label %for.body12.lr.ph.i, label %for.inc19.i

for.body12.lr.ph.i:                               ; preds = %if.end6.i
  %mul10.i = shl nsw i32 %div.i, 1
  %sub13.i = add nsw i32 %mul.rem.i, -1
  %idxprom14.i = sext i32 %sub13.i to i64
  %arrayidx15.i = getelementptr inbounds i8*, i8** %34, i64 %idxprom14.i
  %35 = bitcast i8** %arrayidx15.i to i64*
  %36 = sext i32 %mul.rem.i to i64
  %37 = sext i32 %mul10.i to i64
  br label %for.body12.i

for.body12.i:                                     ; preds = %for.body12.i, %for.body12.lr.ph.i
  %indvars.iv.i = phi i64 [ 0, %for.body12.lr.ph.i ], [ %indvars.iv.next.i, %for.body12.i ]
  %38 = load i64, i64* %35, align 8, !tbaa !26
  %39 = add nsw i64 %indvars.iv.i, %36
  %arrayidx18.i = getelementptr inbounds i8*, i8** %34, i64 %39
  %40 = bitcast i8** %arrayidx18.i to i64*
  store i64 %38, i64* %40, align 8, !tbaa !26
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %cmp11.i = icmp slt i64 %indvars.iv.next.i, %37
  br i1 %cmp11.i, label %for.body12.i, label %for.inc19.i.loopexit

for.inc19.i.loopexit:                             ; preds = %for.body12.i
  br label %for.inc19.i

for.inc19.i:                                      ; preds = %for.inc19.i.loopexit, %if.end6.i
  %indvars.iv.next57.i = add nuw nsw i64 %indvars.iv56.i, 1
  %incdec.ptr.i = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr.053.i, i64 1
  %exitcond116 = icmp eq i64 %indvars.iv.next57.i, %28
  br i1 %exitcond116, label %if.end24.loopexit, label %for.body.i

if.end24.loopexit:                                ; preds = %for.inc19.i
  br label %if.end24

if.end24:                                         ; preds = %if.end24.loopexit, %if.then23, %sw.bb18
  store i32 1, i32* %context_state, align 4, !tbaa !44
  br label %sw.bb26

sw.bb26:                                          ; preds = %if.end5.sw.bb26_crit_edge, %if.end24
  %rowgroups_avail34.pre-phi = phi i32* [ %.pre126, %if.end5.sw.bb26_crit_edge ], [ %rowgroups_avail20.pre-phi, %if.end24 ]
  %rowgroup_ctr33.pre-phi = phi i32* [ %.pre125, %if.end5.sw.bb26_crit_edge ], [ %rowgroup_ctr19.pre-phi, %if.end24 ]
  %post27 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 76
  %41 = load %struct.jpeg_d_post_controller*, %struct.jpeg_d_post_controller** %post27, align 8, !tbaa !51
  %post_process_data28 = getelementptr inbounds %struct.jpeg_d_post_controller, %struct.jpeg_d_post_controller* %41, i64 0, i32 1
  %42 = load void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)** %post_process_data28, align 8, !tbaa !52
  %whichptr29 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %1, i64 0, i32 5
  %43 = load i32, i32* %whichptr29, align 8, !tbaa !43
  %idxprom30 = sext i32 %43 to i64
  %arrayidx32 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %1, i64 0, i32 4, i64 %idxprom30
  %44 = load i8***, i8**** %arrayidx32, align 8, !tbaa !26
  %45 = load i32, i32* %rowgroups_avail34.pre-phi, align 8, !tbaa !54
  tail call void %42(%struct.jpeg_decompress_struct* %cinfo, i8*** %44, i32* %rowgroup_ctr33.pre-phi, i32 %45, i8** %output_buf, i32* %out_row_ctr, i32 %out_rows_avail) #1
  %46 = load i32, i32* %rowgroup_ctr33.pre-phi, align 4, !tbaa !47
  %47 = bitcast i32* %rowgroups_avail34.pre-phi to i64*
  %48 = load i64, i64* %47, align 8
  %49 = trunc i64 %48 to i32
  %cmp37 = icmp ult i32 %46, %49
  br i1 %cmp37, label %cleanup, label %if.end39

if.end39:                                         ; preds = %sw.bb26
  %.mask = and i64 %48, -4294967296
  %cmp41 = icmp eq i64 %.mask, 4294967296
  br i1 %cmp41, label %if.then42, label %if.end39.if.end43_crit_edge

if.end39.if.end43_crit_edge:                      ; preds = %if.end39
  %min_DCT_scaled_size46.phi.trans.insert = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 59
  %.pre121 = load i32, i32* %min_DCT_scaled_size46.phi.trans.insert, align 4, !tbaa !24
  br label %if.end43

if.then42:                                        ; preds = %if.end39
  %50 = load %struct.my_main_controller*, %struct.my_main_controller** %0, align 8, !tbaa !13
  %min_DCT_scaled_size.i99 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 59
  %51 = load i32, i32* %min_DCT_scaled_size.i99, align 4, !tbaa !24
  %num_components.i100 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 8
  %52 = load i32, i32* %num_components.i100, align 8, !tbaa !25
  %cmp86.i = icmp sgt i32 %52, 0
  br i1 %cmp86.i, label %for.body.lr.ph.i104, label %if.end43

for.body.lr.ph.i104:                              ; preds = %if.then42
  %comp_info.i101 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 43
  %53 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %comp_info.i101, align 8, !tbaa !27
  %arrayidx.i102 = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %50, i64 0, i32 4, i64 0
  %arrayidx6.i = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %50, i64 0, i32 4, i64 1
  %add.i103 = add nsw i32 %51, 1
  %add27.i = add nsw i32 %51, 2
  %54 = sext i32 %52 to i64
  br label %for.body.i109

for.body.i109:                                    ; preds = %for.inc39.i, %for.body.lr.ph.i104
  %indvars.iv91.i = phi i64 [ 0, %for.body.lr.ph.i104 ], [ %indvars.iv.next92.i, %for.inc39.i ]
  %compptr.087.i = phi %struct.jpeg_component_info* [ %53, %for.body.lr.ph.i104 ], [ %incdec.ptr.i113, %for.inc39.i ]
  %v_samp_factor.i105 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr.087.i, i64 0, i32 3
  %55 = load i32, i32* %v_samp_factor.i105, align 4, !tbaa !28
  %DCT_scaled_size.i106 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr.087.i, i64 0, i32 9
  %56 = load i32, i32* %DCT_scaled_size.i106, align 4, !tbaa !30
  %mul.i107 = mul nsw i32 %56, %55
  %div.i108 = sdiv i32 %mul.i107, %51
  %57 = load i8***, i8**** %arrayidx.i102, align 8, !tbaa !26
  %arrayidx3.i = getelementptr inbounds i8**, i8*** %57, i64 %indvars.iv91.i
  %58 = load i8**, i8*** %arrayidx3.i, align 8, !tbaa !26
  %59 = load i8***, i8**** %arrayidx6.i, align 8, !tbaa !26
  %arrayidx7.i = getelementptr inbounds i8**, i8*** %59, i64 %indvars.iv91.i
  %60 = load i8**, i8*** %arrayidx7.i, align 8, !tbaa !26
  %cmp984.i = icmp sgt i32 %div.i108, 0
  br i1 %cmp984.i, label %for.body10.lr.ph.i, label %for.inc39.i

for.body10.lr.ph.i:                               ; preds = %for.body.i109
  %mul11.i = mul nsw i32 %div.i108, %add.i103
  %mul28.i = mul nsw i32 %div.i108, %add27.i
  %61 = sext i32 %mul28.i to i64
  %62 = sext i32 %mul11.i to i64
  br label %for.body10.i

for.body10.i:                                     ; preds = %for.body10.i, %for.body10.lr.ph.i
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body10.i ], [ 0, %for.body10.lr.ph.i ]
  %i.085.i = phi i32 [ %inc.i, %for.body10.i ], [ 0, %for.body10.lr.ph.i ]
  %63 = add nsw i64 %indvars.iv, %62
  %arrayidx14.i = getelementptr inbounds i8*, i8** %58, i64 %63
  %64 = bitcast i8** %arrayidx14.i to i64*
  %65 = load i64, i64* %64, align 8, !tbaa !26
  %sub.i111 = sub nsw i32 %i.085.i, %div.i108
  %idxprom15.i = sext i32 %sub.i111 to i64
  %arrayidx16.i = getelementptr inbounds i8*, i8** %58, i64 %idxprom15.i
  %66 = bitcast i8** %arrayidx16.i to i64*
  store i64 %65, i64* %66, align 8, !tbaa !26
  %arrayidx21.i = getelementptr inbounds i8*, i8** %60, i64 %63
  %67 = bitcast i8** %arrayidx21.i to i64*
  %68 = load i64, i64* %67, align 8, !tbaa !26
  %arrayidx24.i = getelementptr inbounds i8*, i8** %60, i64 %idxprom15.i
  %69 = bitcast i8** %arrayidx24.i to i64*
  store i64 %68, i64* %69, align 8, !tbaa !26
  %arrayidx26.i = getelementptr inbounds i8*, i8** %58, i64 %indvars.iv
  %70 = bitcast i8** %arrayidx26.i to i64*
  %71 = load i64, i64* %70, align 8, !tbaa !26
  %72 = add nsw i64 %indvars.iv, %61
  %arrayidx31.i = getelementptr inbounds i8*, i8** %58, i64 %72
  %73 = bitcast i8** %arrayidx31.i to i64*
  store i64 %71, i64* %73, align 8, !tbaa !26
  %arrayidx33.i = getelementptr inbounds i8*, i8** %60, i64 %indvars.iv
  %74 = bitcast i8** %arrayidx33.i to i64*
  %75 = load i64, i64* %74, align 8, !tbaa !26
  %arrayidx38.i = getelementptr inbounds i8*, i8** %60, i64 %72
  %76 = bitcast i8** %arrayidx38.i to i64*
  store i64 %75, i64* %76, align 8, !tbaa !26
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %inc.i = add nuw nsw i32 %i.085.i, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %div.i108
  br i1 %exitcond, label %for.inc39.i.loopexit, label %for.body10.i

for.inc39.i.loopexit:                             ; preds = %for.body10.i
  br label %for.inc39.i

for.inc39.i:                                      ; preds = %for.inc39.i.loopexit, %for.body.i109
  %indvars.iv.next92.i = add nuw nsw i64 %indvars.iv91.i, 1
  %incdec.ptr.i113 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr.087.i, i64 1
  %exitcond115 = icmp eq i64 %indvars.iv.next92.i, %54
  br i1 %exitcond115, label %if.end43.loopexit, label %for.body.i109

if.end43.loopexit:                                ; preds = %for.inc39.i
  br label %if.end43

if.end43:                                         ; preds = %if.end43.loopexit, %if.end39.if.end43_crit_edge, %if.then42
  %77 = phi i32 [ %.pre121, %if.end39.if.end43_crit_edge ], [ %51, %if.then42 ], [ %51, %if.end43.loopexit ]
  %78 = load i32, i32* %whichptr29, align 8, !tbaa !43
  %xor = xor i32 %78, 1
  store i32 %xor, i32* %whichptr29, align 8, !tbaa !43
  store i32 0, i32* %buffer_full, align 8, !tbaa !46
  %add = add nsw i32 %77, 1
  store i32 %add, i32* %rowgroup_ctr33.pre-phi, align 4, !tbaa !47
  %add49 = add nsw i32 %77, 2
  store i32 %add49, i32* %rowgroups_avail34.pre-phi, align 8, !tbaa !54
  store i32 2, i32* %context_state, align 4, !tbaa !44
  br label %cleanup

cleanup:                                          ; preds = %if.end5, %if.end43, %sw.bb26, %if.end13, %sw.bb, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @process_data_simple_main(%struct.jpeg_decompress_struct* %cinfo, i8** %output_buf, i32* %out_row_ctr, i32 %out_rows_avail) #0 {
entry:
  %main1 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 74
  %0 = bitcast %struct.jpeg_d_main_controller** %main1 to %struct.my_main_controller**
  %1 = load %struct.my_main_controller*, %struct.my_main_controller** %0, align 8, !tbaa !13
  %buffer_full = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %1, i64 0, i32 2
  %2 = load i32, i32* %buffer_full, align 8, !tbaa !46
  %tobool = icmp eq i32 %2, 0
  br i1 %tobool, label %if.then, label %entry.if.end5_crit_edge

entry.if.end5_crit_edge:                          ; preds = %entry
  %.pre = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %1, i64 0, i32 1, i64 0
  br label %if.end5

if.then:                                          ; preds = %entry
  %coef = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 75
  %3 = load %struct.jpeg_d_coef_controller*, %struct.jpeg_d_coef_controller** %coef, align 8, !tbaa !48
  %decompress_data = getelementptr inbounds %struct.jpeg_d_coef_controller, %struct.jpeg_d_coef_controller* %3, i64 0, i32 3
  %4 = load i32 (%struct.jpeg_decompress_struct*, i8***)*, i32 (%struct.jpeg_decompress_struct*, i8***)** %decompress_data, align 8, !tbaa !49
  %arraydecay = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %1, i64 0, i32 1, i64 0
  %call = tail call i32 %4(%struct.jpeg_decompress_struct* nonnull %cinfo, i8*** %arraydecay) #1
  %tobool2 = icmp eq i32 %call, 0
  br i1 %tobool2, label %cleanup, label %if.end

if.end:                                           ; preds = %if.then
  store i32 1, i32* %buffer_full, align 8, !tbaa !46
  br label %if.end5

if.end5:                                          ; preds = %entry.if.end5_crit_edge, %if.end
  %arraydecay7.pre-phi = phi i8*** [ %.pre, %entry.if.end5_crit_edge ], [ %arraydecay, %if.end ]
  %min_DCT_scaled_size = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 59
  %5 = load i32, i32* %min_DCT_scaled_size, align 4, !tbaa !24
  %post = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 76
  %6 = load %struct.jpeg_d_post_controller*, %struct.jpeg_d_post_controller** %post, align 8, !tbaa !51
  %post_process_data = getelementptr inbounds %struct.jpeg_d_post_controller, %struct.jpeg_d_post_controller* %6, i64 0, i32 1
  %7 = load void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)** %post_process_data, align 8, !tbaa !52
  %rowgroup_ctr = getelementptr inbounds %struct.my_main_controller, %struct.my_main_controller* %1, i64 0, i32 3
  tail call void %7(%struct.jpeg_decompress_struct* nonnull %cinfo, i8*** %arraydecay7.pre-phi, i32* %rowgroup_ctr, i32 %5, i8** %output_buf, i32* %out_row_ctr, i32 %out_rows_avail) #1
  %8 = load i32, i32* %rowgroup_ctr, align 4, !tbaa !47
  %cmp = icmp ult i32 %8, %5
  br i1 %cmp, label %cleanup, label %if.then9

if.then9:                                         ; preds = %if.end5
  store i32 0, i32* %buffer_full, align 8, !tbaa !46
  store i32 0, i32* %rowgroup_ctr, align 4, !tbaa !47
  br label %cleanup

cleanup:                                          ; preds = %if.then9, %if.end5, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @process_data_crank_post(%struct.jpeg_decompress_struct* %cinfo, i8** %output_buf, i32* %out_row_ctr, i32 %out_rows_avail) #0 {
entry:
  %post = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 76
  %0 = load %struct.jpeg_d_post_controller*, %struct.jpeg_d_post_controller** %post, align 8, !tbaa !51
  %post_process_data = getelementptr inbounds %struct.jpeg_d_post_controller, %struct.jpeg_d_post_controller* %0, i64 0, i32 1
  %1 = load void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)** %post_process_data, align 8, !tbaa !52
  tail call void %1(%struct.jpeg_decompress_struct* %cinfo, i8*** null, i32* null, i32 0, i8** %output_buf, i32* %out_row_ctr, i32 %out_rows_avail) #1
  ret void
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"MaxFunctionCount", i32 150581}
!1 = !{!"clang version 3.8.0 (trunk 257473)"}
!2 = !{!3, !4, i64 8}
!3 = !{!"jpeg_decompress_struct", !4, i64 0, !4, i64 8, !4, i64 16, !7, i64 24, !7, i64 28, !4, i64 32, !7, i64 40, !7, i64 44, !7, i64 48, !5, i64 52, !5, i64 56, !7, i64 60, !7, i64 64, !8, i64 72, !7, i64 80, !7, i64 84, !5, i64 88, !7, i64 92, !7, i64 96, !7, i64 100, !5, i64 104, !7, i64 108, !7, i64 112, !7, i64 116, !7, i64 120, !7, i64 124, !7, i64 128, !7, i64 132, !7, i64 136, !7, i64 140, !7, i64 144, !7, i64 148, !4, i64 152, !7, i64 160, !7, i64 164, !7, i64 168, !7, i64 172, !7, i64 176, !4, i64 184, !5, i64 192, !5, i64 224, !5, i64 256, !7, i64 288, !4, i64 296, !7, i64 304, !7, i64 308, !5, i64 312, !5, i64 328, !5, i64 344, !7, i64 360, !7, i64 364, !5, i64 368, !9, i64 370, !9, i64 372, !7, i64 376, !5, i64 380, !7, i64 384, !7, i64 388, !7, i64 392, !7, i64 396, !7, i64 400, !4, i64 408, !7, i64 416, !5, i64 424, !7, i64 456, !7, i64 460, !7, i64 464, !5, i64 468, !7, i64 508, !7, i64 512, !7, i64 516, !7, i64 520, !7, i64 524, !4, i64 528, !4, i64 536, !4, i64 544, !4, i64 552, !4, i64 560, !4, i64 568, !4, i64 576, !4, i64 584, !4, i64 592, !4, i64 600, !4, i64 608}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!"int", !5, i64 0}
!8 = !{!"double", !5, i64 0}
!9 = !{!"short", !5, i64 0}
!10 = !{!11, !4, i64 0}
!11 = !{!"jpeg_memory_mgr", !4, i64 0, !4, i64 8, !4, i64 16, !4, i64 24, !4, i64 32, !4, i64 40, !4, i64 48, !4, i64 56, !4, i64 64, !4, i64 72, !4, i64 80, !12, i64 88}
!12 = !{!"long", !5, i64 0}
!13 = !{!3, !4, i64 536}
!14 = !{!15, !4, i64 0}
!15 = !{!"", !16, i64 0, !5, i64 16, !7, i64 96, !7, i64 100, !5, i64 104, !7, i64 120, !7, i64 124, !7, i64 128, !7, i64 132}
!16 = !{!"jpeg_d_main_controller", !4, i64 0, !4, i64 8}
!17 = !{!3, !4, i64 0}
!18 = !{!19, !7, i64 40}
!19 = !{!"jpeg_error_mgr", !4, i64 0, !4, i64 8, !4, i64 16, !4, i64 24, !4, i64 32, !7, i64 40, !5, i64 44, !7, i64 124, !12, i64 128, !4, i64 136, !7, i64 144, !4, i64 152, !7, i64 160, !7, i64 164}
!20 = !{!19, !4, i64 0}
!21 = !{!3, !4, i64 592}
!22 = !{!23, !7, i64 16}
!23 = !{!"jpeg_upsampler", !4, i64 0, !4, i64 8, !7, i64 16}
!24 = !{!3, !7, i64 396}
!25 = !{!3, !7, i64 48}
!26 = !{!4, !4, i64 0}
!27 = !{!3, !4, i64 296}
!28 = !{!29, !7, i64 12}
!29 = !{!"", !7, i64 0, !7, i64 4, !7, i64 8, !7, i64 12, !7, i64 16, !7, i64 20, !7, i64 24, !7, i64 28, !7, i64 32, !7, i64 36, !7, i64 40, !7, i64 44, !7, i64 48, !7, i64 52, !7, i64 56, !7, i64 60, !7, i64 64, !7, i64 68, !7, i64 72, !4, i64 80, !4, i64 88}
!30 = !{!29, !7, i64 36}
!31 = !{!11, !4, i64 16}
!32 = !{!29, !7, i64 28}
!33 = !{!15, !4, i64 8}
!34 = distinct !{!34, !35}
!35 = !{!"llvm.loop.unroll.disable"}
!36 = distinct !{!36, !37, !38}
!37 = !{!"llvm.loop.vectorize.width", i32 1}
!38 = !{!"llvm.loop.interleave.count", i32 1}
!39 = distinct !{!39, !37, !38}
!40 = distinct !{!40, !37, !38}
!41 = distinct !{!41, !35}
!42 = distinct !{!42, !37, !38}
!43 = !{!15, !7, i64 120}
!44 = !{!15, !7, i64 124}
!45 = !{!15, !7, i64 132}
!46 = !{!15, !7, i64 96}
!47 = !{!15, !7, i64 100}
!48 = !{!3, !4, i64 544}
!49 = !{!50, !4, i64 24}
!50 = !{!"jpeg_d_coef_controller", !4, i64 0, !4, i64 8, !4, i64 16, !4, i64 24, !4, i64 32}
!51 = !{!3, !4, i64 552}
!52 = !{!53, !4, i64 8}
!53 = !{!"jpeg_d_post_controller", !4, i64 0, !4, i64 8}
!54 = !{!15, !7, i64 128}
!55 = !{!7, !7, i64 0}
!56 = !{!3, !7, i64 400}
!57 = !{!29, !7, i64 44}
