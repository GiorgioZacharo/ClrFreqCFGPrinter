; ModuleID = 'jquant2.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_decompress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32, %struct.jpeg_source_mgr*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i16, i16, i32, i8, i32, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master*, %struct.jpeg_d_main_controller*, %struct.jpeg_d_coef_controller*, %struct.jpeg_d_post_controller*, %struct.jpeg_input_controller*, %struct.jpeg_marker_reader*, %struct.jpeg_entropy_decoder*, %struct.jpeg_inverse_dct*, %struct.jpeg_upsampler*, %struct.jpeg_color_deconverter*, %struct.jpeg_color_quantizer* }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_source_mgr = type { i8*, i64, {}*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i64)*, i32 (%struct.jpeg_decompress_struct*, i32)*, {}* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.jpeg_decomp_master = type { {}*, {}*, i32 }
%struct.jpeg_d_main_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)* }
%struct.jpeg_d_coef_controller = type { {}*, i32 (%struct.jpeg_decompress_struct*)*, {}*, i32 (%struct.jpeg_decompress_struct*, i8***)*, %struct.jvirt_barray_control** }
%struct.jpeg_d_post_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)* }
%struct.jpeg_input_controller = type { i32 (%struct.jpeg_decompress_struct*)*, {}*, {}*, {}*, i32, i32 }
%struct.jpeg_marker_reader = type { {}*, i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, [16 x i32 (%struct.jpeg_decompress_struct*)*], i32, i32, i32, i32 }
%struct.jpeg_entropy_decoder = type { {}*, i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)* }
%struct.jpeg_inverse_dct = type { {}*, [10 x void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)*] }
%struct.jpeg_upsampler = type { {}*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)*, i32 }
%struct.jpeg_color_deconverter = type { {}*, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* }
%struct.jpeg_color_quantizer = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)*, {}*, {}* }
%struct.my_cquantizer = type { %struct.jpeg_color_quantizer, i8**, i32, [32 x i16]**, i32, i16*, i32, i32* }
%struct.box = type { i32, i32, i32, i32, i32, i32, i64, i64 }

; Function Attrs: nounwind uwtable
define void @jinit_2pass_quantizer(%struct.jpeg_decompress_struct* %cinfo) #0 {
entry:
  %mem = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 1
  %0 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !2
  %alloc_small = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %0, i64 0, i32 0
  %1 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_small, align 8, !tbaa !10
  %2 = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  %call = tail call i8* %1(%struct.jpeg_common_struct* %2, i32 1, i64 88) #5
  %cquantize1 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 83
  %3 = bitcast %struct.jpeg_color_quantizer** %cquantize1 to i8**
  store i8* %call, i8** %3, align 8, !tbaa !13
  %start_pass = bitcast i8* %call to void (%struct.jpeg_decompress_struct*, i32)**
  store void (%struct.jpeg_decompress_struct*, i32)* @start_pass_2_quant, void (%struct.jpeg_decompress_struct*, i32)** %start_pass, align 8, !tbaa !14
  %new_color_map = getelementptr inbounds i8, i8* %call, i64 24
  %new_color_map3 = bitcast i8* %new_color_map to void (%struct.jpeg_decompress_struct*)**
  store void (%struct.jpeg_decompress_struct*)* @new_color_map_2_quant, void (%struct.jpeg_decompress_struct*)** %new_color_map3, align 8, !tbaa !17
  %fserrors = getelementptr inbounds i8, i8* %call, i64 64
  %4 = bitcast i8* %fserrors to i16**
  store i16* null, i16** %4, align 8, !tbaa !18
  %error_limiter = getelementptr inbounds i8, i8* %call, i64 80
  %5 = bitcast i8* %error_limiter to i32**
  store i32* null, i32** %5, align 8, !tbaa !19
  %out_color_components = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 28
  %6 = load i32, i32* %out_color_components, align 8, !tbaa !20
  %cmp = icmp eq i32 %6, 3
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %err = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0
  %7 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8, !tbaa !21
  %msg_code = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %7, i64 0, i32 5
  store i32 46, i32* %msg_code, align 8, !tbaa !22
  %error_exit = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %7, i64 0, i32 0
  %8 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit, align 8, !tbaa !24
  tail call void %8(%struct.jpeg_common_struct* %2) #5
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %9 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !2
  %alloc_small6 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %9, i64 0, i32 0
  %10 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_small6, align 8, !tbaa !10
  %call7 = tail call i8* %10(%struct.jpeg_common_struct* %2, i32 1, i64 256) #5
  %histogram = getelementptr inbounds i8, i8* %call, i64 48
  %11 = bitcast i8* %histogram to [32 x i16]***
  %12 = bitcast i8* %histogram to i8**
  store i8* %call7, i8** %12, align 8, !tbaa !25
  br label %for.body

for.body:                                         ; preds = %for.body, %if.end
  %indvars.iv = phi i64 [ 0, %if.end ], [ %indvars.iv.next, %for.body ]
  %13 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !2
  %alloc_large = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %13, i64 0, i32 1
  %14 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_large, align 8, !tbaa !26
  %call10 = tail call i8* %14(%struct.jpeg_common_struct* nonnull %2, i32 1, i64 4096) #5
  %15 = load [32 x i16]**, [32 x i16]*** %11, align 8, !tbaa !25
  %arrayidx = getelementptr inbounds [32 x i16]*, [32 x i16]** %15, i64 %indvars.iv
  %16 = bitcast [32 x i16]** %arrayidx to i8**
  store i8* %call10, i8** %16, align 8, !tbaa !27
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 32
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  %needs_zeroed = getelementptr inbounds i8, i8* %call, i64 56
  %17 = bitcast i8* %needs_zeroed to i32*
  store i32 1, i32* %17, align 8, !tbaa !28
  %enable_2pass_quant = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 25
  %18 = load i32, i32* %enable_2pass_quant, align 4, !tbaa !29
  %tobool = icmp eq i32 %18, 0
  br i1 %tobool, label %if.else, label %if.then12

if.then12:                                        ; preds = %for.end
  %desired_number_of_colors = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 22
  %19 = load i32, i32* %desired_number_of_colors, align 8, !tbaa !30
  %cmp13 = icmp slt i32 %19, 8
  br i1 %cmp13, label %if.end22.thread, label %if.end22

if.end22.thread:                                  ; preds = %if.then12
  %err15 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0
  %20 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err15, align 8, !tbaa !21
  %msg_code16 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %20, i64 0, i32 5
  store i32 55, i32* %msg_code16, align 8, !tbaa !22
  %arrayidx19 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %20, i64 0, i32 6, i32 0, i64 0
  store i32 8, i32* %arrayidx19, align 4, !tbaa !31
  %error_exit21 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %20, i64 0, i32 0
  %21 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit21, align 8, !tbaa !24
  tail call void %21(%struct.jpeg_common_struct* nonnull %2) #5
  br label %if.end33

if.end22:                                         ; preds = %if.then12
  %cmp23 = icmp sgt i32 %19, 256
  br i1 %cmp23, label %if.then24, label %if.end33

if.then24:                                        ; preds = %if.end22
  %err25 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0
  %22 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err25, align 8, !tbaa !21
  %msg_code26 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %22, i64 0, i32 5
  store i32 56, i32* %msg_code26, align 8, !tbaa !22
  %arrayidx30 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %22, i64 0, i32 6, i32 0, i64 0
  store i32 256, i32* %arrayidx30, align 4, !tbaa !31
  %error_exit32 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %22, i64 0, i32 0
  %23 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit32, align 8, !tbaa !24
  tail call void %23(%struct.jpeg_common_struct* nonnull %2) #5
  br label %if.end33

if.end33:                                         ; preds = %if.end22.thread, %if.then24, %if.end22
  %24 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !2
  %alloc_sarray = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %24, i64 0, i32 2
  %25 = load i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)** %alloc_sarray, align 8, !tbaa !32
  %call35 = tail call i8** %25(%struct.jpeg_common_struct* nonnull %2, i32 1, i32 %19, i32 3) #5
  %sv_colormap = getelementptr inbounds i8, i8* %call, i64 32
  %26 = bitcast i8* %sv_colormap to i8***
  store i8** %call35, i8*** %26, align 8, !tbaa !33
  %desired36 = getelementptr inbounds i8, i8* %call, i64 40
  %27 = bitcast i8* %desired36 to i32*
  store i32 %19, i32* %27, align 8, !tbaa !34
  br label %if.end38

if.else:                                          ; preds = %for.end
  %sv_colormap37 = getelementptr inbounds i8, i8* %call, i64 32
  %28 = bitcast i8* %sv_colormap37 to i8***
  store i8** null, i8*** %28, align 8, !tbaa !33
  br label %if.end38

if.end38:                                         ; preds = %if.else, %if.end33
  %dither_mode = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 20
  %29 = load i32, i32* %dither_mode, align 8, !tbaa !35
  %cmp39 = icmp eq i32 %29, 0
  br i1 %cmp39, label %if.end50, label %if.then45

if.then45:                                        ; preds = %if.end38
  store i32 2, i32* %dither_mode, align 8, !tbaa !35
  %30 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !2
  %alloc_large47 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %30, i64 0, i32 1
  %31 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_large47, align 8, !tbaa !26
  %output_width = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 26
  %32 = load i32, i32* %output_width, align 8, !tbaa !36
  %add = add i32 %32, 2
  %conv = zext i32 %add to i64
  %mul = mul nuw nsw i64 %conv, 6
  %call48 = tail call i8* %31(%struct.jpeg_common_struct* nonnull %2, i32 1, i64 %mul) #5
  %33 = bitcast i8* %fserrors to i8**
  store i8* %call48, i8** %33, align 8, !tbaa !18
  tail call fastcc void @init_error_limit(%struct.jpeg_decompress_struct* nonnull %cinfo)
  br label %if.end50

if.end50:                                         ; preds = %if.end38, %if.then45
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: nounwind uwtable
define internal void @start_pass_2_quant(%struct.jpeg_decompress_struct* %cinfo, i32 %is_pre_scan) #0 {
entry:
  %cquantize1 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 83
  %0 = bitcast %struct.jpeg_color_quantizer** %cquantize1 to %struct.my_cquantizer**
  %1 = load %struct.my_cquantizer*, %struct.my_cquantizer** %0, align 8, !tbaa !13
  %histogram2 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %1, i64 0, i32 3
  %2 = load [32 x i16]**, [32 x i16]*** %histogram2, align 8, !tbaa !25
  %dither_mode = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 20
  %3 = load i32, i32* %dither_mode, align 8, !tbaa !35
  %cmp = icmp eq i32 %3, 0
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 2, i32* %dither_mode, align 8, !tbaa !35
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %4 = phi i32 [ 0, %entry ], [ 2, %if.then ]
  %tobool = icmp eq i32 %is_pre_scan, 0
  br i1 %tobool, label %if.else, label %if.then4

if.then4:                                         ; preds = %if.end
  %color_quantize = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %1, i64 0, i32 0, i32 1
  store void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)* @prescan_quantize, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)** %color_quantize, align 8, !tbaa !37
  %finish_pass = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %1, i64 0, i32 0, i32 2
  %finish_pass6 = bitcast {}** %finish_pass to void (%struct.jpeg_decompress_struct*)**
  store void (%struct.jpeg_decompress_struct*)* @finish_pass1, void (%struct.jpeg_decompress_struct*)** %finish_pass6, align 8, !tbaa !38
  %needs_zeroed = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %1, i64 0, i32 4
  store i32 1, i32* %needs_zeroed, align 8, !tbaa !28
  br label %if.end50

if.else:                                          ; preds = %if.end
  %cmp8 = icmp eq i32 %4, 2
  %color_quantize11 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %1, i64 0, i32 0, i32 1
  %pass2_fs_dither.pass2_no_dither = select i1 %cmp8, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)* @pass2_fs_dither, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)* @pass2_no_dither
  store void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)* %pass2_fs_dither.pass2_no_dither, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)** %color_quantize11, align 8, !tbaa !37
  %finish_pass17 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %1, i64 0, i32 0, i32 2
  %finish_pass18 = bitcast {}** %finish_pass17 to void (%struct.jpeg_decompress_struct*)**
  store void (%struct.jpeg_decompress_struct*)* @finish_pass2, void (%struct.jpeg_decompress_struct*)** %finish_pass18, align 8, !tbaa !38
  %actual_number_of_colors = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 31
  %5 = load i32, i32* %actual_number_of_colors, align 4, !tbaa !39
  %cmp19 = icmp slt i32 %5, 1
  br i1 %cmp19, label %if.end24.thread, label %if.end24

if.end24.thread:                                  ; preds = %if.else
  %err = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0
  %6 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8, !tbaa !21
  %msg_code = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %6, i64 0, i32 5
  store i32 55, i32* %msg_code, align 8, !tbaa !22
  %arrayidx = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %6, i64 0, i32 6, i32 0, i64 0
  store i32 1, i32* %arrayidx, align 4, !tbaa !31
  %error_exit = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %6, i64 0, i32 0
  %7 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit, align 8, !tbaa !24
  %8 = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  tail call void %7(%struct.jpeg_common_struct* %8) #5
  br label %if.end35

if.end24:                                         ; preds = %if.else
  %cmp25 = icmp sgt i32 %5, 256
  br i1 %cmp25, label %if.then26, label %if.end35

if.then26:                                        ; preds = %if.end24
  %err27 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0
  %9 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err27, align 8, !tbaa !21
  %msg_code28 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %9, i64 0, i32 5
  store i32 56, i32* %msg_code28, align 8, !tbaa !22
  %arrayidx32 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %9, i64 0, i32 6, i32 0, i64 0
  store i32 256, i32* %arrayidx32, align 4, !tbaa !31
  %error_exit34 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %9, i64 0, i32 0
  %10 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit34, align 8, !tbaa !24
  %11 = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  tail call void %10(%struct.jpeg_common_struct* %11) #5
  br label %if.end35

if.end35:                                         ; preds = %if.end24.thread, %if.then26, %if.end24
  %12 = load i32, i32* %dither_mode, align 8, !tbaa !35
  %cmp37 = icmp eq i32 %12, 2
  br i1 %cmp37, label %if.then38, label %if.end50

if.then38:                                        ; preds = %if.end35
  %output_width = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 26
  %13 = load i32, i32* %output_width, align 8, !tbaa !36
  %add = add i32 %13, 2
  %conv = zext i32 %add to i64
  %mul = mul nuw nsw i64 %conv, 6
  %fserrors = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %1, i64 0, i32 5
  %14 = load i16*, i16** %fserrors, align 8, !tbaa !18
  %cmp39 = icmp eq i16* %14, null
  br i1 %cmp39, label %if.then41, label %if.then38.if.end43_crit_edge

if.then38.if.end43_crit_edge:                     ; preds = %if.then38
  %15 = bitcast i16* %14 to i8*
  br label %if.end43

if.then41:                                        ; preds = %if.then38
  %mem = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 1
  %16 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !2
  %alloc_large = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %16, i64 0, i32 1
  %17 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_large, align 8, !tbaa !26
  %18 = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  %call = tail call i8* %17(%struct.jpeg_common_struct* %18, i32 1, i64 %mul) #5
  %19 = bitcast i16** %fserrors to i8**
  store i8* %call, i8** %19, align 8, !tbaa !18
  br label %if.end43

if.end43:                                         ; preds = %if.then38.if.end43_crit_edge, %if.then41
  %20 = phi i8* [ %call, %if.then41 ], [ %15, %if.then38.if.end43_crit_edge ]
  tail call void @jzero_far(i8* %20, i64 %mul) #5
  %error_limiter = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %1, i64 0, i32 7
  %21 = load i32*, i32** %error_limiter, align 8, !tbaa !19
  %cmp45 = icmp eq i32* %21, null
  br i1 %cmp45, label %if.then47, label %if.end48

if.then47:                                        ; preds = %if.end43
  tail call fastcc void @init_error_limit(%struct.jpeg_decompress_struct* nonnull %cinfo)
  br label %if.end48

if.end48:                                         ; preds = %if.then47, %if.end43
  %on_odd_row = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %1, i64 0, i32 6
  store i32 0, i32* %on_odd_row, align 8, !tbaa !40
  br label %if.end50

if.end50:                                         ; preds = %if.end35, %if.end48, %if.then4
  %needs_zeroed51 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %1, i64 0, i32 4
  %22 = load i32, i32* %needs_zeroed51, align 8, !tbaa !28
  %tobool52 = icmp eq i32 %22, 0
  br i1 %tobool52, label %if.end58, label %for.body.preheader

for.body.preheader:                               ; preds = %if.end50
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %for.body.preheader ]
  %arrayidx56 = getelementptr inbounds [32 x i16]*, [32 x i16]** %2, i64 %indvars.iv
  %23 = bitcast [32 x i16]** %arrayidx56 to i8**
  %24 = load i8*, i8** %23, align 8, !tbaa !27
  tail call void @jzero_far(i8* %24, i64 4096) #5
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 32
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  store i32 0, i32* %needs_zeroed51, align 8, !tbaa !28
  br label %if.end58

if.end58:                                         ; preds = %if.end50, %for.end
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define internal void @new_color_map_2_quant(%struct.jpeg_decompress_struct* nocapture readonly %cinfo) #2 {
entry:
  %cquantize1 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 83
  %0 = bitcast %struct.jpeg_color_quantizer** %cquantize1 to %struct.my_cquantizer**
  %1 = load %struct.my_cquantizer*, %struct.my_cquantizer** %0, align 8, !tbaa !13
  %needs_zeroed = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %1, i64 0, i32 4
  store i32 1, i32* %needs_zeroed, align 8, !tbaa !28
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: nounwind uwtable
define internal fastcc void @init_error_limit(%struct.jpeg_decompress_struct* %cinfo) unnamed_addr #0 {
for.body8.preheader:
  %cquantize1 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 83
  %0 = bitcast %struct.jpeg_color_quantizer** %cquantize1 to %struct.my_cquantizer**
  %1 = load %struct.my_cquantizer*, %struct.my_cquantizer** %0, align 8, !tbaa !13
  %mem = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 1
  %2 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !2
  %alloc_small = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %2, i64 0, i32 0
  %3 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_small, align 8, !tbaa !10
  %4 = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  %call = tail call i8* %3(%struct.jpeg_common_struct* %4, i32 1, i64 2044) #5
  %add.ptr = getelementptr inbounds i8, i8* %call, i64 1020
  %5 = bitcast i8* %add.ptr to i32*
  %error_limiter = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %1, i64 0, i32 7
  %6 = bitcast i32** %error_limiter to i8**
  store i8* %add.ptr, i8** %6, align 8, !tbaa !19
  %arrayidx.1 = getelementptr inbounds i8, i8* %call, i64 1024
  %arrayidx4.3 = getelementptr inbounds i8, i8* %call, i64 1008
  %7 = bitcast i8* %arrayidx4.3 to <4 x i32>*
  store <4 x i32> <i32 -3, i32 -2, i32 -1, i32 0>, <4 x i32>* %7, align 4, !tbaa !31
  %8 = bitcast i8* %arrayidx.1 to <4 x i32>*
  store <4 x i32> <i32 1, i32 2, i32 3, i32 4>, <4 x i32>* %8, align 4, !tbaa !31
  %arrayidx.5 = getelementptr inbounds i8, i8* %call, i64 1040
  %arrayidx4.7 = getelementptr inbounds i8, i8* %call, i64 992
  %9 = bitcast i8* %arrayidx4.7 to <4 x i32>*
  store <4 x i32> <i32 -7, i32 -6, i32 -5, i32 -4>, <4 x i32>* %9, align 4, !tbaa !31
  %10 = bitcast i8* %arrayidx.5 to <4 x i32>*
  store <4 x i32> <i32 5, i32 6, i32 7, i32 8>, <4 x i32>* %10, align 4, !tbaa !31
  %arrayidx.9 = getelementptr inbounds i8, i8* %call, i64 1056
  %arrayidx4.11 = getelementptr inbounds i8, i8* %call, i64 976
  %11 = bitcast i8* %arrayidx4.11 to <4 x i32>*
  store <4 x i32> <i32 -11, i32 -10, i32 -9, i32 -8>, <4 x i32>* %11, align 4, !tbaa !31
  %12 = bitcast i8* %arrayidx.9 to <4 x i32>*
  store <4 x i32> <i32 9, i32 10, i32 11, i32 12>, <4 x i32>* %12, align 4, !tbaa !31
  %arrayidx.13 = getelementptr inbounds i8, i8* %call, i64 1072
  %13 = bitcast i8* %arrayidx.13 to i32*
  store i32 13, i32* %13, align 4, !tbaa !31
  %arrayidx.14 = getelementptr inbounds i8, i8* %call, i64 1076
  %14 = bitcast i8* %arrayidx.14 to i32*
  store i32 14, i32* %14, align 4, !tbaa !31
  %arrayidx.15 = getelementptr inbounds i8, i8* %call, i64 1080
  %15 = bitcast i8* %arrayidx.15 to i32*
  store i32 15, i32* %15, align 4, !tbaa !31
  %arrayidx4.15 = getelementptr inbounds i8, i8* %call, i64 960
  %16 = bitcast i8* %arrayidx4.15 to <4 x i32>*
  store <4 x i32> <i32 -15, i32 -14, i32 -13, i32 -12>, <4 x i32>* %16, align 4, !tbaa !31
  br label %for.body8

for.body20.lr.ph:                                 ; preds = %for.body8
  %add.1.lcssa = phi i32 [ %add.1, %for.body8 ]
  %out.166.lcssa = phi i32 [ %out.166, %for.body8 ]
  %sub23 = xor i32 %out.166.lcssa, -1
  br label %for.body20

for.body8:                                        ; preds = %for.body8, %for.body8.preheader
  %indvars.iv71 = phi i64 [ 16, %for.body8.preheader ], [ %indvars.iv.next72.1, %for.body8 ]
  %out.166 = phi i32 [ 16, %for.body8.preheader ], [ %add.1, %for.body8 ]
  %arrayidx10 = getelementptr inbounds i32, i32* %5, i64 %indvars.iv71
  store i32 %out.166, i32* %arrayidx10, align 4, !tbaa !31
  %sub11 = sub nsw i32 0, %out.166
  %17 = sub nsw i64 0, %indvars.iv71
  %arrayidx14 = getelementptr inbounds i32, i32* %5, i64 %17
  store i32 %sub11, i32* %arrayidx14, align 4, !tbaa !31
  %indvars.iv.next72 = or i64 %indvars.iv71, 1
  %arrayidx10.1 = getelementptr inbounds i32, i32* %5, i64 %indvars.iv.next72
  store i32 %out.166, i32* %arrayidx10.1, align 4, !tbaa !31
  %sub11.1 = sub nsw i32 0, %out.166
  %18 = xor i64 %indvars.iv71, -1
  %arrayidx14.1 = getelementptr inbounds i32, i32* %5, i64 %18
  store i32 %sub11.1, i32* %arrayidx14.1, align 4, !tbaa !31
  %indvars.iv.next72.1 = add nsw i64 %indvars.iv71, 2
  %19 = trunc i64 %indvars.iv.next72.1 to i32
  %add.1 = add nsw i32 %out.166, 1
  %exitcond75.1 = icmp eq i32 %19, 48
  br i1 %exitcond75.1, label %for.body20.lr.ph, label %for.body8

for.body20:                                       ; preds = %for.body20, %for.body20.lr.ph
  %indvars.iv = phi i64 [ 48, %for.body20.lr.ph ], [ %indvars.iv.next.3, %for.body20 ]
  %arrayidx22 = getelementptr inbounds i32, i32* %5, i64 %indvars.iv
  store i32 %add.1.lcssa, i32* %arrayidx22, align 4, !tbaa !31
  %20 = sub nsw i64 0, %indvars.iv
  %arrayidx26 = getelementptr inbounds i32, i32* %5, i64 %20
  store i32 %sub23, i32* %arrayidx26, align 4, !tbaa !31
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx22.1 = getelementptr inbounds i32, i32* %5, i64 %indvars.iv.next
  store i32 %add.1.lcssa, i32* %arrayidx22.1, align 4, !tbaa !31
  %21 = xor i64 %indvars.iv, -1
  %arrayidx26.1 = getelementptr inbounds i32, i32* %5, i64 %21
  store i32 %sub23, i32* %arrayidx26.1, align 4, !tbaa !31
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx22.2 = getelementptr inbounds i32, i32* %5, i64 %indvars.iv.next.1
  store i32 %add.1.lcssa, i32* %arrayidx22.2, align 4, !tbaa !31
  %22 = sub i64 -2, %indvars.iv
  %arrayidx26.2 = getelementptr inbounds i32, i32* %5, i64 %22
  store i32 %sub23, i32* %arrayidx26.2, align 4, !tbaa !31
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx22.3 = getelementptr inbounds i32, i32* %5, i64 %indvars.iv.next.2
  store i32 %add.1.lcssa, i32* %arrayidx22.3, align 4, !tbaa !31
  %23 = sub i64 -3, %indvars.iv
  %arrayidx26.3 = getelementptr inbounds i32, i32* %5, i64 %23
  store i32 %sub23, i32* %arrayidx26.3, align 4, !tbaa !31
  %indvars.iv.next.3 = add nsw i64 %indvars.iv, 4
  %lftr.wideiv.3 = trunc i64 %indvars.iv.next.3 to i32
  %exitcond.3 = icmp eq i32 %lftr.wideiv.3, 256
  br i1 %exitcond.3, label %for.end29, label %for.body20

for.end29:                                        ; preds = %for.body20
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define internal void @prescan_quantize(%struct.jpeg_decompress_struct* nocapture readonly %cinfo, i8** nocapture readonly %input_buf, i8** nocapture readnone %output_buf, i32 %num_rows) #2 {
entry:
  %cquantize1 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 83
  %0 = bitcast %struct.jpeg_color_quantizer** %cquantize1 to %struct.my_cquantizer**
  %1 = load %struct.my_cquantizer*, %struct.my_cquantizer** %0, align 8, !tbaa !13
  %histogram2 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %1, i64 0, i32 3
  %2 = load [32 x i16]**, [32 x i16]*** %histogram2, align 8, !tbaa !25
  %output_width = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 26
  %3 = load i32, i32* %output_width, align 8, !tbaa !36
  %cmp50 = icmp slt i32 %num_rows, 1
  %cmp447 = icmp eq i32 %3, 0
  %or.cond = or i1 %cmp50, %cmp447
  br i1 %or.cond, label %for.end25, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.inc23
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc23 ], [ 0, %for.body.preheader ]
  %arrayidx = getelementptr inbounds i8*, i8** %input_buf, i64 %indvars.iv
  %4 = load i8*, i8** %arrayidx, align 8, !tbaa !27
  br label %for.body5

for.body5:                                        ; preds = %for.body, %for.body5
  %ptr.049 = phi i8* [ %4, %for.body ], [ %add.ptr, %for.body5 ]
  %col.048 = phi i32 [ %3, %for.body ], [ %dec22, %for.body5 ]
  %arrayidx6 = getelementptr inbounds i8, i8* %ptr.049, i64 2
  %5 = load i8, i8* %arrayidx6, align 1, !tbaa !41
  %conv = zext i8 %5 to i64
  %shr41 = lshr i64 %conv, 3
  %arrayidx8 = getelementptr inbounds i8, i8* %ptr.049, i64 1
  %6 = load i8, i8* %arrayidx8, align 1, !tbaa !41
  %conv9 = zext i8 %6 to i64
  %shr1043 = lshr i64 %conv9, 2
  %7 = load i8, i8* %ptr.049, align 1, !tbaa !41
  %conv13 = zext i8 %7 to i64
  %shr1445 = lshr i64 %conv13, 3
  %arrayidx16 = getelementptr inbounds [32 x i16]*, [32 x i16]** %2, i64 %shr1445
  %8 = load [32 x i16]*, [32 x i16]** %arrayidx16, align 8, !tbaa !27
  %arrayidx18 = getelementptr inbounds [32 x i16], [32 x i16]* %8, i64 %shr1043, i64 %shr41
  %9 = load i16, i16* %arrayidx18, align 2, !tbaa !42
  %inc = add i16 %9, 1
  %cmp20 = icmp eq i16 %inc, 0
  %.inc = select i1 %cmp20, i16 %9, i16 %inc
  store i16 %.inc, i16* %arrayidx18, align 2, !tbaa !42
  %add.ptr = getelementptr inbounds i8, i8* %ptr.049, i64 3
  %dec22 = add i32 %col.048, -1
  %cmp4 = icmp eq i32 %dec22, 0
  br i1 %cmp4, label %for.inc23, label %for.body5

for.inc23:                                        ; preds = %for.body5
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond53 = icmp eq i32 %lftr.wideiv, %num_rows
  br i1 %exitcond53, label %for.end25.loopexit, label %for.body

for.end25.loopexit:                               ; preds = %for.inc23
  br label %for.end25

for.end25:                                        ; preds = %for.end25.loopexit, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @finish_pass1(%struct.jpeg_decompress_struct* %cinfo) #0 {
entry:
  %cquantize1 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 83
  %0 = bitcast %struct.jpeg_color_quantizer** %cquantize1 to %struct.my_cquantizer**
  %1 = load %struct.my_cquantizer*, %struct.my_cquantizer** %0, align 8, !tbaa !13
  %sv_colormap = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %1, i64 0, i32 1
  %2 = bitcast i8*** %sv_colormap to i64*
  %3 = load i64, i64* %2, align 8, !tbaa !33
  %colormap = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 32
  %4 = bitcast i8*** %colormap to i64*
  store i64 %3, i64* %4, align 8, !tbaa !43
  %desired = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %1, i64 0, i32 2
  %5 = load i32, i32* %desired, align 8, !tbaa !34
  %mem.i = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 1
  %6 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem.i, align 8, !tbaa !2
  %alloc_small.i = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %6, i64 0, i32 0
  %7 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_small.i, align 8, !tbaa !10
  %8 = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  %conv.i = sext i32 %5 to i64
  %mul.i = mul nsw i64 %conv.i, 40
  %call.i = tail call i8* %7(%struct.jpeg_common_struct* %8, i32 1, i64 %mul.i) #5
  %9 = bitcast i8* %call.i to %struct.box*
  %10 = bitcast i8* %call.i to <4 x i32>*
  store <4 x i32> <i32 0, i32 31, i32 0, i32 63>, <4 x i32>* %10, align 8, !tbaa !31
  %c2min.i = getelementptr inbounds i8, i8* %call.i, i64 16
  %11 = bitcast i8* %c2min.i to i32*
  store i32 0, i32* %11, align 8, !tbaa !44
  %c2max.i = getelementptr inbounds i8, i8* %call.i, i64 20
  %12 = bitcast i8* %c2max.i to i32*
  store i32 31, i32* %12, align 4, !tbaa !46
  tail call fastcc void @update_box(%struct.jpeg_decompress_struct* %cinfo, %struct.box* %9) #5
  %cmp11.i.i = icmp sgt i32 %5, 1
  br i1 %cmp11.i.i, label %while.body.i.i.preheader, label %for.body.lr.ph.i

while.body.i.i.preheader:                         ; preds = %entry
  %colorcount.i.i.i.prol = getelementptr inbounds i8, i8* %call.i, i64 32
  %13 = bitcast i8* %colorcount.i.i.i.prol to i64*
  %volume.i.i.i.prol = getelementptr inbounds i8, i8* %call.i, i64 24
  %14 = bitcast i8* %volume.i.i.i.prol to i64*
  %incdec.ptr.i.i.i.prol = getelementptr inbounds i8, i8* %call.i, i64 40
  %15 = bitcast i8* %incdec.ptr.i.i.i.prol to %struct.box*
  br label %while.body.i.i

while.body.i.i:                                   ; preds = %while.body.i.i.preheader, %sw.epilog.i.i
  %indvar = phi i64 [ 0, %while.body.i.i.preheader ], [ %indvar.next, %sw.epilog.i.i ]
  %indvars.iv.i.i = phi i64 [ 1, %while.body.i.i.preheader ], [ %indvars.iv.next.i.i, %sw.epilog.i.i ]
  %numboxes.addr.012.i.i = phi i32 [ 1, %while.body.i.i.preheader ], [ %inc.i.i, %sw.epilog.i.i ]
  %16 = trunc i64 %indvars.iv.i.i to i32
  %mul.i.i = shl nsw i32 %16, 1
  %cmp1.i.i = icmp sgt i32 %mul.i.i, %5
  br i1 %cmp1.i.i, label %for.body.i7.i.i.preheader, label %for.body.i.i.i.preheader

for.body.i.i.i.preheader:                         ; preds = %while.body.i.i
  %17 = and i64 %indvar, 1
  %lcmp.mod = icmp eq i64 %17, 0
  br i1 %lcmp.mod, label %for.body.i.i.i.prol, label %for.body.i.i.i.preheader.split

for.body.i.i.i.prol:                              ; preds = %for.body.i.i.i.preheader
  %18 = load i64, i64* %13, align 8, !tbaa !47
  %cmp1.i.i.i.prol = icmp sgt i64 %18, 0
  br i1 %cmp1.i.i.i.prol, label %land.lhs.true.i.i.i.prol, label %for.inc.i.i.i.prol

land.lhs.true.i.i.i.prol:                         ; preds = %for.body.i.i.i.prol
  %19 = load i64, i64* %14, align 8, !tbaa !48
  %cmp2.i.i.i.prol = icmp sgt i64 %19, 0
  %.maxc.0.i.i.i.prol = select i1 %cmp2.i.i.i.prol, i64 %18, i64 0
  %boxp.0.which.0.i.i.i.prol = select i1 %cmp2.i.i.i.prol, %struct.box* %9, %struct.box* null
  br label %for.inc.i.i.i.prol

for.inc.i.i.i.prol:                               ; preds = %land.lhs.true.i.i.i.prol, %for.body.i.i.i.prol
  %maxc.1.i.i.i.prol = phi i64 [ 0, %for.body.i.i.i.prol ], [ %.maxc.0.i.i.i.prol, %land.lhs.true.i.i.i.prol ]
  %which.1.i.i.i.prol = phi %struct.box* [ null, %for.body.i.i.i.prol ], [ %boxp.0.which.0.i.i.i.prol, %land.lhs.true.i.i.i.prol ]
  br label %for.body.i.i.i.preheader.split

for.body.i.i.i.preheader.split:                   ; preds = %for.inc.i.i.i.prol, %for.body.i.i.i.preheader
  %which.1.i.i.i.lcssa.unr = phi %struct.box* [ undef, %for.body.i.i.i.preheader ], [ %which.1.i.i.i.prol, %for.inc.i.i.i.prol ]
  %indvars.iv53.i.unr = phi i64 [ 0, %for.body.i.i.i.preheader ], [ 1, %for.inc.i.i.i.prol ]
  %which.017.i.i.i.unr = phi %struct.box* [ null, %for.body.i.i.i.preheader ], [ %which.1.i.i.i.prol, %for.inc.i.i.i.prol ]
  %maxc.016.i.i.i.unr = phi i64 [ 0, %for.body.i.i.i.preheader ], [ %maxc.1.i.i.i.prol, %for.inc.i.i.i.prol ]
  %boxp.014.i.i.i.unr = phi %struct.box* [ %9, %for.body.i.i.i.preheader ], [ %15, %for.inc.i.i.i.prol ]
  %20 = icmp eq i64 %indvar, 0
  br i1 %20, label %if.end.i.i.loopexit11, label %for.body.i.i.i.preheader.split.split

for.body.i.i.i.preheader.split.split:             ; preds = %for.body.i.i.i.preheader.split
  br label %for.body.i.i.i

for.body.i7.i.i.preheader:                        ; preds = %while.body.i.i
  %21 = add i64 %indvar, 1
  %xtraiter12 = and i64 %21, 3
  %lcmp.mod13 = icmp eq i64 %xtraiter12, 0
  br i1 %lcmp.mod13, label %for.body.i7.i.i.preheader.split, label %for.body.i7.i.i.prol.preheader

for.body.i7.i.i.prol.preheader:                   ; preds = %for.body.i7.i.i.preheader
  br label %for.body.i7.i.i.prol

for.body.i7.i.i.prol:                             ; preds = %for.body.i7.i.i.prol, %for.body.i7.i.i.prol.preheader
  %indvars.iv55.i.prol = phi i64 [ %indvars.iv.next56.i.prol, %for.body.i7.i.i.prol ], [ 0, %for.body.i7.i.i.prol.preheader ]
  %which.015.i.i.i.prol = phi %struct.box* [ %boxp.0.which.0.i3.i.i.prol, %for.body.i7.i.i.prol ], [ null, %for.body.i7.i.i.prol.preheader ]
  %maxv.014.i.i.i.prol = phi i64 [ %.maxv.0.i.i.i.prol, %for.body.i7.i.i.prol ], [ 0, %for.body.i7.i.i.prol.preheader ]
  %boxp.012.i.i.i.prol = phi %struct.box* [ %incdec.ptr.i5.i.i.prol, %for.body.i7.i.i.prol ], [ %9, %for.body.i7.i.i.prol.preheader ]
  %prol.iter = phi i64 [ %prol.iter.sub, %for.body.i7.i.i.prol ], [ %xtraiter12, %for.body.i7.i.i.prol.preheader ]
  %volume.i1.i.i.prol = getelementptr inbounds %struct.box, %struct.box* %boxp.012.i.i.i.prol, i64 0, i32 6
  %22 = load i64, i64* %volume.i1.i.i.prol, align 8, !tbaa !48
  %cmp1.i2.i.i.prol = icmp sgt i64 %22, %maxv.014.i.i.i.prol
  %.maxv.0.i.i.i.prol = select i1 %cmp1.i2.i.i.prol, i64 %22, i64 %maxv.014.i.i.i.prol
  %boxp.0.which.0.i3.i.i.prol = select i1 %cmp1.i2.i.i.prol, %struct.box* %boxp.012.i.i.i.prol, %struct.box* %which.015.i.i.i.prol
  %indvars.iv.next56.i.prol = add nuw nsw i64 %indvars.iv55.i.prol, 1
  %incdec.ptr.i5.i.i.prol = getelementptr inbounds %struct.box, %struct.box* %boxp.012.i.i.i.prol, i64 1
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %for.body.i7.i.i.preheader.split.loopexit, label %for.body.i7.i.i.prol, !llvm.loop !49

for.body.i7.i.i.preheader.split.loopexit:         ; preds = %for.body.i7.i.i.prol
  %incdec.ptr.i5.i.i.prol.lcssa = phi %struct.box* [ %incdec.ptr.i5.i.i.prol, %for.body.i7.i.i.prol ]
  %indvars.iv.next56.i.prol.lcssa = phi i64 [ %indvars.iv.next56.i.prol, %for.body.i7.i.i.prol ]
  %boxp.0.which.0.i3.i.i.prol.lcssa = phi %struct.box* [ %boxp.0.which.0.i3.i.i.prol, %for.body.i7.i.i.prol ]
  %.maxv.0.i.i.i.prol.lcssa = phi i64 [ %.maxv.0.i.i.i.prol, %for.body.i7.i.i.prol ]
  br label %for.body.i7.i.i.preheader.split

for.body.i7.i.i.preheader.split:                  ; preds = %for.body.i7.i.i.preheader, %for.body.i7.i.i.preheader.split.loopexit
  %boxp.0.which.0.i3.i.i.lcssa.unr = phi %struct.box* [ undef, %for.body.i7.i.i.preheader ], [ %boxp.0.which.0.i3.i.i.prol.lcssa, %for.body.i7.i.i.preheader.split.loopexit ]
  %indvars.iv55.i.unr = phi i64 [ 0, %for.body.i7.i.i.preheader ], [ %indvars.iv.next56.i.prol.lcssa, %for.body.i7.i.i.preheader.split.loopexit ]
  %which.015.i.i.i.unr = phi %struct.box* [ null, %for.body.i7.i.i.preheader ], [ %boxp.0.which.0.i3.i.i.prol.lcssa, %for.body.i7.i.i.preheader.split.loopexit ]
  %maxv.014.i.i.i.unr = phi i64 [ 0, %for.body.i7.i.i.preheader ], [ %.maxv.0.i.i.i.prol.lcssa, %for.body.i7.i.i.preheader.split.loopexit ]
  %boxp.012.i.i.i.unr = phi %struct.box* [ %9, %for.body.i7.i.i.preheader ], [ %incdec.ptr.i5.i.i.prol.lcssa, %for.body.i7.i.i.preheader.split.loopexit ]
  %23 = icmp ult i64 %indvar, 3
  br i1 %23, label %if.end.i.i.loopexit, label %for.body.i7.i.i.preheader.split.split

for.body.i7.i.i.preheader.split.split:            ; preds = %for.body.i7.i.i.preheader.split
  br label %for.body.i7.i.i

for.body.i.i.i:                                   ; preds = %for.inc.i.i.i.1, %for.body.i.i.i.preheader.split.split
  %indvars.iv53.i = phi i64 [ %indvars.iv53.i.unr, %for.body.i.i.i.preheader.split.split ], [ %indvars.iv.next54.i.1, %for.inc.i.i.i.1 ]
  %which.017.i.i.i = phi %struct.box* [ %which.017.i.i.i.unr, %for.body.i.i.i.preheader.split.split ], [ %which.1.i.i.i.1, %for.inc.i.i.i.1 ]
  %maxc.016.i.i.i = phi i64 [ %maxc.016.i.i.i.unr, %for.body.i.i.i.preheader.split.split ], [ %maxc.1.i.i.i.1, %for.inc.i.i.i.1 ]
  %boxp.014.i.i.i = phi %struct.box* [ %boxp.014.i.i.i.unr, %for.body.i.i.i.preheader.split.split ], [ %incdec.ptr.i.i.i.1, %for.inc.i.i.i.1 ]
  %colorcount.i.i.i = getelementptr inbounds %struct.box, %struct.box* %boxp.014.i.i.i, i64 0, i32 7
  %24 = load i64, i64* %colorcount.i.i.i, align 8, !tbaa !47
  %cmp1.i.i.i = icmp sgt i64 %24, %maxc.016.i.i.i
  br i1 %cmp1.i.i.i, label %land.lhs.true.i.i.i, label %for.inc.i.i.i

land.lhs.true.i.i.i:                              ; preds = %for.body.i.i.i
  %volume.i.i.i = getelementptr inbounds %struct.box, %struct.box* %boxp.014.i.i.i, i64 0, i32 6
  %25 = load i64, i64* %volume.i.i.i, align 8, !tbaa !48
  %cmp2.i.i.i = icmp sgt i64 %25, 0
  %.maxc.0.i.i.i = select i1 %cmp2.i.i.i, i64 %24, i64 %maxc.016.i.i.i
  %boxp.0.which.0.i.i.i = select i1 %cmp2.i.i.i, %struct.box* %boxp.014.i.i.i, %struct.box* %which.017.i.i.i
  br label %for.inc.i.i.i

for.inc.i.i.i:                                    ; preds = %land.lhs.true.i.i.i, %for.body.i.i.i
  %maxc.1.i.i.i = phi i64 [ %maxc.016.i.i.i, %for.body.i.i.i ], [ %.maxc.0.i.i.i, %land.lhs.true.i.i.i ]
  %which.1.i.i.i = phi %struct.box* [ %which.017.i.i.i, %for.body.i.i.i ], [ %boxp.0.which.0.i.i.i, %land.lhs.true.i.i.i ]
  %colorcount.i.i.i.1 = getelementptr inbounds %struct.box, %struct.box* %boxp.014.i.i.i, i64 1, i32 7
  %26 = load i64, i64* %colorcount.i.i.i.1, align 8, !tbaa !47
  %cmp1.i.i.i.1 = icmp sgt i64 %26, %maxc.1.i.i.i
  br i1 %cmp1.i.i.i.1, label %land.lhs.true.i.i.i.1, label %for.inc.i.i.i.1

for.body.i7.i.i:                                  ; preds = %for.body.i7.i.i, %for.body.i7.i.i.preheader.split.split
  %indvars.iv55.i = phi i64 [ %indvars.iv55.i.unr, %for.body.i7.i.i.preheader.split.split ], [ %indvars.iv.next56.i.3, %for.body.i7.i.i ]
  %which.015.i.i.i = phi %struct.box* [ %which.015.i.i.i.unr, %for.body.i7.i.i.preheader.split.split ], [ %boxp.0.which.0.i3.i.i.3, %for.body.i7.i.i ]
  %maxv.014.i.i.i = phi i64 [ %maxv.014.i.i.i.unr, %for.body.i7.i.i.preheader.split.split ], [ %.maxv.0.i.i.i.3, %for.body.i7.i.i ]
  %boxp.012.i.i.i = phi %struct.box* [ %boxp.012.i.i.i.unr, %for.body.i7.i.i.preheader.split.split ], [ %incdec.ptr.i5.i.i.3, %for.body.i7.i.i ]
  %volume.i1.i.i = getelementptr inbounds %struct.box, %struct.box* %boxp.012.i.i.i, i64 0, i32 6
  %27 = load i64, i64* %volume.i1.i.i, align 8, !tbaa !48
  %cmp1.i2.i.i = icmp sgt i64 %27, %maxv.014.i.i.i
  %.maxv.0.i.i.i = select i1 %cmp1.i2.i.i, i64 %27, i64 %maxv.014.i.i.i
  %boxp.0.which.0.i3.i.i = select i1 %cmp1.i2.i.i, %struct.box* %boxp.012.i.i.i, %struct.box* %which.015.i.i.i
  %incdec.ptr.i5.i.i = getelementptr inbounds %struct.box, %struct.box* %boxp.012.i.i.i, i64 1
  %volume.i1.i.i.1 = getelementptr inbounds %struct.box, %struct.box* %boxp.012.i.i.i, i64 1, i32 6
  %28 = load i64, i64* %volume.i1.i.i.1, align 8, !tbaa !48
  %cmp1.i2.i.i.1 = icmp sgt i64 %28, %.maxv.0.i.i.i
  %.maxv.0.i.i.i.1 = select i1 %cmp1.i2.i.i.1, i64 %28, i64 %.maxv.0.i.i.i
  %boxp.0.which.0.i3.i.i.1 = select i1 %cmp1.i2.i.i.1, %struct.box* %incdec.ptr.i5.i.i, %struct.box* %boxp.0.which.0.i3.i.i
  %incdec.ptr.i5.i.i.1 = getelementptr inbounds %struct.box, %struct.box* %boxp.012.i.i.i, i64 2
  %volume.i1.i.i.2 = getelementptr inbounds %struct.box, %struct.box* %boxp.012.i.i.i, i64 2, i32 6
  %29 = load i64, i64* %volume.i1.i.i.2, align 8, !tbaa !48
  %cmp1.i2.i.i.2 = icmp sgt i64 %29, %.maxv.0.i.i.i.1
  %.maxv.0.i.i.i.2 = select i1 %cmp1.i2.i.i.2, i64 %29, i64 %.maxv.0.i.i.i.1
  %boxp.0.which.0.i3.i.i.2 = select i1 %cmp1.i2.i.i.2, %struct.box* %incdec.ptr.i5.i.i.1, %struct.box* %boxp.0.which.0.i3.i.i.1
  %incdec.ptr.i5.i.i.2 = getelementptr inbounds %struct.box, %struct.box* %boxp.012.i.i.i, i64 3
  %volume.i1.i.i.3 = getelementptr inbounds %struct.box, %struct.box* %boxp.012.i.i.i, i64 3, i32 6
  %30 = load i64, i64* %volume.i1.i.i.3, align 8, !tbaa !48
  %cmp1.i2.i.i.3 = icmp sgt i64 %30, %.maxv.0.i.i.i.2
  %.maxv.0.i.i.i.3 = select i1 %cmp1.i2.i.i.3, i64 %30, i64 %.maxv.0.i.i.i.2
  %boxp.0.which.0.i3.i.i.3 = select i1 %cmp1.i2.i.i.3, %struct.box* %incdec.ptr.i5.i.i.2, %struct.box* %boxp.0.which.0.i3.i.i.2
  %indvars.iv.next56.i.3 = add nsw i64 %indvars.iv55.i, 4
  %incdec.ptr.i5.i.i.3 = getelementptr inbounds %struct.box, %struct.box* %boxp.012.i.i.i, i64 4
  %exitcond.i6.i.i.3 = icmp eq i64 %indvars.iv.next56.i.3, %indvars.iv.i.i
  br i1 %exitcond.i6.i.i.3, label %if.end.i.i.loopexit.unr-lcssa, label %for.body.i7.i.i

if.end.i.i.loopexit.unr-lcssa:                    ; preds = %for.body.i7.i.i
  %boxp.0.which.0.i3.i.i.3.lcssa = phi %struct.box* [ %boxp.0.which.0.i3.i.i.3, %for.body.i7.i.i ]
  br label %if.end.i.i.loopexit

if.end.i.i.loopexit:                              ; preds = %for.body.i7.i.i.preheader.split, %if.end.i.i.loopexit.unr-lcssa
  %boxp.0.which.0.i3.i.i.lcssa = phi %struct.box* [ %boxp.0.which.0.i3.i.i.lcssa.unr, %for.body.i7.i.i.preheader.split ], [ %boxp.0.which.0.i3.i.i.3.lcssa, %if.end.i.i.loopexit.unr-lcssa ]
  br label %if.end.i.i

if.end.i.i.loopexit11.unr-lcssa:                  ; preds = %for.inc.i.i.i.1
  %which.1.i.i.i.1.lcssa = phi %struct.box* [ %which.1.i.i.i.1, %for.inc.i.i.i.1 ]
  br label %if.end.i.i.loopexit11

if.end.i.i.loopexit11:                            ; preds = %for.body.i.i.i.preheader.split, %if.end.i.i.loopexit11.unr-lcssa
  %which.1.i.i.i.lcssa = phi %struct.box* [ %which.1.i.i.i.lcssa.unr, %for.body.i.i.i.preheader.split ], [ %which.1.i.i.i.1.lcssa, %if.end.i.i.loopexit11.unr-lcssa ]
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.end.i.i.loopexit11, %if.end.i.i.loopexit
  %b1.0.i.i = phi %struct.box* [ %boxp.0.which.0.i3.i.i.lcssa, %if.end.i.i.loopexit ], [ %which.1.i.i.i.lcssa, %if.end.i.i.loopexit11 ]
  %cmp3.i.i = icmp eq %struct.box* %b1.0.i.i, null
  br i1 %cmp3.i.i, label %median_cut.exit.i, label %if.end5.i.i

if.end5.i.i:                                      ; preds = %if.end.i.i
  %arrayidx.i.i = getelementptr inbounds %struct.box, %struct.box* %9, i64 %indvars.iv.i.i
  %c0max.i.i = getelementptr inbounds %struct.box, %struct.box* %b1.0.i.i, i64 0, i32 1
  %31 = load i32, i32* %c0max.i.i, align 4, !tbaa !51
  %c0max6.i.i = getelementptr inbounds %struct.box, %struct.box* %9, i64 %indvars.iv.i.i, i32 1
  store i32 %31, i32* %c0max6.i.i, align 4, !tbaa !51
  %c1max.i.i = getelementptr inbounds %struct.box, %struct.box* %b1.0.i.i, i64 0, i32 3
  %32 = load i32, i32* %c1max.i.i, align 4, !tbaa !52
  %c1max7.i.i = getelementptr inbounds %struct.box, %struct.box* %9, i64 %indvars.iv.i.i, i32 3
  store i32 %32, i32* %c1max7.i.i, align 4, !tbaa !52
  %c2max.i.i = getelementptr inbounds %struct.box, %struct.box* %b1.0.i.i, i64 0, i32 5
  %33 = load i32, i32* %c2max.i.i, align 4, !tbaa !46
  %c2max8.i.i = getelementptr inbounds %struct.box, %struct.box* %9, i64 %indvars.iv.i.i, i32 5
  store i32 %33, i32* %c2max8.i.i, align 4, !tbaa !46
  %c0min.i.i = getelementptr inbounds %struct.box, %struct.box* %b1.0.i.i, i64 0, i32 0
  %34 = bitcast %struct.box* %b1.0.i.i to i64*
  %35 = load i64, i64* %34, align 8
  %36 = trunc i64 %35 to i32
  %c0min9.i.i = getelementptr inbounds %struct.box, %struct.box* %arrayidx.i.i, i64 0, i32 0
  store i32 %36, i32* %c0min9.i.i, align 8, !tbaa !53
  %c1min.i.i = getelementptr inbounds %struct.box, %struct.box* %b1.0.i.i, i64 0, i32 2
  %37 = bitcast i32* %c1min.i.i to i64*
  %38 = load i64, i64* %37, align 8
  %39 = trunc i64 %38 to i32
  %c1min10.i.i = getelementptr inbounds %struct.box, %struct.box* %9, i64 %indvars.iv.i.i, i32 2
  store i32 %39, i32* %c1min10.i.i, align 8, !tbaa !54
  %c2min.i.i = getelementptr inbounds %struct.box, %struct.box* %b1.0.i.i, i64 0, i32 4
  %40 = bitcast i32* %c2min.i.i to i64*
  %41 = load i64, i64* %40, align 8
  %42 = trunc i64 %41 to i32
  %c2min11.i.i = getelementptr inbounds %struct.box, %struct.box* %9, i64 %indvars.iv.i.i, i32 4
  store i32 %42, i32* %c2min11.i.i, align 8, !tbaa !44
  %43 = lshr i64 %35, 32
  %44 = trunc i64 %43 to i32
  %45 = load i32, i32* %c0min.i.i, align 8, !tbaa !53
  %sub.i.i = sub nsw i32 %44, %45
  %mul14.i.i = shl i32 %sub.i.i, 4
  %46 = lshr i64 %38, 32
  %47 = trunc i64 %46 to i32
  %48 = load i32, i32* %c1min.i.i, align 8, !tbaa !54
  %sub17.i.i = sub nsw i32 %47, %48
  %mul19.i.i = mul i32 %sub17.i.i, 12
  %49 = lshr i64 %41, 32
  %50 = trunc i64 %49 to i32
  %51 = load i32, i32* %c2min.i.i, align 8, !tbaa !44
  %sub22.i.i = sub nsw i32 %50, %51
  %shl23.i.i = shl i32 %sub22.i.i, 3
  %cmp25.i.i = icmp sgt i32 %mul14.i.i, %mul19.i.i
  %52 = zext i1 %cmp25.i.i to i32
  %..i.i = xor i32 %52, 1
  %mul14.mul19.i.i = select i1 %cmp25.i.i, i32 %mul14.i.i, i32 %mul19.i.i
  %cmp28.i.i = icmp sgt i32 %shl23.i.i, %mul14.mul19.i.i
  %n.1.i.i = select i1 %cmp28.i.i, i32 2, i32 %..i.i
  switch i32 %n.1.i.i, label %sw.epilog.i.i [
    i32 0, label %sw.bb.i.i
    i32 1, label %sw.bb36.i.i
    i32 2, label %sw.bb44.i.i
  ]

sw.bb.i.i:                                        ; preds = %if.end5.i.i
  %add.i.i = add nsw i32 %45, %44
  %div.i.i = sdiv i32 %add.i.i, 2
  store i32 %div.i.i, i32* %c0max.i.i, align 4, !tbaa !51
  %add34.i.i = add nsw i32 %div.i.i, 1
  store i32 %add34.i.i, i32* %c0min9.i.i, align 8, !tbaa !53
  br label %sw.epilog.i.i

sw.bb36.i.i:                                      ; preds = %if.end5.i.i
  %add39.i.i = add nsw i32 %48, %47
  %div40.i.i = sdiv i32 %add39.i.i, 2
  store i32 %div40.i.i, i32* %c1max.i.i, align 4, !tbaa !52
  %add42.i.i = add nsw i32 %div40.i.i, 1
  store i32 %add42.i.i, i32* %c1min10.i.i, align 8, !tbaa !54
  br label %sw.epilog.i.i

sw.bb44.i.i:                                      ; preds = %if.end5.i.i
  %add47.i.i = add nsw i32 %51, %50
  %div48.i.i = sdiv i32 %add47.i.i, 2
  store i32 %div48.i.i, i32* %c2max.i.i, align 4, !tbaa !46
  %add50.i.i = add nsw i32 %div48.i.i, 1
  store i32 %add50.i.i, i32* %c2min11.i.i, align 8, !tbaa !44
  br label %sw.epilog.i.i

sw.epilog.i.i:                                    ; preds = %sw.bb44.i.i, %sw.bb36.i.i, %sw.bb.i.i, %if.end5.i.i
  tail call fastcc void @update_box(%struct.jpeg_decompress_struct* %cinfo, %struct.box* nonnull %b1.0.i.i) #5
  tail call fastcc void @update_box(%struct.jpeg_decompress_struct* %cinfo, %struct.box* %arrayidx.i.i) #5
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %inc.i.i = add nuw nsw i32 %numboxes.addr.012.i.i, 1
  %cmp.i.i = icmp slt i64 %indvars.iv.next.i.i, %conv.i
  %indvar.next = add i64 %indvar, 1
  br i1 %cmp.i.i, label %while.body.i.i, label %median_cut.exit.i

median_cut.exit.i:                                ; preds = %sw.epilog.i.i, %if.end.i.i
  %numboxes.addr.0.lcssa.i.i = phi i32 [ %16, %if.end.i.i ], [ %inc.i.i, %sw.epilog.i.i ]
  %cmp49.i = icmp sgt i32 %numboxes.addr.0.lcssa.i.i, 0
  br i1 %cmp49.i, label %for.body.lr.ph.i, label %select_colors.exit

for.body.lr.ph.i:                                 ; preds = %median_cut.exit.i, %entry
  %numboxes.addr.0.lcssa.i59.i = phi i32 [ %numboxes.addr.0.lcssa.i.i, %median_cut.exit.i ], [ 1, %entry ]
  br label %for.body.i

for.body.i:                                       ; preds = %compute_color.exit.i, %for.body.lr.ph.i
  %indvars.iv.i = phi i64 [ 0, %for.body.lr.ph.i ], [ %indvars.iv.next.i, %compute_color.exit.i ]
  %arrayidx9.i = getelementptr inbounds %struct.box, %struct.box* %9, i64 %indvars.iv.i
  %53 = load %struct.my_cquantizer*, %struct.my_cquantizer** %0, align 8, !tbaa !13
  %histogram2.i.i = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %53, i64 0, i32 3
  %54 = load [32 x i16]**, [32 x i16]*** %histogram2.i.i, align 8, !tbaa !25
  %55 = bitcast %struct.box* %arrayidx9.i to i64*
  %56 = load i64, i64* %55, align 8
  %57 = trunc i64 %56 to i32
  %58 = lshr i64 %56, 32
  %59 = trunc i64 %58 to i32
  %c1min5.i.i = getelementptr inbounds %struct.box, %struct.box* %9, i64 %indvars.iv.i, i32 2
  %60 = bitcast i32* %c1min5.i.i to i64*
  %61 = load i64, i64* %60, align 8
  %c2min7.i.i = getelementptr inbounds %struct.box, %struct.box* %9, i64 %indvars.iv.i, i32 4
  %62 = bitcast i32* %c2min7.i.i to i64*
  %63 = load i64, i64* %62, align 8
  %cmp129.i.i = icmp sgt i32 %57, %59
  br i1 %cmp129.i.i, label %compute_color.exit.i, label %for.cond9.preheader.lr.ph.i.i

for.cond9.preheader.lr.ph.i.i:                    ; preds = %for.body.i
  %64 = lshr i64 %61, 32
  %65 = trunc i64 %64 to i32
  %66 = trunc i64 %61 to i32
  %cmp10119.i.i = icmp sgt i32 %66, %65
  %sext.i.i = shl i64 %63, 32
  %idxprom.i.i = ashr exact i64 %sext.i.i, 32
  br i1 %cmp10119.i.i, label %compute_color.exit.i, label %for.body11.lr.ph.preheader.i.i

for.body11.lr.ph.preheader.i.i:                   ; preds = %for.cond9.preheader.lr.ph.i.i
  %67 = trunc i64 %63 to i32
  %68 = lshr i64 %63, 32
  %69 = trunc i64 %68 to i32
  %cmp17109.i.i = icmp sgt i32 %67, %69
  %70 = ashr i64 %63, 32
  %sext204.i.i = shl i64 %61, 32
  %71 = ashr exact i64 %sext204.i.i, 32
  %72 = ashr i64 %61, 32
  %73 = ashr i64 %56, 32
  br i1 %cmp17109.i.i, label %compute_color.exit.i, label %for.body11.lr.ph.i.preheader.i

for.body11.lr.ph.i.preheader.i:                   ; preds = %for.body11.lr.ph.preheader.i.i
  %sext206.i.i = shl i64 %56, 32
  %74 = ashr exact i64 %sext206.i.i, 32
  br label %for.body11.lr.ph.i.i

for.body11.lr.ph.i.i:                             ; preds = %for.inc37.i.i, %for.body11.lr.ph.i.preheader.i
  %indvars.iv201.i.i = phi i64 [ %indvars.iv.next202.i.i, %for.inc37.i.i ], [ %74, %for.body11.lr.ph.i.preheader.i ]
  %c2total.0134.i.i = phi i64 [ %c2total.3.i.i.lcssa.lcssa, %for.inc37.i.i ], [ 0, %for.body11.lr.ph.i.preheader.i ]
  %c1total.0133.i.i = phi i64 [ %c1total.3.i.i.lcssa.lcssa, %for.inc37.i.i ], [ 0, %for.body11.lr.ph.i.preheader.i ]
  %c0total.0132.i.i = phi i64 [ %c0total.3.i.i.lcssa.lcssa, %for.inc37.i.i ], [ 0, %for.body11.lr.ph.i.preheader.i ]
  %total.0131.i.i = phi i64 [ %total.3.i.i.lcssa.lcssa, %for.inc37.i.i ], [ 0, %for.body11.lr.ph.i.preheader.i ]
  %arrayidx.i41.i = getelementptr inbounds [32 x i16]*, [32 x i16]** %54, i64 %indvars.iv201.i.i
  %75 = load [32 x i16]*, [32 x i16]** %arrayidx.i41.i, align 8
  %76 = trunc i64 %indvars.iv201.i.i to i32
  %shl.i.i = shl i32 %76, 3
  %add21.i.i = or i32 %shl.i.i, 4
  %conv22.i.i = sext i32 %add21.i.i to i64
  br label %for.body11.i.i

for.body11.i.i:                                   ; preds = %for.inc34.i.i, %for.body11.lr.ph.i.i
  %indvars.iv199.i.i = phi i64 [ %indvars.iv.next200.i.i, %for.inc34.i.i ], [ %71, %for.body11.lr.ph.i.i ]
  %c2total.1124.i.i = phi i64 [ %c2total.3.i.i.lcssa, %for.inc34.i.i ], [ %c2total.0134.i.i, %for.body11.lr.ph.i.i ]
  %c1total.1123.i.i = phi i64 [ %c1total.3.i.i.lcssa, %for.inc34.i.i ], [ %c1total.0133.i.i, %for.body11.lr.ph.i.i ]
  %c0total.1122.i.i = phi i64 [ %c0total.3.i.i.lcssa, %for.inc34.i.i ], [ %c0total.0132.i.i, %for.body11.lr.ph.i.i ]
  %total.1121.i.i = phi i64 [ %total.3.i.i.lcssa, %for.inc34.i.i ], [ %total.0131.i.i, %for.body11.lr.ph.i.i ]
  %arrayidx15.i.i = getelementptr inbounds [32 x i16], [32 x i16]* %75, i64 %indvars.iv199.i.i, i64 %idxprom.i.i
  %77 = trunc i64 %indvars.iv199.i.i to i32
  %shl24.i.i = shl i32 %77, 2
  %add25.i.i = or i32 %shl24.i.i, 2
  %conv26.i.i = sext i32 %add25.i.i to i64
  br label %for.body18.i.i

for.body18.i.i:                                   ; preds = %for.inc.i.i, %for.body11.i.i
  %indvars.iv.i42.i = phi i64 [ %indvars.iv.next.i45.i, %for.inc.i.i ], [ %idxprom.i.i, %for.body11.i.i ]
  %c2total.2115.i.i = phi i64 [ %c2total.3.i.i, %for.inc.i.i ], [ %c2total.1124.i.i, %for.body11.i.i ]
  %c1total.2114.i.i = phi i64 [ %c1total.3.i.i, %for.inc.i.i ], [ %c1total.1123.i.i, %for.body11.i.i ]
  %c0total.2113.i.i = phi i64 [ %c0total.3.i.i, %for.inc.i.i ], [ %c0total.1122.i.i, %for.body11.i.i ]
  %total.2112.i.i = phi i64 [ %total.3.i.i, %for.inc.i.i ], [ %total.1121.i.i, %for.body11.i.i ]
  %histp.0111.i.i = phi i16* [ %incdec.ptr.i.i, %for.inc.i.i ], [ %arrayidx15.i.i, %for.body11.i.i ]
  %incdec.ptr.i.i = getelementptr inbounds i16, i16* %histp.0111.i.i, i64 1
  %78 = load i16, i16* %histp.0111.i.i, align 2, !tbaa !42
  %conv.i.i = zext i16 %78 to i64
  %cmp19.i.i = icmp eq i16 %78, 0
  br i1 %cmp19.i.i, label %for.inc.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %for.body18.i.i
  %add.i43.i = add nsw i64 %conv.i.i, %total.2112.i.i
  %mul.i44.i = mul nsw i64 %conv.i.i, %conv22.i.i
  %add23.i.i = add nsw i64 %mul.i44.i, %c0total.2113.i.i
  %mul27.i.i = mul nsw i64 %conv.i.i, %conv26.i.i
  %add28.i.i = add nsw i64 %mul27.i.i, %c1total.2114.i.i
  %79 = trunc i64 %indvars.iv.i42.i to i32
  %shl29.i.i = shl i32 %79, 3
  %add30.i.i = or i32 %shl29.i.i, 4
  %conv31.i.i = sext i32 %add30.i.i to i64
  %mul32.i.i = mul nsw i64 %conv.i.i, %conv31.i.i
  %add33.i.i = add nsw i64 %mul32.i.i, %c2total.2115.i.i
  br label %for.inc.i.i

for.inc.i.i:                                      ; preds = %if.then.i.i, %for.body18.i.i
  %total.3.i.i = phi i64 [ %add.i43.i, %if.then.i.i ], [ %total.2112.i.i, %for.body18.i.i ]
  %c0total.3.i.i = phi i64 [ %add23.i.i, %if.then.i.i ], [ %c0total.2113.i.i, %for.body18.i.i ]
  %c1total.3.i.i = phi i64 [ %add28.i.i, %if.then.i.i ], [ %c1total.2114.i.i, %for.body18.i.i ]
  %c2total.3.i.i = phi i64 [ %add33.i.i, %if.then.i.i ], [ %c2total.2115.i.i, %for.body18.i.i ]
  %cmp17.i.i = icmp slt i64 %indvars.iv.i42.i, %70
  %indvars.iv.next.i45.i = add nsw i64 %indvars.iv.i42.i, 1
  br i1 %cmp17.i.i, label %for.body18.i.i, label %for.inc34.i.i

for.inc34.i.i:                                    ; preds = %for.inc.i.i
  %c2total.3.i.i.lcssa = phi i64 [ %c2total.3.i.i, %for.inc.i.i ]
  %c1total.3.i.i.lcssa = phi i64 [ %c1total.3.i.i, %for.inc.i.i ]
  %c0total.3.i.i.lcssa = phi i64 [ %c0total.3.i.i, %for.inc.i.i ]
  %total.3.i.i.lcssa = phi i64 [ %total.3.i.i, %for.inc.i.i ]
  %cmp10.i.i = icmp slt i64 %indvars.iv199.i.i, %72
  %indvars.iv.next200.i.i = add nsw i64 %indvars.iv199.i.i, 1
  br i1 %cmp10.i.i, label %for.body11.i.i, label %for.inc37.i.i

for.inc37.i.i:                                    ; preds = %for.inc34.i.i
  %c2total.3.i.i.lcssa.lcssa = phi i64 [ %c2total.3.i.i.lcssa, %for.inc34.i.i ]
  %c1total.3.i.i.lcssa.lcssa = phi i64 [ %c1total.3.i.i.lcssa, %for.inc34.i.i ]
  %c0total.3.i.i.lcssa.lcssa = phi i64 [ %c0total.3.i.i.lcssa, %for.inc34.i.i ]
  %total.3.i.i.lcssa.lcssa = phi i64 [ %total.3.i.i.lcssa, %for.inc34.i.i ]
  %cmp.i46.i = icmp slt i64 %indvars.iv201.i.i, %73
  %indvars.iv.next202.i.i = add nsw i64 %indvars.iv201.i.i, 1
  br i1 %cmp.i46.i, label %for.body11.lr.ph.i.i, label %compute_color.exit.i.loopexit

compute_color.exit.i.loopexit:                    ; preds = %for.inc37.i.i
  %c2total.3.i.i.lcssa.lcssa.lcssa = phi i64 [ %c2total.3.i.i.lcssa.lcssa, %for.inc37.i.i ]
  %c1total.3.i.i.lcssa.lcssa.lcssa = phi i64 [ %c1total.3.i.i.lcssa.lcssa, %for.inc37.i.i ]
  %c0total.3.i.i.lcssa.lcssa.lcssa = phi i64 [ %c0total.3.i.i.lcssa.lcssa, %for.inc37.i.i ]
  %total.3.i.i.lcssa.lcssa.lcssa = phi i64 [ %total.3.i.i.lcssa.lcssa, %for.inc37.i.i ]
  br label %compute_color.exit.i

compute_color.exit.i:                             ; preds = %compute_color.exit.i.loopexit, %for.body11.lr.ph.preheader.i.i, %for.cond9.preheader.lr.ph.i.i, %for.body.i
  %c2total.0.lcssa.i.i = phi i64 [ 0, %for.body.i ], [ 0, %for.cond9.preheader.lr.ph.i.i ], [ 0, %for.body11.lr.ph.preheader.i.i ], [ %c2total.3.i.i.lcssa.lcssa.lcssa, %compute_color.exit.i.loopexit ]
  %c1total.0.lcssa.i.i = phi i64 [ 0, %for.body.i ], [ 0, %for.cond9.preheader.lr.ph.i.i ], [ 0, %for.body11.lr.ph.preheader.i.i ], [ %c1total.3.i.i.lcssa.lcssa.lcssa, %compute_color.exit.i.loopexit ]
  %c0total.0.lcssa.i.i = phi i64 [ 0, %for.body.i ], [ 0, %for.cond9.preheader.lr.ph.i.i ], [ 0, %for.body11.lr.ph.preheader.i.i ], [ %c0total.3.i.i.lcssa.lcssa.lcssa, %compute_color.exit.i.loopexit ]
  %total.0.lcssa.i.i = phi i64 [ 0, %for.body.i ], [ 0, %for.cond9.preheader.lr.ph.i.i ], [ 0, %for.body11.lr.ph.preheader.i.i ], [ %total.3.i.i.lcssa.lcssa.lcssa, %compute_color.exit.i.loopexit ]
  %shr.i.i = ashr i64 %total.0.lcssa.i.i, 1
  %add40.i.i = add nsw i64 %shr.i.i, %c0total.0.lcssa.i.i
  %div.i47.i = sdiv i64 %add40.i.i, %total.0.lcssa.i.i
  %conv41.i.i = trunc i64 %div.i47.i to i8
  %80 = load i8**, i8*** %colormap, align 8, !tbaa !43
  %81 = load i8*, i8** %80, align 8, !tbaa !27
  %arrayidx44.i.i = getelementptr inbounds i8, i8* %81, i64 %indvars.iv.i
  store i8 %conv41.i.i, i8* %arrayidx44.i.i, align 1, !tbaa !41
  %add46.i.i = add nsw i64 %shr.i.i, %c1total.0.lcssa.i.i
  %div47.i.i = sdiv i64 %add46.i.i, %total.0.lcssa.i.i
  %conv48.i.i = trunc i64 %div47.i.i to i8
  %82 = load i8**, i8*** %colormap, align 8, !tbaa !43
  %arrayidx51.i.i = getelementptr inbounds i8*, i8** %82, i64 1
  %83 = load i8*, i8** %arrayidx51.i.i, align 8, !tbaa !27
  %arrayidx52.i.i = getelementptr inbounds i8, i8* %83, i64 %indvars.iv.i
  store i8 %conv48.i.i, i8* %arrayidx52.i.i, align 1, !tbaa !41
  %add54.i.i = add nsw i64 %shr.i.i, %c2total.0.lcssa.i.i
  %div55.i.i = sdiv i64 %add54.i.i, %total.0.lcssa.i.i
  %conv56.i.i = trunc i64 %div55.i.i to i8
  %84 = load i8**, i8*** %colormap, align 8, !tbaa !43
  %arrayidx59.i.i = getelementptr inbounds i8*, i8** %84, i64 2
  %85 = load i8*, i8** %arrayidx59.i.i, align 8, !tbaa !27
  %arrayidx60.i.i = getelementptr inbounds i8, i8* %85, i64 %indvars.iv.i
  store i8 %conv56.i.i, i8* %arrayidx60.i.i, align 1, !tbaa !41
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next.i to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %numboxes.addr.0.lcssa.i59.i
  br i1 %exitcond, label %select_colors.exit.loopexit, label %for.body.i

select_colors.exit.loopexit:                      ; preds = %compute_color.exit.i
  br label %select_colors.exit

select_colors.exit:                               ; preds = %select_colors.exit.loopexit, %median_cut.exit.i
  %numboxes.addr.0.lcssa.i58.i = phi i32 [ %numboxes.addr.0.lcssa.i.i, %median_cut.exit.i ], [ %numboxes.addr.0.lcssa.i59.i, %select_colors.exit.loopexit ]
  %actual_number_of_colors.i = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 31
  store i32 %numboxes.addr.0.lcssa.i58.i, i32* %actual_number_of_colors.i, align 4, !tbaa !39
  %err.i = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0
  %86 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err.i, align 8, !tbaa !21
  %msg_code.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %86, i64 0, i32 5
  store i32 95, i32* %msg_code.i, align 8, !tbaa !22
  %arrayidx12.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %86, i64 0, i32 6, i32 0, i64 0
  store i32 %numboxes.addr.0.lcssa.i58.i, i32* %arrayidx12.i, align 4, !tbaa !31
  %emit_message.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %86, i64 0, i32 1
  %87 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %emit_message.i, align 8, !tbaa !55
  tail call void %87(%struct.jpeg_common_struct* %8, i32 1) #5
  %needs_zeroed = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %1, i64 0, i32 4
  store i32 1, i32* %needs_zeroed, align 8, !tbaa !28
  ret void

land.lhs.true.i.i.i.1:                            ; preds = %for.inc.i.i.i
  %incdec.ptr.i.i.i = getelementptr inbounds %struct.box, %struct.box* %boxp.014.i.i.i, i64 1
  %volume.i.i.i.1 = getelementptr inbounds %struct.box, %struct.box* %boxp.014.i.i.i, i64 1, i32 6
  %88 = load i64, i64* %volume.i.i.i.1, align 8, !tbaa !48
  %cmp2.i.i.i.1 = icmp sgt i64 %88, 0
  %.maxc.0.i.i.i.1 = select i1 %cmp2.i.i.i.1, i64 %26, i64 %maxc.1.i.i.i
  %boxp.0.which.0.i.i.i.1 = select i1 %cmp2.i.i.i.1, %struct.box* %incdec.ptr.i.i.i, %struct.box* %which.1.i.i.i
  br label %for.inc.i.i.i.1

for.inc.i.i.i.1:                                  ; preds = %land.lhs.true.i.i.i.1, %for.inc.i.i.i
  %maxc.1.i.i.i.1 = phi i64 [ %maxc.1.i.i.i, %for.inc.i.i.i ], [ %.maxc.0.i.i.i.1, %land.lhs.true.i.i.i.1 ]
  %which.1.i.i.i.1 = phi %struct.box* [ %which.1.i.i.i, %for.inc.i.i.i ], [ %boxp.0.which.0.i.i.i.1, %land.lhs.true.i.i.i.1 ]
  %indvars.iv.next54.i.1 = add nsw i64 %indvars.iv53.i, 2
  %incdec.ptr.i.i.i.1 = getelementptr inbounds %struct.box, %struct.box* %boxp.014.i.i.i, i64 2
  %exitcond.i.i.i.1 = icmp eq i64 %indvars.iv.next54.i.1, %indvars.iv.i.i
  br i1 %exitcond.i.i.i.1, label %if.end.i.i.loopexit11.unr-lcssa, label %for.body.i.i.i
}

; Function Attrs: norecurse nounwind uwtable
define internal void @pass2_fs_dither(%struct.jpeg_decompress_struct* nocapture readonly %cinfo, i8** nocapture readonly %input_buf, i8** nocapture readonly %output_buf, i32 %num_rows) #2 {
entry:
  %cquantize1 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 83
  %0 = bitcast %struct.jpeg_color_quantizer** %cquantize1 to %struct.my_cquantizer**
  %1 = load %struct.my_cquantizer*, %struct.my_cquantizer** %0, align 8, !tbaa !13
  %histogram2 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %1, i64 0, i32 3
  %2 = load [32 x i16]**, [32 x i16]*** %histogram2, align 8, !tbaa !25
  %output_width = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 26
  %3 = load i32, i32* %output_width, align 8, !tbaa !36
  %sample_range_limit = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 61
  %4 = load i8*, i8** %sample_range_limit, align 8, !tbaa !56
  %error_limiter = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %1, i64 0, i32 7
  %5 = load i32*, i32** %error_limiter, align 8, !tbaa !19
  %colormap = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 32
  %6 = load i8**, i8*** %colormap, align 8, !tbaa !43
  %7 = load i8*, i8** %6, align 8, !tbaa !27
  %arrayidx4 = getelementptr inbounds i8*, i8** %6, i64 1
  %8 = load i8*, i8** %arrayidx4, align 8, !tbaa !27
  %arrayidx6 = getelementptr inbounds i8*, i8** %6, i64 2
  %9 = load i8*, i8** %arrayidx6, align 8, !tbaa !27
  %cmp284 = icmp sgt i32 %num_rows, 0
  br i1 %cmp284, label %for.body.lr.ph, label %for.end134

for.body.lr.ph:                                   ; preds = %entry
  %on_odd_row = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %1, i64 0, i32 6
  %fserrors17 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %1, i64 0, i32 5
  %cmp20267 = icmp eq i32 %3, 0
  %sub = add i32 %3, -1
  %mul = mul i32 %sub, 3
  %idx.ext = zext i32 %mul to i64
  %idx.ext11 = zext i32 %sub to i64
  %10 = mul i32 %3, 3
  %mul13 = add i32 %10, 3
  %idx.ext14 = zext i32 %mul13 to i64
  %11 = shl nuw nsw i64 %idx.ext11, 1
  %12 = add nuw nsw i64 %11, 2
  br label %for.body

for.body:                                         ; preds = %for.end, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.end ]
  %arrayidx7 = getelementptr inbounds i8*, i8** %input_buf, i64 %indvars.iv
  %13 = load i8*, i8** %arrayidx7, align 8, !tbaa !27
  %arrayidx9 = getelementptr inbounds i8*, i8** %output_buf, i64 %indvars.iv
  %14 = load i8*, i8** %arrayidx9, align 8, !tbaa !27
  %15 = load i32, i32* %on_odd_row, align 8, !tbaa !40
  %tobool = icmp eq i32 %15, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  %add.ptr = getelementptr inbounds i8, i8* %13, i64 %idx.ext
  %add.ptr12 = getelementptr inbounds i8, i8* %14, i64 %idx.ext11
  %16 = load i16*, i16** %fserrors17, align 8, !tbaa !18
  %add.ptr15 = getelementptr inbounds i16, i16* %16, i64 %idx.ext14
  br label %if.end

if.else:                                          ; preds = %for.body
  %17 = load i16*, i16** %fserrors17, align 8, !tbaa !18
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %storemerge = phi i32 [ 1, %if.else ], [ 0, %if.then ]
  %inptr.0 = phi i8* [ %13, %if.else ], [ %add.ptr, %if.then ]
  %outptr.0 = phi i8* [ %14, %if.else ], [ %add.ptr12, %if.then ]
  %errorptr.0 = phi i16* [ %17, %if.else ], [ %add.ptr15, %if.then ]
  %dir.0 = phi i64 [ 1, %if.else ], [ -1, %if.then ]
  %dir3.0 = phi i32 [ 3, %if.else ], [ -3, %if.then ]
  store i32 %storemerge, i32* %on_odd_row, align 8, !tbaa !40
  br i1 %cmp20267, label %for.end, label %for.body21.lr.ph

for.body21.lr.ph:                                 ; preds = %if.end
  %errorptr.0286 = bitcast i16* %errorptr.0 to i8*
  %idxprom23 = sext i32 %dir3.0 to i64
  %add27 = add nsw i32 %dir3.0, 1
  %idxprom28 = sext i32 %add27 to i64
  %add34 = add nsw i32 %dir3.0, 2
  %idxprom35 = sext i32 %add34 to i64
  %18 = mul nsw i64 %12, %idxprom23
  %uglygep = getelementptr i8, i8* %errorptr.0286, i64 %18
  br label %for.body21

for.body21:                                       ; preds = %for.body21.lr.ph, %if.end81
  %cur0.0280 = phi i32 [ 0, %for.body21.lr.ph ], [ %add104, %if.end81 ]
  %cur1.0279 = phi i32 [ 0, %for.body21.lr.ph ], [ %add112, %if.end81 ]
  %cur2.0278 = phi i32 [ 0, %for.body21.lr.ph ], [ %add120, %if.end81 ]
  %belowerr0.0277 = phi i32 [ 0, %for.body21.lr.ph ], [ %sub88, %if.end81 ]
  %belowerr1.0276 = phi i32 [ 0, %for.body21.lr.ph ], [ %sub92, %if.end81 ]
  %belowerr2.0275 = phi i32 [ 0, %for.body21.lr.ph ], [ %sub96, %if.end81 ]
  %bpreverr0.0274 = phi i32 [ 0, %for.body21.lr.ph ], [ %add103, %if.end81 ]
  %bpreverr1.0273 = phi i32 [ 0, %for.body21.lr.ph ], [ %add111, %if.end81 ]
  %bpreverr2.0272 = phi i32 [ 0, %for.body21.lr.ph ], [ %add119, %if.end81 ]
  %col.0271 = phi i32 [ %3, %for.body21.lr.ph ], [ %dec, %if.end81 ]
  %errorptr.1270 = phi i16* [ %errorptr.0, %for.body21.lr.ph ], [ %arrayidx24, %if.end81 ]
  %outptr.1269 = phi i8* [ %outptr.0, %for.body21.lr.ph ], [ %add.ptr124, %if.end81 ]
  %inptr.1268 = phi i8* [ %inptr.0, %for.body21.lr.ph ], [ %add.ptr122, %if.end81 ]
  %arrayidx24 = getelementptr inbounds i16, i16* %errorptr.1270, i64 %idxprom23
  %19 = load i16, i16* %arrayidx24, align 2, !tbaa !42
  %conv = sext i16 %19 to i32
  %add25 = add i32 %cur0.0280, 8
  %add26 = add i32 %add25, %conv
  %shr = ashr i32 %add26, 4
  %arrayidx29 = getelementptr inbounds i16, i16* %errorptr.1270, i64 %idxprom28
  %20 = load i16, i16* %arrayidx29, align 2, !tbaa !42
  %conv30 = sext i16 %20 to i32
  %add31 = add i32 %cur1.0279, 8
  %add32 = add i32 %add31, %conv30
  %shr33 = ashr i32 %add32, 4
  %arrayidx36 = getelementptr inbounds i16, i16* %errorptr.1270, i64 %idxprom35
  %21 = load i16, i16* %arrayidx36, align 2, !tbaa !42
  %conv37 = sext i16 %21 to i32
  %add38 = add i32 %cur2.0278, 8
  %add39 = add i32 %add38, %conv37
  %shr40 = ashr i32 %add39, 4
  %idxprom41 = sext i32 %shr to i64
  %arrayidx42 = getelementptr inbounds i32, i32* %5, i64 %idxprom41
  %22 = load i32, i32* %arrayidx42, align 4, !tbaa !31
  %idxprom43 = sext i32 %shr33 to i64
  %arrayidx44 = getelementptr inbounds i32, i32* %5, i64 %idxprom43
  %23 = load i32, i32* %arrayidx44, align 4, !tbaa !31
  %idxprom45 = sext i32 %shr40 to i64
  %arrayidx46 = getelementptr inbounds i32, i32* %5, i64 %idxprom45
  %24 = load i32, i32* %arrayidx46, align 4, !tbaa !31
  %25 = load i8, i8* %inptr.1268, align 1, !tbaa !41
  %conv48 = zext i8 %25 to i32
  %add49 = add nsw i32 %conv48, %22
  %arrayidx50 = getelementptr inbounds i8, i8* %inptr.1268, i64 1
  %26 = load i8, i8* %arrayidx50, align 1, !tbaa !41
  %conv51 = zext i8 %26 to i32
  %add52 = add nsw i32 %conv51, %23
  %arrayidx53 = getelementptr inbounds i8, i8* %inptr.1268, i64 2
  %27 = load i8, i8* %arrayidx53, align 1, !tbaa !41
  %conv54 = zext i8 %27 to i32
  %add55 = add nsw i32 %conv54, %24
  %idxprom56 = sext i32 %add49 to i64
  %arrayidx57 = getelementptr inbounds i8, i8* %4, i64 %idxprom56
  %28 = load i8, i8* %arrayidx57, align 1, !tbaa !41
  %conv58 = zext i8 %28 to i32
  %idxprom59 = sext i32 %add52 to i64
  %arrayidx60 = getelementptr inbounds i8, i8* %4, i64 %idxprom59
  %29 = load i8, i8* %arrayidx60, align 1, !tbaa !41
  %conv61 = zext i8 %29 to i32
  %idxprom62 = sext i32 %add55 to i64
  %arrayidx63 = getelementptr inbounds i8, i8* %4, i64 %idxprom62
  %30 = load i8, i8* %arrayidx63, align 1, !tbaa !41
  %conv64 = zext i8 %30 to i32
  %shr65261 = lshr i32 %conv64, 3
  %idxprom66262 = zext i32 %shr65261 to i64
  %shr67263 = lshr i32 %conv61, 2
  %idxprom68264 = zext i32 %shr67263 to i64
  %shr69265 = lshr i32 %conv58, 3
  %idxprom70266 = zext i32 %shr69265 to i64
  %arrayidx71 = getelementptr inbounds [32 x i16]*, [32 x i16]** %2, i64 %idxprom70266
  %31 = load [32 x i16]*, [32 x i16]** %arrayidx71, align 8, !tbaa !27
  %arrayidx73 = getelementptr inbounds [32 x i16], [32 x i16]* %31, i64 %idxprom68264, i64 %idxprom66262
  %32 = load i16, i16* %arrayidx73, align 2, !tbaa !42
  %cmp75 = icmp eq i16 %32, 0
  br i1 %cmp75, label %if.then77, label %if.end81

if.then77:                                        ; preds = %for.body21
  tail call fastcc void @fill_inverse_cmap(%struct.jpeg_decompress_struct* %cinfo, i32 %shr69265, i32 %shr67263, i32 %shr65261)
  %.pre = load i16, i16* %arrayidx73, align 2, !tbaa !42
  br label %if.end81

if.end81:                                         ; preds = %if.then77, %for.body21
  %33 = phi i16 [ %.pre, %if.then77 ], [ %32, %for.body21 ]
  %conv82 = zext i16 %33 to i32
  %sub83 = add nsw i32 %conv82, -1
  %conv84 = trunc i32 %sub83 to i8
  store i8 %conv84, i8* %outptr.1269, align 1, !tbaa !41
  %idxprom85 = sext i32 %sub83 to i64
  %arrayidx86 = getelementptr inbounds i8, i8* %7, i64 %idxprom85
  %34 = load i8, i8* %arrayidx86, align 1, !tbaa !41
  %conv87 = zext i8 %34 to i32
  %sub88 = sub nsw i32 %conv58, %conv87
  %arrayidx90 = getelementptr inbounds i8, i8* %8, i64 %idxprom85
  %35 = load i8, i8* %arrayidx90, align 1, !tbaa !41
  %conv91 = zext i8 %35 to i32
  %sub92 = sub nsw i32 %conv61, %conv91
  %arrayidx94 = getelementptr inbounds i8, i8* %9, i64 %idxprom85
  %36 = load i8, i8* %arrayidx94, align 1, !tbaa !41
  %conv95 = zext i8 %36 to i32
  %sub96 = sub nsw i32 %conv64, %conv95
  %add98 = mul nsw i32 %sub88, 3
  %add99 = add nsw i32 %add98, %bpreverr0.0274
  %conv100 = trunc i32 %add99 to i16
  store i16 %conv100, i16* %errorptr.1270, align 2, !tbaa !42
  %add102 = mul nsw i32 %sub88, 5
  %add103 = add nsw i32 %add102, %belowerr0.0277
  %add104 = mul nsw i32 %sub88, 7
  %add106 = mul nsw i32 %sub92, 3
  %add107 = add nsw i32 %add106, %bpreverr1.0273
  %conv108 = trunc i32 %add107 to i16
  %arrayidx109 = getelementptr inbounds i16, i16* %errorptr.1270, i64 1
  store i16 %conv108, i16* %arrayidx109, align 2, !tbaa !42
  %add110 = mul nsw i32 %sub92, 5
  %add111 = add nsw i32 %add110, %belowerr1.0276
  %add112 = mul nsw i32 %sub92, 7
  %add114 = mul nsw i32 %sub96, 3
  %add115 = add nsw i32 %add114, %bpreverr2.0272
  %conv116 = trunc i32 %add115 to i16
  %arrayidx117 = getelementptr inbounds i16, i16* %errorptr.1270, i64 2
  store i16 %conv116, i16* %arrayidx117, align 2, !tbaa !42
  %add118 = mul nsw i32 %sub96, 5
  %add119 = add nsw i32 %add118, %belowerr2.0275
  %add120 = mul nsw i32 %sub96, 7
  %add.ptr122 = getelementptr inbounds i8, i8* %inptr.1268, i64 %idxprom23
  %add.ptr124 = getelementptr inbounds i8, i8* %outptr.1269, i64 %dir.0
  %dec = add i32 %col.0271, -1
  %cmp20 = icmp eq i32 %dec, 0
  br i1 %cmp20, label %for.end.loopexit, label %for.body21

for.end.loopexit:                                 ; preds = %if.end81
  %add119.lcssa = phi i32 [ %add119, %if.end81 ]
  %add111.lcssa = phi i32 [ %add111, %if.end81 ]
  %add103.lcssa = phi i32 [ %add103, %if.end81 ]
  %uglygep287 = bitcast i8* %uglygep to i16*
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %if.end
  %bpreverr0.0.lcssa = phi i32 [ 0, %if.end ], [ %add103.lcssa, %for.end.loopexit ]
  %bpreverr1.0.lcssa = phi i32 [ 0, %if.end ], [ %add111.lcssa, %for.end.loopexit ]
  %bpreverr2.0.lcssa = phi i32 [ 0, %if.end ], [ %add119.lcssa, %for.end.loopexit ]
  %errorptr.1.lcssa = phi i16* [ %errorptr.0, %if.end ], [ %uglygep287, %for.end.loopexit ]
  %conv127 = trunc i32 %bpreverr0.0.lcssa to i16
  store i16 %conv127, i16* %errorptr.1.lcssa, align 2, !tbaa !42
  %conv129 = trunc i32 %bpreverr1.0.lcssa to i16
  %arrayidx130 = getelementptr inbounds i16, i16* %errorptr.1.lcssa, i64 1
  store i16 %conv129, i16* %arrayidx130, align 2, !tbaa !42
  %conv131 = trunc i32 %bpreverr2.0.lcssa to i16
  %arrayidx132 = getelementptr inbounds i16, i16* %errorptr.1.lcssa, i64 2
  store i16 %conv131, i16* %arrayidx132, align 2, !tbaa !42
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %num_rows
  br i1 %exitcond, label %for.end134.loopexit, label %for.body

for.end134.loopexit:                              ; preds = %for.end
  br label %for.end134

for.end134:                                       ; preds = %for.end134.loopexit, %entry
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define internal void @pass2_no_dither(%struct.jpeg_decompress_struct* nocapture readonly %cinfo, i8** nocapture readonly %input_buf, i8** nocapture readonly %output_buf, i32 %num_rows) #2 {
entry:
  %cquantize1 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 83
  %0 = bitcast %struct.jpeg_color_quantizer** %cquantize1 to %struct.my_cquantizer**
  %1 = load %struct.my_cquantizer*, %struct.my_cquantizer** %0, align 8, !tbaa !13
  %histogram2 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %1, i64 0, i32 3
  %2 = load [32 x i16]**, [32 x i16]*** %histogram2, align 8, !tbaa !25
  %output_width = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 26
  %3 = load i32, i32* %output_width, align 8, !tbaa !36
  %cmp61 = icmp slt i32 %num_rows, 1
  %cmp657 = icmp eq i32 %3, 0
  %or.cond = or i1 %cmp61, %cmp657
  br i1 %or.cond, label %for.end27, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.inc26
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc26 ], [ 0, %for.body.preheader ]
  %arrayidx = getelementptr inbounds i8*, i8** %input_buf, i64 %indvars.iv
  %4 = load i8*, i8** %arrayidx, align 8, !tbaa !27
  %arrayidx4 = getelementptr inbounds i8*, i8** %output_buf, i64 %indvars.iv
  %5 = load i8*, i8** %arrayidx4, align 8, !tbaa !27
  br label %for.body7

for.body7:                                        ; preds = %for.body, %if.end
  %inptr.060 = phi i8* [ %4, %for.body ], [ %incdec.ptr11, %if.end ]
  %col.059 = phi i32 [ %3, %for.body ], [ %dec, %if.end ]
  %outptr.058 = phi i8* [ %5, %for.body ], [ %incdec.ptr25, %if.end ]
  %incdec.ptr = getelementptr inbounds i8, i8* %inptr.060, i64 1
  %6 = load i8, i8* %inptr.060, align 1, !tbaa !41
  %conv = zext i8 %6 to i32
  %shr51 = lshr i32 %conv, 3
  %incdec.ptr8 = getelementptr inbounds i8, i8* %inptr.060, i64 2
  %7 = load i8, i8* %incdec.ptr, align 1, !tbaa !41
  %conv9 = zext i8 %7 to i32
  %shr1052 = lshr i32 %conv9, 2
  %incdec.ptr11 = getelementptr inbounds i8, i8* %inptr.060, i64 3
  %8 = load i8, i8* %incdec.ptr8, align 1, !tbaa !41
  %conv12 = zext i8 %8 to i32
  %shr1353 = lshr i32 %conv12, 3
  %idxprom1454 = zext i32 %shr1353 to i64
  %idxprom1555 = zext i32 %shr1052 to i64
  %idxprom1656 = zext i32 %shr51 to i64
  %arrayidx17 = getelementptr inbounds [32 x i16]*, [32 x i16]** %2, i64 %idxprom1656
  %9 = load [32 x i16]*, [32 x i16]** %arrayidx17, align 8, !tbaa !27
  %arrayidx19 = getelementptr inbounds [32 x i16], [32 x i16]* %9, i64 %idxprom1555, i64 %idxprom1454
  %10 = load i16, i16* %arrayidx19, align 2, !tbaa !42
  %cmp21 = icmp eq i16 %10, 0
  br i1 %cmp21, label %if.then, label %if.end

if.then:                                          ; preds = %for.body7
  tail call fastcc void @fill_inverse_cmap(%struct.jpeg_decompress_struct* %cinfo, i32 %shr51, i32 %shr1052, i32 %shr1353)
  %.pre = load i16, i16* %arrayidx19, align 2, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body7
  %11 = phi i16 [ %.pre, %if.then ], [ %10, %for.body7 ]
  %conv23 = trunc i16 %11 to i8
  %sub = add i8 %conv23, -1
  %incdec.ptr25 = getelementptr inbounds i8, i8* %outptr.058, i64 1
  store i8 %sub, i8* %outptr.058, align 1, !tbaa !41
  %dec = add i32 %col.059, -1
  %cmp6 = icmp eq i32 %dec, 0
  br i1 %cmp6, label %for.inc26, label %for.body7

for.inc26:                                        ; preds = %if.end
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond64 = icmp eq i32 %lftr.wideiv, %num_rows
  br i1 %exitcond64, label %for.end27.loopexit, label %for.body

for.end27.loopexit:                               ; preds = %for.inc26
  br label %for.end27

for.end27:                                        ; preds = %for.end27.loopexit, %entry
  ret void
}

; Function Attrs: norecurse nounwind readnone uwtable
define internal void @finish_pass2(%struct.jpeg_decompress_struct* nocapture %cinfo) #3 {
entry:
  ret void
}

declare void @jzero_far(i8*, i64) #4

; Function Attrs: norecurse nounwind uwtable
define internal fastcc void @update_box(%struct.jpeg_decompress_struct* nocapture readonly %cinfo, %struct.box* nocapture %boxp) unnamed_addr #2 {
entry:
  %cquantize1 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 83
  %0 = bitcast %struct.jpeg_color_quantizer** %cquantize1 to %struct.my_cquantizer**
  %1 = load %struct.my_cquantizer*, %struct.my_cquantizer** %0, align 8, !tbaa !13
  %histogram2 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %1, i64 0, i32 3
  %2 = load [32 x i16]**, [32 x i16]*** %histogram2, align 8, !tbaa !25
  %c0min3 = getelementptr inbounds %struct.box, %struct.box* %boxp, i64 0, i32 0
  %3 = bitcast %struct.box* %boxp to i64*
  %4 = load i64, i64* %3, align 8
  %5 = trunc i64 %4 to i32
  %c0max4 = getelementptr inbounds %struct.box, %struct.box* %boxp, i64 0, i32 1
  %6 = lshr i64 %4, 32
  %7 = trunc i64 %6 to i32
  %c1min5 = getelementptr inbounds %struct.box, %struct.box* %boxp, i64 0, i32 2
  %8 = bitcast i32* %c1min5 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = trunc i64 %9 to i32
  %c1max6 = getelementptr inbounds %struct.box, %struct.box* %boxp, i64 0, i32 3
  %11 = lshr i64 %9, 32
  %12 = trunc i64 %11 to i32
  %c2min7 = getelementptr inbounds %struct.box, %struct.box* %boxp, i64 0, i32 4
  %13 = bitcast i32* %c2min7 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = trunc i64 %14 to i32
  %c2max8 = getelementptr inbounds %struct.box, %struct.box* %boxp, i64 0, i32 5
  %16 = lshr i64 %14, 32
  %17 = trunc i64 %16 to i32
  %18 = icmp slt i32 %5, %7
  br i1 %18, label %for.cond10.preheader.lr.ph, label %have_c0min

for.cond10.preheader.lr.ph:                       ; preds = %entry
  %cmp11493 = icmp sgt i32 %10, %12
  %sext1063 = shl i64 %14, 32
  %idxprom = ashr exact i64 %sext1063, 32
  %cmp18490 = icmp sgt i32 %15, %17
  %or.cond = or i1 %cmp11493, %cmp18490
  br i1 %or.cond, label %have_c0min, label %for.body12.lr.ph.preheader

for.body12.lr.ph.preheader:                       ; preds = %for.cond10.preheader.lr.ph
  %sext1064 = shl i64 %9, 32
  %19 = ashr exact i64 %sext1064, 32
  %20 = ashr i64 %9, 32
  %sext1066 = shl i64 %4, 32
  %21 = ashr exact i64 %sext1066, 32
  %22 = ashr i64 %4, 32
  br label %for.body12.lr.ph

for.body12.lr.ph:                                 ; preds = %for.body12.lr.ph.preheader, %for.inc27
  %indvars.iv1051 = phi i64 [ %21, %for.body12.lr.ph.preheader ], [ %indvars.iv.next1052, %for.inc27 ]
  %arrayidx = getelementptr inbounds [32 x i16]*, [32 x i16]** %2, i64 %indvars.iv1051
  %23 = load [32 x i16]*, [32 x i16]** %arrayidx, align 8
  br label %for.body12

for.body12:                                       ; preds = %for.inc24, %for.body12.lr.ph
  %indvars.iv1049 = phi i64 [ %indvars.iv.next1050, %for.inc24 ], [ %19, %for.body12.lr.ph ]
  %arrayidx16 = getelementptr inbounds [32 x i16], [32 x i16]* %23, i64 %indvars.iv1049, i64 %idxprom
  br label %for.body19

for.body19:                                       ; preds = %for.inc, %for.body12
  %histp.0492 = phi i16* [ %arrayidx16, %for.body12 ], [ %incdec.ptr, %for.inc ]
  %c2.0491 = phi i32 [ %15, %for.body12 ], [ %inc, %for.inc ]
  %24 = load i16, i16* %histp.0492, align 2, !tbaa !42
  %cmp20 = icmp eq i16 %24, 0
  br i1 %cmp20, label %for.inc, label %if.then22

if.then22:                                        ; preds = %for.body19
  %indvars.iv1051.lcssa = phi i64 [ %indvars.iv1051, %for.body19 ]
  %25 = trunc i64 %indvars.iv1051.lcssa to i32
  store i32 %25, i32* %c0min3, align 8, !tbaa !53
  br label %have_c0min

for.inc:                                          ; preds = %for.body19
  %incdec.ptr = getelementptr inbounds i16, i16* %histp.0492, i64 1
  %inc = add nsw i32 %c2.0491, 1
  %cmp18 = icmp slt i32 %c2.0491, %17
  br i1 %cmp18, label %for.body19, label %for.inc24

for.inc24:                                        ; preds = %for.inc
  %cmp11 = icmp slt i64 %indvars.iv1049, %20
  %indvars.iv.next1050 = add nsw i64 %indvars.iv1049, 1
  br i1 %cmp11, label %for.body12, label %for.inc27

for.inc27:                                        ; preds = %for.inc24
  %indvars.iv.next1052 = add nsw i64 %indvars.iv1051, 1
  %cmp9 = icmp slt i64 %indvars.iv1051, %22
  br i1 %cmp9, label %for.body12.lr.ph, label %have_c0min.loopexit

have_c0min.loopexit:                              ; preds = %for.inc27
  br label %have_c0min

have_c0min:                                       ; preds = %have_c0min.loopexit, %for.cond10.preheader.lr.ph, %entry, %if.then22
  %c0min.0 = phi i32 [ %25, %if.then22 ], [ %5, %entry ], [ %5, %for.cond10.preheader.lr.ph ], [ %5, %have_c0min.loopexit ]
  %26 = icmp sgt i32 %7, %c0min.0
  br i1 %26, label %for.cond38.preheader.lr.ph, label %have_c0max

for.cond38.preheader.lr.ph:                       ; preds = %have_c0min
  %cmp39485 = icmp sgt i32 %10, %12
  %sext1059 = shl i64 %14, 32
  %idxprom42 = ashr exact i64 %sext1059, 32
  %cmp49482 = icmp sgt i32 %15, %17
  %or.cond1074 = or i1 %cmp39485, %cmp49482
  br i1 %or.cond1074, label %have_c0max, label %for.body41.lr.ph.preheader

for.body41.lr.ph.preheader:                       ; preds = %for.cond38.preheader.lr.ph
  %sext1060 = shl i64 %9, 32
  %27 = ashr exact i64 %sext1060, 32
  %28 = ashr i64 %9, 32
  %29 = ashr i64 %4, 32
  %30 = sext i32 %c0min.0 to i64
  br label %for.body41.lr.ph

for.body41.lr.ph:                                 ; preds = %for.body41.lr.ph.preheader, %for.inc65
  %indvars.iv1047 = phi i64 [ %29, %for.body41.lr.ph.preheader ], [ %indvars.iv.next1048, %for.inc65 ]
  %arrayidx45 = getelementptr inbounds [32 x i16]*, [32 x i16]** %2, i64 %indvars.iv1047
  %31 = load [32 x i16]*, [32 x i16]** %arrayidx45, align 8
  br label %for.body41

for.body41:                                       ; preds = %for.inc62, %for.body41.lr.ph
  %indvars.iv1045 = phi i64 [ %indvars.iv.next1046, %for.inc62 ], [ %27, %for.body41.lr.ph ]
  %arrayidx47 = getelementptr inbounds [32 x i16], [32 x i16]* %31, i64 %indvars.iv1045, i64 %idxprom42
  br label %for.body51

for.body51:                                       ; preds = %for.inc59, %for.body41
  %histp.1484 = phi i16* [ %arrayidx47, %for.body41 ], [ %incdec.ptr52, %for.inc59 ]
  %c2.1483 = phi i32 [ %15, %for.body41 ], [ %inc60, %for.inc59 ]
  %32 = load i16, i16* %histp.1484, align 2, !tbaa !42
  %cmp54 = icmp eq i16 %32, 0
  br i1 %cmp54, label %for.inc59, label %if.then56

if.then56:                                        ; preds = %for.body51
  %indvars.iv1047.lcssa = phi i64 [ %indvars.iv1047, %for.body51 ]
  %33 = trunc i64 %indvars.iv1047.lcssa to i32
  store i32 %33, i32* %c0max4, align 4, !tbaa !51
  br label %have_c0max

for.inc59:                                        ; preds = %for.body51
  %incdec.ptr52 = getelementptr inbounds i16, i16* %histp.1484, i64 1
  %inc60 = add nsw i32 %c2.1483, 1
  %cmp49 = icmp slt i32 %c2.1483, %17
  br i1 %cmp49, label %for.body51, label %for.inc62

for.inc62:                                        ; preds = %for.inc59
  %cmp39 = icmp slt i64 %indvars.iv1045, %28
  %indvars.iv.next1046 = add nsw i64 %indvars.iv1045, 1
  br i1 %cmp39, label %for.body41, label %for.inc65

for.inc65:                                        ; preds = %for.inc62
  %indvars.iv.next1048 = add nsw i64 %indvars.iv1047, -1
  %cmp35 = icmp sgt i64 %indvars.iv1047, %30
  br i1 %cmp35, label %for.body41.lr.ph, label %have_c0max.loopexit

have_c0max.loopexit:                              ; preds = %for.inc65
  br label %have_c0max

have_c0max:                                       ; preds = %have_c0max.loopexit, %for.cond38.preheader.lr.ph, %have_c0min, %if.then56
  %c0max.0 = phi i32 [ %33, %if.then56 ], [ %7, %have_c0min ], [ %7, %for.cond38.preheader.lr.ph ], [ %7, %have_c0max.loopexit ]
  %34 = icmp slt i32 %10, %12
  br i1 %34, label %for.cond75.preheader.lr.ph, label %have_c1min

for.cond75.preheader.lr.ph:                       ; preds = %have_c0max
  %cmp76477 = icmp slt i32 %c0max.0, %c0min.0
  %sext1056 = shl i64 %14, 32
  %idxprom79 = ashr exact i64 %sext1056, 32
  %cmp86474 = icmp sgt i32 %15, %17
  %or.cond1075 = or i1 %cmp76477, %cmp86474
  br i1 %or.cond1075, label %have_c1min, label %for.body78.lr.ph.preheader

for.body78.lr.ph.preheader:                       ; preds = %for.cond75.preheader.lr.ph
  %35 = sext i32 %c0min.0 to i64
  %36 = sext i32 %c0max.0 to i64
  %sext1057 = shl i64 %9, 32
  %37 = ashr exact i64 %sext1057, 32
  %38 = ashr i64 %9, 32
  br label %for.body78.lr.ph

for.body78.lr.ph:                                 ; preds = %for.body78.lr.ph.preheader, %for.inc102
  %indvars.iv1043 = phi i64 [ %37, %for.body78.lr.ph.preheader ], [ %indvars.iv.next1044, %for.inc102 ]
  br label %for.body78

for.body78:                                       ; preds = %for.inc99, %for.body78.lr.ph
  %indvars.iv1041 = phi i64 [ %indvars.iv.next1042, %for.inc99 ], [ %35, %for.body78.lr.ph ]
  %arrayidx82 = getelementptr inbounds [32 x i16]*, [32 x i16]** %2, i64 %indvars.iv1041
  %39 = load [32 x i16]*, [32 x i16]** %arrayidx82, align 8, !tbaa !27
  %arrayidx84 = getelementptr inbounds [32 x i16], [32 x i16]* %39, i64 %indvars.iv1043, i64 %idxprom79
  br label %for.body88

for.body88:                                       ; preds = %for.inc96, %for.body78
  %histp.2476 = phi i16* [ %arrayidx84, %for.body78 ], [ %incdec.ptr89, %for.inc96 ]
  %c2.2475 = phi i32 [ %15, %for.body78 ], [ %inc97, %for.inc96 ]
  %40 = load i16, i16* %histp.2476, align 2, !tbaa !42
  %cmp91 = icmp eq i16 %40, 0
  br i1 %cmp91, label %for.inc96, label %if.then93

if.then93:                                        ; preds = %for.body88
  %indvars.iv1043.lcssa = phi i64 [ %indvars.iv1043, %for.body88 ]
  %41 = trunc i64 %indvars.iv1043.lcssa to i32
  store i32 %41, i32* %c1min5, align 8, !tbaa !54
  br label %have_c1min

for.inc96:                                        ; preds = %for.body88
  %incdec.ptr89 = getelementptr inbounds i16, i16* %histp.2476, i64 1
  %inc97 = add nsw i32 %c2.2475, 1
  %cmp86 = icmp slt i32 %c2.2475, %17
  br i1 %cmp86, label %for.body88, label %for.inc99

for.inc99:                                        ; preds = %for.inc96
  %cmp76 = icmp slt i64 %indvars.iv1041, %36
  %indvars.iv.next1042 = add nsw i64 %indvars.iv1041, 1
  br i1 %cmp76, label %for.body78, label %for.inc102

for.inc102:                                       ; preds = %for.inc99
  %indvars.iv.next1044 = add nsw i64 %indvars.iv1043, 1
  %cmp72 = icmp slt i64 %indvars.iv1043, %38
  br i1 %cmp72, label %for.body78.lr.ph, label %have_c1min.loopexit

have_c1min.loopexit:                              ; preds = %for.inc102
  br label %have_c1min

have_c1min:                                       ; preds = %have_c1min.loopexit, %for.cond75.preheader.lr.ph, %have_c0max, %if.then93
  %c1min.0 = phi i32 [ %41, %if.then93 ], [ %10, %have_c0max ], [ %10, %for.cond75.preheader.lr.ph ], [ %10, %have_c1min.loopexit ]
  %42 = icmp sgt i32 %12, %c1min.0
  br i1 %42, label %for.cond113.preheader.lr.ph, label %have_c1max

for.cond113.preheader.lr.ph:                      ; preds = %have_c1min
  %cmp114469 = icmp slt i32 %c0max.0, %c0min.0
  %sext1054 = shl i64 %14, 32
  %idxprom117 = ashr exact i64 %sext1054, 32
  %cmp124466 = icmp sgt i32 %15, %17
  %or.cond1076 = or i1 %cmp114469, %cmp124466
  br i1 %or.cond1076, label %have_c1max, label %for.body116.lr.ph.preheader

for.body116.lr.ph.preheader:                      ; preds = %for.cond113.preheader.lr.ph
  %43 = sext i32 %c0min.0 to i64
  %44 = sext i32 %c0max.0 to i64
  %45 = ashr i64 %9, 32
  %46 = sext i32 %c1min.0 to i64
  br label %for.body116.lr.ph

for.body116.lr.ph:                                ; preds = %for.body116.lr.ph.preheader, %for.inc140
  %indvars.iv1039 = phi i64 [ %45, %for.body116.lr.ph.preheader ], [ %indvars.iv.next1040, %for.inc140 ]
  br label %for.body116

for.body116:                                      ; preds = %for.inc137, %for.body116.lr.ph
  %indvars.iv1037 = phi i64 [ %indvars.iv.next1038, %for.inc137 ], [ %43, %for.body116.lr.ph ]
  %arrayidx120 = getelementptr inbounds [32 x i16]*, [32 x i16]** %2, i64 %indvars.iv1037
  %47 = load [32 x i16]*, [32 x i16]** %arrayidx120, align 8, !tbaa !27
  %arrayidx122 = getelementptr inbounds [32 x i16], [32 x i16]* %47, i64 %indvars.iv1039, i64 %idxprom117
  br label %for.body126

for.body126:                                      ; preds = %for.inc134, %for.body116
  %histp.3468 = phi i16* [ %arrayidx122, %for.body116 ], [ %incdec.ptr127, %for.inc134 ]
  %c2.3467 = phi i32 [ %15, %for.body116 ], [ %inc135, %for.inc134 ]
  %48 = load i16, i16* %histp.3468, align 2, !tbaa !42
  %cmp129 = icmp eq i16 %48, 0
  br i1 %cmp129, label %for.inc134, label %if.then131

if.then131:                                       ; preds = %for.body126
  %indvars.iv1039.lcssa = phi i64 [ %indvars.iv1039, %for.body126 ]
  %49 = trunc i64 %indvars.iv1039.lcssa to i32
  store i32 %49, i32* %c1max6, align 4, !tbaa !52
  br label %have_c1max

for.inc134:                                       ; preds = %for.body126
  %incdec.ptr127 = getelementptr inbounds i16, i16* %histp.3468, i64 1
  %inc135 = add nsw i32 %c2.3467, 1
  %cmp124 = icmp slt i32 %c2.3467, %17
  br i1 %cmp124, label %for.body126, label %for.inc137

for.inc137:                                       ; preds = %for.inc134
  %cmp114 = icmp slt i64 %indvars.iv1037, %44
  %indvars.iv.next1038 = add nsw i64 %indvars.iv1037, 1
  br i1 %cmp114, label %for.body116, label %for.inc140

for.inc140:                                       ; preds = %for.inc137
  %indvars.iv.next1040 = add nsw i64 %indvars.iv1039, -1
  %cmp110 = icmp sgt i64 %indvars.iv1039, %46
  br i1 %cmp110, label %for.body116.lr.ph, label %have_c1max.loopexit

have_c1max.loopexit:                              ; preds = %for.inc140
  br label %have_c1max

have_c1max:                                       ; preds = %have_c1max.loopexit, %for.cond113.preheader.lr.ph, %have_c1min, %if.then131
  %c1max.0 = phi i32 [ %49, %if.then131 ], [ %12, %have_c1min ], [ %12, %for.cond113.preheader.lr.ph ], [ %12, %have_c1max.loopexit ]
  %50 = icmp slt i32 %15, %17
  br i1 %50, label %for.cond151.preheader.lr.ph, label %have_c2min

for.cond151.preheader.lr.ph:                      ; preds = %have_c1max
  %cmp152461 = icmp slt i32 %c0max.0, %c0min.0
  %idxprom156 = sext i32 %c1min.0 to i64
  %cmp162458 = icmp slt i32 %c1max.0, %c1min.0
  %or.cond1077 = or i1 %cmp152461, %cmp162458
  br i1 %or.cond1077, label %have_c2min, label %for.body154.lr.ph.preheader

for.body154.lr.ph.preheader:                      ; preds = %for.cond151.preheader.lr.ph
  %51 = sext i32 %c0min.0 to i64
  %52 = sext i32 %c0max.0 to i64
  %sext = shl i64 %14, 32
  %53 = ashr exact i64 %sext, 32
  %54 = ashr i64 %14, 32
  br label %for.body154.lr.ph

for.body154.lr.ph:                                ; preds = %for.body154.lr.ph.preheader, %for.inc177
  %indvars.iv1035 = phi i64 [ %53, %for.body154.lr.ph.preheader ], [ %indvars.iv.next1036, %for.inc177 ]
  br label %for.body154

for.body154:                                      ; preds = %for.inc174, %for.body154.lr.ph
  %indvars.iv1033 = phi i64 [ %indvars.iv.next1034, %for.inc174 ], [ %51, %for.body154.lr.ph ]
  %arrayidx158 = getelementptr inbounds [32 x i16]*, [32 x i16]** %2, i64 %indvars.iv1033
  %55 = load [32 x i16]*, [32 x i16]** %arrayidx158, align 8, !tbaa !27
  %arrayidx160 = getelementptr inbounds [32 x i16], [32 x i16]* %55, i64 %idxprom156, i64 %indvars.iv1035
  br label %for.body164

for.body164:                                      ; preds = %for.inc171, %for.body154
  %histp.4460 = phi i16* [ %arrayidx160, %for.body154 ], [ %add.ptr, %for.inc171 ]
  %c1.4459 = phi i32 [ %c1min.0, %for.body154 ], [ %inc172, %for.inc171 ]
  %56 = load i16, i16* %histp.4460, align 2, !tbaa !42
  %cmp166 = icmp eq i16 %56, 0
  br i1 %cmp166, label %for.inc171, label %if.then168

if.then168:                                       ; preds = %for.body164
  %indvars.iv1035.lcssa = phi i64 [ %indvars.iv1035, %for.body164 ]
  %57 = trunc i64 %indvars.iv1035.lcssa to i32
  store i32 %57, i32* %c2min7, align 8, !tbaa !44
  br label %have_c2min

for.inc171:                                       ; preds = %for.body164
  %inc172 = add nsw i32 %c1.4459, 1
  %add.ptr = getelementptr inbounds i16, i16* %histp.4460, i64 32
  %cmp162 = icmp slt i32 %c1.4459, %c1max.0
  br i1 %cmp162, label %for.body164, label %for.inc174

for.inc174:                                       ; preds = %for.inc171
  %cmp152 = icmp slt i64 %indvars.iv1033, %52
  %indvars.iv.next1034 = add nsw i64 %indvars.iv1033, 1
  br i1 %cmp152, label %for.body154, label %for.inc177

for.inc177:                                       ; preds = %for.inc174
  %indvars.iv.next1036 = add nsw i64 %indvars.iv1035, 1
  %cmp148 = icmp slt i64 %indvars.iv1035, %54
  br i1 %cmp148, label %for.body154.lr.ph, label %have_c2min.loopexit

have_c2min.loopexit:                              ; preds = %for.inc177
  br label %have_c2min

have_c2min:                                       ; preds = %have_c2min.loopexit, %for.cond151.preheader.lr.ph, %have_c1max, %if.then168
  %c2min.0 = phi i32 [ %57, %if.then168 ], [ %15, %have_c1max ], [ %15, %for.cond151.preheader.lr.ph ], [ %15, %have_c2min.loopexit ]
  %58 = icmp sgt i32 %17, %c2min.0
  br i1 %58, label %for.cond188.preheader.lr.ph, label %have_c2max

for.cond188.preheader.lr.ph:                      ; preds = %have_c2min
  %cmp189453 = icmp slt i32 %c0max.0, %c0min.0
  %idxprom193 = sext i32 %c1min.0 to i64
  %cmp199450 = icmp slt i32 %c1max.0, %c1min.0
  %or.cond1078 = or i1 %cmp189453, %cmp199450
  br i1 %or.cond1078, label %have_c2max, label %for.body191.lr.ph.preheader

for.body191.lr.ph.preheader:                      ; preds = %for.cond188.preheader.lr.ph
  %59 = sext i32 %c0min.0 to i64
  %60 = sext i32 %c0max.0 to i64
  %61 = ashr i64 %14, 32
  %62 = sext i32 %c2min.0 to i64
  br label %for.body191.lr.ph

for.body191.lr.ph:                                ; preds = %for.body191.lr.ph.preheader, %for.inc215
  %indvars.iv1031 = phi i64 [ %61, %for.body191.lr.ph.preheader ], [ %indvars.iv.next1032, %for.inc215 ]
  br label %for.body191

for.body191:                                      ; preds = %for.inc212, %for.body191.lr.ph
  %indvars.iv1029 = phi i64 [ %indvars.iv.next1030, %for.inc212 ], [ %59, %for.body191.lr.ph ]
  %arrayidx195 = getelementptr inbounds [32 x i16]*, [32 x i16]** %2, i64 %indvars.iv1029
  %63 = load [32 x i16]*, [32 x i16]** %arrayidx195, align 8, !tbaa !27
  %arrayidx197 = getelementptr inbounds [32 x i16], [32 x i16]* %63, i64 %idxprom193, i64 %indvars.iv1031
  br label %for.body201

for.body201:                                      ; preds = %for.inc208, %for.body191
  %histp.5452 = phi i16* [ %arrayidx197, %for.body191 ], [ %add.ptr210, %for.inc208 ]
  %c1.5451 = phi i32 [ %c1min.0, %for.body191 ], [ %inc209, %for.inc208 ]
  %64 = load i16, i16* %histp.5452, align 2, !tbaa !42
  %cmp203 = icmp eq i16 %64, 0
  br i1 %cmp203, label %for.inc208, label %if.then205

if.then205:                                       ; preds = %for.body201
  %indvars.iv1031.lcssa = phi i64 [ %indvars.iv1031, %for.body201 ]
  %65 = trunc i64 %indvars.iv1031.lcssa to i32
  store i32 %65, i32* %c2max8, align 4, !tbaa !46
  br label %have_c2max

for.inc208:                                       ; preds = %for.body201
  %inc209 = add nsw i32 %c1.5451, 1
  %add.ptr210 = getelementptr inbounds i16, i16* %histp.5452, i64 32
  %cmp199 = icmp slt i32 %c1.5451, %c1max.0
  br i1 %cmp199, label %for.body201, label %for.inc212

for.inc212:                                       ; preds = %for.inc208
  %cmp189 = icmp slt i64 %indvars.iv1029, %60
  %indvars.iv.next1030 = add nsw i64 %indvars.iv1029, 1
  br i1 %cmp189, label %for.body191, label %for.inc215

for.inc215:                                       ; preds = %for.inc212
  %indvars.iv.next1032 = add nsw i64 %indvars.iv1031, -1
  %cmp185 = icmp sgt i64 %indvars.iv1031, %62
  br i1 %cmp185, label %for.body191.lr.ph, label %have_c2max.loopexit

have_c2max.loopexit:                              ; preds = %for.inc215
  br label %have_c2max

have_c2max:                                       ; preds = %have_c2max.loopexit, %for.cond188.preheader.lr.ph, %have_c2min, %if.then205
  %c2max.0 = phi i32 [ %65, %if.then205 ], [ %17, %have_c2min ], [ %17, %for.cond188.preheader.lr.ph ], [ %17, %have_c2max.loopexit ]
  %sub = sub nsw i32 %c0max.0, %c0min.0
  %mul = shl i32 %sub, 4
  %conv219 = sext i32 %mul to i64
  %sub220 = sub nsw i32 %c1max.0, %c1min.0
  %mul222 = mul i32 %sub220, 12
  %conv223 = sext i32 %mul222 to i64
  %sub224 = sub nsw i32 %c2max.0, %c2min.0
  %shl225 = shl i32 %sub224, 3
  %conv227 = sext i32 %shl225 to i64
  %mul228 = mul nsw i64 %conv219, %conv219
  %mul229 = mul nsw i64 %conv223, %conv223
  %add = add nuw nsw i64 %mul229, %mul228
  %mul230 = mul nsw i64 %conv227, %conv227
  %add231 = add nuw nsw i64 %add, %mul230
  %volume = getelementptr inbounds %struct.box, %struct.box* %boxp, i64 0, i32 6
  store i64 %add231, i64* %volume, align 8, !tbaa !48
  %cmp233446 = icmp slt i32 %c0max.0, %c0min.0
  br i1 %cmp233446, label %for.end265, label %for.cond236.preheader.lr.ph

for.cond236.preheader.lr.ph:                      ; preds = %have_c2max
  %cmp237442 = icmp slt i32 %c1max.0, %c1min.0
  %idxprom240 = sext i32 %c2min.0 to i64
  %cmp247438 = icmp slt i32 %c2max.0, %c2min.0
  %or.cond1079 = or i1 %cmp237442, %cmp247438
  br i1 %or.cond1079, label %for.end265, label %for.body239.lr.ph.preheader

for.body239.lr.ph.preheader:                      ; preds = %for.cond236.preheader.lr.ph
  %66 = sext i32 %c1min.0 to i64
  %67 = sext i32 %c1max.0 to i64
  %68 = sext i32 %c0min.0 to i64
  %69 = sext i32 %c0max.0 to i64
  %70 = icmp slt i32 %c2max.0, %c2min.0
  %smax = select i1 %70, i32 %c2min.0, i32 %c2max.0
  %71 = sub i32 %smax, %c2min.0
  %72 = zext i32 %71 to i64
  %73 = add nuw nsw i64 %72, 1
  %74 = icmp sgt i32 %c2max.0, %c2min.0
  %smax1108 = select i1 %74, i32 %c2max.0, i32 %c2min.0
  %75 = sub i32 %smax1108, %c2min.0
  %76 = zext i32 %75 to i64
  %77 = add nuw nsw i64 %76, 1
  %78 = and i64 %77, 8589934588
  %79 = add nsw i64 %78, -4
  %80 = lshr exact i64 %79, 2
  %min.iters.check = icmp ult i64 %73, 4
  %n.vec = and i64 %73, 8589934588
  %cmp.zero = icmp eq i64 %n.vec, 0
  %cast.crd = trunc i64 %n.vec to i32
  %ind.end1087 = add i32 %c2min.0, %cast.crd
  %81 = and i64 %80, 1
  %lcmp.mod = icmp eq i64 %81, 0
  %82 = icmp eq i64 %80, 0
  %cmp.n = icmp eq i64 %73, %n.vec
  br label %for.body239.lr.ph

for.body239.lr.ph:                                ; preds = %for.body239.lr.ph.preheader, %for.inc263
  %indvars.iv1027 = phi i64 [ %68, %for.body239.lr.ph.preheader ], [ %indvars.iv.next1028, %for.inc263 ]
  %ccount.0448 = phi i64 [ 0, %for.body239.lr.ph.preheader ], [ %ccount.2.inc254.lcssa.lcssa, %for.inc263 ]
  %arrayidx243 = getelementptr inbounds [32 x i16]*, [32 x i16]** %2, i64 %indvars.iv1027
  %83 = load [32 x i16]*, [32 x i16]** %arrayidx243, align 8
  br label %for.body239

for.body239:                                      ; preds = %for.inc260, %for.body239.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc260 ], [ %66, %for.body239.lr.ph ]
  %ccount.1444 = phi i64 [ %ccount.2.inc254.lcssa, %for.inc260 ], [ %ccount.0448, %for.body239.lr.ph ]
  %arrayidx245 = getelementptr inbounds [32 x i16], [32 x i16]* %83, i64 %indvars.iv, i64 %idxprom240
  br i1 %min.iters.check, label %for.body249.preheader, label %min.iters.checked

min.iters.checked:                                ; preds = %for.body239
  %ind.end = getelementptr i16, i16* %arrayidx245, i64 %n.vec
  br i1 %cmp.zero, label %for.body249.preheader, label %vector.ph

vector.ph:                                        ; preds = %min.iters.checked
  %84 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %ccount.1444, i32 0
  br i1 %lcmp.mod, label %vector.body.prol, label %vector.ph.split

vector.body.prol:                                 ; preds = %vector.ph
  %85 = bitcast i16* %arrayidx245 to <2 x i16>*
  %wide.load.prol = load <2 x i16>, <2 x i16>* %85, align 2, !tbaa !42
  %86 = getelementptr i16, i16* %arrayidx245, i64 2
  %87 = bitcast i16* %86 to <2 x i16>*
  %wide.load1096.prol = load <2 x i16>, <2 x i16>* %87, align 2, !tbaa !42
  %88 = icmp ne <2 x i16> %wide.load.prol, zeroinitializer
  %89 = icmp ne <2 x i16> %wide.load1096.prol, zeroinitializer
  %90 = zext <2 x i1> %88 to <2 x i64>
  %91 = zext <2 x i1> %89 to <2 x i64>
  %92 = add nsw <2 x i64> %90, %84
  br label %vector.ph.split

vector.ph.split:                                  ; preds = %vector.body.prol, %vector.ph
  %.lcssa1100.unr = phi <2 x i64> [ undef, %vector.ph ], [ %91, %vector.body.prol ]
  %.lcssa.unr = phi <2 x i64> [ undef, %vector.ph ], [ %92, %vector.body.prol ]
  %index.unr = phi i64 [ 0, %vector.ph ], [ 4, %vector.body.prol ]
  %vec.phi.unr = phi <2 x i64> [ %84, %vector.ph ], [ %92, %vector.body.prol ]
  %vec.phi1088.unr = phi <2 x i64> [ zeroinitializer, %vector.ph ], [ %91, %vector.body.prol ]
  br i1 %82, label %middle.block, label %vector.ph.split.split

vector.ph.split.split:                            ; preds = %vector.ph.split
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph.split.split
  %index = phi i64 [ %index.unr, %vector.ph.split.split ], [ %index.next.1, %vector.body ]
  %vec.phi = phi <2 x i64> [ %vec.phi.unr, %vector.ph.split.split ], [ %109, %vector.body ]
  %vec.phi1088 = phi <2 x i64> [ %vec.phi1088.unr, %vector.ph.split.split ], [ %110, %vector.body ]
  %next.gep = getelementptr i16, i16* %arrayidx245, i64 %index
  %93 = bitcast i16* %next.gep to <2 x i16>*
  %wide.load = load <2 x i16>, <2 x i16>* %93, align 2, !tbaa !42
  %94 = getelementptr i16, i16* %next.gep, i64 2
  %95 = bitcast i16* %94 to <2 x i16>*
  %wide.load1096 = load <2 x i16>, <2 x i16>* %95, align 2, !tbaa !42
  %96 = icmp ne <2 x i16> %wide.load, zeroinitializer
  %97 = icmp ne <2 x i16> %wide.load1096, zeroinitializer
  %98 = zext <2 x i1> %96 to <2 x i64>
  %99 = zext <2 x i1> %97 to <2 x i64>
  %100 = add nsw <2 x i64> %98, %vec.phi
  %101 = add nsw <2 x i64> %99, %vec.phi1088
  %index.next = add i64 %index, 4
  %next.gep.1 = getelementptr i16, i16* %arrayidx245, i64 %index.next
  %102 = bitcast i16* %next.gep.1 to <2 x i16>*
  %wide.load.1 = load <2 x i16>, <2 x i16>* %102, align 2, !tbaa !42
  %103 = getelementptr i16, i16* %next.gep.1, i64 2
  %104 = bitcast i16* %103 to <2 x i16>*
  %wide.load1096.1 = load <2 x i16>, <2 x i16>* %104, align 2, !tbaa !42
  %105 = icmp ne <2 x i16> %wide.load.1, zeroinitializer
  %106 = icmp ne <2 x i16> %wide.load1096.1, zeroinitializer
  %107 = zext <2 x i1> %105 to <2 x i64>
  %108 = zext <2 x i1> %106 to <2 x i64>
  %109 = add nsw <2 x i64> %107, %100
  %110 = add nsw <2 x i64> %108, %101
  %index.next.1 = add i64 %index, 8
  %111 = icmp eq i64 %index.next.1, %n.vec
  br i1 %111, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !57

middle.block.unr-lcssa:                           ; preds = %vector.body
  %.lcssa1110 = phi <2 x i64> [ %110, %vector.body ]
  %.lcssa1109 = phi <2 x i64> [ %109, %vector.body ]
  br label %middle.block

middle.block:                                     ; preds = %vector.ph.split, %middle.block.unr-lcssa
  %.lcssa1100 = phi <2 x i64> [ %.lcssa1100.unr, %vector.ph.split ], [ %.lcssa1110, %middle.block.unr-lcssa ]
  %.lcssa = phi <2 x i64> [ %.lcssa.unr, %vector.ph.split ], [ %.lcssa1109, %middle.block.unr-lcssa ]
  %bin.rdx = add <2 x i64> %.lcssa1100, %.lcssa
  %rdx.shuf = shufflevector <2 x i64> %bin.rdx, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %bin.rdx1099 = add <2 x i64> %bin.rdx, %rdx.shuf
  %112 = extractelement <2 x i64> %bin.rdx1099, i32 0
  br i1 %cmp.n, label %for.inc260, label %for.body249.preheader

for.body249.preheader:                            ; preds = %middle.block, %min.iters.checked, %for.body239
  %ccount.2441.ph = phi i64 [ %ccount.1444, %min.iters.checked ], [ %ccount.1444, %for.body239 ], [ %112, %middle.block ]
  %histp.6440.ph = phi i16* [ %arrayidx245, %min.iters.checked ], [ %arrayidx245, %for.body239 ], [ %ind.end, %middle.block ]
  %c2.6439.ph = phi i32 [ %c2min.0, %min.iters.checked ], [ %c2min.0, %for.body239 ], [ %ind.end1087, %middle.block ]
  br label %for.body249

for.body249:                                      ; preds = %for.body249.preheader, %for.body249
  %ccount.2441 = phi i64 [ %ccount.2.inc254, %for.body249 ], [ %ccount.2441.ph, %for.body249.preheader ]
  %histp.6440 = phi i16* [ %incdec.ptr258, %for.body249 ], [ %histp.6440.ph, %for.body249.preheader ]
  %c2.6439 = phi i32 [ %inc257, %for.body249 ], [ %c2.6439.ph, %for.body249.preheader ]
  %113 = load i16, i16* %histp.6440, align 2, !tbaa !42
  %not.cmp251 = icmp ne i16 %113, 0
  %inc254 = zext i1 %not.cmp251 to i64
  %ccount.2.inc254 = add nsw i64 %inc254, %ccount.2441
  %inc257 = add nsw i32 %c2.6439, 1
  %incdec.ptr258 = getelementptr inbounds i16, i16* %histp.6440, i64 1
  %cmp247 = icmp slt i32 %c2.6439, %c2max.0
  br i1 %cmp247, label %for.body249, label %for.inc260.loopexit, !llvm.loop !60

for.inc260.loopexit:                              ; preds = %for.body249
  %ccount.2.inc254.lcssa1111 = phi i64 [ %ccount.2.inc254, %for.body249 ]
  br label %for.inc260

for.inc260:                                       ; preds = %for.inc260.loopexit, %middle.block
  %ccount.2.inc254.lcssa = phi i64 [ %112, %middle.block ], [ %ccount.2.inc254.lcssa1111, %for.inc260.loopexit ]
  %cmp237 = icmp slt i64 %indvars.iv, %67
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  br i1 %cmp237, label %for.body239, label %for.inc263

for.inc263:                                       ; preds = %for.inc260
  %ccount.2.inc254.lcssa.lcssa = phi i64 [ %ccount.2.inc254.lcssa, %for.inc260 ]
  %cmp233 = icmp slt i64 %indvars.iv1027, %69
  %indvars.iv.next1028 = add nsw i64 %indvars.iv1027, 1
  br i1 %cmp233, label %for.body239.lr.ph, label %for.end265.loopexit

for.end265.loopexit:                              ; preds = %for.inc263
  %ccount.2.inc254.lcssa.lcssa.lcssa = phi i64 [ %ccount.2.inc254.lcssa.lcssa, %for.inc263 ]
  br label %for.end265

for.end265:                                       ; preds = %for.end265.loopexit, %for.cond236.preheader.lr.ph, %have_c2max
  %ccount.0.lcssa = phi i64 [ 0, %have_c2max ], [ 0, %for.cond236.preheader.lr.ph ], [ %ccount.2.inc254.lcssa.lcssa.lcssa, %for.end265.loopexit ]
  %colorcount = getelementptr inbounds %struct.box, %struct.box* %boxp, i64 0, i32 7
  store i64 %ccount.0.lcssa, i64* %colorcount, align 8, !tbaa !47
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define internal fastcc void @fill_inverse_cmap(%struct.jpeg_decompress_struct* nocapture readonly %cinfo, i32 %c0, i32 %c1, i32 %c2) unnamed_addr #2 {
entry:
  %bestdist.i = alloca [128 x i64], align 16
  %mindist.i = alloca [256 x i64], align 16
  %colorlist = alloca [256 x i8], align 16
  %bestcolor = alloca [128 x i8], align 16
  %cquantize1 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 83
  %0 = bitcast %struct.jpeg_color_quantizer** %cquantize1 to %struct.my_cquantizer**
  %1 = load %struct.my_cquantizer*, %struct.my_cquantizer** %0, align 8, !tbaa !13
  %histogram2 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %1, i64 0, i32 3
  %2 = load [32 x i16]**, [32 x i16]*** %histogram2, align 8, !tbaa !25
  %3 = getelementptr inbounds [256 x i8], [256 x i8]* %colorlist, i64 0, i64 0
  call void @llvm.lifetime.start(i64 256, i8* %3) #5
  %4 = getelementptr inbounds [128 x i8], [128 x i8]* %bestcolor, i64 0, i64 0
  call void @llvm.lifetime.start(i64 128, i8* %4) #5
  %shr = ashr i32 %c0, 2
  %shr3 = ashr i32 %c1, 3
  %shr4 = ashr i32 %c2, 2
  %shl = shl i32 %shr, 5
  %add = or i32 %shl, 4
  %shl5 = shl i32 %shr3, 5
  %add6 = or i32 %shl5, 2
  %shl7 = shl i32 %shr4, 5
  %add8 = or i32 %shl7, 4
  %actual_number_of_colors.i = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 31
  %5 = load i32, i32* %actual_number_of_colors.i, align 4, !tbaa !39
  %6 = bitcast [256 x i64]* %mindist.i to i8*
  call void @llvm.lifetime.start(i64 2048, i8* %6) #5
  %add.i = or i32 %shl, 28
  %add1.i = add nsw i32 %add.i, %add
  %shr.i = ashr exact i32 %add1.i, 1
  %add2.i = or i32 %shl5, 30
  %add3.i = add nsw i32 %add2.i, %add6
  %shr4.i = ashr exact i32 %add3.i, 1
  %add5.i = or i32 %shl7, 28
  %add6.i = add nsw i32 %add5.i, %add8
  %shr7.i = ashr exact i32 %add6.i, 1
  %cmp291.i = icmp sgt i32 %5, 0
  br i1 %cmp291.i, label %for.body.lr.ph.i, label %find_nearby_colors.exit

for.body.lr.ph.i:                                 ; preds = %entry
  %colormap.i = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 32
  %7 = load i8**, i8*** %colormap.i, align 8
  %8 = load i8*, i8** %7, align 8
  %arrayidx45.i = getelementptr inbounds i8*, i8** %7, i64 1
  %9 = load i8*, i8** %arrayidx45.i, align 8
  %arrayidx95.i = getelementptr inbounds i8*, i8** %7, i64 2
  %10 = load i8*, i8** %arrayidx95.i, align 8
  br label %for.body.i

for.body.i:                                       ; preds = %if.end142.i, %for.body.lr.ph.i
  %indvars.iv295.i = phi i64 [ 0, %for.body.lr.ph.i ], [ %indvars.iv.next296.i, %if.end142.i ]
  %minmaxdist.0293.i = phi i64 [ 2147483647, %for.body.lr.ph.i ], [ %max_dist.2.minmaxdist.0.i, %if.end142.i ]
  %arrayidx8.i = getelementptr inbounds i8, i8* %8, i64 %indvars.iv295.i
  %11 = load i8, i8* %arrayidx8.i, align 1, !tbaa !41
  %conv.i = zext i8 %11 to i32
  %cmp9.i = icmp slt i32 %conv.i, %add
  br i1 %cmp9.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.body.i
  %sub.i = sub nsw i32 %conv.i, %add
  %mul.i = shl nsw i32 %sub.i, 1
  %conv11.i = sext i32 %mul.i to i64
  %mul12.i = mul nsw i64 %conv11.i, %conv11.i
  %sub13.i = sub nsw i32 %conv.i, %add.i
  %mul14.i = shl nsw i32 %sub13.i, 1
  %conv15.i = sext i32 %mul14.i to i64
  %mul16.i = mul nsw i64 %conv15.i, %conv15.i
  br label %if.end42.i

if.else.i:                                        ; preds = %for.body.i
  %cmp17.i = icmp sgt i32 %conv.i, %add.i
  br i1 %cmp17.i, label %if.then19.i, label %if.else28.i

if.then19.i:                                      ; preds = %if.else.i
  %sub20.i = sub nsw i32 %conv.i, %add.i
  %mul21.i = shl nsw i32 %sub20.i, 1
  %conv22.i = sext i32 %mul21.i to i64
  %mul23.i = mul nsw i64 %conv22.i, %conv22.i
  %sub24.i = sub nsw i32 %conv.i, %add
  %mul25.i = shl nsw i32 %sub24.i, 1
  %conv26.i = sext i32 %mul25.i to i64
  %mul27.i = mul nsw i64 %conv26.i, %conv26.i
  br label %if.end42.i

if.else28.i:                                      ; preds = %if.else.i
  %cmp29.i = icmp sgt i32 %conv.i, %shr.i
  br i1 %cmp29.i, label %if.else36.i, label %if.then31.i

if.then31.i:                                      ; preds = %if.else28.i
  %sub32.i = sub nsw i32 %conv.i, %add.i
  %mul33.i = shl nsw i32 %sub32.i, 1
  %conv34.i = sext i32 %mul33.i to i64
  %mul35.i = mul nsw i64 %conv34.i, %conv34.i
  br label %if.end42.i

if.else36.i:                                      ; preds = %if.else28.i
  %sub37.i = sub nsw i32 %conv.i, %add
  %mul38.i = shl nsw i32 %sub37.i, 1
  %conv39.i = sext i32 %mul38.i to i64
  %mul40.i = mul nsw i64 %conv39.i, %conv39.i
  br label %if.end42.i

if.end42.i:                                       ; preds = %if.else36.i, %if.then31.i, %if.then19.i, %if.then.i
  %min_dist.0.i = phi i64 [ %mul12.i, %if.then.i ], [ %mul23.i, %if.then19.i ], [ 0, %if.then31.i ], [ 0, %if.else36.i ]
  %max_dist.0.i = phi i64 [ %mul16.i, %if.then.i ], [ %mul27.i, %if.then19.i ], [ %mul35.i, %if.then31.i ], [ %mul40.i, %if.else36.i ]
  %arrayidx46.i = getelementptr inbounds i8, i8* %9, i64 %indvars.iv295.i
  %12 = load i8, i8* %arrayidx46.i, align 1, !tbaa !41
  %conv47.i = zext i8 %12 to i32
  %cmp48.i = icmp slt i32 %conv47.i, %add6
  br i1 %cmp48.i, label %if.then50.i, label %if.else61.i

if.then50.i:                                      ; preds = %if.end42.i
  %sub51.i = sub nsw i32 %conv47.i, %add6
  %mul52.i = mul nsw i32 %sub51.i, 3
  %conv53.i = sext i32 %mul52.i to i64
  %mul54.i = mul nsw i64 %conv53.i, %conv53.i
  %add55.i = add nuw nsw i64 %mul54.i, %min_dist.0.i
  %sub56.i = sub nsw i32 %conv47.i, %add2.i
  %mul57.i = mul nsw i32 %sub56.i, 3
  %conv58.i = sext i32 %mul57.i to i64
  %mul59.i = mul nsw i64 %conv58.i, %conv58.i
  br label %if.end92.i

if.else61.i:                                      ; preds = %if.end42.i
  %cmp62.i = icmp sgt i32 %conv47.i, %add2.i
  br i1 %cmp62.i, label %if.then64.i, label %if.else75.i

if.then64.i:                                      ; preds = %if.else61.i
  %sub65.i = sub nsw i32 %conv47.i, %add2.i
  %mul66.i = mul nsw i32 %sub65.i, 3
  %conv67.i = sext i32 %mul66.i to i64
  %mul68.i = mul nsw i64 %conv67.i, %conv67.i
  %add69.i = add nuw nsw i64 %mul68.i, %min_dist.0.i
  %sub70.i = sub nsw i32 %conv47.i, %add6
  %mul71.i = mul nsw i32 %sub70.i, 3
  %conv72.i = sext i32 %mul71.i to i64
  %mul73.i = mul nsw i64 %conv72.i, %conv72.i
  br label %if.end92.i

if.else75.i:                                      ; preds = %if.else61.i
  %cmp76.i = icmp sgt i32 %conv47.i, %shr4.i
  br i1 %cmp76.i, label %if.else84.i, label %if.then78.i

if.then78.i:                                      ; preds = %if.else75.i
  %sub79.i = sub nsw i32 %conv47.i, %add2.i
  %mul80.i = mul nsw i32 %sub79.i, 3
  %conv81.i = sext i32 %mul80.i to i64
  %mul82.i = mul nsw i64 %conv81.i, %conv81.i
  br label %if.end92.i

if.else84.i:                                      ; preds = %if.else75.i
  %sub85.i = sub nsw i32 %conv47.i, %add6
  %mul86.i = mul nsw i32 %sub85.i, 3
  %conv87.i = sext i32 %mul86.i to i64
  %mul88.i = mul nsw i64 %conv87.i, %conv87.i
  br label %if.end92.i

if.end92.i:                                       ; preds = %if.else84.i, %if.then78.i, %if.then64.i, %if.then50.i
  %min_dist.1.i = phi i64 [ %add55.i, %if.then50.i ], [ %add69.i, %if.then64.i ], [ %min_dist.0.i, %if.then78.i ], [ %min_dist.0.i, %if.else84.i ]
  %mul59.pn.i = phi i64 [ %mul59.i, %if.then50.i ], [ %mul73.i, %if.then64.i ], [ %mul82.i, %if.then78.i ], [ %mul88.i, %if.else84.i ]
  %max_dist.1.i = add nuw nsw i64 %mul59.pn.i, %max_dist.0.i
  %arrayidx96.i = getelementptr inbounds i8, i8* %10, i64 %indvars.iv295.i
  %13 = load i8, i8* %arrayidx96.i, align 1, !tbaa !41
  %conv97.i = zext i8 %13 to i32
  %cmp98.i = icmp slt i32 %conv97.i, %add8
  br i1 %cmp98.i, label %if.then100.i, label %if.else111.i

if.then100.i:                                     ; preds = %if.end92.i
  %sub101.i = sub nsw i32 %conv97.i, %add8
  %conv103.i = sext i32 %sub101.i to i64
  %mul104.i = mul nsw i64 %conv103.i, %conv103.i
  %add105.i = add nsw i64 %mul104.i, %min_dist.1.i
  %sub106.i = sub nsw i32 %conv97.i, %add5.i
  %conv108.i = sext i32 %sub106.i to i64
  %mul109.i = mul nsw i64 %conv108.i, %conv108.i
  br label %if.end142.i

if.else111.i:                                     ; preds = %if.end92.i
  %cmp112.i = icmp sgt i32 %conv97.i, %add5.i
  br i1 %cmp112.i, label %if.then114.i, label %if.else125.i

if.then114.i:                                     ; preds = %if.else111.i
  %sub115.i = sub nsw i32 %conv97.i, %add5.i
  %conv117.i = sext i32 %sub115.i to i64
  %mul118.i = mul nsw i64 %conv117.i, %conv117.i
  %add119.i = add nsw i64 %mul118.i, %min_dist.1.i
  %sub120.i = sub nsw i32 %conv97.i, %add8
  %conv122.i = sext i32 %sub120.i to i64
  %mul123.i = mul nsw i64 %conv122.i, %conv122.i
  br label %if.end142.i

if.else125.i:                                     ; preds = %if.else111.i
  %cmp126.i = icmp sgt i32 %conv97.i, %shr7.i
  br i1 %cmp126.i, label %if.else134.i, label %if.then128.i

if.then128.i:                                     ; preds = %if.else125.i
  %sub129.i = sub nsw i32 %conv97.i, %add5.i
  %conv131.i = sext i32 %sub129.i to i64
  %mul132.i = mul nsw i64 %conv131.i, %conv131.i
  br label %if.end142.i

if.else134.i:                                     ; preds = %if.else125.i
  %sub135.i = sub nsw i32 %conv97.i, %add8
  %conv137.i = sext i32 %sub135.i to i64
  %mul138.i = mul nsw i64 %conv137.i, %conv137.i
  br label %if.end142.i

if.end142.i:                                      ; preds = %if.else134.i, %if.then128.i, %if.then114.i, %if.then100.i
  %min_dist.2.i = phi i64 [ %add105.i, %if.then100.i ], [ %add119.i, %if.then114.i ], [ %min_dist.1.i, %if.then128.i ], [ %min_dist.1.i, %if.else134.i ]
  %mul109.pn.i = phi i64 [ %mul109.i, %if.then100.i ], [ %mul123.i, %if.then114.i ], [ %mul132.i, %if.then128.i ], [ %mul138.i, %if.else134.i ]
  %max_dist.2.i = add nuw nsw i64 %max_dist.1.i, %mul109.pn.i
  %arrayidx144.i = getelementptr inbounds [256 x i64], [256 x i64]* %mindist.i, i64 0, i64 %indvars.iv295.i
  store i64 %min_dist.2.i, i64* %arrayidx144.i, align 8, !tbaa !62
  %cmp145.i = icmp slt i64 %max_dist.2.i, %minmaxdist.0293.i
  %max_dist.2.minmaxdist.0.i = select i1 %cmp145.i, i64 %max_dist.2.i, i64 %minmaxdist.0293.i
  %indvars.iv.next296.i = add nuw nsw i64 %indvars.iv295.i, 1
  %lftr.wideiv99 = trunc i64 %indvars.iv.next296.i to i32
  %exitcond100 = icmp eq i32 %lftr.wideiv99, %5
  br i1 %exitcond100, label %for.body152.i.preheader, label %for.body.i

for.body152.i.preheader:                          ; preds = %if.end142.i
  %max_dist.2.minmaxdist.0.i.lcssa = phi i64 [ %max_dist.2.minmaxdist.0.i, %if.end142.i ]
  %xtraiter = and i32 %5, 1
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod, label %for.body152.i.preheader.split, label %for.body152.i.prol

for.body152.i.prol:                               ; preds = %for.body152.i.preheader
  %arrayidx154.i.prol = getelementptr inbounds [256 x i64], [256 x i64]* %mindist.i, i64 0, i64 0
  %14 = load i64, i64* %arrayidx154.i.prol, align 16, !tbaa !62
  %cmp155.i.prol = icmp sgt i64 %14, %max_dist.2.minmaxdist.0.i.lcssa
  br i1 %cmp155.i.prol, label %for.inc163.i.prol, label %if.then157.i.prol

if.then157.i.prol:                                ; preds = %for.body152.i.prol
  %arrayidx161.i.prol = getelementptr inbounds [256 x i8], [256 x i8]* %colorlist, i64 0, i64 0
  store i8 0, i8* %arrayidx161.i.prol, align 16, !tbaa !41
  br label %for.inc163.i.prol

for.inc163.i.prol:                                ; preds = %if.then157.i.prol, %for.body152.i.prol
  %ncolors.1.i.prol = phi i32 [ 1, %if.then157.i.prol ], [ 0, %for.body152.i.prol ]
  br label %for.body152.i.preheader.split

for.body152.i.preheader.split:                    ; preds = %for.body152.i.preheader, %for.inc163.i.prol
  %ncolors.1.i.lcssa.unr = phi i32 [ undef, %for.body152.i.preheader ], [ %ncolors.1.i.prol, %for.inc163.i.prol ]
  %indvars.iv.i.unr = phi i64 [ 0, %for.body152.i.preheader ], [ 1, %for.inc163.i.prol ]
  %ncolors.0290.i.unr = phi i32 [ 0, %for.body152.i.preheader ], [ %ncolors.1.i.prol, %for.inc163.i.prol ]
  %15 = icmp eq i32 %5, 1
  br i1 %15, label %find_nearby_colors.exit.loopexit, label %for.body152.i.preheader.split.split

for.body152.i.preheader.split.split:              ; preds = %for.body152.i.preheader.split
  br label %for.body152.i

for.body152.i:                                    ; preds = %for.inc163.i.1, %for.body152.i.preheader.split.split
  %indvars.iv.i = phi i64 [ %indvars.iv.i.unr, %for.body152.i.preheader.split.split ], [ %indvars.iv.next.i.1, %for.inc163.i.1 ]
  %ncolors.0290.i = phi i32 [ %ncolors.0290.i.unr, %for.body152.i.preheader.split.split ], [ %ncolors.1.i.1, %for.inc163.i.1 ]
  %arrayidx154.i = getelementptr inbounds [256 x i64], [256 x i64]* %mindist.i, i64 0, i64 %indvars.iv.i
  %16 = load i64, i64* %arrayidx154.i, align 8, !tbaa !62
  %cmp155.i = icmp sgt i64 %16, %max_dist.2.minmaxdist.0.i.lcssa
  br i1 %cmp155.i, label %for.inc163.i, label %if.then157.i

if.then157.i:                                     ; preds = %for.body152.i
  %conv158.i = trunc i64 %indvars.iv.i to i8
  %inc159.i = add nsw i32 %ncolors.0290.i, 1
  %idxprom160.i = sext i32 %ncolors.0290.i to i64
  %arrayidx161.i = getelementptr inbounds [256 x i8], [256 x i8]* %colorlist, i64 0, i64 %idxprom160.i
  store i8 %conv158.i, i8* %arrayidx161.i, align 1, !tbaa !41
  br label %for.inc163.i

for.inc163.i:                                     ; preds = %if.then157.i, %for.body152.i
  %ncolors.1.i = phi i32 [ %inc159.i, %if.then157.i ], [ %ncolors.0290.i, %for.body152.i ]
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %arrayidx154.i.1 = getelementptr inbounds [256 x i64], [256 x i64]* %mindist.i, i64 0, i64 %indvars.iv.next.i
  %17 = load i64, i64* %arrayidx154.i.1, align 8, !tbaa !62
  %cmp155.i.1 = icmp sgt i64 %17, %max_dist.2.minmaxdist.0.i.lcssa
  br i1 %cmp155.i.1, label %for.inc163.i.1, label %if.then157.i.1

find_nearby_colors.exit.loopexit.unr-lcssa:       ; preds = %for.inc163.i.1
  %ncolors.1.i.1.lcssa = phi i32 [ %ncolors.1.i.1, %for.inc163.i.1 ]
  br label %find_nearby_colors.exit.loopexit

find_nearby_colors.exit.loopexit:                 ; preds = %for.body152.i.preheader.split, %find_nearby_colors.exit.loopexit.unr-lcssa
  %ncolors.1.i.lcssa = phi i32 [ %ncolors.1.i.lcssa.unr, %for.body152.i.preheader.split ], [ %ncolors.1.i.1.lcssa, %find_nearby_colors.exit.loopexit.unr-lcssa ]
  br label %find_nearby_colors.exit

find_nearby_colors.exit:                          ; preds = %find_nearby_colors.exit.loopexit, %entry
  %ncolors.0.lcssa.i = phi i32 [ 0, %entry ], [ %ncolors.1.i.lcssa, %find_nearby_colors.exit.loopexit ]
  call void @llvm.lifetime.end(i64 2048, i8* %6) #5
  %18 = bitcast [128 x i64]* %bestdist.i to i8*
  call void @llvm.lifetime.start(i64 1024, i8* %18) #5
  %arraydecay.i = getelementptr inbounds [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 0
  br label %vector.body

vector.body:                                      ; preds = %find_nearby_colors.exit
  %19 = bitcast [128 x i64]* %bestdist.i to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %19, align 16, !tbaa !62
  %20 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 2
  %21 = bitcast i64* %20 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %21, align 16, !tbaa !62
  %next.gep.1 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 4
  %22 = bitcast i64* %next.gep.1 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %22, align 16, !tbaa !62
  %23 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 6
  %24 = bitcast i64* %23 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %24, align 16, !tbaa !62
  %next.gep.2 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 8
  %25 = bitcast i64* %next.gep.2 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %25, align 16, !tbaa !62
  %26 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 10
  %27 = bitcast i64* %26 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %27, align 16, !tbaa !62
  %next.gep.3 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 12
  %28 = bitcast i64* %next.gep.3 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %28, align 16, !tbaa !62
  %29 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 14
  %30 = bitcast i64* %29 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %30, align 16, !tbaa !62
  %next.gep.4 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 16
  %31 = bitcast i64* %next.gep.4 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %31, align 16, !tbaa !62
  %32 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 18
  %33 = bitcast i64* %32 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %33, align 16, !tbaa !62
  %next.gep.5 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 20
  %34 = bitcast i64* %next.gep.5 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %34, align 16, !tbaa !62
  %35 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 22
  %36 = bitcast i64* %35 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %36, align 16, !tbaa !62
  %next.gep.6 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 24
  %37 = bitcast i64* %next.gep.6 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %37, align 16, !tbaa !62
  %38 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 26
  %39 = bitcast i64* %38 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %39, align 16, !tbaa !62
  %next.gep.7 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 28
  %40 = bitcast i64* %next.gep.7 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %40, align 16, !tbaa !62
  %41 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 30
  %42 = bitcast i64* %41 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %42, align 16, !tbaa !62
  %next.gep.8 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 32
  %43 = bitcast i64* %next.gep.8 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %43, align 16, !tbaa !62
  %44 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 34
  %45 = bitcast i64* %44 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %45, align 16, !tbaa !62
  %next.gep.9 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 36
  %46 = bitcast i64* %next.gep.9 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %46, align 16, !tbaa !62
  %47 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 38
  %48 = bitcast i64* %47 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %48, align 16, !tbaa !62
  %next.gep.10 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 40
  %49 = bitcast i64* %next.gep.10 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %49, align 16, !tbaa !62
  %50 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 42
  %51 = bitcast i64* %50 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %51, align 16, !tbaa !62
  %next.gep.11 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 44
  %52 = bitcast i64* %next.gep.11 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %52, align 16, !tbaa !62
  %53 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 46
  %54 = bitcast i64* %53 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %54, align 16, !tbaa !62
  %next.gep.12 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 48
  %55 = bitcast i64* %next.gep.12 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %55, align 16, !tbaa !62
  %56 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 50
  %57 = bitcast i64* %56 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %57, align 16, !tbaa !62
  %next.gep.13 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 52
  %58 = bitcast i64* %next.gep.13 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %58, align 16, !tbaa !62
  %59 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 54
  %60 = bitcast i64* %59 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %60, align 16, !tbaa !62
  %next.gep.14 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 56
  %61 = bitcast i64* %next.gep.14 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %61, align 16, !tbaa !62
  %62 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 58
  %63 = bitcast i64* %62 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %63, align 16, !tbaa !62
  %next.gep.15 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 60
  %64 = bitcast i64* %next.gep.15 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %64, align 16, !tbaa !62
  %65 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 62
  %66 = bitcast i64* %65 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %66, align 16, !tbaa !62
  %next.gep.16 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 64
  %67 = bitcast i64* %next.gep.16 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %67, align 16, !tbaa !62
  %68 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 66
  %69 = bitcast i64* %68 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %69, align 16, !tbaa !62
  %next.gep.17 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 68
  %70 = bitcast i64* %next.gep.17 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %70, align 16, !tbaa !62
  %71 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 70
  %72 = bitcast i64* %71 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %72, align 16, !tbaa !62
  %next.gep.18 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 72
  %73 = bitcast i64* %next.gep.18 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %73, align 16, !tbaa !62
  %74 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 74
  %75 = bitcast i64* %74 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %75, align 16, !tbaa !62
  %next.gep.19 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 76
  %76 = bitcast i64* %next.gep.19 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %76, align 16, !tbaa !62
  %77 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 78
  %78 = bitcast i64* %77 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %78, align 16, !tbaa !62
  %next.gep.20 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 80
  %79 = bitcast i64* %next.gep.20 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %79, align 16, !tbaa !62
  %80 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 82
  %81 = bitcast i64* %80 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %81, align 16, !tbaa !62
  %next.gep.21 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 84
  %82 = bitcast i64* %next.gep.21 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %82, align 16, !tbaa !62
  %83 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 86
  %84 = bitcast i64* %83 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %84, align 16, !tbaa !62
  %next.gep.22 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 88
  %85 = bitcast i64* %next.gep.22 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %85, align 16, !tbaa !62
  %86 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 90
  %87 = bitcast i64* %86 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %87, align 16, !tbaa !62
  %next.gep.23 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 92
  %88 = bitcast i64* %next.gep.23 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %88, align 16, !tbaa !62
  %89 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 94
  %90 = bitcast i64* %89 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %90, align 16, !tbaa !62
  %next.gep.24 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 96
  %91 = bitcast i64* %next.gep.24 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %91, align 16, !tbaa !62
  %92 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 98
  %93 = bitcast i64* %92 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %93, align 16, !tbaa !62
  %next.gep.25 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 100
  %94 = bitcast i64* %next.gep.25 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %94, align 16, !tbaa !62
  %95 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 102
  %96 = bitcast i64* %95 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %96, align 16, !tbaa !62
  %next.gep.26 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 104
  %97 = bitcast i64* %next.gep.26 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %97, align 16, !tbaa !62
  %98 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 106
  %99 = bitcast i64* %98 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %99, align 16, !tbaa !62
  %next.gep.27 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 108
  %100 = bitcast i64* %next.gep.27 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %100, align 16, !tbaa !62
  %101 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 110
  %102 = bitcast i64* %101 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %102, align 16, !tbaa !62
  %next.gep.28 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 112
  %103 = bitcast i64* %next.gep.28 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %103, align 16, !tbaa !62
  %104 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 114
  %105 = bitcast i64* %104 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %105, align 16, !tbaa !62
  %next.gep.29 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 116
  %106 = bitcast i64* %next.gep.29 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %106, align 16, !tbaa !62
  %107 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 118
  %108 = bitcast i64* %107 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %108, align 16, !tbaa !62
  %next.gep.30 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 120
  %109 = bitcast i64* %next.gep.30 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %109, align 16, !tbaa !62
  %110 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 122
  %111 = bitcast i64* %110 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %111, align 16, !tbaa !62
  %next.gep.31 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 124
  %112 = bitcast i64* %next.gep.31 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %112, align 16, !tbaa !62
  %113 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 126
  %114 = bitcast i64* %113 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %114, align 16, !tbaa !62
  %cmp2135.i = icmp sgt i32 %ncolors.0.lcssa.i, 0
  br i1 %cmp2135.i, label %for.body3.lr.ph.i, label %find_best_colors.exit

for.body3.lr.ph.i:                                ; preds = %vector.body
  %colormap.i66 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 32
  %scevgep140.i = getelementptr [128 x i8], [128 x i8]* %bestcolor, i64 0, i64 32
  %scevgep141.i = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 32
  %scevgep140.i.1 = getelementptr [128 x i8], [128 x i8]* %bestcolor, i64 0, i64 64
  %scevgep141.i.1 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 64
  %scevgep140.i.2 = getelementptr [128 x i8], [128 x i8]* %bestcolor, i64 0, i64 96
  %scevgep141.i.2 = getelementptr [128 x i64], [128 x i64]* %bestdist.i, i64 0, i64 96
  br label %for.body3.i

for.body3.i:                                      ; preds = %for.end62.i.3, %for.body3.lr.ph.i
  %indvars.iv.i68 = phi i64 [ 0, %for.body3.lr.ph.i ], [ %indvars.iv.next.i79, %for.end62.i.3 ]
  %arrayidx.i = getelementptr inbounds [256 x i8], [256 x i8]* %colorlist, i64 0, i64 %indvars.iv.i68
  %115 = load i8, i8* %arrayidx.i, align 1, !tbaa !41
  %idxprom4.i = zext i8 %115 to i64
  %116 = load i8**, i8*** %colormap.i66, align 8, !tbaa !43
  %117 = load i8*, i8** %116, align 8, !tbaa !27
  %arrayidx6.i = getelementptr inbounds i8, i8* %117, i64 %idxprom4.i
  %118 = load i8, i8* %arrayidx6.i, align 1, !tbaa !41
  %conv7.i = zext i8 %118 to i32
  %sub.i69 = sub nsw i32 %add, %conv7.i
  %mul.i70 = shl nsw i32 %sub.i69, 1
  %conv8.i = sext i32 %mul.i70 to i64
  %mul9.i = mul nsw i64 %conv8.i, %conv8.i
  %arrayidx12.i = getelementptr inbounds i8*, i8** %116, i64 1
  %119 = load i8*, i8** %arrayidx12.i, align 8, !tbaa !27
  %arrayidx13.i = getelementptr inbounds i8, i8* %119, i64 %idxprom4.i
  %120 = load i8, i8* %arrayidx13.i, align 1, !tbaa !41
  %conv14.i = zext i8 %120 to i32
  %sub15.i = sub nsw i32 %add6, %conv14.i
  %mul16.i71 = mul nsw i32 %sub15.i, 3
  %conv17.i = sext i32 %mul16.i71 to i64
  %mul18.i = mul nsw i64 %conv17.i, %conv17.i
  %add.i72 = add nuw nsw i64 %mul18.i, %mul9.i
  %arrayidx21.i = getelementptr inbounds i8*, i8** %116, i64 2
  %121 = load i8*, i8** %arrayidx21.i, align 8, !tbaa !27
  %arrayidx22.i = getelementptr inbounds i8, i8* %121, i64 %idxprom4.i
  %122 = load i8, i8* %arrayidx22.i, align 1, !tbaa !41
  %conv23.i = zext i8 %122 to i32
  %sub24.i73 = sub nsw i32 %add8, %conv23.i
  %conv26.i74 = sext i32 %sub24.i73 to i64
  %mul27.i75 = mul nsw i64 %conv26.i74, %conv26.i74
  %add28.i = add nuw nsw i64 %add.i72, %mul27.i75
  %mul29.i = shl nsw i64 %conv8.i, 5
  %add30.i = add nsw i64 %mul29.i, 256
  %mul31.i = mul nsw i64 %conv17.i, 24
  %add32.i = add nsw i64 %mul31.i, 144
  %mul33.i76 = shl nsw i64 %conv26.i74, 4
  %add34.i = add nsw i64 %mul33.i76, 64
  %add52.i = add nsw i64 %mul33.i76, 192
  %add52.1.i = add nsw i64 %mul33.i76, 320
  br label %for.cond44.preheader.i

for.cond44.preheader.i:                           ; preds = %if.end.3.i, %for.body3.i
  %xx1.0129.i = phi i64 [ %add32.i, %for.body3.i ], [ %add59.i, %if.end.3.i ]
  %dist1.0128.i = phi i64 [ %add28.i, %for.body3.i ], [ %add58.i, %if.end.3.i ]
  %cptr.1127.i = phi i8* [ %4, %for.body3.i ], [ %scevgep.i, %if.end.3.i ]
  %bptr.2126.i = phi i64* [ %arraydecay.i, %for.body3.i ], [ %scevgep139.i, %if.end.3.i ]
  %ic1.0125.i = phi i32 [ 7, %for.body3.i ], [ %dec61.i, %if.end.3.i ]
  %scevgep.i = getelementptr i8, i8* %cptr.1127.i, i64 4
  %123 = load i64, i64* %bptr.2126.i, align 8, !tbaa !62
  %cmp48.i77 = icmp slt i64 %dist1.0128.i, %123
  br i1 %cmp48.i77, label %if.then.i78, label %if.end.i

if.then.i78:                                      ; preds = %for.cond44.preheader.i
  store i64 %dist1.0128.i, i64* %bptr.2126.i, align 8, !tbaa !62
  store i8 %115, i8* %cptr.1127.i, align 1, !tbaa !41
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i78, %for.cond44.preheader.i
  %add51.i = add nsw i64 %add34.i, %dist1.0128.i
  %incdec.ptr53.i = getelementptr inbounds i64, i64* %bptr.2126.i, i64 1
  %124 = load i64, i64* %incdec.ptr53.i, align 8, !tbaa !62
  %cmp48.1.i = icmp slt i64 %add51.i, %124
  br i1 %cmp48.1.i, label %if.then.1.i, label %if.end.1.i

for.end62.i:                                      ; preds = %if.end.3.i
  %add63.i = add nsw i64 %add28.i, %add30.i
  %add64.i = add nsw i64 %mul29.i, 768
  br label %for.cond44.preheader.i.1

if.then.1.i:                                      ; preds = %if.end.i
  %incdec.ptr54.i = getelementptr inbounds i8, i8* %cptr.1127.i, i64 1
  store i64 %add51.i, i64* %incdec.ptr53.i, align 8, !tbaa !62
  store i8 %115, i8* %incdec.ptr54.i, align 1, !tbaa !41
  br label %if.end.1.i

if.end.1.i:                                       ; preds = %if.then.1.i, %if.end.i
  %add51.1.i = add nsw i64 %add52.i, %add51.i
  %incdec.ptr53.1.i = getelementptr inbounds i64, i64* %bptr.2126.i, i64 2
  %125 = load i64, i64* %incdec.ptr53.1.i, align 8, !tbaa !62
  %cmp48.2.i = icmp slt i64 %add51.1.i, %125
  br i1 %cmp48.2.i, label %if.then.2.i, label %if.end.2.i

if.then.2.i:                                      ; preds = %if.end.1.i
  %incdec.ptr54.1.i = getelementptr inbounds i8, i8* %cptr.1127.i, i64 2
  store i64 %add51.1.i, i64* %incdec.ptr53.1.i, align 8, !tbaa !62
  store i8 %115, i8* %incdec.ptr54.1.i, align 1, !tbaa !41
  br label %if.end.2.i

if.end.2.i:                                       ; preds = %if.then.2.i, %if.end.1.i
  %add51.2.i = add nsw i64 %add52.1.i, %add51.1.i
  %incdec.ptr53.2.i = getelementptr inbounds i64, i64* %bptr.2126.i, i64 3
  %126 = load i64, i64* %incdec.ptr53.2.i, align 8, !tbaa !62
  %cmp48.3.i = icmp slt i64 %add51.2.i, %126
  br i1 %cmp48.3.i, label %if.then.3.i, label %if.end.3.i

if.then.3.i:                                      ; preds = %if.end.2.i
  %incdec.ptr54.2.i = getelementptr inbounds i8, i8* %cptr.1127.i, i64 3
  store i64 %add51.2.i, i64* %incdec.ptr53.2.i, align 8, !tbaa !62
  store i8 %115, i8* %incdec.ptr54.2.i, align 1, !tbaa !41
  br label %if.end.3.i

if.end.3.i:                                       ; preds = %if.then.3.i, %if.end.2.i
  %scevgep139.i = getelementptr i64, i64* %bptr.2126.i, i64 4
  %add58.i = add nsw i64 %dist1.0128.i, %xx1.0129.i
  %add59.i = add nsw i64 %xx1.0129.i, 288
  %dec61.i = add nsw i32 %ic1.0125.i, -1
  %cmp41.i = icmp sgt i32 %ic1.0125.i, 0
  br i1 %cmp41.i, label %for.cond44.preheader.i, label %for.end62.i

find_best_colors.exit.loopexit:                   ; preds = %for.end62.i.3
  br label %find_best_colors.exit

find_best_colors.exit:                            ; preds = %find_best_colors.exit.loopexit, %vector.body
  call void @llvm.lifetime.end(i64 1024, i8* %18) #5
  %shl11 = shl nsw i32 %shr, 2
  %shl12 = shl nsw i32 %shr3, 3
  %shl13 = shl nsw i32 %shr4, 2
  %idxprom = sext i32 %shl13 to i64
  %127 = sext i32 %shl12 to i64
  %128 = sext i32 %shl11 to i64
  %arrayidx = getelementptr inbounds [32 x i16]*, [32 x i16]** %2, i64 %128
  %.pre = load [32 x i16]*, [32 x i16]** %arrayidx, align 8, !tbaa !27
  br label %for.body17

for.body17:                                       ; preds = %for.body17, %find_best_colors.exit
  %indvars.iv = phi i64 [ 0, %find_best_colors.exit ], [ %indvars.iv.next, %for.body17 ]
  %cptr.186 = phi i8* [ %4, %find_best_colors.exit ], [ %scevgep, %for.body17 ]
  %129 = add nuw nsw i64 %indvars.iv, %127
  %arrayidx23 = getelementptr inbounds [32 x i16], [32 x i16]* %.pre, i64 %129, i64 %idxprom
  %incdec.ptr = getelementptr inbounds i8, i8* %cptr.186, i64 1
  %130 = load i8, i8* %cptr.186, align 1, !tbaa !41
  %conv = zext i8 %130 to i16
  %add27 = add nuw nsw i16 %conv, 1
  %incdec.ptr29 = getelementptr inbounds i16, i16* %arrayidx23, i64 1
  store i16 %add27, i16* %arrayidx23, align 2, !tbaa !42
  %incdec.ptr.1 = getelementptr inbounds i8, i8* %cptr.186, i64 2
  %131 = load i8, i8* %incdec.ptr, align 1, !tbaa !41
  %conv.1 = zext i8 %131 to i16
  %add27.1 = add nuw nsw i16 %conv.1, 1
  %incdec.ptr29.1 = getelementptr inbounds i16, i16* %arrayidx23, i64 2
  store i16 %add27.1, i16* %incdec.ptr29, align 2, !tbaa !42
  %incdec.ptr.2 = getelementptr inbounds i8, i8* %cptr.186, i64 3
  %132 = load i8, i8* %incdec.ptr.1, align 1, !tbaa !41
  %conv.2 = zext i8 %132 to i16
  %add27.2 = add nuw nsw i16 %conv.2, 1
  %incdec.ptr29.2 = getelementptr inbounds i16, i16* %arrayidx23, i64 3
  store i16 %add27.2, i16* %incdec.ptr29.1, align 2, !tbaa !42
  %133 = load i8, i8* %incdec.ptr.2, align 1, !tbaa !41
  %conv.3 = zext i8 %133 to i16
  %add27.3 = add nuw nsw i16 %conv.3, 1
  store i16 %add27.3, i16* %incdec.ptr29.2, align 2, !tbaa !42
  %scevgep = getelementptr i8, i8* %cptr.186, i64 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond91 = icmp eq i64 %indvars.iv.next, 8
  br i1 %exitcond91, label %for.inc33, label %for.body17

for.inc33:                                        ; preds = %for.body17
  %scevgep90 = getelementptr [128 x i8], [128 x i8]* %bestcolor, i64 0, i64 32
  %134 = or i64 %128, 1
  %arrayidx.1 = getelementptr inbounds [32 x i16]*, [32 x i16]** %2, i64 %134
  %.pre112 = load [32 x i16]*, [32 x i16]** %arrayidx.1, align 8, !tbaa !27
  br label %for.body17.1

for.body17.1:                                     ; preds = %for.body17.1, %for.inc33
  %indvars.iv.1 = phi i64 [ 0, %for.inc33 ], [ %indvars.iv.next.1, %for.body17.1 ]
  %cptr.186.1 = phi i8* [ %scevgep90, %for.inc33 ], [ %scevgep.1, %for.body17.1 ]
  %135 = add nuw nsw i64 %indvars.iv.1, %127
  %arrayidx23.1 = getelementptr inbounds [32 x i16], [32 x i16]* %.pre112, i64 %135, i64 %idxprom
  %incdec.ptr.1101 = getelementptr inbounds i8, i8* %cptr.186.1, i64 1
  %136 = load i8, i8* %cptr.186.1, align 1, !tbaa !41
  %conv.1102 = zext i8 %136 to i16
  %add27.1103 = add nuw nsw i16 %conv.1102, 1
  %incdec.ptr29.1104 = getelementptr inbounds i16, i16* %arrayidx23.1, i64 1
  store i16 %add27.1103, i16* %arrayidx23.1, align 2, !tbaa !42
  %incdec.ptr.1.1 = getelementptr inbounds i8, i8* %cptr.186.1, i64 2
  %137 = load i8, i8* %incdec.ptr.1101, align 1, !tbaa !41
  %conv.1.1 = zext i8 %137 to i16
  %add27.1.1 = add nuw nsw i16 %conv.1.1, 1
  %incdec.ptr29.1.1 = getelementptr inbounds i16, i16* %arrayidx23.1, i64 2
  store i16 %add27.1.1, i16* %incdec.ptr29.1104, align 2, !tbaa !42
  %incdec.ptr.2.1 = getelementptr inbounds i8, i8* %cptr.186.1, i64 3
  %138 = load i8, i8* %incdec.ptr.1.1, align 1, !tbaa !41
  %conv.2.1 = zext i8 %138 to i16
  %add27.2.1 = add nuw nsw i16 %conv.2.1, 1
  %incdec.ptr29.2.1 = getelementptr inbounds i16, i16* %arrayidx23.1, i64 3
  store i16 %add27.2.1, i16* %incdec.ptr29.1.1, align 2, !tbaa !42
  %139 = load i8, i8* %incdec.ptr.2.1, align 1, !tbaa !41
  %conv.3.1 = zext i8 %139 to i16
  %add27.3.1 = add nuw nsw i16 %conv.3.1, 1
  store i16 %add27.3.1, i16* %incdec.ptr29.2.1, align 2, !tbaa !42
  %scevgep.1 = getelementptr i8, i8* %cptr.186.1, i64 4
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.1, 1
  %exitcond91.1 = icmp eq i64 %indvars.iv.next.1, 8
  br i1 %exitcond91.1, label %for.inc33.1, label %for.body17.1

for.inc33.1:                                      ; preds = %for.body17.1
  %scevgep90.1 = getelementptr [128 x i8], [128 x i8]* %bestcolor, i64 0, i64 64
  %140 = or i64 %128, 2
  %arrayidx.2 = getelementptr inbounds [32 x i16]*, [32 x i16]** %2, i64 %140
  %.pre113 = load [32 x i16]*, [32 x i16]** %arrayidx.2, align 8, !tbaa !27
  br label %for.body17.2

for.body17.2:                                     ; preds = %for.body17.2, %for.inc33.1
  %indvars.iv.2 = phi i64 [ 0, %for.inc33.1 ], [ %indvars.iv.next.2, %for.body17.2 ]
  %cptr.186.2 = phi i8* [ %scevgep90.1, %for.inc33.1 ], [ %scevgep.2, %for.body17.2 ]
  %141 = add nuw nsw i64 %indvars.iv.2, %127
  %arrayidx23.2 = getelementptr inbounds [32 x i16], [32 x i16]* %.pre113, i64 %141, i64 %idxprom
  %incdec.ptr.2105 = getelementptr inbounds i8, i8* %cptr.186.2, i64 1
  %142 = load i8, i8* %cptr.186.2, align 1, !tbaa !41
  %conv.2106 = zext i8 %142 to i16
  %add27.2107 = add nuw nsw i16 %conv.2106, 1
  %incdec.ptr29.2108 = getelementptr inbounds i16, i16* %arrayidx23.2, i64 1
  store i16 %add27.2107, i16* %arrayidx23.2, align 2, !tbaa !42
  %incdec.ptr.1.2 = getelementptr inbounds i8, i8* %cptr.186.2, i64 2
  %143 = load i8, i8* %incdec.ptr.2105, align 1, !tbaa !41
  %conv.1.2 = zext i8 %143 to i16
  %add27.1.2 = add nuw nsw i16 %conv.1.2, 1
  %incdec.ptr29.1.2 = getelementptr inbounds i16, i16* %arrayidx23.2, i64 2
  store i16 %add27.1.2, i16* %incdec.ptr29.2108, align 2, !tbaa !42
  %incdec.ptr.2.2 = getelementptr inbounds i8, i8* %cptr.186.2, i64 3
  %144 = load i8, i8* %incdec.ptr.1.2, align 1, !tbaa !41
  %conv.2.2 = zext i8 %144 to i16
  %add27.2.2 = add nuw nsw i16 %conv.2.2, 1
  %incdec.ptr29.2.2 = getelementptr inbounds i16, i16* %arrayidx23.2, i64 3
  store i16 %add27.2.2, i16* %incdec.ptr29.1.2, align 2, !tbaa !42
  %145 = load i8, i8* %incdec.ptr.2.2, align 1, !tbaa !41
  %conv.3.2 = zext i8 %145 to i16
  %add27.3.2 = add nuw nsw i16 %conv.3.2, 1
  store i16 %add27.3.2, i16* %incdec.ptr29.2.2, align 2, !tbaa !42
  %scevgep.2 = getelementptr i8, i8* %cptr.186.2, i64 4
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv.2, 1
  %exitcond91.2 = icmp eq i64 %indvars.iv.next.2, 8
  br i1 %exitcond91.2, label %for.inc33.2, label %for.body17.2

for.inc33.2:                                      ; preds = %for.body17.2
  %scevgep90.2 = getelementptr [128 x i8], [128 x i8]* %bestcolor, i64 0, i64 96
  %146 = or i64 %128, 3
  %arrayidx.3 = getelementptr inbounds [32 x i16]*, [32 x i16]** %2, i64 %146
  %.pre114 = load [32 x i16]*, [32 x i16]** %arrayidx.3, align 8, !tbaa !27
  br label %for.body17.3

for.body17.3:                                     ; preds = %for.body17.3, %for.inc33.2
  %indvars.iv.3 = phi i64 [ 0, %for.inc33.2 ], [ %indvars.iv.next.3, %for.body17.3 ]
  %cptr.186.3 = phi i8* [ %scevgep90.2, %for.inc33.2 ], [ %scevgep.3, %for.body17.3 ]
  %147 = add nuw nsw i64 %indvars.iv.3, %127
  %arrayidx23.3 = getelementptr inbounds [32 x i16], [32 x i16]* %.pre114, i64 %147, i64 %idxprom
  %incdec.ptr.3109 = getelementptr inbounds i8, i8* %cptr.186.3, i64 1
  %148 = load i8, i8* %cptr.186.3, align 1, !tbaa !41
  %conv.3110 = zext i8 %148 to i16
  %add27.3111 = add nuw nsw i16 %conv.3110, 1
  %incdec.ptr29.3 = getelementptr inbounds i16, i16* %arrayidx23.3, i64 1
  store i16 %add27.3111, i16* %arrayidx23.3, align 2, !tbaa !42
  %incdec.ptr.1.3 = getelementptr inbounds i8, i8* %cptr.186.3, i64 2
  %149 = load i8, i8* %incdec.ptr.3109, align 1, !tbaa !41
  %conv.1.3 = zext i8 %149 to i16
  %add27.1.3 = add nuw nsw i16 %conv.1.3, 1
  %incdec.ptr29.1.3 = getelementptr inbounds i16, i16* %arrayidx23.3, i64 2
  store i16 %add27.1.3, i16* %incdec.ptr29.3, align 2, !tbaa !42
  %incdec.ptr.2.3 = getelementptr inbounds i8, i8* %cptr.186.3, i64 3
  %150 = load i8, i8* %incdec.ptr.1.3, align 1, !tbaa !41
  %conv.2.3 = zext i8 %150 to i16
  %add27.2.3 = add nuw nsw i16 %conv.2.3, 1
  %incdec.ptr29.2.3 = getelementptr inbounds i16, i16* %arrayidx23.3, i64 3
  store i16 %add27.2.3, i16* %incdec.ptr29.1.3, align 2, !tbaa !42
  %151 = load i8, i8* %incdec.ptr.2.3, align 1, !tbaa !41
  %conv.3.3 = zext i8 %151 to i16
  %add27.3.3 = add nuw nsw i16 %conv.3.3, 1
  store i16 %add27.3.3, i16* %incdec.ptr29.2.3, align 2, !tbaa !42
  %scevgep.3 = getelementptr i8, i8* %cptr.186.3, i64 4
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv.3, 1
  %exitcond91.3 = icmp eq i64 %indvars.iv.next.3, 8
  br i1 %exitcond91.3, label %for.inc33.3, label %for.body17.3

for.inc33.3:                                      ; preds = %for.body17.3
  call void @llvm.lifetime.end(i64 128, i8* %4) #5
  call void @llvm.lifetime.end(i64 256, i8* %3) #5
  ret void

for.cond44.preheader.i.1:                         ; preds = %if.end.3.i.1, %for.end62.i
  %xx1.0129.i.1 = phi i64 [ %add32.i, %for.end62.i ], [ %add59.i.1, %if.end.3.i.1 ]
  %dist1.0128.i.1 = phi i64 [ %add63.i, %for.end62.i ], [ %add58.i.1, %if.end.3.i.1 ]
  %cptr.1127.i.1 = phi i8* [ %scevgep140.i, %for.end62.i ], [ %scevgep.i.1, %if.end.3.i.1 ]
  %bptr.2126.i.1 = phi i64* [ %scevgep141.i, %for.end62.i ], [ %scevgep139.i.1, %if.end.3.i.1 ]
  %ic1.0125.i.1 = phi i32 [ 7, %for.end62.i ], [ %dec61.i.1, %if.end.3.i.1 ]
  %scevgep.i.1 = getelementptr i8, i8* %cptr.1127.i.1, i64 4
  %152 = load i64, i64* %bptr.2126.i.1, align 8, !tbaa !62
  %cmp48.i77.1 = icmp slt i64 %dist1.0128.i.1, %152
  br i1 %cmp48.i77.1, label %if.then.i78.1, label %if.end.i.1

if.then.i78.1:                                    ; preds = %for.cond44.preheader.i.1
  store i64 %dist1.0128.i.1, i64* %bptr.2126.i.1, align 8, !tbaa !62
  store i8 %115, i8* %cptr.1127.i.1, align 1, !tbaa !41
  br label %if.end.i.1

if.end.i.1:                                       ; preds = %if.then.i78.1, %for.cond44.preheader.i.1
  %add51.i.1 = add nsw i64 %add34.i, %dist1.0128.i.1
  %incdec.ptr53.i.1 = getelementptr inbounds i64, i64* %bptr.2126.i.1, i64 1
  %153 = load i64, i64* %incdec.ptr53.i.1, align 8, !tbaa !62
  %cmp48.1.i.1 = icmp slt i64 %add51.i.1, %153
  br i1 %cmp48.1.i.1, label %if.then.1.i.1, label %if.end.1.i.1

if.then.1.i.1:                                    ; preds = %if.end.i.1
  %incdec.ptr54.i.1 = getelementptr inbounds i8, i8* %cptr.1127.i.1, i64 1
  store i64 %add51.i.1, i64* %incdec.ptr53.i.1, align 8, !tbaa !62
  store i8 %115, i8* %incdec.ptr54.i.1, align 1, !tbaa !41
  br label %if.end.1.i.1

if.end.1.i.1:                                     ; preds = %if.then.1.i.1, %if.end.i.1
  %add51.1.i.1 = add nsw i64 %add52.i, %add51.i.1
  %incdec.ptr53.1.i.1 = getelementptr inbounds i64, i64* %bptr.2126.i.1, i64 2
  %154 = load i64, i64* %incdec.ptr53.1.i.1, align 8, !tbaa !62
  %cmp48.2.i.1 = icmp slt i64 %add51.1.i.1, %154
  br i1 %cmp48.2.i.1, label %if.then.2.i.1, label %if.end.2.i.1

if.then.2.i.1:                                    ; preds = %if.end.1.i.1
  %incdec.ptr54.1.i.1 = getelementptr inbounds i8, i8* %cptr.1127.i.1, i64 2
  store i64 %add51.1.i.1, i64* %incdec.ptr53.1.i.1, align 8, !tbaa !62
  store i8 %115, i8* %incdec.ptr54.1.i.1, align 1, !tbaa !41
  br label %if.end.2.i.1

if.end.2.i.1:                                     ; preds = %if.then.2.i.1, %if.end.1.i.1
  %add51.2.i.1 = add nsw i64 %add52.1.i, %add51.1.i.1
  %incdec.ptr53.2.i.1 = getelementptr inbounds i64, i64* %bptr.2126.i.1, i64 3
  %155 = load i64, i64* %incdec.ptr53.2.i.1, align 8, !tbaa !62
  %cmp48.3.i.1 = icmp slt i64 %add51.2.i.1, %155
  br i1 %cmp48.3.i.1, label %if.then.3.i.1, label %if.end.3.i.1

if.then.3.i.1:                                    ; preds = %if.end.2.i.1
  %incdec.ptr54.2.i.1 = getelementptr inbounds i8, i8* %cptr.1127.i.1, i64 3
  store i64 %add51.2.i.1, i64* %incdec.ptr53.2.i.1, align 8, !tbaa !62
  store i8 %115, i8* %incdec.ptr54.2.i.1, align 1, !tbaa !41
  br label %if.end.3.i.1

if.end.3.i.1:                                     ; preds = %if.then.3.i.1, %if.end.2.i.1
  %scevgep139.i.1 = getelementptr i64, i64* %bptr.2126.i.1, i64 4
  %add58.i.1 = add nsw i64 %dist1.0128.i.1, %xx1.0129.i.1
  %add59.i.1 = add nsw i64 %xx1.0129.i.1, 288
  %dec61.i.1 = add nsw i32 %ic1.0125.i.1, -1
  %cmp41.i.1 = icmp sgt i32 %ic1.0125.i.1, 0
  br i1 %cmp41.i.1, label %for.cond44.preheader.i.1, label %for.end62.i.1

for.end62.i.1:                                    ; preds = %if.end.3.i.1
  %add63.i.1 = add nsw i64 %add63.i, %add64.i
  %add64.i.1 = add nsw i64 %mul29.i, 1280
  br label %for.cond44.preheader.i.2

for.cond44.preheader.i.2:                         ; preds = %if.end.3.i.2, %for.end62.i.1
  %xx1.0129.i.2 = phi i64 [ %add32.i, %for.end62.i.1 ], [ %add59.i.2, %if.end.3.i.2 ]
  %dist1.0128.i.2 = phi i64 [ %add63.i.1, %for.end62.i.1 ], [ %add58.i.2, %if.end.3.i.2 ]
  %cptr.1127.i.2 = phi i8* [ %scevgep140.i.1, %for.end62.i.1 ], [ %scevgep.i.2, %if.end.3.i.2 ]
  %bptr.2126.i.2 = phi i64* [ %scevgep141.i.1, %for.end62.i.1 ], [ %scevgep139.i.2, %if.end.3.i.2 ]
  %ic1.0125.i.2 = phi i32 [ 7, %for.end62.i.1 ], [ %dec61.i.2, %if.end.3.i.2 ]
  %scevgep.i.2 = getelementptr i8, i8* %cptr.1127.i.2, i64 4
  %156 = load i64, i64* %bptr.2126.i.2, align 8, !tbaa !62
  %cmp48.i77.2 = icmp slt i64 %dist1.0128.i.2, %156
  br i1 %cmp48.i77.2, label %if.then.i78.2, label %if.end.i.2

if.then.i78.2:                                    ; preds = %for.cond44.preheader.i.2
  store i64 %dist1.0128.i.2, i64* %bptr.2126.i.2, align 8, !tbaa !62
  store i8 %115, i8* %cptr.1127.i.2, align 1, !tbaa !41
  br label %if.end.i.2

if.end.i.2:                                       ; preds = %if.then.i78.2, %for.cond44.preheader.i.2
  %add51.i.2 = add nsw i64 %add34.i, %dist1.0128.i.2
  %incdec.ptr53.i.2 = getelementptr inbounds i64, i64* %bptr.2126.i.2, i64 1
  %157 = load i64, i64* %incdec.ptr53.i.2, align 8, !tbaa !62
  %cmp48.1.i.2 = icmp slt i64 %add51.i.2, %157
  br i1 %cmp48.1.i.2, label %if.then.1.i.2, label %if.end.1.i.2

if.then.1.i.2:                                    ; preds = %if.end.i.2
  %incdec.ptr54.i.2 = getelementptr inbounds i8, i8* %cptr.1127.i.2, i64 1
  store i64 %add51.i.2, i64* %incdec.ptr53.i.2, align 8, !tbaa !62
  store i8 %115, i8* %incdec.ptr54.i.2, align 1, !tbaa !41
  br label %if.end.1.i.2

if.end.1.i.2:                                     ; preds = %if.then.1.i.2, %if.end.i.2
  %add51.1.i.2 = add nsw i64 %add52.i, %add51.i.2
  %incdec.ptr53.1.i.2 = getelementptr inbounds i64, i64* %bptr.2126.i.2, i64 2
  %158 = load i64, i64* %incdec.ptr53.1.i.2, align 8, !tbaa !62
  %cmp48.2.i.2 = icmp slt i64 %add51.1.i.2, %158
  br i1 %cmp48.2.i.2, label %if.then.2.i.2, label %if.end.2.i.2

if.then.2.i.2:                                    ; preds = %if.end.1.i.2
  %incdec.ptr54.1.i.2 = getelementptr inbounds i8, i8* %cptr.1127.i.2, i64 2
  store i64 %add51.1.i.2, i64* %incdec.ptr53.1.i.2, align 8, !tbaa !62
  store i8 %115, i8* %incdec.ptr54.1.i.2, align 1, !tbaa !41
  br label %if.end.2.i.2

if.end.2.i.2:                                     ; preds = %if.then.2.i.2, %if.end.1.i.2
  %add51.2.i.2 = add nsw i64 %add52.1.i, %add51.1.i.2
  %incdec.ptr53.2.i.2 = getelementptr inbounds i64, i64* %bptr.2126.i.2, i64 3
  %159 = load i64, i64* %incdec.ptr53.2.i.2, align 8, !tbaa !62
  %cmp48.3.i.2 = icmp slt i64 %add51.2.i.2, %159
  br i1 %cmp48.3.i.2, label %if.then.3.i.2, label %if.end.3.i.2

if.then.3.i.2:                                    ; preds = %if.end.2.i.2
  %incdec.ptr54.2.i.2 = getelementptr inbounds i8, i8* %cptr.1127.i.2, i64 3
  store i64 %add51.2.i.2, i64* %incdec.ptr53.2.i.2, align 8, !tbaa !62
  store i8 %115, i8* %incdec.ptr54.2.i.2, align 1, !tbaa !41
  br label %if.end.3.i.2

if.end.3.i.2:                                     ; preds = %if.then.3.i.2, %if.end.2.i.2
  %scevgep139.i.2 = getelementptr i64, i64* %bptr.2126.i.2, i64 4
  %add58.i.2 = add nsw i64 %dist1.0128.i.2, %xx1.0129.i.2
  %add59.i.2 = add nsw i64 %xx1.0129.i.2, 288
  %dec61.i.2 = add nsw i32 %ic1.0125.i.2, -1
  %cmp41.i.2 = icmp sgt i32 %ic1.0125.i.2, 0
  br i1 %cmp41.i.2, label %for.cond44.preheader.i.2, label %for.end62.i.2

for.end62.i.2:                                    ; preds = %if.end.3.i.2
  %add63.i.2 = add nsw i64 %add63.i.1, %add64.i.1
  br label %for.cond44.preheader.i.3

for.cond44.preheader.i.3:                         ; preds = %if.end.3.i.3, %for.end62.i.2
  %xx1.0129.i.3 = phi i64 [ %add32.i, %for.end62.i.2 ], [ %add59.i.3, %if.end.3.i.3 ]
  %dist1.0128.i.3 = phi i64 [ %add63.i.2, %for.end62.i.2 ], [ %add58.i.3, %if.end.3.i.3 ]
  %cptr.1127.i.3 = phi i8* [ %scevgep140.i.2, %for.end62.i.2 ], [ %scevgep.i.3, %if.end.3.i.3 ]
  %bptr.2126.i.3 = phi i64* [ %scevgep141.i.2, %for.end62.i.2 ], [ %scevgep139.i.3, %if.end.3.i.3 ]
  %ic1.0125.i.3 = phi i32 [ 7, %for.end62.i.2 ], [ %dec61.i.3, %if.end.3.i.3 ]
  %scevgep.i.3 = getelementptr i8, i8* %cptr.1127.i.3, i64 4
  %160 = load i64, i64* %bptr.2126.i.3, align 8, !tbaa !62
  %cmp48.i77.3 = icmp slt i64 %dist1.0128.i.3, %160
  br i1 %cmp48.i77.3, label %if.then.i78.3, label %if.end.i.3

if.then.i78.3:                                    ; preds = %for.cond44.preheader.i.3
  store i64 %dist1.0128.i.3, i64* %bptr.2126.i.3, align 8, !tbaa !62
  store i8 %115, i8* %cptr.1127.i.3, align 1, !tbaa !41
  br label %if.end.i.3

if.end.i.3:                                       ; preds = %if.then.i78.3, %for.cond44.preheader.i.3
  %add51.i.3 = add nsw i64 %add34.i, %dist1.0128.i.3
  %incdec.ptr53.i.3 = getelementptr inbounds i64, i64* %bptr.2126.i.3, i64 1
  %161 = load i64, i64* %incdec.ptr53.i.3, align 8, !tbaa !62
  %cmp48.1.i.3 = icmp slt i64 %add51.i.3, %161
  br i1 %cmp48.1.i.3, label %if.then.1.i.3, label %if.end.1.i.3

if.then.1.i.3:                                    ; preds = %if.end.i.3
  %incdec.ptr54.i.3 = getelementptr inbounds i8, i8* %cptr.1127.i.3, i64 1
  store i64 %add51.i.3, i64* %incdec.ptr53.i.3, align 8, !tbaa !62
  store i8 %115, i8* %incdec.ptr54.i.3, align 1, !tbaa !41
  br label %if.end.1.i.3

if.end.1.i.3:                                     ; preds = %if.then.1.i.3, %if.end.i.3
  %add51.1.i.3 = add nsw i64 %add52.i, %add51.i.3
  %incdec.ptr53.1.i.3 = getelementptr inbounds i64, i64* %bptr.2126.i.3, i64 2
  %162 = load i64, i64* %incdec.ptr53.1.i.3, align 8, !tbaa !62
  %cmp48.2.i.3 = icmp slt i64 %add51.1.i.3, %162
  br i1 %cmp48.2.i.3, label %if.then.2.i.3, label %if.end.2.i.3

if.then.2.i.3:                                    ; preds = %if.end.1.i.3
  %incdec.ptr54.1.i.3 = getelementptr inbounds i8, i8* %cptr.1127.i.3, i64 2
  store i64 %add51.1.i.3, i64* %incdec.ptr53.1.i.3, align 8, !tbaa !62
  store i8 %115, i8* %incdec.ptr54.1.i.3, align 1, !tbaa !41
  br label %if.end.2.i.3

if.end.2.i.3:                                     ; preds = %if.then.2.i.3, %if.end.1.i.3
  %add51.2.i.3 = add nsw i64 %add52.1.i, %add51.1.i.3
  %incdec.ptr53.2.i.3 = getelementptr inbounds i64, i64* %bptr.2126.i.3, i64 3
  %163 = load i64, i64* %incdec.ptr53.2.i.3, align 8, !tbaa !62
  %cmp48.3.i.3 = icmp slt i64 %add51.2.i.3, %163
  br i1 %cmp48.3.i.3, label %if.then.3.i.3, label %if.end.3.i.3

if.then.3.i.3:                                    ; preds = %if.end.2.i.3
  %incdec.ptr54.2.i.3 = getelementptr inbounds i8, i8* %cptr.1127.i.3, i64 3
  store i64 %add51.2.i.3, i64* %incdec.ptr53.2.i.3, align 8, !tbaa !62
  store i8 %115, i8* %incdec.ptr54.2.i.3, align 1, !tbaa !41
  br label %if.end.3.i.3

if.end.3.i.3:                                     ; preds = %if.then.3.i.3, %if.end.2.i.3
  %scevgep139.i.3 = getelementptr i64, i64* %bptr.2126.i.3, i64 4
  %add58.i.3 = add nsw i64 %dist1.0128.i.3, %xx1.0129.i.3
  %add59.i.3 = add nsw i64 %xx1.0129.i.3, 288
  %dec61.i.3 = add nsw i32 %ic1.0125.i.3, -1
  %cmp41.i.3 = icmp sgt i32 %ic1.0125.i.3, 0
  br i1 %cmp41.i.3, label %for.cond44.preheader.i.3, label %for.end62.i.3

for.end62.i.3:                                    ; preds = %if.end.3.i.3
  %indvars.iv.next.i79 = add nuw nsw i64 %indvars.iv.i68, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next.i79 to i32
  %exitcond96 = icmp eq i32 %lftr.wideiv, %ncolors.0.lcssa.i
  br i1 %exitcond96, label %find_best_colors.exit.loopexit, label %for.body3.i

if.then157.i.1:                                   ; preds = %for.inc163.i
  %conv158.i.1 = trunc i64 %indvars.iv.next.i to i8
  %inc159.i.1 = add nsw i32 %ncolors.1.i, 1
  %idxprom160.i.1 = sext i32 %ncolors.1.i to i64
  %arrayidx161.i.1 = getelementptr inbounds [256 x i8], [256 x i8]* %colorlist, i64 0, i64 %idxprom160.i.1
  store i8 %conv158.i.1, i8* %arrayidx161.i.1, align 1, !tbaa !41
  br label %for.inc163.i.1

for.inc163.i.1:                                   ; preds = %if.then157.i.1, %for.inc163.i
  %ncolors.1.i.1 = phi i32 [ %inc159.i.1, %if.then157.i.1 ], [ %ncolors.1.i, %for.inc163.i ]
  %indvars.iv.next.i.1 = add nsw i64 %indvars.iv.i, 2
  %lftr.wideiv97.1 = trunc i64 %indvars.iv.next.i.1 to i32
  %exitcond98.1 = icmp eq i32 %lftr.wideiv97.1, %5
  br i1 %exitcond98.1, label %find_nearby_colors.exit.loopexit.unr-lcssa, label %for.body152.i
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"MaxFunctionCount", i32 150581}
!1 = !{!"clang version 3.8.0 (trunk 257473)"}
!2 = !{!3, !4, i64 8}
!3 = !{!"jpeg_decompress_struct", !4, i64 0, !4, i64 8, !4, i64 16, !7, i64 24, !7, i64 28, !4, i64 32, !7, i64 40, !7, i64 44, !7, i64 48, !5, i64 52, !5, i64 56, !7, i64 60, !7, i64 64, !8, i64 72, !7, i64 80, !7, i64 84, !5, i64 88, !7, i64 92, !7, i64 96, !7, i64 100, !5, i64 104, !7, i64 108, !7, i64 112, !7, i64 116, !7, i64 120, !7, i64 124, !7, i64 128, !7, i64 132, !7, i64 136, !7, i64 140, !7, i64 144, !7, i64 148, !4, i64 152, !7, i64 160, !7, i64 164, !7, i64 168, !7, i64 172, !7, i64 176, !4, i64 184, !5, i64 192, !5, i64 224, !5, i64 256, !7, i64 288, !4, i64 296, !7, i64 304, !7, i64 308, !5, i64 312, !5, i64 328, !5, i64 344, !7, i64 360, !7, i64 364, !5, i64 368, !9, i64 370, !9, i64 372, !7, i64 376, !5, i64 380, !7, i64 384, !7, i64 388, !7, i64 392, !7, i64 396, !7, i64 400, !4, i64 408, !7, i64 416, !5, i64 424, !7, i64 456, !7, i64 460, !7, i64 464, !5, i64 468, !7, i64 508, !7, i64 512, !7, i64 516, !7, i64 520, !7, i64 524, !4, i64 528, !4, i64 536, !4, i64 544, !4, i64 552, !4, i64 560, !4, i64 568, !4, i64 576, !4, i64 584, !4, i64 592, !4, i64 600, !4, i64 608}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!"int", !5, i64 0}
!8 = !{!"double", !5, i64 0}
!9 = !{!"short", !5, i64 0}
!10 = !{!11, !4, i64 0}
!11 = !{!"jpeg_memory_mgr", !4, i64 0, !4, i64 8, !4, i64 16, !4, i64 24, !4, i64 32, !4, i64 40, !4, i64 48, !4, i64 56, !4, i64 64, !4, i64 72, !4, i64 80, !12, i64 88}
!12 = !{!"long", !5, i64 0}
!13 = !{!3, !4, i64 608}
!14 = !{!15, !4, i64 0}
!15 = !{!"", !16, i64 0, !4, i64 32, !7, i64 40, !4, i64 48, !7, i64 56, !4, i64 64, !7, i64 72, !4, i64 80}
!16 = !{!"jpeg_color_quantizer", !4, i64 0, !4, i64 8, !4, i64 16, !4, i64 24}
!17 = !{!15, !4, i64 24}
!18 = !{!15, !4, i64 64}
!19 = !{!15, !4, i64 80}
!20 = !{!3, !7, i64 136}
!21 = !{!3, !4, i64 0}
!22 = !{!23, !7, i64 40}
!23 = !{!"jpeg_error_mgr", !4, i64 0, !4, i64 8, !4, i64 16, !4, i64 24, !4, i64 32, !7, i64 40, !5, i64 44, !7, i64 124, !12, i64 128, !4, i64 136, !7, i64 144, !4, i64 152, !7, i64 160, !7, i64 164}
!24 = !{!23, !4, i64 0}
!25 = !{!15, !4, i64 48}
!26 = !{!11, !4, i64 8}
!27 = !{!4, !4, i64 0}
!28 = !{!15, !7, i64 56}
!29 = !{!3, !7, i64 124}
!30 = !{!3, !7, i64 112}
!31 = !{!7, !7, i64 0}
!32 = !{!11, !4, i64 16}
!33 = !{!15, !4, i64 32}
!34 = !{!15, !7, i64 40}
!35 = !{!3, !5, i64 104}
!36 = !{!3, !7, i64 128}
!37 = !{!15, !4, i64 8}
!38 = !{!15, !4, i64 16}
!39 = !{!3, !7, i64 148}
!40 = !{!15, !7, i64 72}
!41 = !{!5, !5, i64 0}
!42 = !{!9, !9, i64 0}
!43 = !{!3, !4, i64 152}
!44 = !{!45, !7, i64 16}
!45 = !{!"", !7, i64 0, !7, i64 4, !7, i64 8, !7, i64 12, !7, i64 16, !7, i64 20, !12, i64 24, !12, i64 32}
!46 = !{!45, !7, i64 20}
!47 = !{!45, !12, i64 32}
!48 = !{!45, !12, i64 24}
!49 = distinct !{!49, !50}
!50 = !{!"llvm.loop.unroll.disable"}
!51 = !{!45, !7, i64 4}
!52 = !{!45, !7, i64 12}
!53 = !{!45, !7, i64 0}
!54 = !{!45, !7, i64 8}
!55 = !{!23, !4, i64 8}
!56 = !{!3, !4, i64 408}
!57 = distinct !{!57, !58, !59}
!58 = !{!"llvm.loop.vectorize.width", i32 1}
!59 = !{!"llvm.loop.interleave.count", i32 1}
!60 = distinct !{!60, !61, !58, !59}
!61 = !{!"llvm.loop.unroll.runtime.disable"}
!62 = !{!12, !12, i64 0}
