digraph "CFG for 'fullsize_smooth_downsample' function" {
	label="CFG for 'fullsize_smooth_downsample' function";

	Node0x58bbda0 [shape=record,label="{entry:\l  %width_in_blocks = getelementptr inbounds %struct.jpeg_component_info,\l... %struct.jpeg_component_info* %compptr, i64 0, i32 7\l  %0 = load i32, i32* %width_in_blocks, align 4, !tbaa !3\l  %mul = shl i32 %0, 3\l  %add.ptr = getelementptr inbounds i8*, i8** %input_data, i64 -1\l  %max_v_samp_factor = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %cinfo, i64 0, i32 39\l  %1 = load i32, i32* %max_v_samp_factor, align 4, !tbaa !9\l  %image_width = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %cinfo, i64 0, i32 6\l  %2 = load i32, i32* %image_width, align 8, !tbaa !13\l  %sub.i = sub i32 %mul, %2\l  %cmp.i = icmp sgt i32 %sub.i, 0\l  %cmp121.i = icmp sgt i32 %1, -2\l  %or.cond.i = and i1 %cmp121.i, %cmp.i\l  br i1 %or.cond.i, label %for.body.us.preheader.i, label\l... %expand_right_edge.exit\l|{<s0>T|<s1>F}}"];
	Node0x58bbda0:s0 -> Node0x58bcaf0;
	Node0x58bbda0:s1 -> Node0x58bcbf0;
	Node0x58bcaf0 [shape=record,label="{for.body.us.preheader.i:                          \l  %idx.ext.i = zext i32 %2 to i64\l  %3 = xor i32 %mul, -1\l  %4 = add i32 %2, %3\l  %5 = icmp sgt i32 %4, -2\l  %smax.i = select i1 %5, i32 %4, i32 -2\l  %6 = or i32 %mul, 1\l  %7 = sub i32 %6, %2\l  %8 = add i32 %7, %smax.i\l  %9 = zext i32 %8 to i64\l  %10 = add nuw nsw i64 %9, 1\l  %11 = add i32 %1, 2\l  %12 = add i32 %1, 1\l  %xtraiter = and i32 %11, 3\l  %lcmp.mod = icmp eq i32 %xtraiter, 0\l  br i1 %lcmp.mod, label %for.body.us.preheader.i.split, label\l... %for.body.us.i.prol.preheader\l|{<s0>T|<s1>F}}"];
	Node0x58bcaf0:s0 -> Node0x58bcec0;
	Node0x58bcaf0:s1 -> Node0x58bd640;
	Node0x58bd640 [shape=record,label="{for.body.us.i.prol.preheader:                     \l  br label %for.body.us.i.prol\l}"];
	Node0x58bd640 -> Node0x58bd7f0;
	Node0x58bd7f0 [shape=record,label="{for.body.us.i.prol:                               \l  %indvars.iv.i.prol = phi i64 [ %indvars.iv.next.i.prol, %for.body.us.i.prol\l... ], [ 0, %for.body.us.i.prol.preheader ]\l  %prol.iter = phi i32 [ %prol.iter.sub, %for.body.us.i.prol ], [ %xtraiter,\l... %for.body.us.i.prol.preheader ]\l  %arrayidx.us.i.prol = getelementptr inbounds i8*, i8** %add.ptr, i64\l... %indvars.iv.i.prol\l  %13 = load i8*, i8** %arrayidx.us.i.prol, align 8, !tbaa !14\l  %add.ptr.us.i.prol = getelementptr inbounds i8, i8* %13, i64 %idx.ext.i\l  %arrayidx2.us.i.prol = getelementptr inbounds i8, i8* %add.ptr.us.i.prol,\l... i64 -1\l  %14 = load i8, i8* %arrayidx2.us.i.prol, align 1, !tbaa !15\l  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr.us.i.prol, i8 %14, i64\l... %10, i32 1, i1 false) #5\l  %indvars.iv.next.i.prol = add nuw nsw i64 %indvars.iv.i.prol, 1\l  %prol.iter.sub = add i32 %prol.iter, -1\l  %prol.iter.cmp = icmp eq i32 %prol.iter.sub, 0\l  br i1 %prol.iter.cmp, label %for.body.us.preheader.i.split.loopexit, label\l... %for.body.us.i.prol, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x58bd7f0:s0 -> Node0x58be760;
	Node0x58bd7f0:s1 -> Node0x58bd7f0;
	Node0x58be760 [shape=record,label="{for.body.us.preheader.i.split.loopexit:           \l  %indvars.iv.next.i.prol.lcssa = phi i64 [ %indvars.iv.next.i.prol,\l... %for.body.us.i.prol ]\l  br label %for.body.us.preheader.i.split\l}"];
	Node0x58be760 -> Node0x58bcec0;
	Node0x58bcec0 [shape=record,label="{for.body.us.preheader.i.split:                    \l  %indvars.iv.i.unr = phi i64 [ 0, %for.body.us.preheader.i ], [\l... %indvars.iv.next.i.prol.lcssa, %for.body.us.preheader.i.split.loopexit ]\l  %15 = icmp ult i32 %12, 3\l  br i1 %15, label %expand_right_edge.exit.loopexit, label\l... %for.body.us.preheader.i.split.split\l|{<s0>T|<s1>F}}"];
	Node0x58bcec0:s0 -> Node0x58beab0;
	Node0x58bcec0:s1 -> Node0x58bebd0;
	Node0x58bebd0 [shape=record,label="{for.body.us.preheader.i.split.split:              \l  br label %for.body.us.i\l}"];
	Node0x58bebd0 -> Node0x58bed80;
	Node0x58bed80 [shape=record,label="{for.body.us.i:                                    \l  %indvars.iv.i = phi i64 [ %indvars.iv.i.unr,\l... %for.body.us.preheader.i.split.split ], [ %indvars.iv.next.i.3,\l... %for.body.us.i ]\l  %arrayidx.us.i = getelementptr inbounds i8*, i8** %add.ptr, i64 %indvars.iv.i\l  %16 = load i8*, i8** %arrayidx.us.i, align 8, !tbaa !14\l  %add.ptr.us.i = getelementptr inbounds i8, i8* %16, i64 %idx.ext.i\l  %arrayidx2.us.i = getelementptr inbounds i8, i8* %add.ptr.us.i, i64 -1\l  %17 = load i8, i8* %arrayidx2.us.i, align 1, !tbaa !15\l  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr.us.i, i8 %17, i64 %10, i32\l... 1, i1 false) #5\l  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1\l  %arrayidx.us.i.1 = getelementptr inbounds i8*, i8** %add.ptr, i64\l... %indvars.iv.next.i\l  %18 = load i8*, i8** %arrayidx.us.i.1, align 8, !tbaa !14\l  %add.ptr.us.i.1 = getelementptr inbounds i8, i8* %18, i64 %idx.ext.i\l  %arrayidx2.us.i.1 = getelementptr inbounds i8, i8* %add.ptr.us.i.1, i64 -1\l  %19 = load i8, i8* %arrayidx2.us.i.1, align 1, !tbaa !15\l  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr.us.i.1, i8 %19, i64 %10,\l... i32 1, i1 false) #5\l  %indvars.iv.next.i.1 = add nsw i64 %indvars.iv.i, 2\l  %arrayidx.us.i.2 = getelementptr inbounds i8*, i8** %add.ptr, i64\l... %indvars.iv.next.i.1\l  %20 = load i8*, i8** %arrayidx.us.i.2, align 8, !tbaa !14\l  %add.ptr.us.i.2 = getelementptr inbounds i8, i8* %20, i64 %idx.ext.i\l  %arrayidx2.us.i.2 = getelementptr inbounds i8, i8* %add.ptr.us.i.2, i64 -1\l  %21 = load i8, i8* %arrayidx2.us.i.2, align 1, !tbaa !15\l  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr.us.i.2, i8 %21, i64 %10,\l... i32 1, i1 false) #5\l  %indvars.iv.next.i.2 = add nsw i64 %indvars.iv.i, 3\l  %arrayidx.us.i.3 = getelementptr inbounds i8*, i8** %add.ptr, i64\l... %indvars.iv.next.i.2\l  %22 = load i8*, i8** %arrayidx.us.i.3, align 8, !tbaa !14\l  %add.ptr.us.i.3 = getelementptr inbounds i8, i8* %22, i64 %idx.ext.i\l  %arrayidx2.us.i.3 = getelementptr inbounds i8, i8* %add.ptr.us.i.3, i64 -1\l  %23 = load i8, i8* %arrayidx2.us.i.3, align 1, !tbaa !15\l  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr.us.i.3, i8 %23, i64 %10,\l... i32 1, i1 false) #5\l  %indvars.iv.next.i.3 = add nsw i64 %indvars.iv.i, 4\l  %lftr.wideiv.3 = trunc i64 %indvars.iv.next.i.3 to i32\l  %exitcond.3 = icmp eq i32 %lftr.wideiv.3, %11\l  br i1 %exitcond.3, label %expand_right_edge.exit.loopexit.unr-lcssa, label\l... %for.body.us.i\l|{<s0>T|<s1>F}}"];
	Node0x58bed80:s0 -> Node0x58c0ed0;
	Node0x58bed80:s1 -> Node0x58bed80;
	Node0x58c0ed0 [shape=record,label="{expand_right_edge.exit.loopexit.unr-lcssa:        \l  br label %expand_right_edge.exit.loopexit\l}"];
	Node0x58c0ed0 -> Node0x58beab0;
	Node0x58beab0 [shape=record,label="{expand_right_edge.exit.loopexit:                  \l  br label %expand_right_edge.exit\l}"];
	Node0x58beab0 -> Node0x58bcbf0;
	Node0x58bcbf0 [shape=record,label="{expand_right_edge.exit:                           \l  %smoothing_factor = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %cinfo, i64 0, i32 27\l  %24 = load i32, i32* %smoothing_factor, align 8, !tbaa !18\l  %conv = sext i32 %24 to i64\l  %mul1 = shl nsw i64 %conv, 9\l  %sub = sub nsw i64 65536, %mul1\l  %mul3 = shl nsw i32 %24, 6\l  %conv4 = sext i32 %mul3 to i64\l  %v_samp_factor = getelementptr inbounds %struct.jpeg_component_info,\l... %struct.jpeg_component_info* %compptr, i64 0, i32 3\l  %25 = load i32, i32* %v_samp_factor, align 4, !tbaa !19\l  %cmp163 = icmp sgt i32 %25, 0\l  br i1 %cmp163, label %for.body.lr.ph, label %for.end83\l|{<s0>T|<s1>F}}"];
	Node0x58bcbf0:s0 -> Node0x58c1bb0;
	Node0x58bcbf0:s1 -> Node0x58c1c90;
	Node0x58c1bb0 [shape=record,label="{for.body.lr.ph:                                   \l  %sub40 = add i32 %mul, -2\l  %26 = add i32 %mul, -3\l  %27 = zext i32 %26 to i64\l  %28 = or i64 %27, 2\l  br label %for.body\l}"];
	Node0x58c1bb0 -> Node0x58c1fe0;
	Node0x58c1fe0 [shape=record,label="{for.body:                                         \l  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.end ]\l  %arrayidx = getelementptr inbounds i8*, i8** %output_data, i64 %indvars.iv\l  %29 = load i8*, i8** %arrayidx, align 8, !tbaa !14\l  %arrayidx7 = getelementptr inbounds i8*, i8** %input_data, i64 %indvars.iv\l  %30 = load i8*, i8** %arrayidx7, align 8, !tbaa !14\l  %31 = add nsw i64 %indvars.iv, -1\l  %arrayidx10 = getelementptr inbounds i8*, i8** %input_data, i64 %31\l  %32 = load i8*, i8** %arrayidx10, align 8, !tbaa !14\l  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1\l  %arrayidx13 = getelementptr inbounds i8*, i8** %input_data, i64\l... %indvars.iv.next\l  %33 = load i8*, i8** %arrayidx13, align 8, !tbaa !14\l  %incdec.ptr = getelementptr inbounds i8, i8* %32, i64 1\l  %34 = load i8, i8* %32, align 1, !tbaa !15\l  %conv14 = zext i8 %34 to i32\l  %incdec.ptr15 = getelementptr inbounds i8, i8* %33, i64 1\l  %35 = load i8, i8* %33, align 1, !tbaa !15\l  %conv16 = zext i8 %35 to i32\l  %add17 = add nuw nsw i32 %conv16, %conv14\l  %36 = load i8, i8* %30, align 1, !tbaa !15\l  %conv18 = zext i8 %36 to i32\l  %add19 = add nuw nsw i32 %add17, %conv18\l  %incdec.ptr20 = getelementptr inbounds i8, i8* %30, i64 1\l  %conv22 = zext i8 %36 to i64\l  %37 = load i8, i8* %incdec.ptr, align 1, !tbaa !15\l  %conv23 = zext i8 %37 to i32\l  %38 = load i8, i8* %incdec.ptr15, align 1, !tbaa !15\l  %conv24 = zext i8 %38 to i32\l  %add25 = add nuw nsw i32 %conv24, %conv23\l  %39 = load i8, i8* %incdec.ptr20, align 1, !tbaa !15\l  %conv26 = zext i8 %39 to i32\l  %add27 = add nuw nsw i32 %add25, %conv26\l  %conv28148 = zext i32 %add19 to i64\l  %conv32149 = zext i32 %add27 to i64\l  %factor = shl nuw nsw i64 %conv28148, 1\l  %add31 = sub nsw i64 %factor, %conv22\l  %add33 = add nsw i64 %add31, %conv32149\l  %mul34 = mul nsw i64 %conv22, %sub\l  %mul35 = mul nsw i64 %add33, %conv4\l  %add36 = add i64 %mul34, 32768\l  %add37 = add i64 %add36, %mul35\l  %shr150 = lshr i64 %add37, 16\l  %conv38 = trunc i64 %shr150 to i8\l  store i8 %conv38, i8* %29, align 1, !tbaa !15\l  %scevgep = getelementptr i8, i8* %29, i64 %28\l  br label %for.body44\l}"];
	Node0x58c1fe0 -> Node0x58c06a0;
	Node0x58c06a0 [shape=record,label="{for.body44:                                       \l  %.pn = phi i8* [ %29, %for.body ], [ %outptr.0162, %for.body44 ]\l  %lastcolsum.0161 = phi i32 [ %add19, %for.body ], [ %colsum.0160,\l... %for.body44 ]\l  %colsum.0160 = phi i32 [ %add27, %for.body ], [ %add54, %for.body44 ]\l  %colctr.0159 = phi i32 [ %sub40, %for.body ], [ %dec, %for.body44 ]\l  %below_ptr.0158 = phi i8* [ %incdec.ptr15, %for.body ], [ %incdec.ptr49,\l... %for.body44 ]\l  %above_ptr.0157 = phi i8* [ %incdec.ptr, %for.body ], [ %incdec.ptr48,\l... %for.body44 ]\l  %inptr.0156 = phi i8* [ %incdec.ptr20, %for.body ], [ %incdec.ptr45,\l... %for.body44 ]\l  %outptr.0162 = getelementptr inbounds i8, i8* %.pn, i64 1\l  %incdec.ptr45 = getelementptr inbounds i8, i8* %inptr.0156, i64 1\l  %40 = load i8, i8* %inptr.0156, align 1, !tbaa !15\l  %conv47 = zext i8 %40 to i64\l  %incdec.ptr48 = getelementptr inbounds i8, i8* %above_ptr.0157, i64 1\l  %incdec.ptr49 = getelementptr inbounds i8, i8* %below_ptr.0158, i64 1\l  %41 = load i8, i8* %incdec.ptr48, align 1, !tbaa !15\l  %conv50 = zext i8 %41 to i32\l  %42 = load i8, i8* %incdec.ptr49, align 1, !tbaa !15\l  %conv51 = zext i8 %42 to i32\l  %add52 = add nuw nsw i32 %conv51, %conv50\l  %43 = load i8, i8* %incdec.ptr45, align 1, !tbaa !15\l  %conv53 = zext i8 %43 to i32\l  %add54 = add nuw nsw i32 %add52, %conv53\l  %conv59152 = zext i32 %add54 to i64\l  %addconv = add nsw i32 %lastcolsum.0161, %colsum.0160\l  %sub57 = sext i32 %addconv to i64\l  %add58 = sub nsw i64 %sub57, %conv47\l  %add60 = add nsw i64 %add58, %conv59152\l  %mul61 = mul nsw i64 %conv47, %sub\l  %mul62 = mul nsw i64 %add60, %conv4\l  %add63 = add i64 %mul61, 32768\l  %add64 = add i64 %add63, %mul62\l  %shr65153 = lshr i64 %add64, 16\l  %conv66 = trunc i64 %shr65153 to i8\l  store i8 %conv66, i8* %outptr.0162, align 1, !tbaa !15\l  %dec = add i32 %colctr.0159, -1\l  %cmp42 = icmp eq i32 %dec, 0\l  br i1 %cmp42, label %for.end, label %for.body44\l|{<s0>T|<s1>F}}"];
	Node0x58c06a0:s0 -> Node0x58c2130;
	Node0x58c06a0:s1 -> Node0x58c06a0;
	Node0x58c2130 [shape=record,label="{for.end:                                          \l  %conv59152.lcssa = phi i64 [ %conv59152, %for.body44 ]\l  %colsum.0160.lcssa = phi i32 [ %colsum.0160, %for.body44 ]\l  %scevgep166 = getelementptr i8, i8* %30, i64 %28\l  %44 = load i8, i8* %scevgep166, align 1, !tbaa !15\l  %conv69 = zext i8 %44 to i64\l  %conv70 = sext i32 %colsum.0160.lcssa to i64\l  %factor154 = shl nuw nsw i64 %conv59152.lcssa, 1\l  %add73 = add nsw i64 %factor154, %conv70\l  %add75 = sub nsw i64 %add73, %conv69\l  %mul76 = mul nsw i64 %conv69, %sub\l  %mul77 = mul nsw i64 %add75, %conv4\l  %add78 = add i64 %mul76, 32768\l  %add79 = add i64 %add78, %mul77\l  %shr80151 = lshr i64 %add79, 16\l  %conv81 = trunc i64 %shr80151 to i8\l  store i8 %conv81, i8* %scevgep, align 1, !tbaa !15\l  %45 = load i32, i32* %v_samp_factor, align 4, !tbaa !19\l  %46 = sext i32 %45 to i64\l  %cmp = icmp slt i64 %indvars.iv.next, %46\l  br i1 %cmp, label %for.body, label %for.end83.loopexit\l|{<s0>T|<s1>F}}"];
	Node0x58c2130:s0 -> Node0x58c1fe0;
	Node0x58c2130:s1 -> Node0x58c7940;
	Node0x58c7940 [shape=record,label="{for.end83.loopexit:                               \l  br label %for.end83\l}"];
	Node0x58c7940 -> Node0x58c1c90;
	Node0x58c1c90 [shape=record,label="{for.end83:                                        \l  ret void\l}"];
}
