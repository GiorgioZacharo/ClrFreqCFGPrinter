digraph "CFG for 'jpeg_copy_critical_parameters' function" {
	label="CFG for 'jpeg_copy_critical_parameters' function";

	Node0x66d2ed0 [shape=record, style = filled, fillcolor = blue, label="{entry:\l  %global_state = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %dstinfo, i64 0, i32 4\l  %0 = load i32, i32* %global_state, align 4, !tbaa !2\l  %cmp = icmp eq i32 %0, 100\l  br i1 %cmp, label %entry.if.end_crit_edge, label %if.then\l|{<s0>T|<s1>F}}"];
	Node0x66d2ed0:s0 -> Node0x66d3090;
	Node0x66d2ed0:s1 -> Node0x66d3190;
	Node0x66d3090 [shape=record, style = filled, fillcolor = blue, label="{entry.if.end_crit_edge:                           \l  %.pre209 = bitcast %struct.jpeg_compress_struct* %dstinfo to\l... %struct.jpeg_common_struct*\l  br label %if.end\l}"];
	Node0x66d3090 -> Node0x66d32f0;
	Node0x66d3190 [shape=record, style = filled, fillcolor = blue, label="{if.then:                                          \l  %err = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %dstinfo, i64 0, i32 0\l  %1 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8,\l... !tbaa !10\l  %msg_code = getelementptr inbounds %struct.jpeg_error_mgr,\l... %struct.jpeg_error_mgr* %1, i64 0, i32 5\l  store i32 18, i32* %msg_code, align 8, !tbaa !11\l  %arrayidx = getelementptr inbounds %struct.jpeg_error_mgr,\l... %struct.jpeg_error_mgr* %1, i64 0, i32 6, i32 0, i64 0\l  store i32 %0, i32* %arrayidx, align 4, !tbaa !14\l  %error_exit = getelementptr inbounds %struct.jpeg_error_mgr,\l... %struct.jpeg_error_mgr* %1, i64 0, i32 0\l  %2 = load void (%struct.jpeg_common_struct*)*, void\l... (%struct.jpeg_common_struct*)** %error_exit, align 8, !tbaa !15\l  %3 = bitcast %struct.jpeg_compress_struct* %dstinfo to\l... %struct.jpeg_common_struct*\l  tail call void %2(%struct.jpeg_common_struct* %3) #3\l  br label %if.end\l}"];
	Node0x66d3190 -> Node0x66d32f0;
	Node0x66d32f0 [shape=record, style = filled, fillcolor = blue, label="{if.end:                                           \l  %.pre-phi = phi %struct.jpeg_common_struct* [ %.pre209,\l... %entry.if.end_crit_edge ], [ %3, %if.then ]\l  %image_width = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %srcinfo, i64 0, i32 6\l  %4 = bitcast i32* %image_width to i64*\l  %5 = load i64, i64* %4, align 8\l  %6 = trunc i64 %5 to i32\l  %image_width4 = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %dstinfo, i64 0, i32 6\l  store i32 %6, i32* %image_width4, align 8, !tbaa !16\l  %7 = lshr i64 %5, 32\l  %8 = trunc i64 %7 to i32\l  %image_height5 = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %dstinfo, i64 0, i32 7\l  store i32 %8, i32* %image_height5, align 4, !tbaa !17\l  %num_components = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %srcinfo, i64 0, i32 8\l  %9 = bitcast i32* %num_components to i64*\l  %10 = load i64, i64* %9, align 8\l  %11 = trunc i64 %10 to i32\l  %input_components = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %dstinfo, i64 0, i32 8\l  store i32 %11, i32* %input_components, align 8, !tbaa !18\l  %jpeg_color_space = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %srcinfo, i64 0, i32 9\l  %12 = lshr i64 %10, 32\l  %13 = trunc i64 %12 to i32\l  %in_color_space = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %dstinfo, i64 0, i32 9\l  store i32 %13, i32* %in_color_space, align 4, !tbaa !19\l  tail call void @jpeg_set_defaults(%struct.jpeg_compress_struct* nonnull\l... %dstinfo) #3\l  %14 = load i32, i32* %jpeg_color_space, align 4, !tbaa !20\l  tail call void @jpeg_set_colorspace(%struct.jpeg_compress_struct* nonnull\l... %dstinfo, i32 %14) #3\l  %data_precision = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %srcinfo, i64 0, i32 42\l  %15 = load i32, i32* %data_precision, align 8, !tbaa !22\l  %data_precision7 = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %dstinfo, i64 0, i32 11\l  store i32 %15, i32* %data_precision7, align 8, !tbaa !23\l  %CCIR601_sampling = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %srcinfo, i64 0, i32 56\l  %16 = load i32, i32* %CCIR601_sampling, align 8, !tbaa !24\l  %CCIR601_sampling8 = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %dstinfo, i64 0, i32 26\l  store i32 %16, i32* %CCIR601_sampling8, align 4, !tbaa !25\l  %arrayidx10 = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %srcinfo, i64 0, i32 39, i64 0\l  %17 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %arrayidx10, align 8,\l... !tbaa !26\l  %cmp11 = icmp eq %struct.JQUANT_TBL* %17, null\l  br i1 %cmp11, label %for.inc, label %if.then12\l|{<s0>T|<s1>F}}"];
	Node0x66d32f0:s0 -> Node0x66c72a0;
	Node0x66d32f0:s1 -> Node0x66c7370;
	Node0x66c7370 [shape=record, style = filled, fillcolor = blue, label="{if.then12:                                        \l  %18 = bitcast %struct.JQUANT_TBL* %17 to i8*\l  %arrayidx15 = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %dstinfo, i64 0, i32 15, i64 0\l  %19 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %arrayidx15, align 8,\l... !tbaa !26\l  %cmp16 = icmp eq %struct.JQUANT_TBL* %19, null\l  br i1 %cmp16, label %if.then17, label %if.end18\l|{<s0>T|<s1>F}}"];
	Node0x66c7370:s0 -> Node0x66c76e0;
	Node0x66c7370:s1 -> Node0x66d87c0;
	Node0x66c76e0 [shape=record, style = filled, fillcolor = blue, label="{if.then17:                                        \l  %call = tail call %struct.JQUANT_TBL*\l... @jpeg_alloc_quant_table(%struct.jpeg_common_struct* %.pre-phi) #3\l  store %struct.JQUANT_TBL* %call, %struct.JQUANT_TBL** %arrayidx15, align 8,\l... !tbaa !26\l  %.phi.trans.insert = bitcast %struct.JQUANT_TBL** %arrayidx10 to i8**\l  %.pre = load i8*, i8** %.phi.trans.insert, align 8, !tbaa !26\l  br label %if.end18\l}"];
	Node0x66c76e0 -> Node0x66d87c0;
	Node0x66d87c0 [shape=record, style = filled, fillcolor = blue, label="{if.end18:                                         \l  %20 = phi i8* [ %.pre, %if.then17 ], [ %18, %if.then12 ]\l  %.in222 = phi %struct.JQUANT_TBL* [ %call, %if.then17 ], [ %19, %if.then12 ]\l  %21 = bitcast %struct.JQUANT_TBL* %.in222 to i8*\l  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %21, i8* %20, i64 128, i32 4,\l... i1 false)\l  %22 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %arrayidx15, align 8,\l... !tbaa !26\l  %sent_table = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL*\l... %22, i64 0, i32 1\l  store i32 0, i32* %sent_table, align 4, !tbaa !27\l  br label %for.inc\l}"];
	Node0x66d87c0 -> Node0x66c72a0;
	Node0x66c72a0 [shape=record, style = filled, fillcolor = blue, label="{for.inc:                                          \l  %arrayidx10.1 = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %srcinfo, i64 0, i32 39, i64 1\l  %23 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %arrayidx10.1, align 8,\l... !tbaa !26\l  %cmp11.1 = icmp eq %struct.JQUANT_TBL* %23, null\l  br i1 %cmp11.1, label %for.inc.1, label %if.then12.1\l|{<s0>T|<s1>F}}"];
	Node0x66c72a0:s0 -> Node0x66da970;
	Node0x66c72a0:s1 -> Node0x66daa50;
	Node0x66dabc0 [shape=record, style = filled, fillcolor = blue, label="{if.then31:                                        \l  %err32 = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %dstinfo, i64 0, i32 0\l  %24 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err32, align\l... 8, !tbaa !10\l  %msg_code33 = getelementptr inbounds %struct.jpeg_error_mgr,\l... %struct.jpeg_error_mgr* %24, i64 0, i32 5\l  store i32 24, i32* %msg_code33, align 8, !tbaa !11\l  %arrayidx38 = getelementptr inbounds %struct.jpeg_error_mgr,\l... %struct.jpeg_error_mgr* %24, i64 0, i32 6, i32 0, i64 0\l  store i32 %64, i32* %arrayidx38, align 4, !tbaa !14\l  %arrayidx42 = getelementptr inbounds %struct.jpeg_error_mgr,\l... %struct.jpeg_error_mgr* %24, i64 0, i32 6, i32 0, i64 1\l  store i32 10, i32* %arrayidx42, align 4, !tbaa !14\l  %error_exit44 = getelementptr inbounds %struct.jpeg_error_mgr,\l... %struct.jpeg_error_mgr* %24, i64 0, i32 0\l  %25 = load void (%struct.jpeg_common_struct*)*, void\l... (%struct.jpeg_common_struct*)** %error_exit44, align 8, !tbaa !15\l  tail call void %25(%struct.jpeg_common_struct* %.pre-phi) #3\l  %.pre206 = load i32, i32* %num_components26, align 4, !tbaa !29\l  br label %if.end45\l}"];
	Node0x66dabc0 -> Node0x66c6940;
	Node0x66c6940 [shape=record, style = filled, fillcolor = blue, label="{if.end45:                                         \l  %26 = phi i32 [ %64, %for.inc.3 ], [ %.pre206, %if.then31 ]\l  %cmp49192 = icmp sgt i32 %26, 0\l  br i1 %cmp49192, label %for.body50.lr.ph, label %for.end108\l|{<s0>T|<s1>F}}"];
	Node0x66c6940:s0 -> Node0x66dbd70;
	Node0x66c6940:s1 -> Node0x66dbe70;
	Node0x66dbd70 [shape=record, style = filled, fillcolor = blue, label="{for.body50.lr.ph:                                 \l  %comp_info46 = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %dstinfo, i64 0, i32 14\l  %27 = load %struct.jpeg_component_info*, %struct.jpeg_component_info**\l... %comp_info46, align 8, !tbaa !30\l  %comp_info = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %srcinfo, i64 0, i32 43\l  %28 = load %struct.jpeg_component_info*, %struct.jpeg_component_info**\l... %comp_info, align 8, !tbaa !31\l  %err65 = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %dstinfo, i64 0, i32 0\l  br label %for.body50\l}"];
	Node0x66dbd70 -> Node0x66c6250;
	Node0x66c6250 [shape=record, style = filled, fillcolor = blue, label="{for.body50:                                       \l  %ci.0195 = phi i32 [ 0, %for.body50.lr.ph ], [ %inc106, %for.inc105 ]\l  %incomp.0194 = phi %struct.jpeg_component_info* [ %28, %for.body50.lr.ph ],\l... [ %incdec.ptr, %for.inc105 ]\l  %outcomp.0193 = phi %struct.jpeg_component_info* [ %27, %for.body50.lr.ph ],\l... [ %incdec.ptr107, %for.inc105 ]\l  %component_id = getelementptr inbounds %struct.jpeg_component_info,\l... %struct.jpeg_component_info* %incomp.0194, i64 0, i32 0\l  %29 = load i32, i32* %component_id, align 8, !tbaa !32\l  %component_id51 = getelementptr inbounds %struct.jpeg_component_info,\l... %struct.jpeg_component_info* %outcomp.0193, i64 0, i32 0\l  store i32 %29, i32* %component_id51, align 8, !tbaa !32\l  %h_samp_factor = getelementptr inbounds %struct.jpeg_component_info,\l... %struct.jpeg_component_info* %incomp.0194, i64 0, i32 2\l  %30 = bitcast i32* %h_samp_factor to i64*\l  %31 = load i64, i64* %30, align 8\l  %32 = trunc i64 %31 to i32\l  %h_samp_factor52 = getelementptr inbounds %struct.jpeg_component_info,\l... %struct.jpeg_component_info* %outcomp.0193, i64 0, i32 2\l  store i32 %32, i32* %h_samp_factor52, align 8, !tbaa !34\l  %33 = lshr i64 %31, 32\l  %34 = trunc i64 %33 to i32\l  %v_samp_factor53 = getelementptr inbounds %struct.jpeg_component_info,\l... %struct.jpeg_component_info* %outcomp.0193, i64 0, i32 3\l  store i32 %34, i32* %v_samp_factor53, align 4, !tbaa !35\l  %quant_tbl_no = getelementptr inbounds %struct.jpeg_component_info,\l... %struct.jpeg_component_info* %incomp.0194, i64 0, i32 4\l  %35 = load i32, i32* %quant_tbl_no, align 8, !tbaa !36\l  %quant_tbl_no54 = getelementptr inbounds %struct.jpeg_component_info,\l... %struct.jpeg_component_info* %outcomp.0193, i64 0, i32 4\l  store i32 %35, i32* %quant_tbl_no54, align 8, !tbaa !36\l  %36 = icmp ugt i32 %35, 3\l  %.pre210 = sext i32 %35 to i64\l  %.pre211 = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %srcinfo, i64 0, i32 39, i64 %.pre210\l  br i1 %36, label %if.then64, label %lor.lhs.false59\l|{<s0>T|<s1>F}}"];
	Node0x66c6250:s0 -> Node0x66df460;
	Node0x66c6250:s1 -> Node0x66df540;
	Node0x66df540 [shape=record, style = filled, fillcolor = blue, label="{lor.lhs.false59:                                  \l  %37 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %.pre211, align 8,\l... !tbaa !26\l  %cmp63 = icmp eq %struct.JQUANT_TBL* %37, null\l  br i1 %cmp63, label %if.then64, label %if.end73\l|{<s0>T|<s1>F}}"];
	Node0x66df540:s0 -> Node0x66df460;
	Node0x66df540:s1 -> Node0x66df750;
	Node0x66df460 [shape=record, style = filled, fillcolor = blue, label="{if.then64:                                        \l  %38 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err65, align\l... 8, !tbaa !10\l  %msg_code66 = getelementptr inbounds %struct.jpeg_error_mgr,\l... %struct.jpeg_error_mgr* %38, i64 0, i32 5\l  store i32 51, i32* %msg_code66, align 8, !tbaa !11\l  %arrayidx70 = getelementptr inbounds %struct.jpeg_error_mgr,\l... %struct.jpeg_error_mgr* %38, i64 0, i32 6, i32 0, i64 0\l  store i32 %35, i32* %arrayidx70, align 4, !tbaa !14\l  %error_exit72 = getelementptr inbounds %struct.jpeg_error_mgr,\l... %struct.jpeg_error_mgr* %38, i64 0, i32 0\l  %39 = load void (%struct.jpeg_common_struct*)*, void\l... (%struct.jpeg_common_struct*)** %error_exit72, align 8, !tbaa !15\l  tail call void %39(%struct.jpeg_common_struct* %.pre-phi) #3\l  %.pre208 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %.pre211, align 8,\l... !tbaa !26\l  br label %if.end73\l}"];
	Node0x66df460 -> Node0x66df750;
	Node0x66df750 [shape=record, style = filled, fillcolor = blue, label="{if.end73:                                         \l  %40 = phi %struct.JQUANT_TBL* [ %.pre208, %if.then64 ], [ %37,\l... %lor.lhs.false59 ]\l  %quant_table = getelementptr inbounds %struct.jpeg_component_info,\l... %struct.jpeg_component_info* %incomp.0194, i64 0, i32 19\l  %41 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %quant_table, align 8,\l... !tbaa !37\l  %cmp77 = icmp eq %struct.JQUANT_TBL* %41, null\l  br i1 %cmp77, label %for.inc105, label %for.body81.preheader\l|{<s0>T|<s1>F}}"];
	Node0x66df750:s0 -> Node0x66c63f0;
	Node0x66df750:s1 -> Node0x66e02a0;
	Node0x66e02a0 [shape=record, style = filled, fillcolor = blue, label="{for.body81.preheader:                             \l  br label %for.body81\l}"];
	Node0x66e02a0 -> Node0x66e0430;
	Node0x66e0430 [shape=record, style = filled, fillcolor = blue, label="{for.body81:                                       \l  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc101 ], [ 0,\l... %for.body81.preheader ]\l  %arrayidx84 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL*\l... %41, i64 0, i32 0, i64 %indvars.iv\l  %42 = load i16, i16* %arrayidx84, align 2, !tbaa !38\l  %arrayidx87 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL*\l... %40, i64 0, i32 0, i64 %indvars.iv\l  %43 = load i16, i16* %arrayidx87, align 2, !tbaa !38\l  %cmp89 = icmp eq i16 %42, %43\l  br i1 %cmp89, label %for.inc101, label %if.then91\l|{<s0>T|<s1>F}}"];
	Node0x66e0430:s0 -> Node0x66e0550;
	Node0x66e0430:s1 -> Node0x66e1170;
	Node0x66e1170 [shape=record, style = filled, fillcolor = blue, label="{if.then91:                                        \l  %44 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err65, align\l... 8, !tbaa !10\l  %msg_code93 = getelementptr inbounds %struct.jpeg_error_mgr,\l... %struct.jpeg_error_mgr* %44, i64 0, i32 5\l  store i32 43, i32* %msg_code93, align 8, !tbaa !11\l  %arrayidx97 = getelementptr inbounds %struct.jpeg_error_mgr,\l... %struct.jpeg_error_mgr* %44, i64 0, i32 6, i32 0, i64 0\l  store i32 %35, i32* %arrayidx97, align 4, !tbaa !14\l  %error_exit99 = getelementptr inbounds %struct.jpeg_error_mgr,\l... %struct.jpeg_error_mgr* %44, i64 0, i32 0\l  %45 = load void (%struct.jpeg_common_struct*)*, void\l... (%struct.jpeg_common_struct*)** %error_exit99, align 8, !tbaa !15\l  tail call void %45(%struct.jpeg_common_struct* %.pre-phi) #3\l  br label %for.inc101\l}"];
	Node0x66e1170 -> Node0x66e0550;
	Node0x66e0550 [shape=record, style = filled, fillcolor = blue, label="{for.inc101:                                       \l  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1\l  %exitcond = icmp eq i64 %indvars.iv.next, 64\l  br i1 %exitcond, label %for.inc105.loopexit, label %for.body81\l|{<s0>T|<s1>F}}"];
	Node0x66e0550:s0 -> Node0x66e19c0;
	Node0x66e0550:s1 -> Node0x66e0430;
	Node0x66e19c0 [shape=record, style = filled, fillcolor = blue, label="{for.inc105.loopexit:                              \l  br label %for.inc105\l}"];
	Node0x66e19c0 -> Node0x66c63f0;
	Node0x66c63f0 [shape=record, style = filled, fillcolor = blue, label="{for.inc105:                                       \l  %inc106 = add nuw nsw i32 %ci.0195, 1\l  %incdec.ptr = getelementptr inbounds %struct.jpeg_component_info,\l... %struct.jpeg_component_info* %incomp.0194, i64 1\l  %incdec.ptr107 = getelementptr inbounds %struct.jpeg_component_info,\l... %struct.jpeg_component_info* %outcomp.0193, i64 1\l  %46 = load i32, i32* %num_components26, align 4, !tbaa !29\l  %cmp49 = icmp slt i32 %inc106, %46\l  br i1 %cmp49, label %for.body50, label %for.end108.loopexit\l|{<s0>T|<s1>F}}"];
	Node0x66c63f0:s0 -> Node0x66c6250;
	Node0x66c63f0:s1 -> Node0x66c62d0;
	Node0x66c62d0 [shape=record, style = filled, fillcolor = blue, label="{for.end108.loopexit:                              \l  br label %for.end108\l}"];
	Node0x66c62d0 -> Node0x66dbe70;
	Node0x66dbe70 [shape=record, style = filled, fillcolor = blue, label="{for.end108:                                       \l  ret void\l}"];
	Node0x66daa50 [shape=record, style = filled, fillcolor = blue, label="{if.then12.1:                                      \l  %47 = bitcast %struct.JQUANT_TBL* %23 to i8*\l  %arrayidx15.1 = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %dstinfo, i64 0, i32 15, i64 1\l  %48 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %arrayidx15.1, align 8,\l... !tbaa !26\l  %cmp16.1 = icmp eq %struct.JQUANT_TBL* %48, null\l  br i1 %cmp16.1, label %if.then17.1, label %if.end18.1\l|{<s0>T|<s1>F}}"];
	Node0x66daa50:s0 -> Node0x66e2a50;
	Node0x66daa50:s1 -> Node0x66e2b00;
	Node0x66e2a50 [shape=record, style = filled, fillcolor = blue, label="{if.then17.1:                                      \l  %call.1 = tail call %struct.JQUANT_TBL*\l... @jpeg_alloc_quant_table(%struct.jpeg_common_struct* %.pre-phi) #3\l  store %struct.JQUANT_TBL* %call.1, %struct.JQUANT_TBL** %arrayidx15.1, align\l... 8, !tbaa !26\l  %.phi.trans.insert200 = bitcast %struct.JQUANT_TBL** %arrayidx10.1 to i8**\l  %.pre201 = load i8*, i8** %.phi.trans.insert200, align 8, !tbaa !26\l  br label %if.end18.1\l}"];
	Node0x66e2a50 -> Node0x66e2b00;
	Node0x66e2b00 [shape=record, style = filled, fillcolor = blue, label="{if.end18.1:                                       \l  %49 = phi i8* [ %.pre201, %if.then17.1 ], [ %47, %if.then12.1 ]\l  %.in221 = phi %struct.JQUANT_TBL* [ %call.1, %if.then17.1 ], [ %48,\l... %if.then12.1 ]\l  %50 = bitcast %struct.JQUANT_TBL* %.in221 to i8*\l  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %50, i8* %49, i64 128, i32 4,\l... i1 false)\l  %51 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %arrayidx15.1, align 8,\l... !tbaa !26\l  %sent_table.1 = getelementptr inbounds %struct.JQUANT_TBL,\l... %struct.JQUANT_TBL* %51, i64 0, i32 1\l  store i32 0, i32* %sent_table.1, align 4, !tbaa !27\l  br label %for.inc.1\l}"];
	Node0x66e2b00 -> Node0x66da970;
	Node0x66da970 [shape=record, style = filled, fillcolor = blue, label="{for.inc.1:                                        \l  %arrayidx10.2 = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %srcinfo, i64 0, i32 39, i64 2\l  %52 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %arrayidx10.2, align 8,\l... !tbaa !26\l  %cmp11.2 = icmp eq %struct.JQUANT_TBL* %52, null\l  br i1 %cmp11.2, label %for.inc.2, label %if.then12.2\l|{<s0>T|<s1>F}}"];
	Node0x66da970:s0 -> Node0x66e3bb0;
	Node0x66da970:s1 -> Node0x66e3c90;
	Node0x66e3c90 [shape=record, style = filled, fillcolor = blue, label="{if.then12.2:                                      \l  %53 = bitcast %struct.JQUANT_TBL* %52 to i8*\l  %arrayidx15.2 = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %dstinfo, i64 0, i32 15, i64 2\l  %54 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %arrayidx15.2, align 8,\l... !tbaa !26\l  %cmp16.2 = icmp eq %struct.JQUANT_TBL* %54, null\l  br i1 %cmp16.2, label %if.then17.2, label %if.end18.2\l|{<s0>T|<s1>F}}"];
	Node0x66e3c90:s0 -> Node0x66e3ff0;
	Node0x66e3c90:s1 -> Node0x66e40d0;
	Node0x66e3ff0 [shape=record, style = filled, fillcolor = blue, label="{if.then17.2:                                      \l  %call.2 = tail call %struct.JQUANT_TBL*\l... @jpeg_alloc_quant_table(%struct.jpeg_common_struct* %.pre-phi) #3\l  store %struct.JQUANT_TBL* %call.2, %struct.JQUANT_TBL** %arrayidx15.2, align\l... 8, !tbaa !26\l  %.phi.trans.insert202 = bitcast %struct.JQUANT_TBL** %arrayidx10.2 to i8**\l  %.pre203 = load i8*, i8** %.phi.trans.insert202, align 8, !tbaa !26\l  br label %if.end18.2\l}"];
	Node0x66e3ff0 -> Node0x66e40d0;
	Node0x66e40d0 [shape=record, style = filled, fillcolor = blue, label="{if.end18.2:                                       \l  %55 = phi i8* [ %.pre203, %if.then17.2 ], [ %53, %if.then12.2 ]\l  %.in220 = phi %struct.JQUANT_TBL* [ %call.2, %if.then17.2 ], [ %54,\l... %if.then12.2 ]\l  %56 = bitcast %struct.JQUANT_TBL* %.in220 to i8*\l  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %56, i8* %55, i64 128, i32 4,\l... i1 false)\l  %57 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %arrayidx15.2, align 8,\l... !tbaa !26\l  %sent_table.2 = getelementptr inbounds %struct.JQUANT_TBL,\l... %struct.JQUANT_TBL* %57, i64 0, i32 1\l  store i32 0, i32* %sent_table.2, align 4, !tbaa !27\l  br label %for.inc.2\l}"];
	Node0x66e40d0 -> Node0x66e3bb0;
	Node0x66e3bb0 [shape=record, style = filled, fillcolor = blue, label="{for.inc.2:                                        \l  %arrayidx10.3 = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %srcinfo, i64 0, i32 39, i64 3\l  %58 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %arrayidx10.3, align 8,\l... !tbaa !26\l  %cmp11.3 = icmp eq %struct.JQUANT_TBL* %58, null\l  br i1 %cmp11.3, label %for.inc.3, label %if.then12.3\l|{<s0>T|<s1>F}}"];
	Node0x66e3bb0:s0 -> Node0x66c6a50;
	Node0x66e3bb0:s1 -> Node0x66d67f0;
	Node0x66d67f0 [shape=record, style = filled, fillcolor = blue, label="{if.then12.3:                                      \l  %59 = bitcast %struct.JQUANT_TBL* %58 to i8*\l  %arrayidx15.3 = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %dstinfo, i64 0, i32 15, i64 3\l  %60 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %arrayidx15.3, align 8,\l... !tbaa !26\l  %cmp16.3 = icmp eq %struct.JQUANT_TBL* %60, null\l  br i1 %cmp16.3, label %if.then17.3, label %if.end18.3\l|{<s0>T|<s1>F}}"];
	Node0x66d67f0:s0 -> Node0x66d9960;
	Node0x66d67f0:s1 -> Node0x66d9a40;
	Node0x66d9960 [shape=record, style = filled, fillcolor = blue, label="{if.then17.3:                                      \l  %call.3 = tail call %struct.JQUANT_TBL*\l... @jpeg_alloc_quant_table(%struct.jpeg_common_struct* %.pre-phi) #3\l  store %struct.JQUANT_TBL* %call.3, %struct.JQUANT_TBL** %arrayidx15.3, align\l... 8, !tbaa !26\l  %.phi.trans.insert204 = bitcast %struct.JQUANT_TBL** %arrayidx10.3 to i8**\l  %.pre205 = load i8*, i8** %.phi.trans.insert204, align 8, !tbaa !26\l  br label %if.end18.3\l}"];
	Node0x66d9960 -> Node0x66d9a40;
	Node0x66d9a40 [shape=record, style = filled, fillcolor = blue, label="{if.end18.3:                                       \l  %61 = phi i8* [ %.pre205, %if.then17.3 ], [ %59, %if.then12.3 ]\l  %.in = phi %struct.JQUANT_TBL* [ %call.3, %if.then17.3 ], [ %60,\l... %if.then12.3 ]\l  %62 = bitcast %struct.JQUANT_TBL* %.in to i8*\l  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %62, i8* %61, i64 128, i32 4,\l... i1 false)\l  %63 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %arrayidx15.3, align 8,\l... !tbaa !26\l  %sent_table.3 = getelementptr inbounds %struct.JQUANT_TBL,\l... %struct.JQUANT_TBL* %63, i64 0, i32 1\l  store i32 0, i32* %sent_table.3, align 4, !tbaa !27\l  br label %for.inc.3\l}"];
	Node0x66d9a40 -> Node0x66c6a50;
	Node0x66c6a50 [shape=record, style = filled, fillcolor = blue, label="{for.inc.3:                                        \l  %64 = load i32, i32* %num_components, align 8, !tbaa !39\l  %num_components26 = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %dstinfo, i64 0, i32 12\l  store i32 %64, i32* %num_components26, align 4, !tbaa !29\l  %.off = add i32 %64, -1\l  %65 = icmp ugt i32 %.off, 9\l  br i1 %65, label %if.then31, label %if.end45\l|{<s0>T|<s1>F}}"];
	Node0x66c6a50:s0 -> Node0x66dabc0;
	Node0x66c6a50:s1 -> Node0x66c6940;
}
