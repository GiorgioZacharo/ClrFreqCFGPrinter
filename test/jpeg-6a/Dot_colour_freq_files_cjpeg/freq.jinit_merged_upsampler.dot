digraph "CFG for 'jinit_merged_upsampler' function" {
	label="CFG for 'jinit_merged_upsampler' function";

	Node0x5a0a280 [shape=record, style = filled, fillcolor = blue, label="{entry:\l  %mem = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 1\l  %0 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8,\l... !tbaa !2\l  %alloc_small = getelementptr inbounds %struct.jpeg_memory_mgr,\l... %struct.jpeg_memory_mgr* %0, i64 0, i32 0\l  %1 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8*\l... (%struct.jpeg_common_struct*, i32, i64)** %alloc_small, align 8, !tbaa !10\l  %2 = bitcast %struct.jpeg_decompress_struct* %cinfo to\l... %struct.jpeg_common_struct*\l  %call = tail call i8* %1(%struct.jpeg_common_struct* %2, i32 1, i64 88) #4\l  %upsample1 = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 81\l  %3 = bitcast %struct.jpeg_upsampler** %upsample1 to i8**\l  store i8* %call, i8** %3, align 8, !tbaa !13\l  %start_pass2 = bitcast i8* %call to void (%struct.jpeg_decompress_struct*)**\l  store void (%struct.jpeg_decompress_struct*)* @start_pass_merged_upsample,\l... void (%struct.jpeg_decompress_struct*)** %start_pass2, align 8, !tbaa !14\l  %need_context_rows = getelementptr inbounds i8, i8* %call, i64 16\l  %4 = bitcast i8* %need_context_rows to i32*\l  store i32 0, i32* %4, align 8, !tbaa !17\l  %output_width = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 26\l  %5 = load i32, i32* %output_width, align 8, !tbaa !18\l  %out_color_components = getelementptr inbounds\l... %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64\l... 0, i32 28\l  %6 = load i32, i32* %out_color_components, align 8, !tbaa !19\l  %mul = mul i32 %6, %5\l  %out_row_width = getelementptr inbounds i8, i8* %call, i64 76\l  %7 = bitcast i8* %out_row_width to i32*\l  store i32 %mul, i32* %7, align 4, !tbaa !20\l  %max_v_samp_factor = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 58\l  %8 = load i32, i32* %max_v_samp_factor, align 8, !tbaa !21\l  %cmp = icmp eq i32 %8, 2\l  %upsample5 = getelementptr inbounds i8, i8* %call, i64 8\l  %9 = bitcast i8* %upsample5 to void (%struct.jpeg_decompress_struct*, i8***,\l... i32*, i32, i8**, i32*, i32)**\l  br i1 %cmp, label %if.then, label %if.else\l|{<s0>T|<s1>F}}"];
	Node0x5a0a280:s0 -> Node0x5a0fbd0;
	Node0x5a0a280:s1 -> Node0x5a10d20;
	Node0x5a0fbd0 [shape=record, style = filled, fillcolor = blue, label="{if.then:                                          \l  store void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*,\l... i32)* @merged_2v_upsample, void (%struct.jpeg_decompress_struct*, i8***,\l... i32*, i32, i8**, i32*, i32)** %9, align 8, !tbaa !22\l  %upmethod = getelementptr inbounds i8, i8* %call, i64 24\l  %10 = bitcast i8* %upmethod to void (%struct.jpeg_decompress_struct*, i8***,\l... i32, i8**)**\l  store void (%struct.jpeg_decompress_struct*, i8***, i32, i8**)*\l... @h2v2_merged_upsample, void (%struct.jpeg_decompress_struct*, i8***, i32,\l... i8**)** %10, align 8, !tbaa !23\l  %11 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align\l... 8, !tbaa !2\l  %alloc_large = getelementptr inbounds %struct.jpeg_memory_mgr,\l... %struct.jpeg_memory_mgr* %11, i64 0, i32 1\l  %12 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8*\l... (%struct.jpeg_common_struct*, i32, i64)** %alloc_large, align 8, !tbaa !24\l  %conv = zext i32 %mul to i64\l  %call9 = tail call i8* %12(%struct.jpeg_common_struct* %2, i32 1, i64 %conv)\l... #4\l  %spare_row = getelementptr inbounds i8, i8* %call, i64 64\l  %13 = bitcast i8* %spare_row to i8**\l  store i8* %call9, i8** %13, align 8, !tbaa !25\l  %.phi.trans.insert = bitcast %struct.jpeg_upsampler** %upsample1 to\l... %struct.my_upsampler**\l  %.pre = load %struct.my_upsampler*, %struct.my_upsampler**\l... %.phi.trans.insert, align 8, !tbaa !13\l  br label %if.end\l}"];
	Node0x5a0fbd0 -> Node0x5a12b00;
	Node0x5a10d20 [shape=record, style = filled, fillcolor = blue, label="{if.else:                                          \l  %14 = bitcast i8* %call to %struct.my_upsampler*\l  store void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*,\l... i32)* @merged_1v_upsample, void (%struct.jpeg_decompress_struct*, i8***,\l... i32*, i32, i8**, i32*, i32)** %9, align 8, !tbaa !22\l  %upmethod12 = getelementptr inbounds i8, i8* %call, i64 24\l  %15 = bitcast i8* %upmethod12 to void (%struct.jpeg_decompress_struct*,\l... i8***, i32, i8**)**\l  store void (%struct.jpeg_decompress_struct*, i8***, i32, i8**)*\l... @h2v1_merged_upsample, void (%struct.jpeg_decompress_struct*, i8***, i32,\l... i8**)** %15, align 8, !tbaa !23\l  %spare_row13 = getelementptr inbounds i8, i8* %call, i64 64\l  %16 = bitcast i8* %spare_row13 to i8**\l  store i8* null, i8** %16, align 8, !tbaa !25\l  br label %if.end\l}"];
	Node0x5a10d20 -> Node0x5a12b00;
	Node0x5a12b00 [shape=record, style = filled, fillcolor = blue, label="{if.end:                                           \l  %17 = phi %struct.my_upsampler* [ %14, %if.else ], [ %.pre, %if.then ]\l  %18 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align\l... 8, !tbaa !2\l  %alloc_small.i = getelementptr inbounds %struct.jpeg_memory_mgr,\l... %struct.jpeg_memory_mgr* %18, i64 0, i32 0\l  %19 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8*\l... (%struct.jpeg_common_struct*, i32, i64)** %alloc_small.i, align 8, !tbaa !10\l  %call.i = tail call i8* %19(%struct.jpeg_common_struct* %2, i32 1, i64 1024)\l... #4\l  %Cr_r_tab.i = getelementptr inbounds %struct.my_upsampler,\l... %struct.my_upsampler* %17, i64 0, i32 2\l  %20 = bitcast i32** %Cr_r_tab.i to i8**\l  store i8* %call.i, i8** %20, align 8, !tbaa !26\l  %21 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align\l... 8, !tbaa !2\l  %alloc_small3.i = getelementptr inbounds %struct.jpeg_memory_mgr,\l... %struct.jpeg_memory_mgr* %21, i64 0, i32 0\l  %22 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8*\l... (%struct.jpeg_common_struct*, i32, i64)** %alloc_small3.i, align 8, !tbaa !10\l  %call4.i = tail call i8* %22(%struct.jpeg_common_struct* %2, i32 1, i64\l... 1024) #4\l  %Cb_b_tab.i = getelementptr inbounds %struct.my_upsampler,\l... %struct.my_upsampler* %17, i64 0, i32 3\l  %23 = bitcast i32** %Cb_b_tab.i to i8**\l  store i8* %call4.i, i8** %23, align 8, !tbaa !27\l  %24 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align\l... 8, !tbaa !2\l  %alloc_small6.i = getelementptr inbounds %struct.jpeg_memory_mgr,\l... %struct.jpeg_memory_mgr* %24, i64 0, i32 0\l  %25 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8*\l... (%struct.jpeg_common_struct*, i32, i64)** %alloc_small6.i, align 8, !tbaa !10\l  %call7.i = tail call i8* %25(%struct.jpeg_common_struct* %2, i32 1, i64\l... 2048) #4\l  %Cr_g_tab.i = getelementptr inbounds %struct.my_upsampler,\l... %struct.my_upsampler* %17, i64 0, i32 4\l  %26 = bitcast i64** %Cr_g_tab.i to i8**\l  store i8* %call7.i, i8** %26, align 8, !tbaa !28\l  %27 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align\l... 8, !tbaa !2\l  %alloc_small9.i = getelementptr inbounds %struct.jpeg_memory_mgr,\l... %struct.jpeg_memory_mgr* %27, i64 0, i32 0\l  %28 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8*\l... (%struct.jpeg_common_struct*, i32, i64)** %alloc_small9.i, align 8, !tbaa !10\l  %call10.i = tail call i8* %28(%struct.jpeg_common_struct* %2, i32 1, i64\l... 2048) #4\l  %Cb_g_tab.i = getelementptr inbounds %struct.my_upsampler,\l... %struct.my_upsampler* %17, i64 0, i32 5\l  %29 = bitcast i64** %Cb_g_tab.i to i8**\l  store i8* %call10.i, i8** %29, align 8, !tbaa !29\l  %30 = load i32*, i32** %Cr_r_tab.i, align 8\l  %31 = load i32*, i32** %Cb_b_tab.i, align 8\l  %32 = load i64*, i64** %Cr_g_tab.i, align 8\l  %.cast.i = bitcast i8* %call10.i to i64*\l  br label %for.body.i\l}"];
	Node0x5a12b00 -> Node0x5a14080;
	Node0x5a14080 [shape=record, style = filled, fillcolor = blue, label="{for.body.i:                                       \l  %indvars.iv.i = phi i64 [ 0, %if.end ], [ %indvars.iv.next.i, %for.body.i ]\l  %x.059.i = phi i64 [ -128, %if.end ], [ %inc28.i, %for.body.i ]\l  %mul.i = mul nsw i64 %x.059.i, 91881\l  %add.i = add nsw i64 %mul.i, 32768\l  %shr56.i = lshr i64 %add.i, 16\l  %conv.i = trunc i64 %shr56.i to i32\l  %arrayidx.i = getelementptr inbounds i32, i32* %30, i64 %indvars.iv.i\l  store i32 %conv.i, i32* %arrayidx.i, align 4, !tbaa !30\l  %mul12.i = mul nsw i64 %x.059.i, 116130\l  %add13.i = add nsw i64 %mul12.i, 32768\l  %shr1457.i = lshr i64 %add13.i, 16\l  %conv15.i = trunc i64 %shr1457.i to i32\l  %arrayidx18.i = getelementptr inbounds i32, i32* %31, i64 %indvars.iv.i\l  store i32 %conv15.i, i32* %arrayidx18.i, align 4, !tbaa !30\l  %mul19.i = mul nsw i64 %x.059.i, -46802\l  %arrayidx22.i = getelementptr inbounds i64, i64* %32, i64 %indvars.iv.i\l  store i64 %mul19.i, i64* %arrayidx22.i, align 8, !tbaa !31\l  %mul23.i = mul nsw i64 %x.059.i, -22554\l  %add24.i = add nsw i64 %mul23.i, 32768\l  %arrayidx27.i = getelementptr inbounds i64, i64* %.cast.i, i64 %indvars.iv.i\l  store i64 %add24.i, i64* %arrayidx27.i, align 8, !tbaa !31\l  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1\l  %inc28.i = add nsw i64 %x.059.i, 1\l  %exitcond.i = icmp eq i64 %indvars.iv.next.i, 256\l  br i1 %exitcond.i, label %build_ycc_rgb_table.exit, label %for.body.i\l|{<s0>T|<s1>F}}"];
	Node0x5a14080:s0 -> Node0x5a19680;
	Node0x5a14080:s1 -> Node0x5a14080;
	Node0x5a19680 [shape=record, style = filled, fillcolor = blue, label="{build_ycc_rgb_table.exit:                         \l  ret void\l}"];
}
