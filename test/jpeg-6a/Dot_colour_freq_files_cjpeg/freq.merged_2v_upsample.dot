digraph "CFG for 'merged_2v_upsample' function" {
	label="CFG for 'merged_2v_upsample' function";

	Node0x5a1a530 [shape=record, style = filled, fillcolor = blue, label="{entry:\l  %work_ptrs = alloca [2 x i8*], align 16\l  %upsample1 = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 81\l  %0 = bitcast %struct.jpeg_upsampler** %upsample1 to %struct.my_upsampler**\l  %1 = load %struct.my_upsampler*, %struct.my_upsampler** %0, align 8, !tbaa !2\l  %2 = bitcast [2 x i8*]* %work_ptrs to i8*\l  call void @llvm.lifetime.start(i64 16, i8* %2) #4\l  %spare_full = getelementptr inbounds %struct.my_upsampler,\l... %struct.my_upsampler* %1, i64 0, i32 7\l  %3 = bitcast i32* %spare_full to i64*\l  %4 = load i64, i64* %3, align 8\l  %5 = trunc i64 %4 to i32\l  %tobool = icmp eq i32 %5, 0\l  br i1 %tobool, label %if.else, label %if.then\l|{<s0>T|<s1>F}}"];
	Node0x5a1a530:s0 -> Node0x5a1af80;
	Node0x5a1a530:s1 -> Node0x5a1a830;
	Node0x5a1a830 [shape=record, style = filled, fillcolor = blue, label="{if.then:                                          \l  %6 = lshr i64 %4, 32\l  %7 = trunc i64 %6 to i32\l  %spare_row = getelementptr inbounds %struct.my_upsampler,\l... %struct.my_upsampler* %1, i64 0, i32 6\l  %8 = load i32, i32* %out_row_ctr, align 4, !tbaa !10\l  %idx.ext = zext i32 %8 to i64\l  %add.ptr = getelementptr inbounds i8*, i8** %output_buf, i64 %idx.ext\l  tail call void @jcopy_sample_rows(i8** %spare_row, i32 0, i8** %add.ptr, i32\l... 0, i32 1, i32 %7) #4\l  store i32 0, i32* %spare_full, align 8, !tbaa !11\l  %.pre = getelementptr inbounds %struct.my_upsampler, %struct.my_upsampler*\l... %1, i64 0, i32 9\l  br label %if.end19\l}"];
	Node0x5a1a830 -> Node0x5a1c060;
	Node0x5a1af80 [shape=record, style = filled, fillcolor = blue, label="{if.else:                                          \l  %rows_to_go = getelementptr inbounds %struct.my_upsampler,\l... %struct.my_upsampler* %1, i64 0, i32 9\l  %9 = load i32, i32* %rows_to_go, align 8, !tbaa !14\l  %cmp = icmp ult i32 %9, 2\l  %. = select i1 %cmp, i32 %9, i32 2\l  %10 = load i32, i32* %out_row_ctr, align 4, !tbaa !10\l  %sub = sub i32 %out_rows_avail, %10\l  %cmp5 = icmp ugt i32 %., %sub\l  %num_rows.1 = select i1 %cmp5, i32 %sub, i32 %.\l  %idxprom = zext i32 %10 to i64\l  %arrayidx = getelementptr inbounds i8*, i8** %output_buf, i64 %idxprom\l  %11 = bitcast i8** %arrayidx to i64*\l  %12 = load i64, i64* %11, align 8, !tbaa !15\l  %13 = bitcast [2 x i8*]* %work_ptrs to i64*\l  store i64 %12, i64* %13, align 16, !tbaa !15\l  %cmp9 = icmp ugt i32 %num_rows.1, 1\l  br i1 %cmp9, label %if.then10, label %if.else14\l|{<s0>T|<s1>F}}"];
	Node0x5a1af80:s0 -> Node0x5a1e050;
	Node0x5a1af80:s1 -> Node0x5a1e130;
	Node0x5a1e050 [shape=record, style = filled, fillcolor = blue, label="{if.then10:                                        \l  %add = add i32 %10, 1\l  %idxprom11 = zext i32 %add to i64\l  %arrayidx12 = getelementptr inbounds i8*, i8** %output_buf, i64 %idxprom11\l  %14 = bitcast i8** %arrayidx12 to i64*\l  %15 = load i64, i64* %14, align 8, !tbaa !15\l  %arrayidx13 = getelementptr inbounds [2 x i8*], [2 x i8*]* %work_ptrs, i64\l... 0, i64 1\l  %16 = bitcast i8** %arrayidx13 to i64*\l  store i64 %15, i64* %16, align 8, !tbaa !15\l  br label %if.end18\l}"];
	Node0x5a1e050 -> Node0x5a1e730;
	Node0x5a1e130 [shape=record, style = filled, fillcolor = blue, label="{if.else14:                                        \l  %spare_row15 = getelementptr inbounds %struct.my_upsampler,\l... %struct.my_upsampler* %1, i64 0, i32 6\l  %17 = bitcast i8** %spare_row15 to i64*\l  %18 = load i64, i64* %17, align 8, !tbaa !16\l  %arrayidx16 = getelementptr inbounds [2 x i8*], [2 x i8*]* %work_ptrs, i64\l... 0, i64 1\l  %19 = bitcast i8** %arrayidx16 to i64*\l  store i64 %18, i64* %19, align 8, !tbaa !15\l  store i32 1, i32* %spare_full, align 8, !tbaa !11\l  br label %if.end18\l}"];
	Node0x5a1e130 -> Node0x5a1e730;
	Node0x5a1e730 [shape=record, style = filled, fillcolor = blue, label="{if.end18:                                         \l  %upmethod = getelementptr inbounds %struct.my_upsampler,\l... %struct.my_upsampler* %1, i64 0, i32 1\l  %20 = load void (%struct.jpeg_decompress_struct*, i8***, i32, i8**)*, void\l... (%struct.jpeg_decompress_struct*, i8***, i32, i8**)** %upmethod, align 8,\l... !tbaa !17\l  %21 = load i32, i32* %in_row_group_ctr, align 4, !tbaa !10\l  %arraydecay = getelementptr inbounds [2 x i8*], [2 x i8*]* %work_ptrs, i64\l... 0, i64 0\l  call void %20(%struct.jpeg_decompress_struct* nonnull %cinfo, i8***\l... %input_buf, i32 %21, i8** %arraydecay) #4\l  br label %if.end19\l}"];
	Node0x5a1e730 -> Node0x5a1c060;
	Node0x5a1c060 [shape=record, style = filled, fillcolor = blue, label="{if.end19:                                         \l  %rows_to_go21.pre-phi = phi i32* [ %rows_to_go, %if.end18 ], [ %.pre,\l... %if.then ]\l  %num_rows.2 = phi i32 [ %num_rows.1, %if.end18 ], [ 1, %if.then ]\l  %22 = load i32, i32* %out_row_ctr, align 4, !tbaa !10\l  %add20 = add i32 %22, %num_rows.2\l  store i32 %add20, i32* %out_row_ctr, align 4, !tbaa !10\l  %23 = load i32, i32* %rows_to_go21.pre-phi, align 8, !tbaa !14\l  %sub22 = sub i32 %23, %num_rows.2\l  store i32 %sub22, i32* %rows_to_go21.pre-phi, align 8, !tbaa !14\l  %24 = load i32, i32* %spare_full, align 8, !tbaa !11\l  %tobool24 = icmp eq i32 %24, 0\l  br i1 %tobool24, label %if.then25, label %if.end26\l|{<s0>T|<s1>F}}"];
	Node0x5a1c060:s0 -> Node0x5a0ea90;
	Node0x5a1c060:s1 -> Node0x5a0eb70;
	Node0x5a0ea90 [shape=record, style = filled, fillcolor = blue, label="{if.then25:                                        \l  %25 = load i32, i32* %in_row_group_ctr, align 4, !tbaa !10\l  %inc = add i32 %25, 1\l  store i32 %inc, i32* %in_row_group_ctr, align 4, !tbaa !10\l  br label %if.end26\l}"];
	Node0x5a0ea90 -> Node0x5a0eb70;
	Node0x5a0eb70 [shape=record, style = filled, fillcolor = blue, label="{if.end26:                                         \l  call void @llvm.lifetime.end(i64 16, i8* %2) #4\l  ret void\l}"];
}
