; ModuleID = 'wrgif.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.djpeg_dest_struct = type { void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*)*, void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*, i32)*, void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*)*, %struct._IO_FILE*, i8**, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.jpeg_decompress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32, %struct.jpeg_source_mgr*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i16, i16, i32, i8, i32, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master*, %struct.jpeg_d_main_controller*, %struct.jpeg_d_coef_controller*, %struct.jpeg_d_post_controller*, %struct.jpeg_input_controller*, %struct.jpeg_marker_reader*, %struct.jpeg_entropy_decoder*, %struct.jpeg_inverse_dct*, %struct.jpeg_upsampler*, %struct.jpeg_color_deconverter*, %struct.jpeg_color_quantizer* }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_source_mgr = type { i8*, i64, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i64)*, i32 (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*)* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.jpeg_decomp_master = type opaque
%struct.jpeg_d_main_controller = type opaque
%struct.jpeg_d_coef_controller = type opaque
%struct.jpeg_d_post_controller = type opaque
%struct.jpeg_input_controller = type opaque
%struct.jpeg_marker_reader = type opaque
%struct.jpeg_entropy_decoder = type opaque
%struct.jpeg_inverse_dct = type opaque
%struct.jpeg_upsampler = type opaque
%struct.jpeg_color_deconverter = type opaque
%struct.jpeg_color_quantizer = type opaque
%struct.gif_dest_struct = type { %struct.djpeg_dest_struct, %struct.jpeg_decompress_struct*, i32, i16, i32, i64, i32, i16, i32, i16, i16, i16, i16*, i64*, i32, [256 x i8] }

; Function Attrs: nounwind uwtable
define %struct.djpeg_dest_struct* @jinit_write_gif(%struct.jpeg_decompress_struct* %cinfo) #0 {
entry:
  %mem = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 1
  %0 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !2
  %alloc_small = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %0, i64 0, i32 0
  %1 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_small, align 8, !tbaa !10
  %2 = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  %call = tail call i8* %1(%struct.jpeg_common_struct* %2, i32 1, i64 384) #5
  %cinfo1 = getelementptr inbounds i8, i8* %call, i64 48
  %3 = bitcast i8* %cinfo1 to %struct.jpeg_decompress_struct**
  store %struct.jpeg_decompress_struct* %cinfo, %struct.jpeg_decompress_struct** %3, align 8, !tbaa !13
  %start_output = bitcast i8* %call to void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*)**
  store void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*)* @start_output_gif, void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*)** %start_output, align 8, !tbaa !16
  %put_pixel_rows = getelementptr inbounds i8, i8* %call, i64 8
  %4 = bitcast i8* %put_pixel_rows to void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*, i32)**
  store void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*, i32)* @put_pixel_rows, void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*, i32)** %4, align 8, !tbaa !17
  %finish_output = getelementptr inbounds i8, i8* %call, i64 16
  %5 = bitcast i8* %finish_output to void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*)**
  store void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*)* @finish_output_gif, void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*)** %5, align 8, !tbaa !18
  %out_color_space = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 10
  %6 = load i32, i32* %out_color_space, align 8, !tbaa !19
  %.off = add i32 %6, -1
  %switch = icmp ult i32 %.off, 2
  br i1 %switch, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %err = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0
  %7 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8, !tbaa !20
  %msg_code = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %7, i64 0, i32 5
  store i32 1014, i32* %msg_code, align 8, !tbaa !21
  %error_exit = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %7, i64 0, i32 0
  %8 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit, align 8, !tbaa !23
  tail call void %8(%struct.jpeg_common_struct* %2) #5
  %.pr = load i32, i32* %out_color_space, align 8, !tbaa !19
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %9 = phi i32 [ %6, %entry ], [ %.pr, %if.then ]
  %cmp8 = icmp eq i32 %9, 1
  br i1 %cmp8, label %lor.lhs.false, label %if.then10

lor.lhs.false:                                    ; preds = %if.end
  %data_precision = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 42
  %10 = load i32, i32* %data_precision, align 8, !tbaa !24
  %cmp9 = icmp sgt i32 %10, 8
  br i1 %cmp9, label %if.then10, label %if.end15

if.then10:                                        ; preds = %if.end, %lor.lhs.false
  %quantize_colors = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 19
  store i32 1, i32* %quantize_colors, align 4, !tbaa !25
  %desired_number_of_colors = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 22
  %11 = load i32, i32* %desired_number_of_colors, align 8, !tbaa !26
  %cmp11 = icmp sgt i32 %11, 256
  br i1 %cmp11, label %if.then12, label %if.end15

if.then12:                                        ; preds = %if.then10
  store i32 256, i32* %desired_number_of_colors, align 8, !tbaa !26
  br label %if.end15

if.end15:                                         ; preds = %if.then10, %if.then12, %lor.lhs.false
  tail call void @jpeg_calc_output_dimensions(%struct.jpeg_decompress_struct* nonnull %cinfo) #5
  %output_components = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 29
  %12 = load i32, i32* %output_components, align 4, !tbaa !27
  %cmp16 = icmp eq i32 %12, 1
  br i1 %cmp16, label %if.end22, label %if.then17

if.then17:                                        ; preds = %if.end15
  %err18 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0
  %13 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err18, align 8, !tbaa !20
  %msg_code19 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %13, i64 0, i32 5
  store i32 1012, i32* %msg_code19, align 8, !tbaa !21
  %error_exit21 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %13, i64 0, i32 0
  %14 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit21, align 8, !tbaa !23
  tail call void %14(%struct.jpeg_common_struct* nonnull %2) #5
  br label %if.end22

if.end22:                                         ; preds = %if.end15, %if.then17
  %15 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !2
  %alloc_sarray = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %15, i64 0, i32 2
  %16 = load i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)** %alloc_sarray, align 8, !tbaa !28
  %output_width = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 26
  %17 = load i32, i32* %output_width, align 8, !tbaa !29
  %call24 = tail call i8** %16(%struct.jpeg_common_struct* nonnull %2, i32 1, i32 %17, i32 1) #5
  %buffer = getelementptr inbounds i8, i8* %call, i64 32
  %18 = bitcast i8* %buffer to i8***
  store i8** %call24, i8*** %18, align 8, !tbaa !30
  %buffer_height = getelementptr inbounds i8, i8* %call, i64 40
  %19 = bitcast i8* %buffer_height to i32*
  store i32 1, i32* %19, align 8, !tbaa !31
  %20 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !2
  %alloc_small28 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %20, i64 0, i32 0
  %21 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_small28, align 8, !tbaa !10
  %call29 = tail call i8* %21(%struct.jpeg_common_struct* nonnull %2, i32 1, i64 10006) #5
  %hash_code = getelementptr inbounds i8, i8* %call, i64 104
  %22 = bitcast i8* %hash_code to i8**
  store i8* %call29, i8** %22, align 8, !tbaa !32
  %23 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !2
  %alloc_large = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %23, i64 0, i32 1
  %24 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_large, align 8, !tbaa !33
  %call31 = tail call i8* %24(%struct.jpeg_common_struct* nonnull %2, i32 1, i64 40024) #5
  %hash_value = getelementptr inbounds i8, i8* %call, i64 112
  %25 = bitcast i8* %hash_value to i8**
  store i8* %call31, i8** %25, align 8, !tbaa !34
  %26 = bitcast i8* %call to %struct.djpeg_dest_struct*
  ret %struct.djpeg_dest_struct* %26
}

; Function Attrs: nounwind uwtable
define internal void @start_output_gif(%struct.jpeg_decompress_struct* nocapture readonly %cinfo, %struct.djpeg_dest_struct* %dinfo) #0 {
entry:
  %0 = bitcast %struct.djpeg_dest_struct* %dinfo to %struct.gif_dest_struct*
  %quantize_colors = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 19
  %1 = load i32, i32* %quantize_colors, align 4, !tbaa !25
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %actual_number_of_colors = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 31
  %2 = load i32, i32* %actual_number_of_colors, align 4, !tbaa !35
  %colormap = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 32
  %3 = load i8**, i8*** %colormap, align 8, !tbaa !36
  tail call fastcc void @emit_header(%struct.gif_dest_struct* %0, i32 %2, i8** %3)
  br label %if.end

if.else:                                          ; preds = %entry
  tail call fastcc void @emit_header(%struct.gif_dest_struct* %0, i32 256, i8** null)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @put_pixel_rows(%struct.jpeg_decompress_struct* nocapture readonly %cinfo, %struct.djpeg_dest_struct* %dinfo, i32 %rows_supplied) #0 {
entry:
  %0 = bitcast %struct.djpeg_dest_struct* %dinfo to %struct.gif_dest_struct*
  %output_width = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 26
  %1 = load i32, i32* %output_width, align 8, !tbaa !29
  %cmp8 = icmp eq i32 %1, 0
  br i1 %cmp8, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %buffer = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 0, i32 4
  %2 = load i8**, i8*** %buffer, align 8, !tbaa !30
  %3 = load i8*, i8** %2, align 8, !tbaa !37
  %4 = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 1, i32 5
  %waiting_code2.i = getelementptr inbounds %struct.gif_dest_struct, %struct.gif_dest_struct* %0, i64 0, i32 7
  %hash_code.i = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 2, i32 1
  %5 = bitcast void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*, i32)** %hash_code.i to i16**
  %cur_bits.i.i = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 1, i32 4
  %6 = bitcast i8*** %cur_bits.i.i to i32*
  %cur_accum.i.i = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 1, i32 3
  %7 = bitcast %struct._IO_FILE** %cur_accum.i.i to i64*
  %n_bits.i.i = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 1, i32 1
  %8 = bitcast void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*, i32)** %n_bits.i.i to i32*
  %9 = bitcast void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*, i32)** %n_bits.i.i to i64*
  %bytesinpkt.i.i = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 2, i32 3
  %10 = bitcast %struct._IO_FILE** %bytesinpkt.i.i to i32*
  %arrayidx.i117.i = getelementptr inbounds %struct.gif_dest_struct, %struct.gif_dest_struct* %0, i64 0, i32 15, i64 0
  %11 = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 0, i32 3
  %cinfo.i.i = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 1
  %12 = bitcast %struct.djpeg_dest_struct* %cinfo.i.i to %struct.jpeg_decompress_struct**
  %maxcode.phi.trans.insert.i.i = getelementptr inbounds %struct.gif_dest_struct, %struct.gif_dest_struct* %0, i64 0, i32 3
  %free_code.i.i = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 2
  %13 = bitcast %struct.djpeg_dest_struct* %free_code.i.i to i16*
  %hash_value66.i = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 2, i32 2
  %14 = bitcast void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*)** %hash_value66.i to i64**
  %15 = bitcast void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*, i32)** %hash_code.i to i8**
  %ClearCode.i.i = getelementptr inbounds %struct.gif_dest_struct, %struct.gif_dest_struct* %0, i64 0, i32 9
  %init_bits.i.i = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 1, i32 2
  %16 = bitcast void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*)** %init_bits.i.i to i32*
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %compress_byte.exit
  %col.010 = phi i32 [ %1, %for.body.lr.ph ], [ %dec, %compress_byte.exit ]
  %ptr.09 = phi i8* [ %3, %for.body.lr.ph ], [ %incdec.ptr, %compress_byte.exit ]
  %incdec.ptr = getelementptr inbounds i8, i8* %ptr.09, i64 1
  %17 = load i8, i8* %ptr.09, align 1, !tbaa !38
  %18 = load i32, i32* %4, align 8, !tbaa !39
  %tobool.i = icmp eq i32 %18, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %for.body
  %conv.i = zext i8 %17 to i16
  store i16 %conv.i, i16* %waiting_code2.i, align 4, !tbaa !40
  store i32 0, i32* %4, align 8, !tbaa !39
  br label %compress_byte.exit

if.end.i:                                         ; preds = %for.body
  %conv = zext i8 %17 to i32
  %shl.i = shl nuw nsw i32 %conv, 4
  %19 = load i16, i16* %waiting_code2.i, align 4, !tbaa !40
  %conv3.i = sext i16 %19 to i32
  %add.i = add nsw i32 %conv3.i, %shl.i
  %cmp.i = icmp sgt i32 %add.i, 5002
  %sub.i = add nsw i32 %add.i, -5003
  %sub.add.i = select i1 %cmp.i, i32 %sub.i, i32 %add.i
  %conv8.i = sext i16 %19 to i64
  %shl9.i = shl nsw i64 %conv8.i, 8
  %conv10.i = zext i8 %17 to i64
  %or.i = or i64 %shl9.i, %conv10.i
  %idxprom.i = sext i32 %sub.add.i to i64
  %20 = load i16*, i16** %5, align 8, !tbaa !32
  %arrayidx.i = getelementptr inbounds i16, i16* %20, i64 %idxprom.i
  %21 = load i16, i16* %arrayidx.i, align 2, !tbaa !41
  %cmp12.i = icmp eq i16 %21, 0
  br i1 %cmp12.i, label %if.end55.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end.i
  %22 = load i64*, i64** %14, align 8, !tbaa !34
  %arrayidx16.i = getelementptr inbounds i64, i64* %22, i64 %idxprom.i
  %23 = load i64, i64* %arrayidx16.i, align 8, !tbaa !42
  %cmp17.i = icmp eq i64 %23, %or.i
  br i1 %cmp17.i, label %if.then19.i, label %if.end24.i

if.then19.i:                                      ; preds = %if.then14.i
  store i16 %21, i16* %waiting_code2.i, align 4, !tbaa !40
  br label %compress_byte.exit

if.end24.i:                                       ; preds = %if.then14.i
  %cmp25.i = icmp eq i32 %sub.add.i, 0
  %sub28.i = sub nsw i32 5003, %sub.add.i
  %.sub28.i = select i1 %cmp25.i, i32 1, i32 %sub28.i
  br label %for.cond.i

for.cond.i:                                       ; preds = %if.end43.i, %if.end24.i
  %i.1.i = phi i32 [ %add34.sub30.i, %if.end43.i ], [ %sub.add.i, %if.end24.i ]
  %sub30.i = sub nsw i32 %i.1.i, %.sub28.i
  %cmp31.i = icmp slt i32 %sub30.i, 0
  %add34.i = add nsw i32 %sub30.i, 5003
  %add34.sub30.i = select i1 %cmp31.i, i32 %add34.i, i32 %sub30.i
  %idxprom36.i = sext i32 %add34.sub30.i to i64
  %arrayidx38.i = getelementptr inbounds i16, i16* %20, i64 %idxprom36.i
  %24 = load i16, i16* %arrayidx38.i, align 2, !tbaa !41
  %cmp40.i = icmp eq i16 %24, 0
  br i1 %cmp40.i, label %if.end55.i.loopexit, label %if.end43.i

if.end43.i:                                       ; preds = %for.cond.i
  %arrayidx46.i = getelementptr inbounds i64, i64* %22, i64 %idxprom36.i
  %25 = load i64, i64* %arrayidx46.i, align 8, !tbaa !42
  %cmp47.i = icmp eq i64 %25, %or.i
  br i1 %cmp47.i, label %if.then49.i, label %for.cond.i

if.then49.i:                                      ; preds = %if.end43.i
  %.lcssa20 = phi i16 [ %24, %if.end43.i ]
  store i16 %.lcssa20, i16* %waiting_code2.i, align 4, !tbaa !40
  br label %compress_byte.exit

if.end55.i.loopexit:                              ; preds = %for.cond.i
  %add34.sub30.i.lcssa = phi i32 [ %add34.sub30.i, %for.cond.i ]
  br label %if.end55.i

if.end55.i:                                       ; preds = %if.end55.i.loopexit, %if.end.i
  %i.3.i = phi i32 [ %sub.add.i, %if.end.i ], [ %add34.sub30.i.lcssa, %if.end55.i.loopexit ]
  %26 = load i32, i32* %6, align 8, !tbaa !43
  %sh_prom.i.i = zext i32 %26 to i64
  %shl.i.i = shl i64 %conv8.i, %sh_prom.i.i
  %27 = load i64, i64* %7, align 8, !tbaa !44
  %or.i.i = or i64 %shl.i.i, %27
  store i64 %or.i.i, i64* %7, align 8, !tbaa !44
  %28 = load i64, i64* %9, align 8
  %29 = trunc i64 %28 to i32
  %add.i.i = add nsw i32 %29, %26
  store i32 %add.i.i, i32* %6, align 8, !tbaa !43
  %cmp46.i.i = icmp sgt i32 %add.i.i, 7
  br i1 %cmp46.i.i, label %while.body.lr.ph.i.i, label %entry.while.end_crit_edge.i.i

entry.while.end_crit_edge.i.i:                    ; preds = %if.end55.i
  %30 = lshr i64 %28, 32
  %31 = trunc i64 %30 to i16
  br label %while.end.i.i

while.body.lr.ph.i.i:                             ; preds = %if.end55.i
  %.pre.i = load i32, i32* %10, align 8, !tbaa !45
  br label %while.body.i.i

while.body.i.i:                                   ; preds = %if.end.i.i, %while.body.lr.ph.i.i
  %32 = phi i32 [ %.pre.i, %while.body.lr.ph.i.i ], [ %41, %if.end.i.i ]
  %33 = phi i64 [ %or.i.i, %while.body.lr.ph.i.i ], [ %shr.i.i, %if.end.i.i ]
  %conv5.i.i = trunc i64 %33 to i8
  %inc.i.i = add nsw i32 %32, 1
  store i32 %inc.i.i, i32* %10, align 8, !tbaa !45
  %idxprom.i.i = sext i32 %inc.i.i to i64
  %arrayidx.i.i = getelementptr inbounds %struct.gif_dest_struct, %struct.gif_dest_struct* %0, i64 0, i32 15, i64 %idxprom.i.i
  store i8 %conv5.i.i, i8* %arrayidx.i.i, align 1, !tbaa !38
  %34 = load i32, i32* %10, align 8, !tbaa !45
  %cmp7.i.i = icmp sgt i32 %34, 254
  br i1 %cmp7.i.i, label %if.then.i119.i, label %if.end.i.i

if.then.i119.i:                                   ; preds = %while.body.i.i
  %inc.i115.i = add nsw i32 %34, 1
  store i32 %inc.i115.i, i32* %10, align 8, !tbaa !45
  %conv.i116.i = trunc i32 %34 to i8
  store i8 %conv.i116.i, i8* %arrayidx.i117.i, align 4, !tbaa !38
  %conv4.i.i = sext i32 %inc.i115.i to i64
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !tbaa !46
  %call.i.i = tail call i64 @fwrite(i8* nonnull %arrayidx.i117.i, i64 1, i64 %conv4.i.i, %struct._IO_FILE* %35) #5
  %36 = load i32, i32* %10, align 8, !tbaa !45
  %conv6.i.i = sext i32 %36 to i64
  %cmp7.i118.i = icmp eq i64 %call.i.i, %conv6.i.i
  br i1 %cmp7.i118.i, label %flush_packet.exit.i, label %if.then9.i.i

if.then9.i.i:                                     ; preds = %if.then.i119.i
  %37 = load %struct.jpeg_decompress_struct*, %struct.jpeg_decompress_struct** %12, align 8, !tbaa !13
  %err.i.i = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %37, i64 0, i32 0
  %38 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err.i.i, align 8, !tbaa !20
  %msg_code.i.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %38, i64 0, i32 5
  store i32 36, i32* %msg_code.i.i, align 8, !tbaa !21
  %error_exit.i.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %38, i64 0, i32 0
  %39 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit.i.i, align 8, !tbaa !23
  %40 = bitcast %struct.jpeg_decompress_struct* %37 to %struct.jpeg_common_struct*
  tail call void %39(%struct.jpeg_common_struct* %40) #5
  br label %flush_packet.exit.i

flush_packet.exit.i:                              ; preds = %if.then9.i.i, %if.then.i119.i
  store i32 0, i32* %10, align 8, !tbaa !45
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %flush_packet.exit.i, %while.body.i.i
  %41 = phi i32 [ 0, %flush_packet.exit.i ], [ %34, %while.body.i.i ]
  %42 = load i64, i64* %7, align 8, !tbaa !44
  %shr.i.i = ashr i64 %42, 8
  store i64 %shr.i.i, i64* %7, align 8, !tbaa !44
  %43 = load i32, i32* %6, align 8, !tbaa !43
  %sub.i.i = add nsw i32 %43, -8
  store i32 %sub.i.i, i32* %6, align 8, !tbaa !43
  %cmp.i.i = icmp sgt i32 %sub.i.i, 7
  br i1 %cmp.i.i, label %while.body.i.i, label %while.end.loopexit.i.i

while.end.loopexit.i.i:                           ; preds = %if.end.i.i
  %.pre.i.i = load i16, i16* %maxcode.phi.trans.insert.i.i, align 4, !tbaa !47
  br label %while.end.i.i

while.end.i.i:                                    ; preds = %while.end.loopexit.i.i, %entry.while.end_crit_edge.i.i
  %44 = phi i16 [ %31, %entry.while.end_crit_edge.i.i ], [ %.pre.i.i, %while.end.loopexit.i.i ]
  %45 = load i16, i16* %13, align 8, !tbaa !48
  %cmp13.i.i = icmp sgt i16 %45, %44
  br i1 %cmp13.i.i, label %if.then15.i.i, label %output.exit.i

if.then15.i.i:                                    ; preds = %while.end.i.i
  %46 = load i32, i32* %8, align 8, !tbaa !49
  %inc17.i.i = add nsw i32 %46, 1
  store i32 %inc17.i.i, i32* %8, align 8, !tbaa !49
  %cmp19.i.i = icmp eq i32 %inc17.i.i, 12
  %shl24.i.i = shl i32 1, %inc17.i.i
  %sub25.i.i = add i32 %shl24.i.i, 65535
  %conv26.i.i = trunc i32 %sub25.i.i to i16
  %storemerge.i = select i1 %cmp19.i.i, i16 4096, i16 %conv26.i.i
  store i16 %storemerge.i, i16* %maxcode.phi.trans.insert.i.i, align 4, !tbaa !47
  br label %output.exit.i

output.exit.i:                                    ; preds = %if.then15.i.i, %while.end.i.i
  %cmp58.i = icmp slt i16 %45, 4096
  br i1 %cmp58.i, label %if.then60.i, label %if.else68.i

if.then60.i:                                      ; preds = %output.exit.i
  %inc.i = add i16 %45, 1
  store i16 %inc.i, i16* %13, align 8, !tbaa !48
  %idxprom62.i = sext i32 %i.3.i to i64
  %47 = load i16*, i16** %5, align 8, !tbaa !32
  %arrayidx64.i = getelementptr inbounds i16, i16* %47, i64 %idxprom62.i
  store i16 %45, i16* %arrayidx64.i, align 2, !tbaa !41
  %48 = load i64*, i64** %14, align 8, !tbaa !34
  %arrayidx67.i = getelementptr inbounds i64, i64* %48, i64 %idxprom62.i
  store i64 %or.i, i64* %arrayidx67.i, align 8, !tbaa !42
  br label %if.end69.i

if.else68.i:                                      ; preds = %output.exit.i
  %49 = load i8*, i8** %15, align 8, !tbaa !32
  tail call void @llvm.memset.p0i8.i64(i8* %49, i8 0, i64 10006, i32 1, i1 false) #5
  %50 = load i16, i16* %ClearCode.i.i, align 4, !tbaa !50
  %add.i121.i = add i16 %50, 2
  store i16 %add.i121.i, i16* %13, align 8, !tbaa !48
  %conv.i.i.i = sext i16 %50 to i64
  %51 = load i32, i32* %6, align 8, !tbaa !43
  %sh_prom.i.i.i = zext i32 %51 to i64
  %shl.i.i.i = shl i64 %conv.i.i.i, %sh_prom.i.i.i
  %52 = load i64, i64* %7, align 8, !tbaa !44
  %or.i.i.i = or i64 %shl.i.i.i, %52
  store i64 %or.i.i.i, i64* %7, align 8, !tbaa !44
  %53 = load i64, i64* %9, align 8
  %54 = trunc i64 %53 to i32
  %add.i.i.i = add nsw i32 %54, %51
  store i32 %add.i.i.i, i32* %6, align 8, !tbaa !43
  %cmp46.i.i.i = icmp sgt i32 %add.i.i.i, 7
  br i1 %cmp46.i.i.i, label %while.body.lr.ph.i.i.i, label %entry.while.end_crit_edge.i.i.i

entry.while.end_crit_edge.i.i.i:                  ; preds = %if.else68.i
  %55 = lshr i64 %53, 32
  %56 = trunc i64 %55 to i16
  br label %while.end.i.i.i

while.body.lr.ph.i.i.i:                           ; preds = %if.else68.i
  %.pre.i123.i = load i32, i32* %10, align 8, !tbaa !45
  br label %while.body.i.i.i

while.body.i.i.i:                                 ; preds = %if.end.i.i.i, %while.body.lr.ph.i.i.i
  %57 = phi i32 [ %.pre.i123.i, %while.body.lr.ph.i.i.i ], [ %66, %if.end.i.i.i ]
  %58 = phi i64 [ %or.i.i.i, %while.body.lr.ph.i.i.i ], [ %shr.i.i.i, %if.end.i.i.i ]
  %conv5.i.i.i = trunc i64 %58 to i8
  %inc.i.i.i = add nsw i32 %57, 1
  store i32 %inc.i.i.i, i32* %10, align 8, !tbaa !45
  %idxprom.i.i.i = sext i32 %inc.i.i.i to i64
  %arrayidx.i.i.i = getelementptr inbounds %struct.gif_dest_struct, %struct.gif_dest_struct* %0, i64 0, i32 15, i64 %idxprom.i.i.i
  store i8 %conv5.i.i.i, i8* %arrayidx.i.i.i, align 1, !tbaa !38
  %59 = load i32, i32* %10, align 8, !tbaa !45
  %cmp7.i.i.i = icmp sgt i32 %59, 254
  br i1 %cmp7.i.i.i, label %if.then.i20.i.i, label %if.end.i.i.i

if.then.i20.i.i:                                  ; preds = %while.body.i.i.i
  %inc.i16.i.i = add nsw i32 %59, 1
  store i32 %inc.i16.i.i, i32* %10, align 8, !tbaa !45
  %conv.i17.i.i = trunc i32 %59 to i8
  store i8 %conv.i17.i.i, i8* %arrayidx.i117.i, align 4, !tbaa !38
  %conv4.i.i.i = sext i32 %inc.i16.i.i to i64
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !tbaa !46
  %call.i.i.i = tail call i64 @fwrite(i8* nonnull %arrayidx.i117.i, i64 1, i64 %conv4.i.i.i, %struct._IO_FILE* %60) #5
  %61 = load i32, i32* %10, align 8, !tbaa !45
  %conv6.i.i.i = sext i32 %61 to i64
  %cmp7.i19.i.i = icmp eq i64 %call.i.i.i, %conv6.i.i.i
  br i1 %cmp7.i19.i.i, label %flush_packet.exit.i.i, label %if.then9.i.i.i

if.then9.i.i.i:                                   ; preds = %if.then.i20.i.i
  %62 = load %struct.jpeg_decompress_struct*, %struct.jpeg_decompress_struct** %12, align 8, !tbaa !13
  %err.i.i.i = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %62, i64 0, i32 0
  %63 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err.i.i.i, align 8, !tbaa !20
  %msg_code.i.i.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %63, i64 0, i32 5
  store i32 36, i32* %msg_code.i.i.i, align 8, !tbaa !21
  %error_exit.i.i.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %63, i64 0, i32 0
  %64 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit.i.i.i, align 8, !tbaa !23
  %65 = bitcast %struct.jpeg_decompress_struct* %62 to %struct.jpeg_common_struct*
  tail call void %64(%struct.jpeg_common_struct* %65) #5
  br label %flush_packet.exit.i.i

flush_packet.exit.i.i:                            ; preds = %if.then9.i.i.i, %if.then.i20.i.i
  store i32 0, i32* %10, align 8, !tbaa !45
  br label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %flush_packet.exit.i.i, %while.body.i.i.i
  %66 = phi i32 [ 0, %flush_packet.exit.i.i ], [ %59, %while.body.i.i.i ]
  %67 = load i64, i64* %7, align 8, !tbaa !44
  %shr.i.i.i = ashr i64 %67, 8
  store i64 %shr.i.i.i, i64* %7, align 8, !tbaa !44
  %68 = load i32, i32* %6, align 8, !tbaa !43
  %sub.i.i.i = add nsw i32 %68, -8
  store i32 %sub.i.i.i, i32* %6, align 8, !tbaa !43
  %cmp.i.i.i = icmp sgt i32 %sub.i.i.i, 7
  br i1 %cmp.i.i.i, label %while.body.i.i.i, label %while.end.loopexit.i.i.i

while.end.loopexit.i.i.i:                         ; preds = %if.end.i.i.i
  %.pre.i.i.i = load i16, i16* %maxcode.phi.trans.insert.i.i, align 4, !tbaa !47
  %.pre22.i.i = load i16, i16* %13, align 8, !tbaa !48
  br label %while.end.i.i.i

while.end.i.i.i:                                  ; preds = %while.end.loopexit.i.i.i, %entry.while.end_crit_edge.i.i.i
  %69 = phi i16 [ %add.i121.i, %entry.while.end_crit_edge.i.i.i ], [ %.pre22.i.i, %while.end.loopexit.i.i.i ]
  %70 = phi i16 [ %56, %entry.while.end_crit_edge.i.i.i ], [ %.pre.i.i.i, %while.end.loopexit.i.i.i ]
  %cmp13.i.i.i = icmp sgt i16 %69, %70
  br i1 %cmp13.i.i.i, label %if.then15.i.i.i, label %clear_block.exit.i

if.then15.i.i.i:                                  ; preds = %while.end.i.i.i
  %71 = load i32, i32* %8, align 8, !tbaa !49
  %inc17.i.i.i = add nsw i32 %71, 1
  store i32 %inc17.i.i.i, i32* %8, align 8, !tbaa !49
  %cmp19.i.i.i = icmp eq i32 %inc17.i.i.i, 12
  br i1 %cmp19.i.i.i, label %if.then21.i.i.i, label %if.else.i.i.i

if.then21.i.i.i:                                  ; preds = %if.then15.i.i.i
  store i16 4096, i16* %maxcode.phi.trans.insert.i.i, align 4, !tbaa !47
  br label %clear_block.exit.i

if.else.i.i.i:                                    ; preds = %if.then15.i.i.i
  %shl24.i.i.i = shl i32 1, %inc17.i.i.i
  %sub25.i.i.i = add i32 %shl24.i.i.i, 65535
  %conv26.i.i.i = trunc i32 %sub25.i.i.i to i16
  store i16 %conv26.i.i.i, i16* %maxcode.phi.trans.insert.i.i, align 4, !tbaa !47
  br label %clear_block.exit.i

clear_block.exit.i:                               ; preds = %if.else.i.i.i, %if.then21.i.i.i, %while.end.i.i.i
  %72 = load i32, i32* %16, align 8, !tbaa !51
  store i32 %72, i32* %8, align 8, !tbaa !49
  %shl.i124.i = shl i32 1, %72
  %sub.i125.i = add i32 %shl.i124.i, 65535
  %conv4.i126.i = trunc i32 %sub.i125.i to i16
  store i16 %conv4.i126.i, i16* %maxcode.phi.trans.insert.i.i, align 4, !tbaa !47
  br label %if.end69.i

if.end69.i:                                       ; preds = %clear_block.exit.i, %if.then60.i
  %conv70.i = zext i8 %17 to i16
  store i16 %conv70.i, i16* %waiting_code2.i, align 4, !tbaa !40
  br label %compress_byte.exit

compress_byte.exit:                               ; preds = %if.then.i, %if.then19.i, %if.then49.i, %if.end69.i
  %dec = add i32 %col.010, -1
  %cmp = icmp eq i32 %dec, 0
  br i1 %cmp, label %for.end.loopexit, label %for.body

for.end.loopexit:                                 ; preds = %compress_byte.exit
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @finish_output_gif(%struct.jpeg_decompress_struct* %cinfo, %struct.djpeg_dest_struct* %dinfo) #0 {
entry:
  %0 = bitcast %struct.djpeg_dest_struct* %dinfo to %struct.gif_dest_struct*
  %1 = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 1, i32 5
  %2 = load i32, i32* %1, align 8, !tbaa !39
  %tobool.i = icmp eq i32 %2, 0
  br i1 %tobool.i, label %if.then.i, label %entry.if.end_crit_edge.i

entry.if.end_crit_edge.i:                         ; preds = %entry
  %.pre123.i = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 1, i32 4
  %3 = bitcast i8*** %.pre123.i to i32*
  %.pre124.i = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 1, i32 3
  %4 = bitcast %struct._IO_FILE** %.pre124.i to i64*
  %.pre125.i = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 1, i32 1
  %5 = bitcast void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*, i32)** %.pre125.i to i32*
  %.pre126.i = bitcast void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*, i32)** %.pre125.i to i64*
  br label %if.end.i

if.then.i:                                        ; preds = %entry
  %waiting_code.i = getelementptr inbounds %struct.gif_dest_struct, %struct.gif_dest_struct* %0, i64 0, i32 7
  %6 = load i16, i16* %waiting_code.i, align 4, !tbaa !40
  %conv.i.i = sext i16 %6 to i64
  %cur_bits.i.i = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 1, i32 4
  %7 = bitcast i8*** %cur_bits.i.i to i32*
  %8 = load i32, i32* %7, align 8, !tbaa !43
  %sh_prom.i.i = zext i32 %8 to i64
  %shl.i.i = shl i64 %conv.i.i, %sh_prom.i.i
  %cur_accum.i.i = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 1, i32 3
  %9 = bitcast %struct._IO_FILE** %cur_accum.i.i to i64*
  %10 = load i64, i64* %9, align 8, !tbaa !44
  %or.i.i = or i64 %shl.i.i, %10
  store i64 %or.i.i, i64* %9, align 8, !tbaa !44
  %n_bits.i.i = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 1, i32 1
  %11 = bitcast void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*, i32)** %n_bits.i.i to i32*
  %12 = bitcast void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*, i32)** %n_bits.i.i to i64*
  %13 = load i64, i64* %12, align 8
  %14 = trunc i64 %13 to i32
  %add.i.i = add nsw i32 %14, %8
  store i32 %add.i.i, i32* %7, align 8, !tbaa !43
  %cmp46.i.i = icmp sgt i32 %add.i.i, 7
  br i1 %cmp46.i.i, label %while.body.lr.ph.i.i, label %entry.while.end_crit_edge.i.i

entry.while.end_crit_edge.i.i:                    ; preds = %if.then.i
  %15 = lshr i64 %13, 32
  %16 = trunc i64 %15 to i16
  %.pre47.i.i = getelementptr inbounds %struct.gif_dest_struct, %struct.gif_dest_struct* %0, i64 0, i32 3
  br label %while.end.i.i

while.body.lr.ph.i.i:                             ; preds = %if.then.i
  %bytesinpkt.i.i = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 2, i32 3
  %17 = bitcast %struct._IO_FILE** %bytesinpkt.i.i to i32*
  %arrayidx.i23.i = getelementptr inbounds %struct.gif_dest_struct, %struct.gif_dest_struct* %0, i64 0, i32 15, i64 0
  %18 = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 0, i32 3
  %cinfo.i.i = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 1
  %19 = bitcast %struct.djpeg_dest_struct* %cinfo.i.i to %struct.jpeg_decompress_struct**
  %.pre.i = load i32, i32* %17, align 8, !tbaa !45
  br label %while.body.i.i

while.body.i.i:                                   ; preds = %if.end.i.i, %while.body.lr.ph.i.i
  %20 = phi i32 [ %.pre.i, %while.body.lr.ph.i.i ], [ %29, %if.end.i.i ]
  %21 = phi i64 [ %or.i.i, %while.body.lr.ph.i.i ], [ %shr.i.i, %if.end.i.i ]
  %conv5.i.i = trunc i64 %21 to i8
  %inc.i.i = add nsw i32 %20, 1
  store i32 %inc.i.i, i32* %17, align 8, !tbaa !45
  %idxprom.i.i = sext i32 %inc.i.i to i64
  %arrayidx.i.i = getelementptr inbounds %struct.gif_dest_struct, %struct.gif_dest_struct* %0, i64 0, i32 15, i64 %idxprom.i.i
  store i8 %conv5.i.i, i8* %arrayidx.i.i, align 1, !tbaa !38
  %22 = load i32, i32* %17, align 8, !tbaa !45
  %cmp7.i.i = icmp sgt i32 %22, 254
  br i1 %cmp7.i.i, label %if.then.i25.i, label %if.end.i.i

if.then.i25.i:                                    ; preds = %while.body.i.i
  %inc.i21.i = add nsw i32 %22, 1
  store i32 %inc.i21.i, i32* %17, align 8, !tbaa !45
  %conv.i22.i = trunc i32 %22 to i8
  store i8 %conv.i22.i, i8* %arrayidx.i23.i, align 4, !tbaa !38
  %conv4.i.i = sext i32 %inc.i21.i to i64
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %18, align 8, !tbaa !46
  %call.i.i = tail call i64 @fwrite(i8* nonnull %arrayidx.i23.i, i64 1, i64 %conv4.i.i, %struct._IO_FILE* %23) #5
  %24 = load i32, i32* %17, align 8, !tbaa !45
  %conv6.i.i = sext i32 %24 to i64
  %cmp7.i24.i = icmp eq i64 %call.i.i, %conv6.i.i
  br i1 %cmp7.i24.i, label %flush_packet.exit.i, label %if.then9.i.i

if.then9.i.i:                                     ; preds = %if.then.i25.i
  %25 = load %struct.jpeg_decompress_struct*, %struct.jpeg_decompress_struct** %19, align 8, !tbaa !13
  %err.i.i = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %25, i64 0, i32 0
  %26 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err.i.i, align 8, !tbaa !20
  %msg_code.i.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %26, i64 0, i32 5
  store i32 36, i32* %msg_code.i.i, align 8, !tbaa !21
  %error_exit.i.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %26, i64 0, i32 0
  %27 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit.i.i, align 8, !tbaa !23
  %28 = bitcast %struct.jpeg_decompress_struct* %25 to %struct.jpeg_common_struct*
  tail call void %27(%struct.jpeg_common_struct* %28) #5
  br label %flush_packet.exit.i

flush_packet.exit.i:                              ; preds = %if.then9.i.i, %if.then.i25.i
  store i32 0, i32* %17, align 8, !tbaa !45
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %flush_packet.exit.i, %while.body.i.i
  %29 = phi i32 [ 0, %flush_packet.exit.i ], [ %22, %while.body.i.i ]
  %30 = load i64, i64* %9, align 8, !tbaa !44
  %shr.i.i = ashr i64 %30, 8
  store i64 %shr.i.i, i64* %9, align 8, !tbaa !44
  %31 = load i32, i32* %7, align 8, !tbaa !43
  %sub.i.i = add nsw i32 %31, -8
  store i32 %sub.i.i, i32* %7, align 8, !tbaa !43
  %cmp.i.i = icmp sgt i32 %sub.i.i, 7
  br i1 %cmp.i.i, label %while.body.i.i, label %while.end.loopexit.i.i

while.end.loopexit.i.i:                           ; preds = %if.end.i.i
  %maxcode.phi.trans.insert.i.i = getelementptr inbounds %struct.gif_dest_struct, %struct.gif_dest_struct* %0, i64 0, i32 3
  %.pre.i.i = load i16, i16* %maxcode.phi.trans.insert.i.i, align 4, !tbaa !47
  br label %while.end.i.i

while.end.i.i:                                    ; preds = %while.end.loopexit.i.i, %entry.while.end_crit_edge.i.i
  %maxcode.pre-phi.i.i = phi i16* [ %.pre47.i.i, %entry.while.end_crit_edge.i.i ], [ %maxcode.phi.trans.insert.i.i, %while.end.loopexit.i.i ]
  %32 = phi i16 [ %16, %entry.while.end_crit_edge.i.i ], [ %.pre.i.i, %while.end.loopexit.i.i ]
  %free_code.i.i = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 2
  %33 = bitcast %struct.djpeg_dest_struct* %free_code.i.i to i16*
  %34 = load i16, i16* %33, align 8, !tbaa !48
  %cmp13.i.i = icmp sgt i16 %34, %32
  br i1 %cmp13.i.i, label %if.then15.i.i, label %if.end.i

if.then15.i.i:                                    ; preds = %while.end.i.i
  %35 = load i32, i32* %11, align 8, !tbaa !49
  %inc17.i.i = add nsw i32 %35, 1
  store i32 %inc17.i.i, i32* %11, align 8, !tbaa !49
  %cmp19.i.i = icmp eq i32 %inc17.i.i, 12
  br i1 %cmp19.i.i, label %if.then21.i.i, label %if.else.i.i

if.then21.i.i:                                    ; preds = %if.then15.i.i
  store i16 4096, i16* %maxcode.pre-phi.i.i, align 4, !tbaa !47
  br label %if.end.i

if.else.i.i:                                      ; preds = %if.then15.i.i
  %shl24.i.i = shl i32 1, %inc17.i.i
  %sub25.i.i = add i32 %shl24.i.i, 65535
  %conv26.i.i = trunc i32 %sub25.i.i to i16
  store i16 %conv26.i.i, i16* %maxcode.pre-phi.i.i, align 4, !tbaa !47
  br label %if.end.i

if.end.i:                                         ; preds = %if.else.i.i, %if.then21.i.i, %while.end.i.i, %entry.if.end_crit_edge.i
  %.pre-phi.i = phi i64* [ %.pre126.i, %entry.if.end_crit_edge.i ], [ %12, %if.else.i.i ], [ %12, %if.then21.i.i ], [ %12, %while.end.i.i ]
  %n_bits.i33.pre-phi.i = phi i32* [ %5, %entry.if.end_crit_edge.i ], [ %11, %if.else.i.i ], [ %11, %if.then21.i.i ], [ %11, %while.end.i.i ]
  %cur_accum.i31.pre-phi.i = phi i64* [ %4, %entry.if.end_crit_edge.i ], [ %9, %if.else.i.i ], [ %9, %if.then21.i.i ], [ %9, %while.end.i.i ]
  %cur_bits.i28.pre-phi.i = phi i32* [ %3, %entry.if.end_crit_edge.i ], [ %7, %if.else.i.i ], [ %7, %if.then21.i.i ], [ %7, %while.end.i.i ]
  %EOFCode.i = getelementptr inbounds %struct.gif_dest_struct, %struct.gif_dest_struct* %0, i64 0, i32 10
  %36 = load i16, i16* %EOFCode.i, align 2, !tbaa !52
  %conv.i27.i = sext i16 %36 to i64
  %37 = load i32, i32* %cur_bits.i28.pre-phi.i, align 8, !tbaa !43
  %sh_prom.i29.i = zext i32 %37 to i64
  %shl.i30.i = shl i64 %conv.i27.i, %sh_prom.i29.i
  %38 = load i64, i64* %cur_accum.i31.pre-phi.i, align 8, !tbaa !44
  %or.i32.i = or i64 %shl.i30.i, %38
  store i64 %or.i32.i, i64* %cur_accum.i31.pre-phi.i, align 8, !tbaa !44
  %39 = load i64, i64* %.pre-phi.i, align 8
  %40 = trunc i64 %39 to i32
  %add.i34.i = add nsw i32 %40, %37
  store i32 %add.i34.i, i32* %cur_bits.i28.pre-phi.i, align 8, !tbaa !43
  %cmp46.i35.i = icmp sgt i32 %add.i34.i, 7
  br i1 %cmp46.i35.i, label %while.body.lr.ph.i39.i, label %entry.while.end_crit_edge.i37.i

entry.while.end_crit_edge.i37.i:                  ; preds = %if.end.i
  %41 = lshr i64 %39, 32
  %42 = trunc i64 %41 to i16
  %.pre47.i36.i = getelementptr inbounds %struct.gif_dest_struct, %struct.gif_dest_struct* %0, i64 0, i32 3
  br label %while.end.i57.i

while.body.lr.ph.i39.i:                           ; preds = %if.end.i
  %bytesinpkt.i38.i = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 2, i32 3
  %43 = bitcast %struct._IO_FILE** %bytesinpkt.i38.i to i32*
  %arrayidx.i71.i = getelementptr inbounds %struct.gif_dest_struct, %struct.gif_dest_struct* %0, i64 0, i32 15, i64 0
  %44 = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 0, i32 3
  %cinfo.i78.i = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 1
  %45 = bitcast %struct.djpeg_dest_struct* %cinfo.i78.i to %struct.jpeg_decompress_struct**
  %.pre121.i = load i32, i32* %43, align 8, !tbaa !45
  br label %while.body.i45.i

while.body.i45.i:                                 ; preds = %if.end.i50.i, %while.body.lr.ph.i39.i
  %46 = phi i32 [ %.pre121.i, %while.body.lr.ph.i39.i ], [ %55, %if.end.i50.i ]
  %47 = phi i64 [ %or.i32.i, %while.body.lr.ph.i39.i ], [ %shr.i47.i, %if.end.i50.i ]
  %conv5.i40.i = trunc i64 %47 to i8
  %inc.i41.i = add nsw i32 %46, 1
  store i32 %inc.i41.i, i32* %43, align 8, !tbaa !45
  %idxprom.i42.i = sext i32 %inc.i41.i to i64
  %arrayidx.i43.i = getelementptr inbounds %struct.gif_dest_struct, %struct.gif_dest_struct* %0, i64 0, i32 15, i64 %idxprom.i42.i
  store i8 %conv5.i40.i, i8* %arrayidx.i43.i, align 1, !tbaa !38
  %48 = load i32, i32* %43, align 8, !tbaa !45
  %cmp7.i44.i = icmp sgt i32 %48, 254
  br i1 %cmp7.i44.i, label %if.then.i77.i, label %if.end.i50.i

if.then.i77.i:                                    ; preds = %while.body.i45.i
  %inc.i69.i = add nsw i32 %48, 1
  store i32 %inc.i69.i, i32* %43, align 8, !tbaa !45
  %conv.i70.i = trunc i32 %48 to i8
  store i8 %conv.i70.i, i8* %arrayidx.i71.i, align 4, !tbaa !38
  %conv4.i72.i = sext i32 %inc.i69.i to i64
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** %44, align 8, !tbaa !46
  %call.i74.i = tail call i64 @fwrite(i8* nonnull %arrayidx.i71.i, i64 1, i64 %conv4.i72.i, %struct._IO_FILE* %49) #5
  %50 = load i32, i32* %43, align 8, !tbaa !45
  %conv6.i75.i = sext i32 %50 to i64
  %cmp7.i76.i = icmp eq i64 %call.i74.i, %conv6.i75.i
  br i1 %cmp7.i76.i, label %flush_packet.exit84.i, label %if.then9.i82.i

if.then9.i82.i:                                   ; preds = %if.then.i77.i
  %51 = load %struct.jpeg_decompress_struct*, %struct.jpeg_decompress_struct** %45, align 8, !tbaa !13
  %err.i79.i = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %51, i64 0, i32 0
  %52 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err.i79.i, align 8, !tbaa !20
  %msg_code.i80.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %52, i64 0, i32 5
  store i32 36, i32* %msg_code.i80.i, align 8, !tbaa !21
  %error_exit.i81.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %52, i64 0, i32 0
  %53 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit.i81.i, align 8, !tbaa !23
  %54 = bitcast %struct.jpeg_decompress_struct* %51 to %struct.jpeg_common_struct*
  tail call void %53(%struct.jpeg_common_struct* %54) #5
  br label %flush_packet.exit84.i

flush_packet.exit84.i:                            ; preds = %if.then9.i82.i, %if.then.i77.i
  store i32 0, i32* %43, align 8, !tbaa !45
  br label %if.end.i50.i

if.end.i50.i:                                     ; preds = %flush_packet.exit84.i, %while.body.i45.i
  %55 = phi i32 [ 0, %flush_packet.exit84.i ], [ %48, %while.body.i45.i ]
  %56 = load i64, i64* %cur_accum.i31.pre-phi.i, align 8, !tbaa !44
  %shr.i47.i = ashr i64 %56, 8
  store i64 %shr.i47.i, i64* %cur_accum.i31.pre-phi.i, align 8, !tbaa !44
  %57 = load i32, i32* %cur_bits.i28.pre-phi.i, align 8, !tbaa !43
  %sub.i48.i = add nsw i32 %57, -8
  store i32 %sub.i48.i, i32* %cur_bits.i28.pre-phi.i, align 8, !tbaa !43
  %cmp.i49.i = icmp sgt i32 %sub.i48.i, 7
  br i1 %cmp.i49.i, label %while.body.i45.i, label %while.end.loopexit.i53.i

while.end.loopexit.i53.i:                         ; preds = %if.end.i50.i
  %maxcode.phi.trans.insert.i51.i = getelementptr inbounds %struct.gif_dest_struct, %struct.gif_dest_struct* %0, i64 0, i32 3
  %.pre.i52.i = load i16, i16* %maxcode.phi.trans.insert.i51.i, align 4, !tbaa !47
  br label %while.end.i57.i

while.end.i57.i:                                  ; preds = %while.end.loopexit.i53.i, %entry.while.end_crit_edge.i37.i
  %maxcode.pre-phi.i54.i = phi i16* [ %.pre47.i36.i, %entry.while.end_crit_edge.i37.i ], [ %maxcode.phi.trans.insert.i51.i, %while.end.loopexit.i53.i ]
  %58 = phi i16 [ %42, %entry.while.end_crit_edge.i37.i ], [ %.pre.i52.i, %while.end.loopexit.i53.i ]
  %free_code.i55.i = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 2
  %59 = bitcast %struct.djpeg_dest_struct* %free_code.i55.i to i16*
  %60 = load i16, i16* %59, align 8, !tbaa !48
  %cmp13.i56.i = icmp sgt i16 %60, %58
  br i1 %cmp13.i56.i, label %if.then15.i60.i, label %output.exit66.i

if.then15.i60.i:                                  ; preds = %while.end.i57.i
  %61 = load i32, i32* %n_bits.i33.pre-phi.i, align 8, !tbaa !49
  %inc17.i58.i = add nsw i32 %61, 1
  store i32 %inc17.i58.i, i32* %n_bits.i33.pre-phi.i, align 8, !tbaa !49
  %cmp19.i59.i = icmp eq i32 %inc17.i58.i, 12
  br i1 %cmp19.i59.i, label %if.then21.i61.i, label %if.else.i65.i

if.then21.i61.i:                                  ; preds = %if.then15.i60.i
  store i16 4096, i16* %maxcode.pre-phi.i54.i, align 4, !tbaa !47
  br label %output.exit66.i

if.else.i65.i:                                    ; preds = %if.then15.i60.i
  %shl24.i62.i = shl i32 1, %inc17.i58.i
  %sub25.i63.i = add i32 %shl24.i62.i, 65535
  %conv26.i64.i = trunc i32 %sub25.i63.i to i16
  store i16 %conv26.i64.i, i16* %maxcode.pre-phi.i54.i, align 4, !tbaa !47
  br label %output.exit66.i

output.exit66.i:                                  ; preds = %if.else.i65.i, %if.then21.i61.i, %while.end.i57.i
  %62 = load i32, i32* %cur_bits.i28.pre-phi.i, align 8, !tbaa !43
  %cmp.i = icmp sgt i32 %62, 0
  br i1 %cmp.i, label %if.then1.i, label %output.exit66.if.end7_crit_edge.i

output.exit66.if.end7_crit_edge.i:                ; preds = %output.exit66.i
  %bytesinpkt.i103.phi.trans.insert.i = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 2, i32 3
  %63 = bitcast %struct._IO_FILE** %bytesinpkt.i103.phi.trans.insert.i to i32*
  %.pre122.i = load i32, i32* %63, align 8, !tbaa !45
  br label %if.end7.i

if.then1.i:                                       ; preds = %output.exit66.i
  %64 = load i64, i64* %cur_accum.i31.pre-phi.i, align 8, !tbaa !44
  %conv.i = trunc i64 %64 to i8
  %bytesinpkt.i = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 2, i32 3
  %65 = bitcast %struct._IO_FILE** %bytesinpkt.i to i32*
  %66 = load i32, i32* %65, align 8, !tbaa !45
  %inc.i = add nsw i32 %66, 1
  store i32 %inc.i, i32* %65, align 8, !tbaa !45
  %idxprom.i = sext i32 %inc.i to i64
  %arrayidx.i = getelementptr inbounds %struct.gif_dest_struct, %struct.gif_dest_struct* %0, i64 0, i32 15, i64 %idxprom.i
  store i8 %conv.i, i8* %arrayidx.i, align 1, !tbaa !38
  %67 = load i32, i32* %65, align 8, !tbaa !45
  %cmp3.i = icmp sgt i32 %67, 254
  br i1 %cmp3.i, label %if.then.i95.i, label %if.end7.i

if.then.i95.i:                                    ; preds = %if.then1.i
  %inc.i87.i = add nsw i32 %67, 1
  store i32 %inc.i87.i, i32* %65, align 8, !tbaa !45
  %conv.i88.i = trunc i32 %67 to i8
  %arrayidx.i89.i = getelementptr inbounds %struct.gif_dest_struct, %struct.gif_dest_struct* %0, i64 0, i32 15, i64 0
  store i8 %conv.i88.i, i8* %arrayidx.i89.i, align 4, !tbaa !38
  %conv4.i90.i = sext i32 %inc.i87.i to i64
  %68 = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 0, i32 3
  %69 = load %struct._IO_FILE*, %struct._IO_FILE** %68, align 8, !tbaa !46
  %call.i92.i = tail call i64 @fwrite(i8* %arrayidx.i89.i, i64 1, i64 %conv4.i90.i, %struct._IO_FILE* %69) #5
  %70 = load i32, i32* %65, align 8, !tbaa !45
  %conv6.i93.i = sext i32 %70 to i64
  %cmp7.i94.i = icmp eq i64 %call.i92.i, %conv6.i93.i
  br i1 %cmp7.i94.i, label %if.end7.thread.i, label %if.then9.i100.i

if.then9.i100.i:                                  ; preds = %if.then.i95.i
  %cinfo.i96.i = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 1
  %71 = bitcast %struct.djpeg_dest_struct* %cinfo.i96.i to %struct.jpeg_decompress_struct**
  %72 = load %struct.jpeg_decompress_struct*, %struct.jpeg_decompress_struct** %71, align 8, !tbaa !13
  %err.i97.i = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %72, i64 0, i32 0
  %73 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err.i97.i, align 8, !tbaa !20
  %msg_code.i98.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %73, i64 0, i32 5
  store i32 36, i32* %msg_code.i98.i, align 8, !tbaa !21
  %error_exit.i99.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %73, i64 0, i32 0
  %74 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit.i99.i, align 8, !tbaa !23
  %75 = bitcast %struct.jpeg_decompress_struct* %72 to %struct.jpeg_common_struct*
  tail call void %74(%struct.jpeg_common_struct* %75) #5
  br label %if.end7.thread.i

if.end7.thread.i:                                 ; preds = %if.then9.i100.i, %if.then.i95.i
  store i32 0, i32* %65, align 8, !tbaa !45
  br label %compress_term.exit

if.end7.i:                                        ; preds = %if.then1.i, %output.exit66.if.end7_crit_edge.i
  %bytesinpkt.i103.pre-phi.i = phi i32* [ %63, %output.exit66.if.end7_crit_edge.i ], [ %65, %if.then1.i ]
  %76 = phi i32 [ %.pre122.i, %output.exit66.if.end7_crit_edge.i ], [ %67, %if.then1.i ]
  %cmp.i104.i = icmp sgt i32 %76, 0
  br i1 %cmp.i104.i, label %if.then.i113.i, label %if.end7.i.compress_term.exit_crit_edge

if.end7.i.compress_term.exit_crit_edge:           ; preds = %if.end7.i
  %.pre = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 0, i32 3
  br label %compress_term.exit

if.then.i113.i:                                   ; preds = %if.end7.i
  %inc.i105.i = add nsw i32 %76, 1
  store i32 %inc.i105.i, i32* %bytesinpkt.i103.pre-phi.i, align 8, !tbaa !45
  %conv.i106.i = trunc i32 %76 to i8
  %arrayidx.i107.i = getelementptr inbounds %struct.gif_dest_struct, %struct.gif_dest_struct* %0, i64 0, i32 15, i64 0
  store i8 %conv.i106.i, i8* %arrayidx.i107.i, align 4, !tbaa !38
  %conv4.i108.i = sext i32 %inc.i105.i to i64
  %77 = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 0, i32 3
  %78 = load %struct._IO_FILE*, %struct._IO_FILE** %77, align 8, !tbaa !46
  %call.i110.i = tail call i64 @fwrite(i8* %arrayidx.i107.i, i64 1, i64 %conv4.i108.i, %struct._IO_FILE* %78) #5
  %79 = load i32, i32* %bytesinpkt.i103.pre-phi.i, align 8, !tbaa !45
  %conv6.i111.i = sext i32 %79 to i64
  %cmp7.i112.i = icmp eq i64 %call.i110.i, %conv6.i111.i
  br i1 %cmp7.i112.i, label %if.end.i119.i, label %if.then9.i118.i

if.then9.i118.i:                                  ; preds = %if.then.i113.i
  %cinfo.i114.i = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 1
  %80 = bitcast %struct.djpeg_dest_struct* %cinfo.i114.i to %struct.jpeg_decompress_struct**
  %81 = load %struct.jpeg_decompress_struct*, %struct.jpeg_decompress_struct** %80, align 8, !tbaa !13
  %err.i115.i = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %81, i64 0, i32 0
  %82 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err.i115.i, align 8, !tbaa !20
  %msg_code.i116.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %82, i64 0, i32 5
  store i32 36, i32* %msg_code.i116.i, align 8, !tbaa !21
  %error_exit.i117.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %82, i64 0, i32 0
  %83 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit.i117.i, align 8, !tbaa !23
  %84 = bitcast %struct.jpeg_decompress_struct* %81 to %struct.jpeg_common_struct*
  tail call void %83(%struct.jpeg_common_struct* %84) #5
  br label %if.end.i119.i

if.end.i119.i:                                    ; preds = %if.then9.i118.i, %if.then.i113.i
  store i32 0, i32* %bytesinpkt.i103.pre-phi.i, align 8, !tbaa !45
  br label %compress_term.exit

compress_term.exit:                               ; preds = %if.end7.i.compress_term.exit_crit_edge, %if.end7.thread.i, %if.end.i119.i
  %output_file.pre-phi = phi %struct._IO_FILE** [ %.pre, %if.end7.i.compress_term.exit_crit_edge ], [ %68, %if.end7.thread.i ], [ %77, %if.end.i119.i ]
  %85 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file.pre-phi, align 8, !tbaa !46
  %call = tail call i32 @_IO_putc(i32 0, %struct._IO_FILE* %85)
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file.pre-phi, align 8, !tbaa !46
  %call3 = tail call i32 @_IO_putc(i32 59, %struct._IO_FILE* %86)
  %87 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file.pre-phi, align 8, !tbaa !46
  %call6 = tail call i32 @fflush(%struct._IO_FILE* %87)
  %88 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file.pre-phi, align 8, !tbaa !46
  %call9 = tail call i32 @ferror(%struct._IO_FILE* %88) #5
  %tobool = icmp eq i32 %call9, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %compress_term.exit
  %err = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0
  %89 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8, !tbaa !20
  %msg_code = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %89, i64 0, i32 5
  store i32 36, i32* %msg_code, align 8, !tbaa !21
  %error_exit = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %89, i64 0, i32 0
  %90 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit, align 8, !tbaa !23
  %91 = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  tail call void %90(%struct.jpeg_common_struct* %91) #5
  br label %if.end

if.end:                                           ; preds = %compress_term.exit, %if.then
  ret void
}

declare void @jpeg_calc_output_dimensions(%struct.jpeg_decompress_struct*) #1

; Function Attrs: nounwind uwtable
define internal fastcc void @emit_header(%struct.gif_dest_struct* %dinfo, i32 %num_colors, i8** readonly %colormap) unnamed_addr #0 {
entry:
  %cinfo = getelementptr inbounds %struct.gif_dest_struct, %struct.gif_dest_struct* %dinfo, i64 0, i32 1
  %0 = load %struct.jpeg_decompress_struct*, %struct.jpeg_decompress_struct** %cinfo, align 8, !tbaa !13
  %data_precision = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 42
  %1 = load i32, i32* %data_precision, align 8, !tbaa !24
  %sub = add nsw i32 %1, -8
  %cmp = icmp sgt i32 %num_colors, 256
  br i1 %cmp, label %if.then, label %while.cond.preheader

if.then:                                          ; preds = %entry
  %err = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %2 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8, !tbaa !20
  %msg_code = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %2, i64 0, i32 5
  store i32 1039, i32* %msg_code, align 8, !tbaa !21
  %arrayidx = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %2, i64 0, i32 6, i32 0, i64 0
  store i32 %num_colors, i32* %arrayidx, align 4, !tbaa !53
  %error_exit = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %2, i64 0, i32 0
  %3 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit, align 8, !tbaa !23
  %4 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %3(%struct.jpeg_common_struct* %4) #5
  br label %while.cond.preheader

while.cond.preheader:                             ; preds = %if.then, %entry
  br label %while.cond

while.cond:                                       ; preds = %while.cond.preheader, %while.cond
  %BitsPerPixel.0 = phi i32 [ %inc, %while.cond ], [ 1, %while.cond.preheader ]
  %shl = shl i32 1, %BitsPerPixel.0
  %cmp8 = icmp slt i32 %shl, %num_colors
  %inc = add nuw nsw i32 %BitsPerPixel.0, 1
  br i1 %cmp8, label %while.cond, label %while.end

while.end:                                        ; preds = %while.cond
  %shl.lcssa = phi i32 [ %shl, %while.cond ]
  %BitsPerPixel.0.lcssa = phi i32 [ %BitsPerPixel.0, %while.cond ]
  %cmp10 = icmp slt i32 %BitsPerPixel.0.lcssa, 2
  %.BitsPerPixel.0 = select i1 %cmp10, i32 2, i32 %BitsPerPixel.0.lcssa
  %output_file = getelementptr inbounds %struct.gif_dest_struct, %struct.gif_dest_struct* %dinfo, i64 0, i32 0, i32 3
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call = tail call i32 @_IO_putc(i32 71, %struct._IO_FILE* %5)
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call15 = tail call i32 @_IO_putc(i32 73, %struct._IO_FILE* %6)
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call18 = tail call i32 @_IO_putc(i32 70, %struct._IO_FILE* %7)
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call21 = tail call i32 @_IO_putc(i32 56, %struct._IO_FILE* %8)
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call24 = tail call i32 @_IO_putc(i32 55, %struct._IO_FILE* %9)
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call27 = tail call i32 @_IO_putc(i32 97, %struct._IO_FILE* %10)
  %11 = load %struct.jpeg_decompress_struct*, %struct.jpeg_decompress_struct** %cinfo, align 8, !tbaa !13
  %output_width = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %11, i64 0, i32 26
  %12 = load i32, i32* %output_width, align 8, !tbaa !29
  %and.i = and i32 %12, 255
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call.i = tail call i32 @_IO_putc(i32 %and.i, %struct._IO_FILE* %13) #5
  %shr.i = lshr i32 %12, 8
  %and1.i = and i32 %shr.i, 255
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call4.i = tail call i32 @_IO_putc(i32 %and1.i, %struct._IO_FILE* %14) #5
  %15 = load %struct.jpeg_decompress_struct*, %struct.jpeg_decompress_struct** %cinfo, align 8, !tbaa !13
  %output_height = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %15, i64 0, i32 27
  %16 = load i32, i32* %output_height, align 4, !tbaa !54
  %and.i167 = and i32 %16, 255
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call.i169 = tail call i32 @_IO_putc(i32 %and.i167, %struct._IO_FILE* %17) #5
  %shr.i170 = lshr i32 %16, 8
  %and1.i171 = and i32 %shr.i170, 255
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call4.i172 = tail call i32 @_IO_putc(i32 %and1.i171, %struct._IO_FILE* %18) #5
  %sub30 = add nsw i32 %BitsPerPixel.0.lcssa, -1
  %shl31 = shl i32 %sub30, 4
  %or = or i32 %sub30, %shl31
  %or33 = or i32 %or, 128
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call36 = tail call i32 @_IO_putc(i32 %or33, %struct._IO_FILE* %19)
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call39 = tail call i32 @_IO_putc(i32 0, %struct._IO_FILE* %20)
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call42 = tail call i32 @_IO_putc(i32 0, %struct._IO_FILE* %21)
  %cmp43201 = icmp eq i32 %BitsPerPixel.0.lcssa, 31
  br i1 %cmp43201, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %while.end
  %cmp46 = icmp eq i8** %colormap, null
  %sub80 = add nsw i32 %num_colors, -1
  %div = sdiv i32 %sub80, 2
  %arrayidx57 = getelementptr inbounds i8*, i8** %colormap, i64 1
  %arrayidx65 = getelementptr inbounds i8*, i8** %colormap, i64 2
  br i1 %cmp46, label %for.body.us.preheader, label %for.body.preheader

for.body.us.preheader:                            ; preds = %for.body.lr.ph
  br label %for.body.us

for.body.preheader:                               ; preds = %for.body.lr.ph
  %22 = sext i32 %shl.lcssa to i64
  %23 = sext i32 %num_colors to i64
  br label %for.body

for.body.us:                                      ; preds = %for.body.us.preheader, %for.inc.us
  %i.0202.us = phi i32 [ %inc86.us, %for.inc.us ], [ 0, %for.body.us.preheader ]
  %cmp44.us = icmp slt i32 %i.0202.us, %num_colors
  br i1 %cmp44.us, label %if.else79.us, label %if.else84.us

if.else84.us:                                     ; preds = %for.body.us
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call.i180.us = tail call i32 @_IO_putc(i32 0, %struct._IO_FILE* %24) #5
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call3.i181.us = tail call i32 @_IO_putc(i32 0, %struct._IO_FILE* %25) #5
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call6.i182.us = tail call i32 @_IO_putc(i32 0, %struct._IO_FILE* %26) #5
  br label %for.inc.us

if.else79.us:                                     ; preds = %for.body.us
  %mul.us = mul nsw i32 %i.0202.us, 255
  %add.us = add nsw i32 %mul.us, %div
  %div82.us = sdiv i32 %add.us, %sub80
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call.i176.us = tail call i32 @_IO_putc(i32 %div82.us, %struct._IO_FILE* %27) #5
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call3.i177.us = tail call i32 @_IO_putc(i32 %div82.us, %struct._IO_FILE* %28) #5
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call6.i178.us = tail call i32 @_IO_putc(i32 %div82.us, %struct._IO_FILE* %29) #5
  br label %for.inc.us

for.inc.us:                                       ; preds = %if.else79.us, %if.else84.us
  %inc86.us = add nuw nsw i32 %i.0202.us, 1
  %cmp43.us = icmp slt i32 %inc86.us, %shl.lcssa
  br i1 %cmp43.us, label %for.body.us, label %for.end.loopexit

for.body:                                         ; preds = %for.body.preheader, %for.inc
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.inc ]
  %cmp44 = icmp slt i64 %indvars.iv, %23
  br i1 %cmp44, label %if.then47, label %if.else84

if.then47:                                        ; preds = %for.body
  %30 = load %struct.jpeg_decompress_struct*, %struct.jpeg_decompress_struct** %cinfo, align 8, !tbaa !13
  %out_color_space = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %30, i64 0, i32 10
  %31 = load i32, i32* %out_color_space, align 8, !tbaa !19
  %cmp49 = icmp eq i32 %31, 2
  %32 = load i8*, i8** %colormap, align 8, !tbaa !37
  %arrayidx52 = getelementptr inbounds i8, i8* %32, i64 %indvars.iv
  %33 = load i8, i8* %arrayidx52, align 1, !tbaa !38
  %conv = zext i8 %33 to i32
  %shr = lshr i32 %conv, %sub
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  br i1 %cmp49, label %if.then50, label %if.else72

if.then50:                                        ; preds = %if.then47
  %call55 = tail call i32 @_IO_putc(i32 %shr, %struct._IO_FILE* %34)
  %35 = load i8*, i8** %arrayidx57, align 8, !tbaa !37
  %arrayidx58 = getelementptr inbounds i8, i8* %35, i64 %indvars.iv
  %36 = load i8, i8* %arrayidx58, align 1, !tbaa !38
  %conv59 = zext i8 %36 to i32
  %shr60 = lshr i32 %conv59, %sub
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call63 = tail call i32 @_IO_putc(i32 %shr60, %struct._IO_FILE* %37)
  %38 = load i8*, i8** %arrayidx65, align 8, !tbaa !37
  %arrayidx66 = getelementptr inbounds i8, i8* %38, i64 %indvars.iv
  %39 = load i8, i8* %arrayidx66, align 1, !tbaa !38
  %conv67 = zext i8 %39 to i32
  %shr68 = lshr i32 %conv67, %sub
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call71 = tail call i32 @_IO_putc(i32 %shr68, %struct._IO_FILE* %40)
  br label %for.inc

if.else72:                                        ; preds = %if.then47
  %call.i174 = tail call i32 @_IO_putc(i32 %shr, %struct._IO_FILE* %34) #5
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call3.i = tail call i32 @_IO_putc(i32 %shr, %struct._IO_FILE* %41) #5
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call6.i = tail call i32 @_IO_putc(i32 %shr, %struct._IO_FILE* %42) #5
  br label %for.inc

if.else84:                                        ; preds = %for.body
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call.i180 = tail call i32 @_IO_putc(i32 0, %struct._IO_FILE* %43) #5
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call3.i181 = tail call i32 @_IO_putc(i32 0, %struct._IO_FILE* %44) #5
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call6.i182 = tail call i32 @_IO_putc(i32 0, %struct._IO_FILE* %45) #5
  br label %for.inc

for.inc:                                          ; preds = %if.else84, %if.then50, %if.else72
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %cmp43 = icmp slt i64 %indvars.iv.next, %22
  br i1 %cmp43, label %for.body, label %for.end.loopexit206

for.end.loopexit:                                 ; preds = %for.inc.us
  br label %for.end

for.end.loopexit206:                              ; preds = %for.inc
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit206, %for.end.loopexit, %while.end
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call89 = tail call i32 @_IO_putc(i32 44, %struct._IO_FILE* %46)
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call.i184 = tail call i32 @_IO_putc(i32 0, %struct._IO_FILE* %47) #5
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call4.i185 = tail call i32 @_IO_putc(i32 0, %struct._IO_FILE* %48) #5
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call.i187 = tail call i32 @_IO_putc(i32 0, %struct._IO_FILE* %49) #5
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call4.i188 = tail call i32 @_IO_putc(i32 0, %struct._IO_FILE* %50) #5
  %51 = load %struct.jpeg_decompress_struct*, %struct.jpeg_decompress_struct** %cinfo, align 8, !tbaa !13
  %output_width91 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %51, i64 0, i32 26
  %52 = load i32, i32* %output_width91, align 8, !tbaa !29
  %and.i189 = and i32 %52, 255
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call.i191 = tail call i32 @_IO_putc(i32 %and.i189, %struct._IO_FILE* %53) #5
  %shr.i192 = lshr i32 %52, 8
  %and1.i193 = and i32 %shr.i192, 255
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call4.i194 = tail call i32 @_IO_putc(i32 %and1.i193, %struct._IO_FILE* %54) #5
  %55 = load %struct.jpeg_decompress_struct*, %struct.jpeg_decompress_struct** %cinfo, align 8, !tbaa !13
  %output_height93 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %55, i64 0, i32 27
  %56 = load i32, i32* %output_height93, align 4, !tbaa !54
  %and.i195 = and i32 %56, 255
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call.i197 = tail call i32 @_IO_putc(i32 %and.i195, %struct._IO_FILE* %57) #5
  %shr.i198 = lshr i32 %56, 8
  %and1.i199 = and i32 %shr.i198, 255
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call4.i200 = tail call i32 @_IO_putc(i32 %and1.i199, %struct._IO_FILE* %58) #5
  %59 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call96 = tail call i32 @_IO_putc(i32 0, %struct._IO_FILE* %59)
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call99 = tail call i32 @_IO_putc(i32 %.BitsPerPixel.0, %struct._IO_FILE* %60)
  %add100 = add nsw i32 %.BitsPerPixel.0, 1
  %init_bits.i = getelementptr inbounds %struct.gif_dest_struct, %struct.gif_dest_struct* %dinfo, i64 0, i32 4
  store i32 %add100, i32* %init_bits.i, align 8, !tbaa !51
  %n_bits.i = getelementptr inbounds %struct.gif_dest_struct, %struct.gif_dest_struct* %dinfo, i64 0, i32 2
  store i32 %add100, i32* %n_bits.i, align 8, !tbaa !49
  %shl.i = shl i32 1, %add100
  %sub.i = add i32 %shl.i, 65535
  %conv.i = trunc i32 %sub.i to i16
  %maxcode.i = getelementptr inbounds %struct.gif_dest_struct, %struct.gif_dest_struct* %dinfo, i64 0, i32 3
  store i16 %conv.i, i16* %maxcode.i, align 4, !tbaa !47
  %shl3.i = shl i32 1, %.BitsPerPixel.0
  %conv4.i = trunc i32 %shl3.i to i16
  %ClearCode.i = getelementptr inbounds %struct.gif_dest_struct, %struct.gif_dest_struct* %dinfo, i64 0, i32 9
  store i16 %conv4.i, i16* %ClearCode.i, align 4, !tbaa !50
  %add.i = or i32 %shl3.i, 1
  %conv7.i = trunc i32 %add.i to i16
  %EOFCode.i = getelementptr inbounds %struct.gif_dest_struct, %struct.gif_dest_struct* %dinfo, i64 0, i32 10
  store i16 %conv7.i, i16* %EOFCode.i, align 2, !tbaa !52
  %add10.i = add i16 %conv4.i, 2
  %free_code.i = getelementptr inbounds %struct.gif_dest_struct, %struct.gif_dest_struct* %dinfo, i64 0, i32 11
  store i16 %add10.i, i16* %free_code.i, align 8, !tbaa !48
  %first_byte.i = getelementptr inbounds %struct.gif_dest_struct, %struct.gif_dest_struct* %dinfo, i64 0, i32 8
  store i32 1, i32* %first_byte.i, align 8, !tbaa !39
  %bytesinpkt.i = getelementptr inbounds %struct.gif_dest_struct, %struct.gif_dest_struct* %dinfo, i64 0, i32 14
  store i32 0, i32* %bytesinpkt.i, align 8, !tbaa !45
  %cur_accum.i = getelementptr inbounds %struct.gif_dest_struct, %struct.gif_dest_struct* %dinfo, i64 0, i32 5
  store i64 0, i64* %cur_accum.i, align 8, !tbaa !44
  %cur_bits.i = getelementptr inbounds %struct.gif_dest_struct, %struct.gif_dest_struct* %dinfo, i64 0, i32 6
  store i32 0, i32* %cur_bits.i, align 8, !tbaa !43
  %hash_code.i.i = getelementptr inbounds %struct.gif_dest_struct, %struct.gif_dest_struct* %dinfo, i64 0, i32 12
  %61 = bitcast i16** %hash_code.i.i to i8**
  %62 = load i8*, i8** %61, align 8, !tbaa !32
  tail call void @llvm.memset.p0i8.i64(i8* %62, i8 0, i64 10006, i32 1, i1 false) #5
  %63 = load i16, i16* %ClearCode.i, align 4, !tbaa !50
  %conv.i.i = sext i16 %63 to i64
  %64 = load i32, i32* %cur_bits.i, align 8, !tbaa !43
  %sh_prom.i.i = zext i32 %64 to i64
  %shl.i.i = shl i64 %conv.i.i, %sh_prom.i.i
  %65 = load i64, i64* %cur_accum.i, align 8, !tbaa !44
  %or.i.i = or i64 %shl.i.i, %65
  store i64 %or.i.i, i64* %cur_accum.i, align 8, !tbaa !44
  %66 = bitcast i32* %n_bits.i to i64*
  %67 = load i64, i64* %66, align 8
  %68 = trunc i64 %67 to i32
  %add.i.i = add nsw i32 %68, %64
  store i32 %add.i.i, i32* %cur_bits.i, align 8, !tbaa !43
  %cmp46.i.i = icmp sgt i32 %add.i.i, 7
  br i1 %cmp46.i.i, label %while.body.i.preheader.i, label %entry.while.end_crit_edge.i.i

while.body.i.preheader.i:                         ; preds = %for.end
  %arrayidx.i35.i = getelementptr inbounds %struct.gif_dest_struct, %struct.gif_dest_struct* %dinfo, i64 0, i32 15, i64 0
  %.pre.i = load i32, i32* %bytesinpkt.i, align 8, !tbaa !45
  br label %while.body.i.i

entry.while.end_crit_edge.i.i:                    ; preds = %for.end
  %69 = lshr i64 %67, 32
  %70 = trunc i64 %69 to i16
  br label %while.end.i.i

while.body.i.i:                                   ; preds = %if.end.i.i, %while.body.i.preheader.i
  %71 = phi i32 [ %80, %if.end.i.i ], [ %.pre.i, %while.body.i.preheader.i ]
  %72 = phi i64 [ %shr.i.i, %if.end.i.i ], [ %or.i.i, %while.body.i.preheader.i ]
  %conv5.i.i = trunc i64 %72 to i8
  %inc.i.i = add nsw i32 %71, 1
  store i32 %inc.i.i, i32* %bytesinpkt.i, align 8, !tbaa !45
  %idxprom.i.i = sext i32 %inc.i.i to i64
  %arrayidx.i.i = getelementptr inbounds %struct.gif_dest_struct, %struct.gif_dest_struct* %dinfo, i64 0, i32 15, i64 %idxprom.i.i
  store i8 %conv5.i.i, i8* %arrayidx.i.i, align 1, !tbaa !38
  %73 = load i32, i32* %bytesinpkt.i, align 8, !tbaa !45
  %cmp7.i.i = icmp sgt i32 %73, 254
  br i1 %cmp7.i.i, label %if.then.i37.i, label %if.end.i.i

if.then.i37.i:                                    ; preds = %while.body.i.i
  %inc.i33.i = add nsw i32 %73, 1
  store i32 %inc.i33.i, i32* %bytesinpkt.i, align 8, !tbaa !45
  %conv.i34.i = trunc i32 %73 to i8
  store i8 %conv.i34.i, i8* %arrayidx.i35.i, align 4, !tbaa !38
  %conv4.i.i = sext i32 %inc.i33.i to i64
  %74 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !46
  %call.i.i = tail call i64 @fwrite(i8* nonnull %arrayidx.i35.i, i64 1, i64 %conv4.i.i, %struct._IO_FILE* %74) #5
  %75 = load i32, i32* %bytesinpkt.i, align 8, !tbaa !45
  %conv6.i.i = sext i32 %75 to i64
  %cmp7.i36.i = icmp eq i64 %call.i.i, %conv6.i.i
  br i1 %cmp7.i36.i, label %flush_packet.exit.i, label %if.then9.i.i

if.then9.i.i:                                     ; preds = %if.then.i37.i
  %76 = load %struct.jpeg_decompress_struct*, %struct.jpeg_decompress_struct** %cinfo, align 8, !tbaa !13
  %err.i.i = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %76, i64 0, i32 0
  %77 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err.i.i, align 8, !tbaa !20
  %msg_code.i.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %77, i64 0, i32 5
  store i32 36, i32* %msg_code.i.i, align 8, !tbaa !21
  %error_exit.i.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %77, i64 0, i32 0
  %78 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit.i.i, align 8, !tbaa !23
  %79 = bitcast %struct.jpeg_decompress_struct* %76 to %struct.jpeg_common_struct*
  tail call void %78(%struct.jpeg_common_struct* %79) #5
  br label %flush_packet.exit.i

flush_packet.exit.i:                              ; preds = %if.then9.i.i, %if.then.i37.i
  store i32 0, i32* %bytesinpkt.i, align 8, !tbaa !45
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %flush_packet.exit.i, %while.body.i.i
  %80 = phi i32 [ 0, %flush_packet.exit.i ], [ %73, %while.body.i.i ]
  %81 = load i64, i64* %cur_accum.i, align 8, !tbaa !44
  %shr.i.i = ashr i64 %81, 8
  store i64 %shr.i.i, i64* %cur_accum.i, align 8, !tbaa !44
  %82 = load i32, i32* %cur_bits.i, align 8, !tbaa !43
  %sub.i.i = add nsw i32 %82, -8
  store i32 %sub.i.i, i32* %cur_bits.i, align 8, !tbaa !43
  %cmp.i.i = icmp sgt i32 %sub.i.i, 7
  br i1 %cmp.i.i, label %while.body.i.i, label %while.end.loopexit.i.i

while.end.loopexit.i.i:                           ; preds = %if.end.i.i
  %.pre.i.i = load i16, i16* %maxcode.i, align 4, !tbaa !47
  br label %while.end.i.i

while.end.i.i:                                    ; preds = %while.end.loopexit.i.i, %entry.while.end_crit_edge.i.i
  %83 = phi i16 [ %70, %entry.while.end_crit_edge.i.i ], [ %.pre.i.i, %while.end.loopexit.i.i ]
  %84 = load i16, i16* %free_code.i, align 8, !tbaa !48
  %cmp13.i.i = icmp sgt i16 %84, %83
  br i1 %cmp13.i.i, label %if.then15.i.i, label %compress_init.exit

if.then15.i.i:                                    ; preds = %while.end.i.i
  %85 = load i32, i32* %n_bits.i, align 8, !tbaa !49
  %inc17.i.i = add nsw i32 %85, 1
  store i32 %inc17.i.i, i32* %n_bits.i, align 8, !tbaa !49
  %cmp19.i.i = icmp eq i32 %inc17.i.i, 12
  br i1 %cmp19.i.i, label %if.then21.i.i, label %if.else.i.i

if.then21.i.i:                                    ; preds = %if.then15.i.i
  store i16 4096, i16* %maxcode.i, align 4, !tbaa !47
  br label %compress_init.exit

if.else.i.i:                                      ; preds = %if.then15.i.i
  %shl24.i.i = shl i32 1, %inc17.i.i
  %sub25.i.i = add i32 %shl24.i.i, 65535
  %conv26.i.i = trunc i32 %sub25.i.i to i16
  store i16 %conv26.i.i, i16* %maxcode.i, align 4, !tbaa !47
  br label %compress_init.exit

compress_init.exit:                               ; preds = %while.end.i.i, %if.then21.i.i, %if.else.i.i
  ret void
}

; Function Attrs: nounwind
declare i32 @_IO_putc(i32, %struct._IO_FILE* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #3

; Function Attrs: nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) #2

; Function Attrs: nounwind
declare i32 @fflush(%struct._IO_FILE* nocapture) #2

; Function Attrs: nounwind readonly
declare i32 @ferror(%struct._IO_FILE* nocapture) #4

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"MaxFunctionCount", i32 150581}
!1 = !{!"clang version 3.8.0 (trunk 257473)"}
!2 = !{!3, !4, i64 8}
!3 = !{!"jpeg_decompress_struct", !4, i64 0, !4, i64 8, !4, i64 16, !7, i64 24, !7, i64 28, !4, i64 32, !7, i64 40, !7, i64 44, !7, i64 48, !5, i64 52, !5, i64 56, !7, i64 60, !7, i64 64, !8, i64 72, !7, i64 80, !7, i64 84, !5, i64 88, !7, i64 92, !7, i64 96, !7, i64 100, !5, i64 104, !7, i64 108, !7, i64 112, !7, i64 116, !7, i64 120, !7, i64 124, !7, i64 128, !7, i64 132, !7, i64 136, !7, i64 140, !7, i64 144, !7, i64 148, !4, i64 152, !7, i64 160, !7, i64 164, !7, i64 168, !7, i64 172, !7, i64 176, !4, i64 184, !5, i64 192, !5, i64 224, !5, i64 256, !7, i64 288, !4, i64 296, !7, i64 304, !7, i64 308, !5, i64 312, !5, i64 328, !5, i64 344, !7, i64 360, !7, i64 364, !5, i64 368, !9, i64 370, !9, i64 372, !7, i64 376, !5, i64 380, !7, i64 384, !7, i64 388, !7, i64 392, !7, i64 396, !7, i64 400, !4, i64 408, !7, i64 416, !5, i64 424, !7, i64 456, !7, i64 460, !7, i64 464, !5, i64 468, !7, i64 508, !7, i64 512, !7, i64 516, !7, i64 520, !7, i64 524, !4, i64 528, !4, i64 536, !4, i64 544, !4, i64 552, !4, i64 560, !4, i64 568, !4, i64 576, !4, i64 584, !4, i64 592, !4, i64 600, !4, i64 608}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!"int", !5, i64 0}
!8 = !{!"double", !5, i64 0}
!9 = !{!"short", !5, i64 0}
!10 = !{!11, !4, i64 0}
!11 = !{!"jpeg_memory_mgr", !4, i64 0, !4, i64 8, !4, i64 16, !4, i64 24, !4, i64 32, !4, i64 40, !4, i64 48, !4, i64 56, !4, i64 64, !4, i64 72, !4, i64 80, !12, i64 88}
!12 = !{!"long", !5, i64 0}
!13 = !{!14, !4, i64 48}
!14 = !{!"", !15, i64 0, !4, i64 48, !7, i64 56, !9, i64 60, !7, i64 64, !12, i64 72, !7, i64 80, !9, i64 84, !7, i64 88, !9, i64 92, !9, i64 94, !9, i64 96, !4, i64 104, !4, i64 112, !7, i64 120, !5, i64 124}
!15 = !{!"djpeg_dest_struct", !4, i64 0, !4, i64 8, !4, i64 16, !4, i64 24, !4, i64 32, !7, i64 40}
!16 = !{!14, !4, i64 0}
!17 = !{!14, !4, i64 8}
!18 = !{!14, !4, i64 16}
!19 = !{!3, !5, i64 56}
!20 = !{!3, !4, i64 0}
!21 = !{!22, !7, i64 40}
!22 = !{!"jpeg_error_mgr", !4, i64 0, !4, i64 8, !4, i64 16, !4, i64 24, !4, i64 32, !7, i64 40, !5, i64 44, !7, i64 124, !12, i64 128, !4, i64 136, !7, i64 144, !4, i64 152, !7, i64 160, !7, i64 164}
!23 = !{!22, !4, i64 0}
!24 = !{!3, !7, i64 288}
!25 = !{!3, !7, i64 100}
!26 = !{!3, !7, i64 112}
!27 = !{!3, !7, i64 140}
!28 = !{!11, !4, i64 16}
!29 = !{!3, !7, i64 128}
!30 = !{!14, !4, i64 32}
!31 = !{!14, !7, i64 40}
!32 = !{!14, !4, i64 104}
!33 = !{!11, !4, i64 8}
!34 = !{!14, !4, i64 112}
!35 = !{!3, !7, i64 148}
!36 = !{!3, !4, i64 152}
!37 = !{!4, !4, i64 0}
!38 = !{!5, !5, i64 0}
!39 = !{!14, !7, i64 88}
!40 = !{!14, !9, i64 84}
!41 = !{!9, !9, i64 0}
!42 = !{!12, !12, i64 0}
!43 = !{!14, !7, i64 80}
!44 = !{!14, !12, i64 72}
!45 = !{!14, !7, i64 120}
!46 = !{!14, !4, i64 24}
!47 = !{!14, !9, i64 60}
!48 = !{!14, !9, i64 96}
!49 = !{!14, !7, i64 56}
!50 = !{!14, !9, i64 92}
!51 = !{!14, !7, i64 64}
!52 = !{!14, !9, i64 94}
!53 = !{!7, !7, i64 0}
!54 = !{!3, !7, i64 132}
