digraph "CFG for 'skip_variable' function" {
	label="CFG for 'skip_variable' function";

	Node0x694ce80 [shape=record, style = filled, fillcolor = blue, label="{entry:\l  %src = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 5\l  %0 = load %struct.jpeg_source_mgr*, %struct.jpeg_source_mgr** %src, align 8,\l... !tbaa !2\l  %next_input_byte1 = getelementptr inbounds %struct.jpeg_source_mgr,\l... %struct.jpeg_source_mgr* %0, i64 0, i32 0\l  %bytes_in_buffer2 = getelementptr inbounds %struct.jpeg_source_mgr,\l... %struct.jpeg_source_mgr* %0, i64 0, i32 1\l  %1 = load i64, i64* %bytes_in_buffer2, align 8, !tbaa !10\l  %cmp = icmp eq i64 %1, 0\l  br i1 %cmp, label %if.then, label %if.end6\l|{<s0>T|<s1>F}}"];
	Node0x694ce80:s0 -> Node0x698e290;
	Node0x694ce80:s1 -> Node0x698e360;
	Node0x698e290 [shape=record, style = filled, fillcolor = blue, label="{if.then:                                          \l  %fill_input_buffer = getelementptr inbounds %struct.jpeg_source_mgr,\l... %struct.jpeg_source_mgr* %0, i64 0, i32 3\l  %2 = load i32 (%struct.jpeg_decompress_struct*)*, i32\l... (%struct.jpeg_decompress_struct*)** %fill_input_buffer, align 8, !tbaa !13\l  %call = tail call i32 %2(%struct.jpeg_decompress_struct* nonnull %cinfo) #4\l  %tobool = icmp eq i32 %call, 0\l  br i1 %tobool, label %cleanup, label %if.end\l|{<s0>T|<s1>F}}"];
	Node0x698e290:s0 -> Node0x698e730;
	Node0x698e290:s1 -> Node0x698e800;
	Node0x698e800 [shape=record, style = filled, fillcolor = blue, label="{if.end:                                           \l  %3 = load i64, i64* %bytes_in_buffer2, align 8, !tbaa !10\l  br label %if.end6\l}"];
	Node0x698e800 -> Node0x698e360;
	Node0x698e360 [shape=record, style = filled, fillcolor = blue, label="{if.end6:                                          \l  %bytes_in_buffer.0 = phi i64 [ %3, %if.end ], [ %1, %entry ]\l  %next_input_byte.0 = load i8*, i8** %next_input_byte1, align 8, !tbaa !14\l  %dec = add i64 %bytes_in_buffer.0, -1\l  %incdec.ptr = getelementptr inbounds i8, i8* %next_input_byte.0, i64 1\l  %4 = load i8, i8* %next_input_byte.0, align 1, !tbaa !15\l  %conv = zext i8 %4 to i64\l  %shl = shl nuw nsw i64 %conv, 8\l  %cmp8 = icmp eq i64 %dec, 0\l  br i1 %cmp8, label %if.then10, label %if.end18\l|{<s0>T|<s1>F}}"];
	Node0x698e360:s0 -> Node0x691ad70;
	Node0x698e360:s1 -> Node0x691ae20;
	Node0x691ad70 [shape=record, style = filled, fillcolor = blue, label="{if.then10:                                        \l  %fill_input_buffer11 = getelementptr inbounds %struct.jpeg_source_mgr,\l... %struct.jpeg_source_mgr* %0, i64 0, i32 3\l  %5 = load i32 (%struct.jpeg_decompress_struct*)*, i32\l... (%struct.jpeg_decompress_struct*)** %fill_input_buffer11, align 8, !tbaa !13\l  %call12 = tail call i32 %5(%struct.jpeg_decompress_struct* nonnull %cinfo) #4\l  %tobool13 = icmp eq i32 %call12, 0\l  br i1 %tobool13, label %cleanup, label %if.end15\l|{<s0>T|<s1>F}}"];
	Node0x691ad70:s0 -> Node0x698e730;
	Node0x691ad70:s1 -> Node0x698e870;
	Node0x698e870 [shape=record, style = filled, fillcolor = blue, label="{if.end15:                                         \l  %6 = load i8*, i8** %next_input_byte1, align 8, !tbaa !14\l  %7 = load i64, i64* %bytes_in_buffer2, align 8, !tbaa !10\l  br label %if.end18\l}"];
	Node0x698e870 -> Node0x691ae20;
	Node0x691ae20 [shape=record, style = filled, fillcolor = blue, label="{if.end18:                                         \l  %next_input_byte.1 = phi i8* [ %6, %if.end15 ], [ %incdec.ptr, %if.end6 ]\l  %bytes_in_buffer.1 = phi i64 [ %7, %if.end15 ], [ %dec, %if.end6 ]\l  %dec19 = add i64 %bytes_in_buffer.1, -1\l  %incdec.ptr20 = getelementptr inbounds i8, i8* %next_input_byte.1, i64 1\l  %8 = load i8, i8* %next_input_byte.1, align 1, !tbaa !15\l  %conv21 = zext i8 %8 to i64\l  %add = or i64 %conv21, %shl\l  %err = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0\l  %9 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8,\l... !tbaa !16\l  %msg_code = getelementptr inbounds %struct.jpeg_error_mgr,\l... %struct.jpeg_error_mgr* %9, i64 0, i32 5\l  store i32 90, i32* %msg_code, align 8, !tbaa !17\l  %unread_marker = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 72\l  %10 = load i32, i32* %unread_marker, align 4, !tbaa !19\l  %arrayidx = getelementptr inbounds %struct.jpeg_error_mgr,\l... %struct.jpeg_error_mgr* %9, i64 0, i32 6, i32 0, i64 0\l  store i32 %10, i32* %arrayidx, align 4, !tbaa !20\l  %conv23 = trunc i64 %add to i32\l  %arrayidx27 = getelementptr inbounds %struct.jpeg_error_mgr,\l... %struct.jpeg_error_mgr* %9, i64 0, i32 6, i32 0, i64 1\l  store i32 %conv23, i32* %arrayidx27, align 4, !tbaa !20\l  %emit_message = getelementptr inbounds %struct.jpeg_error_mgr,\l... %struct.jpeg_error_mgr* %9, i64 0, i32 1\l  %11 = load void (%struct.jpeg_common_struct*, i32)*, void\l... (%struct.jpeg_common_struct*, i32)** %emit_message, align 8, !tbaa !21\l  %12 = bitcast %struct.jpeg_decompress_struct* %cinfo to\l... %struct.jpeg_common_struct*\l  tail call void %11(%struct.jpeg_common_struct* %12, i32 1) #4\l  store i8* %incdec.ptr20, i8** %next_input_byte1, align 8, !tbaa !14\l  store i64 %dec19, i64* %bytes_in_buffer2, align 8, !tbaa !10\l  %13 = load %struct.jpeg_source_mgr*, %struct.jpeg_source_mgr** %src, align\l... 8, !tbaa !2\l  %skip_input_data = getelementptr inbounds %struct.jpeg_source_mgr,\l... %struct.jpeg_source_mgr* %13, i64 0, i32 4\l  %14 = load void (%struct.jpeg_decompress_struct*, i64)*, void\l... (%struct.jpeg_decompress_struct*, i64)** %skip_input_data, align 8, !tbaa !22\l  %sub = add nsw i64 %add, -2\l  tail call void %14(%struct.jpeg_decompress_struct* nonnull %cinfo, i64 %sub)\l... #4\l  br label %cleanup\l}"];
	Node0x691ae20 -> Node0x698e730;
	Node0x698e730 [shape=record, style = filled, fillcolor = blue, label="{cleanup:                                          \l  %retval.0 = phi i32 [ 1, %if.end18 ], [ 0, %if.then ], [ 0, %if.then10 ]\l  ret i32 %retval.0\l}"];
}
