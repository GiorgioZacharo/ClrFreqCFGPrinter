digraph "CFG for 'jinit_write_bmp' function" {
	label="CFG for 'jinit_write_bmp' function";

	Node0x4f7f2c0 [shape=record,label="{entry:\l  %mem = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 1\l  %0 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8,\l... !tbaa !2\l  %alloc_small = getelementptr inbounds %struct.jpeg_memory_mgr,\l... %struct.jpeg_memory_mgr* %0, i64 0, i32 0\l  %1 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8*\l... (%struct.jpeg_common_struct*, i32, i64)** %alloc_small, align 8, !tbaa !10\l  %2 = bitcast %struct.jpeg_decompress_struct* %cinfo to\l... %struct.jpeg_common_struct*\l  %call = tail call i8* %1(%struct.jpeg_common_struct* %2, i32 1, i64 80) #6\l  %start_output = bitcast i8* %call to void (%struct.jpeg_decompress_struct*,\l... %struct.djpeg_dest_struct*)**\l  store void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*)*\l... @start_output_bmp, void (%struct.jpeg_decompress_struct*,\l... %struct.djpeg_dest_struct*)** %start_output, align 8, !tbaa !13\l  %finish_output = getelementptr inbounds i8, i8* %call, i64 16\l  %3 = bitcast i8* %finish_output to void (%struct.jpeg_decompress_struct*,\l... %struct.djpeg_dest_struct*)**\l  store void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*)*\l... @finish_output_bmp, void (%struct.jpeg_decompress_struct*,\l... %struct.djpeg_dest_struct*)** %3, align 8, !tbaa !16\l  %is_os22 = getelementptr inbounds i8, i8* %call, i64 48\l  %4 = bitcast i8* %is_os22 to i32*\l  store i32 %is_os2, i32* %4, align 8, !tbaa !17\l  %out_color_space = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 10\l  %5 = load i32, i32* %out_color_space, align 8, !tbaa !18\l  switch i32 %5, label %if.else13 [\l    i32 1, label %if.then\l    i32 2, label %if.then6\l  ]\l|{<s0>def|<s1>1|<s2>2}}"];
	Node0x4f7f2c0:s0 -> Node0x4f85690;
	Node0x4f7f2c0:s1 -> Node0x4f85740;
	Node0x4f7f2c0:s2 -> Node0x4f85850;
	Node0x4f85740 [shape=record,label="{if.then:                                          \l  %put_pixel_rows = getelementptr inbounds i8, i8* %call, i64 8\l  %6 = bitcast i8* %put_pixel_rows to void (%struct.jpeg_decompress_struct*,\l... %struct.djpeg_dest_struct*, i32)**\l  store void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*,\l... i32)* @put_gray_rows, void (%struct.jpeg_decompress_struct*,\l... %struct.djpeg_dest_struct*, i32)** %6, align 8, !tbaa !19\l  br label %if.end16\l}"];
	Node0x4f85740 -> Node0x4f85f20;
	Node0x4f85850 [shape=record,label="{if.then6:                                         \l  %quantize_colors = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 19\l  %7 = load i32, i32* %quantize_colors, align 4, !tbaa !20\l  %tobool = icmp eq i32 %7, 0\l  %put_pixel_rows9 = getelementptr inbounds i8, i8* %call, i64 8\l  %8 = bitcast i8* %put_pixel_rows9 to void (%struct.jpeg_decompress_struct*,\l... %struct.djpeg_dest_struct*, i32)**\l  br i1 %tobool, label %if.else10, label %if.then7\l|{<s0>T|<s1>F}}"];
	Node0x4f85850:s0 -> Node0x4f85220;
	Node0x4f85850:s1 -> Node0x4f86580;
	Node0x4f86580 [shape=record,label="{if.then7:                                         \l  store void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*,\l... i32)* @put_gray_rows, void (%struct.jpeg_decompress_struct*,\l... %struct.djpeg_dest_struct*, i32)** %8, align 8, !tbaa !19\l  br label %if.end16\l}"];
	Node0x4f86580 -> Node0x4f85f20;
	Node0x4f85220 [shape=record,label="{if.else10:                                        \l  store void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*,\l... i32)* @put_pixel_rows, void (%struct.jpeg_decompress_struct*,\l... %struct.djpeg_dest_struct*, i32)** %8, align 8, !tbaa !19\l  br label %if.end16\l}"];
	Node0x4f85220 -> Node0x4f85f20;
	Node0x4f85690 [shape=record,label="{if.else13:                                        \l  %err = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0\l  %9 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8,\l... !tbaa !21\l  %msg_code = getelementptr inbounds %struct.jpeg_error_mgr,\l... %struct.jpeg_error_mgr* %9, i64 0, i32 5\l  store i32 1005, i32* %msg_code, align 8, !tbaa !22\l  %error_exit = getelementptr inbounds %struct.jpeg_error_mgr,\l... %struct.jpeg_error_mgr* %9, i64 0, i32 0\l  %10 = load void (%struct.jpeg_common_struct*)*, void\l... (%struct.jpeg_common_struct*)** %error_exit, align 8, !tbaa !24\l  tail call void %10(%struct.jpeg_common_struct* %2) #6\l  br label %if.end16\l}"];
	Node0x4f85690 -> Node0x4f85f20;
	Node0x4f85f20 [shape=record,label="{if.end16:                                         \l  tail call void @jpeg_calc_output_dimensions(%struct.jpeg_decompress_struct*\l... nonnull %cinfo) #6\l  %output_width = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 26\l  %11 = bitcast i32* %output_width to i64*\l  %12 = load i64, i64* %11, align 8\l  %13 = trunc i64 %12 to i32\l  %output_components = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 29\l  %14 = load i32, i32* %output_components, align 4, !tbaa !25\l  %mul = mul i32 %14, %13\l  %data_width = getelementptr inbounds i8, i8* %call, i64 64\l  %15 = bitcast i8* %data_width to i32*\l  store i32 %mul, i32* %15, align 8, !tbaa !26\l  %16 = lshr i64 %12, 32\l  %17 = trunc i64 %16 to i32\l  br label %while.cond\l}"];
	Node0x4f85f20 -> Node0x4f88700;
	Node0x4f88700 [shape=record,label="{while.cond:                                       \l  %row_width.0 = phi i32 [ %mul, %if.end16 ], [ %inc, %while.cond ]\l  %and = and i32 %row_width.0, 3\l  %cmp17 = icmp eq i32 %and, 0\l  %inc = add i32 %row_width.0, 1\l  br i1 %cmp17, label %while.end, label %while.cond\l|{<s0>T|<s1>F}}"];
	Node0x4f88700:s0 -> Node0x4f88b20;
	Node0x4f88700:s1 -> Node0x4f88700;
	Node0x4f88b20 [shape=record,label="{while.end:                                        \l  %row_width.0.lcssa = phi i32 [ %row_width.0, %while.cond ]\l  %row_width18 = getelementptr inbounds i8, i8* %call, i64 68\l  %18 = bitcast i8* %row_width18 to i32*\l  store i32 %row_width.0.lcssa, i32* %18, align 4, !tbaa !27\l  %sub = sub i32 %row_width.0.lcssa, %mul\l  %pad_bytes = getelementptr inbounds i8, i8* %call, i64 72\l  %19 = bitcast i8* %pad_bytes to i32*\l  store i32 %sub, i32* %19, align 8, !tbaa !28\l  %20 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align\l... 8, !tbaa !2\l  %request_virt_sarray = getelementptr inbounds %struct.jpeg_memory_mgr,\l... %struct.jpeg_memory_mgr* %20, i64 0, i32 4\l  %21 = load %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32,\l... i32, i32, i32, i32)*, %struct.jvirt_sarray_control*\l... (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)**\l... %request_virt_sarray, align 8, !tbaa !29\l  %call21 = tail call %struct.jvirt_sarray_control*\l... %21(%struct.jpeg_common_struct* %2, i32 1, i32 0, i32 %row_width.0.lcssa, i32\l... %17, i32 1) #6\l  %whole_image = getelementptr inbounds i8, i8* %call, i64 56\l  %22 = bitcast i8* %whole_image to %struct.jvirt_sarray_control**\l  store %struct.jvirt_sarray_control* %call21, %struct.jvirt_sarray_control**\l... %22, align 8, !tbaa !30\l  %cur_output_row = getelementptr inbounds i8, i8* %call, i64 76\l  %23 = bitcast i8* %cur_output_row to i32*\l  store i32 0, i32* %23, align 4, !tbaa !31\l  %progress = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 2\l  %24 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr**\l... %progress, align 8, !tbaa !32\l  %cmp22 = icmp eq %struct.jpeg_progress_mgr* %24, null\l  br i1 %cmp22, label %if.end27, label %if.then23\l|{<s0>T|<s1>F}}"];
	Node0x4f88b20:s0 -> Node0x4f828d0;
	Node0x4f88b20:s1 -> Node0x4f829b0;
	Node0x4f829b0 [shape=record,label="{if.then23:                                        \l  %25 = bitcast %struct.jpeg_progress_mgr* %24 to %struct.cdjpeg_progress_mgr*\l  %total_extra_passes = getelementptr inbounds %struct.cdjpeg_progress_mgr,\l... %struct.cdjpeg_progress_mgr* %25, i64 0, i32 2\l  %26 = load i32, i32* %total_extra_passes, align 4, !tbaa !33\l  %inc26 = add nsw i32 %26, 1\l  store i32 %inc26, i32* %total_extra_passes, align 4, !tbaa !33\l  br label %if.end27\l}"];
	Node0x4f829b0 -> Node0x4f828d0;
	Node0x4f828d0 [shape=record,label="{if.end27:                                         \l  %27 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align\l... 8, !tbaa !2\l  %alloc_sarray = getelementptr inbounds %struct.jpeg_memory_mgr,\l... %struct.jpeg_memory_mgr* %27, i64 0, i32 2\l  %28 = load i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, i8**\l... (%struct.jpeg_common_struct*, i32, i32, i32)** %alloc_sarray, align 8, !tbaa\l... !36\l  %call29 = tail call i8** %28(%struct.jpeg_common_struct* nonnull %2, i32 1,\l... i32 %row_width.0.lcssa, i32 1) #6\l  %buffer = getelementptr inbounds i8, i8* %call, i64 32\l  %29 = bitcast i8* %buffer to i8***\l  store i8** %call29, i8*** %29, align 8, !tbaa !37\l  %buffer_height = getelementptr inbounds i8, i8* %call, i64 40\l  %30 = bitcast i8* %buffer_height to i32*\l  store i32 1, i32* %30, align 8, !tbaa !38\l  %31 = bitcast i8* %call to %struct.djpeg_dest_struct*\l  ret %struct.djpeg_dest_struct* %31\l}"];
}
