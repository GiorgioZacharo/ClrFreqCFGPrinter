digraph "CFG for 'quantize_fs_dither' function" {
	label="CFG for 'quantize_fs_dither' function";

	Node0x6a4aca0 [shape=record,label="{entry:\l  %cquantize1 = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 83\l  %0 = bitcast %struct.jpeg_color_quantizer** %cquantize1 to\l... %struct.my_cquantizer**\l  %1 = load %struct.my_cquantizer*, %struct.my_cquantizer** %0, align 8, !tbaa\l... !2\l  %out_color_components = getelementptr inbounds\l... %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64\l... 0, i32 28\l  %2 = load i32, i32* %out_color_components, align 8, !tbaa !10\l  %output_width = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 26\l  %3 = load i32, i32* %output_width, align 8, !tbaa !11\l  %sample_range_limit = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 61\l  %4 = load i8*, i8** %sample_range_limit, align 8, !tbaa !12\l  %cmp161 = icmp sgt i32 %num_rows, 0\l  br i1 %cmp161, label %for.body.lr.ph, label %for.end77\l|{<s0>T|<s1>F}}"];
	Node0x6a4aca0:s0 -> Node0x6a4acf0;
	Node0x6a4aca0:s1 -> Node0x6a76a30;
	Node0x6a4acf0 [shape=record,label="{for.body.lr.ph:                                   \l  %conv = zext i32 %3 to i64\l  %cmp3159 = icmp sgt i32 %2, 0\l  %on_odd_row72 = getelementptr inbounds %struct.my_cquantizer,\l... %struct.my_cquantizer* %1, i64 0, i32 9\l  %colorindex = getelementptr inbounds %struct.my_cquantizer,\l... %struct.my_cquantizer* %1, i64 0, i32 3\l  %sv_colormap = getelementptr inbounds %struct.my_cquantizer,\l... %struct.my_cquantizer* %1, i64 0, i32 1\l  %cmp29150 = icmp eq i32 %3, 0\l  %sub = add i32 %3, -1\l  %mul10 = mul i32 %sub, %2\l  %idx.ext11 = zext i32 %mul10 to i64\l  %idx.ext14 = zext i32 %sub to i64\l  %sub16 = sub nsw i32 0, %2\l  %add = add i32 %3, 1\l  %idx.ext19 = zext i32 %add to i64\l  %5 = shl nuw nsw i64 %idx.ext14, 1\l  %6 = add nuw nsw i64 %5, 2\l  %7 = add i32 %2, -1\l  %xtraiter = and i32 %2, 3\l  %lcmp.mod = icmp eq i32 %xtraiter, 0\l  %8 = icmp ult i32 %7, 3\l  br label %for.body\l}"];
	Node0x6a4acf0 -> Node0x6a72920;
	Node0x6a72920 [shape=record,label="{for.body:                                         \l  %indvars.iv170 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next171,\l... %for.end71 ]\l  %arrayidx = getelementptr inbounds i8*, i8** %output_buf, i64 %indvars.iv170\l  %9 = load i8*, i8** %arrayidx, align 8, !tbaa !13\l  tail call void @jzero_far(i8* %9, i64 %conv) #5\l  br i1 %cmp3159, label %for.body5.lr.ph, label %for.end71\l|{<s0>T|<s1>F}}"];
	Node0x6a72920:s0 -> Node0x6a77ef0;
	Node0x6a72920:s1 -> Node0x6a77af0;
	Node0x6a77ef0 [shape=record,label="{for.body5.lr.ph:                                  \l  %arrayidx7 = getelementptr inbounds i8*, i8** %input_buf, i64 %indvars.iv170\l  br i1 %cmp29150, label %for.body5.us.preheader, label %for.body5.preheader\l|{<s0>T|<s1>F}}"];
	Node0x6a77ef0:s0 -> Node0x6a78150;
	Node0x6a77ef0:s1 -> Node0x6a781d0;
	Node0x6a781d0 [shape=record,label="{for.body5.preheader:                              \l  br label %for.body5\l}"];
	Node0x6a781d0 -> Node0x6a78340;
	Node0x6a78150 [shape=record,label="{for.body5.us.preheader:                           \l  %.pre = load i32, i32* %on_odd_row72, align 8, !tbaa !14\l  %tobool.us = icmp eq i32 %.pre, 0\l  br i1 %lcmp.mod, label %for.body5.us.preheader.split, label\l... %for.body5.us.prol.preheader\l|{<s0>T|<s1>F}}"];
	Node0x6a78150:s0 -> Node0x6a78b10;
	Node0x6a78150:s1 -> Node0x6a78c30;
	Node0x6a78c30 [shape=record,label="{for.body5.us.prol.preheader:                      \l  br label %for.body5.us.prol\l}"];
	Node0x6a78c30 -> Node0x6a78de0;
	Node0x6a78de0 [shape=record,label="{for.body5.us.prol:                                \l  %indvars.iv166.prol = phi i64 [ %indvars.iv.next167.prol, %for.body5.us.prol\l... ], [ 0, %for.body5.us.prol.preheader ]\l  %prol.iter = phi i32 [ %prol.iter.sub, %for.body5.us.prol ], [ %xtraiter,\l... %for.body5.us.prol.preheader ]\l  %10 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer*\l... %1, i64 0, i32 8, i64 %indvars.iv166.prol\l  %11 = load i16*, i16** %10, align 8\l  %add.ptr20.us.prol = getelementptr inbounds i16, i16* %11, i64 %idx.ext19\l  %.add.ptr20.us.prol = select i1 %tobool.us, i16* %11, i16* %add.ptr20.us.prol\l  store i16 0, i16* %.add.ptr20.us.prol, align 2, !tbaa !17\l  %indvars.iv.next167.prol = add nuw nsw i64 %indvars.iv166.prol, 1\l  %prol.iter.sub = add i32 %prol.iter, -1\l  %prol.iter.cmp = icmp eq i32 %prol.iter.sub, 0\l  br i1 %prol.iter.cmp, label %for.body5.us.preheader.split.loopexit, label\l... %for.body5.us.prol, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x6a78de0:s0 -> Node0x6a79800;
	Node0x6a78de0:s1 -> Node0x6a78de0;
	Node0x6a79800 [shape=record,label="{for.body5.us.preheader.split.loopexit:            \l  %indvars.iv.next167.prol.lcssa = phi i64 [ %indvars.iv.next167.prol,\l... %for.body5.us.prol ]\l  br label %for.body5.us.preheader.split\l}"];
	Node0x6a79800 -> Node0x6a78b10;
	Node0x6a78b10 [shape=record,label="{for.body5.us.preheader.split:                     \l  %indvars.iv166.unr = phi i64 [ 0, %for.body5.us.preheader ], [\l... %indvars.iv.next167.prol.lcssa, %for.body5.us.preheader.split.loopexit ]\l  br i1 %8, label %for.end71.loopexit, label\l... %for.body5.us.preheader.split.split\l|{<s0>T|<s1>F}}"];
	Node0x6a78b10:s0 -> Node0x6a775f0;
	Node0x6a78b10:s1 -> Node0x6a79e70;
	Node0x6a79e70 [shape=record,label="{for.body5.us.preheader.split.split:               \l  br label %for.body5.us\l}"];
	Node0x6a79e70 -> Node0x6a7a020;
	Node0x6a7a020 [shape=record,label="{for.body5.us:                                     \l  %indvars.iv166 = phi i64 [ %indvars.iv166.unr,\l... %for.body5.us.preheader.split.split ], [ %indvars.iv.next167.3, %for.body5.us\l... ]\l  %12 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer*\l... %1, i64 0, i32 8, i64 %indvars.iv166\l  %13 = load i16*, i16** %12, align 8\l  %add.ptr20.us = getelementptr inbounds i16, i16* %13, i64 %idx.ext19\l  %.add.ptr20.us = select i1 %tobool.us, i16* %13, i16* %add.ptr20.us\l  store i16 0, i16* %.add.ptr20.us, align 2, !tbaa !17\l  %indvars.iv.next167 = add nuw nsw i64 %indvars.iv166, 1\l  %14 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer*\l... %1, i64 0, i32 8, i64 %indvars.iv.next167\l  %15 = load i16*, i16** %14, align 8\l  %add.ptr20.us.1 = getelementptr inbounds i16, i16* %15, i64 %idx.ext19\l  %.add.ptr20.us.1 = select i1 %tobool.us, i16* %15, i16* %add.ptr20.us.1\l  store i16 0, i16* %.add.ptr20.us.1, align 2, !tbaa !17\l  %indvars.iv.next167.1 = add nsw i64 %indvars.iv166, 2\l  %16 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer*\l... %1, i64 0, i32 8, i64 %indvars.iv.next167.1\l  %17 = load i16*, i16** %16, align 8\l  %add.ptr20.us.2 = getelementptr inbounds i16, i16* %17, i64 %idx.ext19\l  %.add.ptr20.us.2 = select i1 %tobool.us, i16* %17, i16* %add.ptr20.us.2\l  store i16 0, i16* %.add.ptr20.us.2, align 2, !tbaa !17\l  %indvars.iv.next167.2 = add nsw i64 %indvars.iv166, 3\l  %18 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer*\l... %1, i64 0, i32 8, i64 %indvars.iv.next167.2\l  %19 = load i16*, i16** %18, align 8\l  %add.ptr20.us.3 = getelementptr inbounds i16, i16* %19, i64 %idx.ext19\l  %.add.ptr20.us.3 = select i1 %tobool.us, i16* %19, i16* %add.ptr20.us.3\l  store i16 0, i16* %.add.ptr20.us.3, align 2, !tbaa !17\l  %indvars.iv.next167.3 = add nsw i64 %indvars.iv166, 4\l  %lftr.wideiv168.3 = trunc i64 %indvars.iv.next167.3 to i32\l  %exitcond169.3 = icmp eq i32 %lftr.wideiv168.3, %2\l  br i1 %exitcond169.3, label %for.end71.loopexit.unr-lcssa, label\l... %for.body5.us\l|{<s0>T|<s1>F}}"];
	Node0x6a7a020:s0 -> Node0x6a7b890;
	Node0x6a7a020:s1 -> Node0x6a7a020;
	Node0x6a78340 [shape=record,label="{for.body5:                                        \l  %indvars.iv = phi i64 [ %indvars.iv.next, %for.end ], [ 0,\l... %for.body5.preheader ]\l  %20 = load i8*, i8** %arrayidx7, align 8, !tbaa !13\l  %add.ptr = getelementptr inbounds i8, i8* %20, i64 %indvars.iv\l  %21 = load i8*, i8** %arrayidx, align 8, !tbaa !13\l  %22 = load i32, i32* %on_odd_row72, align 8, !tbaa !14\l  %tobool = icmp eq i32 %22, 0\l  %23 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer*\l... %1, i64 0, i32 8, i64 %indvars.iv\l  %24 = load i16*, i16** %23, align 8\l  br i1 %tobool, label %if.end, label %if.then\l|{<s0>T|<s1>F}}"];
	Node0x6a78340:s0 -> Node0x6a7bf30;
	Node0x6a78340:s1 -> Node0x6a7c000;
	Node0x6a7c000 [shape=record,label="{if.then:                                          \l  %add.ptr12 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.ext11\l  %add.ptr15 = getelementptr inbounds i8, i8* %21, i64 %idx.ext14\l  %add.ptr20 = getelementptr inbounds i16, i16* %24, i64 %idx.ext19\l  br label %if.end\l}"];
	Node0x6a7c000 -> Node0x6a7bf30;
	Node0x6a7bf30 [shape=record,label="{if.end:                                           \l  %output_ptr.0 = phi i8* [ %add.ptr15, %if.then ], [ %21, %for.body5 ]\l  %input_ptr.0 = phi i8* [ %add.ptr12, %if.then ], [ %add.ptr, %for.body5 ]\l  %errorptr.0 = phi i16* [ %add.ptr20, %if.then ], [ %24, %for.body5 ]\l  %dir.0 = phi i64 [ -1, %if.then ], [ 1, %for.body5 ]\l  %dirnc.0 = phi i32 [ %sub16, %if.then ], [ %2, %for.body5 ]\l  %errorptr.0164 = bitcast i16* %errorptr.0 to i8*\l  %25 = load i8**, i8*** %colorindex, align 8, !tbaa !20\l  %arrayidx25 = getelementptr inbounds i8*, i8** %25, i64 %indvars.iv\l  %26 = load i8*, i8** %arrayidx25, align 8, !tbaa !13\l  %27 = load i8**, i8*** %sv_colormap, align 8, !tbaa !21\l  %arrayidx27 = getelementptr inbounds i8*, i8** %27, i64 %indvars.iv\l  %28 = load i8*, i8** %arrayidx27, align 8, !tbaa !13\l  %idx.ext62 = sext i32 %dirnc.0 to i64\l  %29 = mul nsw i64 %6, %dir.0\l  %uglygep = getelementptr i8, i8* %errorptr.0164, i64 %29\l  br label %for.body31\l}"];
	Node0x6a7bf30 -> Node0x6a7ccd0;
	Node0x6a7ccd0 [shape=record,label="{for.body31:                                       \l  %cur.0157 = phi i32 [ 0, %if.end ], [ %add61, %for.body31 ]\l  %belowerr.0156 = phi i32 [ 0, %if.end ], [ %sub53, %for.body31 ]\l  %col.0155 = phi i32 [ %3, %if.end ], [ %dec, %for.body31 ]\l  %bpreverr.0154 = phi i32 [ 0, %if.end ], [ %add60, %for.body31 ]\l  %errorptr.1153 = phi i16* [ %errorptr.0, %if.end ], [ %arrayidx33,\l... %for.body31 ]\l  %input_ptr.1152 = phi i8* [ %input_ptr.0, %if.end ], [ %add.ptr63,\l... %for.body31 ]\l  %output_ptr.1151 = phi i8* [ %output_ptr.0, %if.end ], [ %add.ptr65,\l... %for.body31 ]\l  %arrayidx33 = getelementptr inbounds i16, i16* %errorptr.1153, i64 %dir.0\l  %30 = load i16, i16* %arrayidx33, align 2, !tbaa !17\l  %conv34 = sext i16 %30 to i32\l  %add35 = add i32 %cur.0157, 8\l  %add36 = add i32 %add35, %conv34\l  %shr = ashr i32 %add36, 4\l  %31 = load i8, i8* %input_ptr.1152, align 1, !tbaa !22\l  %conv37 = zext i8 %31 to i32\l  %add38 = add nsw i32 %shr, %conv37\l  %idxprom39 = sext i32 %add38 to i64\l  %arrayidx40 = getelementptr inbounds i8, i8* %4, i64 %idxprom39\l  %32 = load i8, i8* %arrayidx40, align 1, !tbaa !22\l  %conv41 = zext i8 %32 to i32\l  %idxprom42 = zext i8 %32 to i64\l  %arrayidx43 = getelementptr inbounds i8, i8* %26, i64 %idxprom42\l  %33 = load i8, i8* %arrayidx43, align 1, !tbaa !22\l  %34 = load i8, i8* %output_ptr.1151, align 1, !tbaa !22\l  %add48 = add i8 %34, %33\l  store i8 %add48, i8* %output_ptr.1151, align 1, !tbaa !22\l  %idxprom50 = zext i8 %33 to i64\l  %arrayidx51 = getelementptr inbounds i8, i8* %28, i64 %idxprom50\l  %35 = load i8, i8* %arrayidx51, align 1, !tbaa !22\l  %conv52 = zext i8 %35 to i32\l  %sub53 = sub nsw i32 %conv41, %conv52\l  %add55 = mul nsw i32 %sub53, 3\l  %add56 = add nsw i32 %add55, %bpreverr.0154\l  %conv57 = trunc i32 %add56 to i16\l  store i16 %conv57, i16* %errorptr.1153, align 2, !tbaa !17\l  %add59 = mul nsw i32 %sub53, 5\l  %add60 = add nsw i32 %add59, %belowerr.0156\l  %add61 = mul nsw i32 %sub53, 7\l  %add.ptr63 = getelementptr inbounds i8, i8* %input_ptr.1152, i64 %idx.ext62\l  %add.ptr65 = getelementptr inbounds i8, i8* %output_ptr.1151, i64 %dir.0\l  %dec = add i32 %col.0155, -1\l  %cmp29 = icmp eq i32 %dec, 0\l  br i1 %cmp29, label %for.end, label %for.body31\l|{<s0>T|<s1>F}}"];
	Node0x6a7ccd0:s0 -> Node0x6a7ba40;
	Node0x6a7ccd0:s1 -> Node0x6a7ccd0;
	Node0x6a7ba40 [shape=record,label="{for.end:                                          \l  %add60.lcssa = phi i32 [ %add60, %for.body31 ]\l  %uglygep165 = bitcast i8* %uglygep to i16*\l  %conv68 = trunc i32 %add60.lcssa to i16\l  store i16 %conv68, i16* %uglygep165, align 2, !tbaa !17\l  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1\l  %lftr.wideiv = trunc i64 %indvars.iv.next to i32\l  %exitcond = icmp eq i32 %lftr.wideiv, %2\l  br i1 %exitcond, label %for.end71.loopexit176, label %for.body5\l|{<s0>T|<s1>F}}"];
	Node0x6a7ba40:s0 -> Node0x6a7f5d0;
	Node0x6a7ba40:s1 -> Node0x6a78340;
	Node0x6a7b890 [shape=record,label="{for.end71.loopexit.unr-lcssa:                     \l  br label %for.end71.loopexit\l}"];
	Node0x6a7b890 -> Node0x6a775f0;
	Node0x6a775f0 [shape=record,label="{for.end71.loopexit:                               \l  br label %for.end71\l}"];
	Node0x6a775f0 -> Node0x6a77af0;
	Node0x6a7f5d0 [shape=record,label="{for.end71.loopexit176:                            \l  br label %for.end71\l}"];
	Node0x6a7f5d0 -> Node0x6a77af0;
	Node0x6a77af0 [shape=record,label="{for.end71:                                        \l  %36 = load i32, i32* %on_odd_row72, align 8, !tbaa !14\l  %not.tobool73 = icmp eq i32 %36, 0\l  %cond = zext i1 %not.tobool73 to i32\l  store i32 %cond, i32* %on_odd_row72, align 8, !tbaa !14\l  %indvars.iv.next171 = add nuw nsw i64 %indvars.iv170, 1\l  %lftr.wideiv172 = trunc i64 %indvars.iv.next171 to i32\l  %exitcond173 = icmp eq i32 %lftr.wideiv172, %num_rows\l  br i1 %exitcond173, label %for.end77.loopexit, label %for.body\l|{<s0>T|<s1>F}}"];
	Node0x6a77af0:s0 -> Node0x6a7f990;
	Node0x6a77af0:s1 -> Node0x6a72920;
	Node0x6a7f990 [shape=record,label="{for.end77.loopexit:                               \l  br label %for.end77\l}"];
	Node0x6a7f990 -> Node0x6a76a30;
	Node0x6a76a30 [shape=record,label="{for.end77:                                        \l  ret void\l}"];
}
