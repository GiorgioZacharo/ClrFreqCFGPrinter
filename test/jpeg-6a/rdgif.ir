; ModuleID = 'rdgif.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.cjpeg_source_struct = type { void (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, void (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, %struct._IO_FILE*, i8**, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.jpeg_compress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32, %struct.jpeg_destination_mgr*, i32, i32, i32, i32, double, i32, i32, i32, %struct.jpeg_component_info*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], [16 x i8], [16 x i8], [16 x i8], i32, %struct.jpeg_scan_info*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i16, i16, i32, i32, i32, i32, i32, i32, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, %struct.jpeg_comp_master*, %struct.jpeg_c_main_controller*, %struct.jpeg_c_prep_controller*, %struct.jpeg_c_coef_controller*, %struct.jpeg_marker_writer*, %struct.jpeg_color_converter*, %struct.jpeg_downsampler*, %struct.jpeg_forward_dct*, %struct.jpeg_entropy_encoder* }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_destination_mgr = type { i8*, i64, void (%struct.jpeg_compress_struct*)*, i32 (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)* }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_scan_info = type { i32, [4 x i32], i32, i32, i32, i32 }
%struct.jpeg_comp_master = type opaque
%struct.jpeg_c_main_controller = type opaque
%struct.jpeg_c_prep_controller = type opaque
%struct.jpeg_c_coef_controller = type opaque
%struct.jpeg_marker_writer = type opaque
%struct.jpeg_color_converter = type opaque
%struct.jpeg_downsampler = type opaque
%struct.jpeg_forward_dct = type opaque
%struct.jpeg_entropy_encoder = type opaque
%struct.gif_source_struct = type { %struct.cjpeg_source_struct, %struct.jpeg_compress_struct*, i8**, [260 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16*, i8*, i8*, i8*, i32, %struct.jvirt_sarray_control*, i32, i32, i32, i32 }
%struct.cdjpeg_progress_mgr = type { %struct.jpeg_progress_mgr, i32, i32, i32 }

; Function Attrs: nounwind uwtable
define %struct.cjpeg_source_struct* @jinit_read_gif(%struct.jpeg_compress_struct* %cinfo) #0 !prof !2 {
entry:
  %mem = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 1
  %0 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !3
  %alloc_small = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %0, i64 0, i32 0
  %1 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_small, align 8, !tbaa !11
  %2 = bitcast %struct.jpeg_compress_struct* %cinfo to %struct.jpeg_common_struct*
  %call = tail call i8* %1(%struct.jpeg_common_struct* %2, i32 1, i64 440) #4
  %cinfo1 = getelementptr inbounds i8, i8* %call, i64 48
  %3 = bitcast i8* %cinfo1 to %struct.jpeg_compress_struct**
  store %struct.jpeg_compress_struct* %cinfo, %struct.jpeg_compress_struct** %3, align 8, !tbaa !14
  %start_input = bitcast i8* %call to void (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)**
  store void (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)* @start_input_gif, void (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %start_input, align 8, !tbaa !17
  %finish_input = getelementptr inbounds i8, i8* %call, i64 16
  %4 = bitcast i8* %finish_input to void (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)**
  store void (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)* @finish_input_gif, void (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %4, align 8, !tbaa !18
  %5 = bitcast i8* %call to %struct.cjpeg_source_struct*
  ret %struct.cjpeg_source_struct* %5
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: nounwind uwtable
define internal void @start_input_gif(%struct.jpeg_compress_struct* %cinfo, %struct.cjpeg_source_struct* %sinfo) #0 !prof !2 {
entry:
  %hdrbuf = alloca [10 x i8], align 1
  %0 = bitcast %struct.cjpeg_source_struct* %sinfo to %struct.gif_source_struct*
  %1 = getelementptr inbounds [10 x i8], [10 x i8]* %hdrbuf, i64 0, i64 0
  call void @llvm.lifetime.start(i64 10, i8* %1) #4
  %mem = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 1
  %2 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !3
  %alloc_sarray = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %2, i64 0, i32 2
  %3 = load i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)** %alloc_sarray, align 8, !tbaa !19
  %4 = bitcast %struct.jpeg_compress_struct* %cinfo to %struct.jpeg_common_struct*
  %call = tail call i8** %3(%struct.jpeg_common_struct* %4, i32 1, i32 256, i32 3) #4
  %colormap = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 1, i32 1
  %5 = bitcast i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %colormap to i8***
  store i8** %call, i8*** %5, align 8, !tbaa !20
  %input_file = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 0, i32 3
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %input_file, align 8, !tbaa !21
  %call1 = call i64 @fread(i8* %1, i64 1, i64 6, %struct._IO_FILE* %6)
  %cmp = icmp eq i64 %call1, 6
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %err = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 0
  %7 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8, !tbaa !22
  %msg_code = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %7, i64 0, i32 5
  store i32 1016, i32* %msg_code, align 8, !tbaa !23
  %error_exit = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %7, i64 0, i32 0
  %8 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit, align 8, !tbaa !25
  tail call void %8(%struct.jpeg_common_struct* %4) #4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %9 = load i8, i8* %1, align 1, !tbaa !26
  %cmp3 = icmp eq i8 %9, 71
  br i1 %cmp3, label %lor.lhs.false, label %if.then14

lor.lhs.false:                                    ; preds = %if.end
  %arrayidx5 = getelementptr inbounds [10 x i8], [10 x i8]* %hdrbuf, i64 0, i64 1
  %10 = load i8, i8* %arrayidx5, align 1, !tbaa !26
  %cmp7 = icmp eq i8 %10, 73
  br i1 %cmp7, label %lor.lhs.false9, label %if.then14

lor.lhs.false9:                                   ; preds = %lor.lhs.false
  %arrayidx10 = getelementptr inbounds [10 x i8], [10 x i8]* %hdrbuf, i64 0, i64 2
  %11 = load i8, i8* %arrayidx10, align 1, !tbaa !26
  %cmp12 = icmp eq i8 %11, 70
  br i1 %cmp12, label %if.end19, label %if.then14

if.then14:                                        ; preds = %lor.lhs.false9, %lor.lhs.false, %if.end
  %err15 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 0
  %12 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err15, align 8, !tbaa !22
  %msg_code16 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %12, i64 0, i32 5
  store i32 1016, i32* %msg_code16, align 8, !tbaa !23
  %error_exit18 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %12, i64 0, i32 0
  %13 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit18, align 8, !tbaa !25
  tail call void %13(%struct.jpeg_common_struct* %4) #4
  br label %if.end19

if.end19:                                         ; preds = %lor.lhs.false9, %if.then14
  %arrayidx20 = getelementptr inbounds [10 x i8], [10 x i8]* %hdrbuf, i64 0, i64 3
  %14 = load i8, i8* %arrayidx20, align 1, !tbaa !26
  %cmp22 = icmp eq i8 %14, 56
  %arrayidx25 = getelementptr inbounds [10 x i8], [10 x i8]* %hdrbuf, i64 0, i64 4
  %15 = load i8, i8* %arrayidx25, align 1, !tbaa !26
  br i1 %cmp22, label %lor.lhs.false24, label %do.body

lor.lhs.false24:                                  ; preds = %if.end19
  switch i8 %15, label %do.body [
    i8 55, label %lor.lhs.false29
    i8 57, label %lor.lhs.false43
  ], !prof !27

lor.lhs.false29:                                  ; preds = %lor.lhs.false24
  %arrayidx30 = getelementptr inbounds [10 x i8], [10 x i8]* %hdrbuf, i64 0, i64 5
  %16 = load i8, i8* %arrayidx30, align 1, !tbaa !26
  %cmp32 = icmp eq i8 %16, 97
  br i1 %cmp32, label %if.end63, label %do.body

lor.lhs.false43:                                  ; preds = %lor.lhs.false24
  %arrayidx44 = getelementptr inbounds [10 x i8], [10 x i8]* %hdrbuf, i64 0, i64 5
  %17 = load i8, i8* %arrayidx44, align 1, !tbaa !26
  %cmp46 = icmp eq i8 %17, 97
  br i1 %cmp46, label %if.end63, label %do.body

do.body:                                          ; preds = %lor.lhs.false24, %if.end19, %lor.lhs.false29, %lor.lhs.false43
  %18 = phi i8 [ 57, %lor.lhs.false43 ], [ 55, %lor.lhs.false29 ], [ %15, %if.end19 ], [ %15, %lor.lhs.false24 ]
  %err49 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 0
  %19 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err49, align 8, !tbaa !22
  %arraydecay50 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %19, i64 0, i32 6, i32 0, i64 0
  %conv52 = sext i8 %14 to i32
  store i32 %conv52, i32* %arraydecay50, align 4, !tbaa !28
  %conv55 = sext i8 %18 to i32
  %arrayidx56 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %19, i64 0, i32 6, i32 0, i64 1
  store i32 %conv55, i32* %arrayidx56, align 4, !tbaa !28
  %arrayidx57 = getelementptr inbounds [10 x i8], [10 x i8]* %hdrbuf, i64 0, i64 5
  %20 = load i8, i8* %arrayidx57, align 1, !tbaa !26
  %conv58 = sext i8 %20 to i32
  %arrayidx59 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %19, i64 0, i32 6, i32 0, i64 2
  store i32 %conv58, i32* %arrayidx59, align 4, !tbaa !28
  %msg_code61 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %19, i64 0, i32 5
  store i32 1018, i32* %msg_code61, align 8, !tbaa !23
  %emit_message = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %19, i64 0, i32 1
  %21 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %emit_message, align 8, !tbaa !29
  tail call void %21(%struct.jpeg_common_struct* %4, i32 1) #4
  br label %if.end63

if.end63:                                         ; preds = %lor.lhs.false43, %lor.lhs.false29, %do.body
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** %input_file, align 8, !tbaa !21
  %call67 = call i64 @fread(i8* nonnull %1, i64 1, i64 7, %struct._IO_FILE* %22)
  %cmp68 = icmp eq i64 %call67, 7
  br i1 %cmp68, label %if.end75, label %if.then70

if.then70:                                        ; preds = %if.end63
  %err71 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 0
  %23 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err71, align 8, !tbaa !22
  %msg_code72 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %23, i64 0, i32 5
  store i32 42, i32* %msg_code72, align 8, !tbaa !23
  %error_exit74 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %23, i64 0, i32 0
  %24 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit74, align 8, !tbaa !25
  tail call void %24(%struct.jpeg_common_struct* %4) #4
  br label %if.end75

if.end75:                                         ; preds = %if.then70, %if.end63
  %arrayidx89 = getelementptr inbounds [10 x i8], [10 x i8]* %hdrbuf, i64 0, i64 4
  %25 = load i8, i8* %arrayidx89, align 1, !tbaa !26
  %conv90343 = zext i8 %25 to i32
  %and91 = and i32 %conv90343, 7
  %shl92 = shl i32 2, %and91
  %arrayidx93 = getelementptr inbounds [10 x i8], [10 x i8]* %hdrbuf, i64 0, i64 6
  %26 = load i8, i8* %arrayidx93, align 1, !tbaa !26
  switch i8 %26, label %if.then101 [
    i8 49, label %if.end106
    i8 0, label %if.end106
  ]

if.then101:                                       ; preds = %if.end75
  %err102 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 0
  %27 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err102, align 8, !tbaa !22
  %msg_code103 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %27, i64 0, i32 5
  store i32 1020, i32* %msg_code103, align 8, !tbaa !23
  %emit_message105 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %27, i64 0, i32 1
  %28 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %emit_message105, align 8, !tbaa !29
  tail call void %28(%struct.jpeg_common_struct* %4, i32 1) #4
  br label %if.end106

if.end106:                                        ; preds = %if.end75, %if.end75, %if.then101
  %tobool = icmp slt i8 %25, 0
  br i1 %tobool, label %if.then110, label %for.cond.preheader

if.then110:                                       ; preds = %if.end106
  %29 = load i8**, i8*** %5, align 8, !tbaa !20
  %cmp21.i = icmp sgt i32 %shl92, 0
  br i1 %cmp21.i, label %for.body.lr.ph.i, label %for.cond.preheader

for.body.lr.ph.i:                                 ; preds = %if.then110
  %cinfo.i.i = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 1
  %30 = bitcast %struct.cjpeg_source_struct* %cinfo.i.i to %struct.jpeg_compress_struct**
  %arrayidx5.i = getelementptr inbounds i8*, i8** %29, i64 1
  %arrayidx10.i = getelementptr inbounds i8*, i8** %29, i64 2
  br label %for.body.i

for.body.i:                                       ; preds = %ReadByte.exit416, %for.body.lr.ph.i
  %indvars.iv.i = phi i64 [ 0, %for.body.lr.ph.i ], [ %indvars.iv.next.i, %ReadByte.exit416 ]
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** %input_file, align 8, !tbaa !21
  %call.i.i = tail call i32 @_IO_getc(%struct._IO_FILE* %31) #4
  %cmp.i.i = icmp eq i32 %call.i.i, -1
  br i1 %cmp.i.i, label %if.then.i.i, label %ReadByte.exit.i

if.then.i.i:                                      ; preds = %for.body.i
  %32 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %30, align 8, !tbaa !14
  %err.i.i = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %32, i64 0, i32 0
  %33 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err.i.i, align 8, !tbaa !22
  %msg_code.i.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %33, i64 0, i32 5
  store i32 42, i32* %msg_code.i.i, align 8, !tbaa !23
  %error_exit.i.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %33, i64 0, i32 0
  %34 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit.i.i, align 8, !tbaa !25
  %35 = bitcast %struct.jpeg_compress_struct* %32 to %struct.jpeg_common_struct*
  tail call void %34(%struct.jpeg_common_struct* %35) #4
  br label %ReadByte.exit.i

ReadByte.exit.i:                                  ; preds = %if.then.i.i, %for.body.i
  %conv.i = trunc i32 %call.i.i to i8
  %36 = load i8*, i8** %29, align 8, !tbaa !30
  %arrayidx1.i = getelementptr inbounds i8, i8* %36, i64 %indvars.iv.i
  store i8 %conv.i, i8* %arrayidx1.i, align 1, !tbaa !26
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** %input_file, align 8, !tbaa !21
  %call.i400 = tail call i32 @_IO_getc(%struct._IO_FILE* %37) #4
  %cmp.i401 = icmp eq i32 %call.i400, -1
  br i1 %cmp.i401, label %if.then.i406, label %ReadByte.exit407

if.then.i406:                                     ; preds = %ReadByte.exit.i
  %38 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %30, align 8, !tbaa !14
  %err.i403 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %38, i64 0, i32 0
  %39 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err.i403, align 8, !tbaa !22
  %msg_code.i404 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %39, i64 0, i32 5
  store i32 42, i32* %msg_code.i404, align 8, !tbaa !23
  %error_exit.i405 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %39, i64 0, i32 0
  %40 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit.i405, align 8, !tbaa !25
  %41 = bitcast %struct.jpeg_compress_struct* %38 to %struct.jpeg_common_struct*
  tail call void %40(%struct.jpeg_common_struct* %41) #4
  br label %ReadByte.exit407

ReadByte.exit407:                                 ; preds = %ReadByte.exit.i, %if.then.i406
  %conv3.i = trunc i32 %call.i400 to i8
  %42 = load i8*, i8** %arrayidx5.i, align 8, !tbaa !30
  %arrayidx6.i = getelementptr inbounds i8, i8* %42, i64 %indvars.iv.i
  store i8 %conv3.i, i8* %arrayidx6.i, align 1, !tbaa !26
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** %input_file, align 8, !tbaa !21
  %call.i409 = tail call i32 @_IO_getc(%struct._IO_FILE* %43) #4
  %cmp.i410 = icmp eq i32 %call.i409, -1
  br i1 %cmp.i410, label %if.then.i415, label %ReadByte.exit416

if.then.i415:                                     ; preds = %ReadByte.exit407
  %44 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %30, align 8, !tbaa !14
  %err.i412 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %44, i64 0, i32 0
  %45 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err.i412, align 8, !tbaa !22
  %msg_code.i413 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %45, i64 0, i32 5
  store i32 42, i32* %msg_code.i413, align 8, !tbaa !23
  %error_exit.i414 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %45, i64 0, i32 0
  %46 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit.i414, align 8, !tbaa !25
  %47 = bitcast %struct.jpeg_compress_struct* %44 to %struct.jpeg_common_struct*
  tail call void %46(%struct.jpeg_common_struct* %47) #4
  br label %ReadByte.exit416

ReadByte.exit416:                                 ; preds = %ReadByte.exit407, %if.then.i415
  %conv8.i = trunc i32 %call.i409 to i8
  %48 = load i8*, i8** %arrayidx10.i, align 8, !tbaa !30
  %arrayidx11.i = getelementptr inbounds i8, i8* %48, i64 %indvars.iv.i
  store i8 %conv8.i, i8* %arrayidx11.i, align 1, !tbaa !26
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %lftr.wideiv442 = trunc i64 %indvars.iv.next.i to i32
  %exitcond443 = icmp eq i32 %lftr.wideiv442, %shl92
  br i1 %exitcond443, label %for.cond.preheader.loopexit, label %for.body.i

for.cond.preheader.loopexit:                      ; preds = %ReadByte.exit416
  br label %for.cond.preheader

for.cond.preheader:                               ; preds = %for.cond.preheader.loopexit, %if.end106, %if.then110
  %err129 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 0
  %cinfo.i = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 1
  %49 = bitcast %struct.cjpeg_source_struct* %cinfo.i to %struct.jpeg_compress_struct**
  br label %for.cond

for.cond:                                         ; preds = %for.cond.backedge, %for.cond.preheader
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** %input_file, align 8, !tbaa !21
  %call.i = tail call i32 @_IO_getc(%struct._IO_FILE* %50) #4
  switch i32 %call.i, label %if.then128 [
    i32 -1, label %ReadByte.exit.thread
    i32 59, label %if.then116
    i32 33, label %if.then124
    i32 44, label %if.end137
  ], !prof !31

ReadByte.exit.thread:                             ; preds = %for.cond
  %51 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %49, align 8, !tbaa !14
  %err.i = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %51, i64 0, i32 0
  %52 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err.i, align 8, !tbaa !22
  %msg_code.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %52, i64 0, i32 5
  store i32 42, i32* %msg_code.i, align 8, !tbaa !23
  %error_exit.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %52, i64 0, i32 0
  %53 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit.i, align 8, !tbaa !25
  %54 = bitcast %struct.jpeg_compress_struct* %51 to %struct.jpeg_common_struct*
  tail call void %53(%struct.jpeg_common_struct* %54) #4
  br label %if.then128

if.then116:                                       ; preds = %for.cond
  %55 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err129, align 8, !tbaa !22
  %msg_code118 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %55, i64 0, i32 5
  store i32 1015, i32* %msg_code118, align 8, !tbaa !23
  %error_exit120 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %55, i64 0, i32 0
  %56 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit120, align 8, !tbaa !25
  tail call void %56(%struct.jpeg_common_struct* %4) #4
  br label %if.then128

if.then124:                                       ; preds = %for.cond
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** %input_file, align 8, !tbaa !21
  %call.i.i353 = tail call i32 @_IO_getc(%struct._IO_FILE* %57) #4
  %cmp.i.i354 = icmp eq i32 %call.i.i353, -1
  br i1 %cmp.i.i354, label %if.then.i.i359, label %DoExtension.exit

if.then.i.i359:                                   ; preds = %if.then124
  %58 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %49, align 8, !tbaa !14
  %err.i.i356 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %58, i64 0, i32 0
  %59 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err.i.i356, align 8, !tbaa !22
  %msg_code.i.i357 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %59, i64 0, i32 5
  store i32 42, i32* %msg_code.i.i357, align 8, !tbaa !23
  %error_exit.i.i358 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %59, i64 0, i32 0
  %60 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit.i.i358, align 8, !tbaa !25
  %61 = bitcast %struct.jpeg_compress_struct* %58 to %struct.jpeg_common_struct*
  tail call void %60(%struct.jpeg_common_struct* %61) #4
  br label %DoExtension.exit

DoExtension.exit:                                 ; preds = %if.then124, %if.then.i.i359
  %62 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %49, align 8, !tbaa !14
  %err.i360 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %62, i64 0, i32 0
  %63 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err.i360, align 8, !tbaa !22
  %msg_code.i361 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %63, i64 0, i32 5
  store i32 1019, i32* %msg_code.i361, align 8, !tbaa !23
  %arrayidx.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %63, i64 0, i32 6, i32 0, i64 0
  store i32 %call.i.i353, i32* %arrayidx.i, align 4, !tbaa !28
  %emit_message.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %63, i64 0, i32 1
  %64 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %emit_message.i, align 8, !tbaa !29
  %65 = bitcast %struct.jpeg_compress_struct* %62 to %struct.jpeg_common_struct*
  tail call void %64(%struct.jpeg_common_struct* %65, i32 1) #4
  tail call fastcc void @SkipDataBlocks(%struct.gif_source_struct* nonnull %0) #4
  br label %for.cond.backedge

for.cond.backedge:                                ; preds = %DoExtension.exit, %if.then128
  br label %for.cond

if.then128:                                       ; preds = %for.cond, %ReadByte.exit.thread, %if.then116
  %66 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err129, align 8, !tbaa !22
  %msg_code130 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %66, i64 0, i32 5
  store i32 1022, i32* %msg_code130, align 8, !tbaa !23
  %arrayidx134 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %66, i64 0, i32 6, i32 0, i64 0
  store i32 %call.i, i32* %arrayidx134, align 4, !tbaa !28
  %emit_message136 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %66, i64 0, i32 1
  %67 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %emit_message136, align 8, !tbaa !29
  tail call void %67(%struct.jpeg_common_struct* %4, i32 -1) #4
  br label %for.cond.backedge

if.end137:                                        ; preds = %for.cond
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** %input_file, align 8, !tbaa !21
  %call141 = call i64 @fread(i8* %1, i64 1, i64 9, %struct._IO_FILE* %68)
  %cmp142 = icmp eq i64 %call141, 9
  br i1 %cmp142, label %if.end149, label %if.then144

if.then144:                                       ; preds = %if.end137
  %69 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err129, align 8, !tbaa !22
  %msg_code146 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %69, i64 0, i32 5
  store i32 42, i32* %msg_code146, align 8, !tbaa !23
  %error_exit148 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %69, i64 0, i32 0
  %70 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit148, align 8, !tbaa !25
  tail call void %70(%struct.jpeg_common_struct* %4) #4
  br label %if.end149

if.end149:                                        ; preds = %if.then144, %if.end137
  %arrayidx150 = getelementptr inbounds [10 x i8], [10 x i8]* %hdrbuf, i64 0, i64 5
  %71 = load i8, i8* %arrayidx150, align 1, !tbaa !26
  %conv151346 = zext i8 %71 to i32
  %shl153 = shl nuw nsw i32 %conv151346, 8
  %72 = load i8, i8* %arrayidx89, align 1, !tbaa !26
  %conv155347 = zext i8 %72 to i32
  %or157 = or i32 %shl153, %conv155347
  %arrayidx158 = getelementptr inbounds [10 x i8], [10 x i8]* %hdrbuf, i64 0, i64 7
  %73 = load i8, i8* %arrayidx158, align 1, !tbaa !26
  %conv159348 = zext i8 %73 to i32
  %shl161 = shl nuw nsw i32 %conv159348, 8
  %74 = load i8, i8* %arrayidx93, align 1, !tbaa !26
  %conv163349 = zext i8 %74 to i32
  %or165 = or i32 %shl161, %conv163349
  %arrayidx166 = getelementptr inbounds [10 x i8], [10 x i8]* %hdrbuf, i64 0, i64 8
  %75 = load i8, i8* %arrayidx166, align 1, !tbaa !26
  %conv167350 = zext i8 %75 to i32
  %and168 = and i32 %conv167350, 64
  %is_interlaced = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 8, i32 3
  %76 = bitcast %struct._IO_FILE** %is_interlaced to i32*
  store i32 %and168, i32* %76, align 8, !tbaa !32
  %tobool172 = icmp slt i8 %75, 0
  br i1 %tobool172, label %if.then173, label %if.end179

if.then173:                                       ; preds = %if.end149
  %and176 = and i32 %conv167350, 7
  %shl177 = shl i32 2, %and176
  %77 = load i8**, i8*** %5, align 8, !tbaa !20
  %cmp21.i363 = icmp sgt i32 %shl177, 0
  br i1 %cmp21.i363, label %for.body.lr.ph.i368, label %if.end179

for.body.lr.ph.i368:                              ; preds = %if.then173
  %arrayidx5.i366 = getelementptr inbounds i8*, i8** %77, i64 1
  %arrayidx10.i367 = getelementptr inbounds i8*, i8** %77, i64 2
  br label %for.body.i372

for.body.i372:                                    ; preds = %ReadByte.exit434, %for.body.lr.ph.i368
  %indvars.iv.i369 = phi i64 [ 0, %for.body.lr.ph.i368 ], [ %indvars.iv.next.i385, %ReadByte.exit434 ]
  %78 = load %struct._IO_FILE*, %struct._IO_FILE** %input_file, align 8, !tbaa !21
  %call.i.i370 = tail call i32 @_IO_getc(%struct._IO_FILE* %78) #4
  %cmp.i.i371 = icmp eq i32 %call.i.i370, -1
  br i1 %cmp.i.i371, label %if.then.i.i376, label %ReadByte.exit.i388

if.then.i.i376:                                   ; preds = %for.body.i372
  %79 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %49, align 8, !tbaa !14
  %err.i.i373 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %79, i64 0, i32 0
  %80 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err.i.i373, align 8, !tbaa !22
  %msg_code.i.i374 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %80, i64 0, i32 5
  store i32 42, i32* %msg_code.i.i374, align 8, !tbaa !23
  %error_exit.i.i375 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %80, i64 0, i32 0
  %81 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit.i.i375, align 8, !tbaa !25
  %82 = bitcast %struct.jpeg_compress_struct* %79 to %struct.jpeg_common_struct*
  tail call void %81(%struct.jpeg_common_struct* %82) #4
  br label %ReadByte.exit.i388

ReadByte.exit.i388:                               ; preds = %if.then.i.i376, %for.body.i372
  %conv.i377 = trunc i32 %call.i.i370 to i8
  %83 = load i8*, i8** %77, align 8, !tbaa !30
  %arrayidx1.i378 = getelementptr inbounds i8, i8* %83, i64 %indvars.iv.i369
  store i8 %conv.i377, i8* %arrayidx1.i378, align 1, !tbaa !26
  %84 = load %struct._IO_FILE*, %struct._IO_FILE** %input_file, align 8, !tbaa !21
  %call.i418 = tail call i32 @_IO_getc(%struct._IO_FILE* %84) #4
  %cmp.i419 = icmp eq i32 %call.i418, -1
  br i1 %cmp.i419, label %if.then.i424, label %ReadByte.exit425

if.then.i424:                                     ; preds = %ReadByte.exit.i388
  %85 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %49, align 8, !tbaa !14
  %err.i421 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %85, i64 0, i32 0
  %86 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err.i421, align 8, !tbaa !22
  %msg_code.i422 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %86, i64 0, i32 5
  store i32 42, i32* %msg_code.i422, align 8, !tbaa !23
  %error_exit.i423 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %86, i64 0, i32 0
  %87 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit.i423, align 8, !tbaa !25
  %88 = bitcast %struct.jpeg_compress_struct* %85 to %struct.jpeg_common_struct*
  tail call void %87(%struct.jpeg_common_struct* %88) #4
  br label %ReadByte.exit425

ReadByte.exit425:                                 ; preds = %ReadByte.exit.i388, %if.then.i424
  %conv3.i380 = trunc i32 %call.i418 to i8
  %89 = load i8*, i8** %arrayidx5.i366, align 8, !tbaa !30
  %arrayidx6.i381 = getelementptr inbounds i8, i8* %89, i64 %indvars.iv.i369
  store i8 %conv3.i380, i8* %arrayidx6.i381, align 1, !tbaa !26
  %90 = load %struct._IO_FILE*, %struct._IO_FILE** %input_file, align 8, !tbaa !21
  %call.i427 = tail call i32 @_IO_getc(%struct._IO_FILE* %90) #4
  %cmp.i428 = icmp eq i32 %call.i427, -1
  br i1 %cmp.i428, label %if.then.i433, label %ReadByte.exit434

if.then.i433:                                     ; preds = %ReadByte.exit425
  %91 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %49, align 8, !tbaa !14
  %err.i430 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %91, i64 0, i32 0
  %92 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err.i430, align 8, !tbaa !22
  %msg_code.i431 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %92, i64 0, i32 5
  store i32 42, i32* %msg_code.i431, align 8, !tbaa !23
  %error_exit.i432 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %92, i64 0, i32 0
  %93 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit.i432, align 8, !tbaa !25
  %94 = bitcast %struct.jpeg_compress_struct* %91 to %struct.jpeg_common_struct*
  tail call void %93(%struct.jpeg_common_struct* %94) #4
  br label %ReadByte.exit434

ReadByte.exit434:                                 ; preds = %ReadByte.exit425, %if.then.i433
  %conv8.i383 = trunc i32 %call.i427 to i8
  %95 = load i8*, i8** %arrayidx10.i367, align 8, !tbaa !30
  %arrayidx11.i384 = getelementptr inbounds i8, i8* %95, i64 %indvars.iv.i369
  store i8 %conv8.i383, i8* %arrayidx11.i384, align 1, !tbaa !26
  %indvars.iv.next.i385 = add nuw nsw i64 %indvars.iv.i369, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next.i385 to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %shl177
  br i1 %exitcond, label %if.end179.loopexit, label %for.body.i372

if.end179.loopexit:                               ; preds = %ReadByte.exit434
  br label %if.end179

if.end179:                                        ; preds = %if.end179.loopexit, %if.then173, %if.end149
  %colormaplen.0 = phi i32 [ %shl92, %if.end149 ], [ %shl177, %if.then173 ], [ %shl177, %if.end179.loopexit ]
  %96 = load %struct._IO_FILE*, %struct._IO_FILE** %input_file, align 8, !tbaa !21
  %call.i391 = tail call i32 @_IO_getc(%struct._IO_FILE* %96) #4
  %cmp.i392 = icmp eq i32 %call.i391, -1
  br i1 %cmp.i392, label %ReadByte.exit398.thread, label %ReadByte.exit398

ReadByte.exit398.thread:                          ; preds = %if.end179
  %97 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %49, align 8, !tbaa !14
  %err.i394 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %97, i64 0, i32 0
  %98 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err.i394, align 8, !tbaa !22
  %msg_code.i395 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %98, i64 0, i32 5
  store i32 42, i32* %msg_code.i395, align 8, !tbaa !23
  %error_exit.i396 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %98, i64 0, i32 0
  %99 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit.i396, align 8, !tbaa !25
  %100 = bitcast %struct.jpeg_compress_struct* %97 to %struct.jpeg_common_struct*
  tail call void %99(%struct.jpeg_common_struct* %100) #4
  %input_code_size436 = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %0, i64 0, i32 8
  store i32 -1, i32* %input_code_size436, align 4, !tbaa !33
  br label %if.then188

ReadByte.exit398:                                 ; preds = %if.end179
  %input_code_size = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %0, i64 0, i32 8
  store i32 %call.i391, i32* %input_code_size, align 4, !tbaa !33
  %call.i391.off = add i32 %call.i391, -2
  %101 = icmp ugt i32 %call.i391.off, 9
  br i1 %101, label %if.then188, label %for.end, !prof !34

if.then188:                                       ; preds = %ReadByte.exit398.thread, %ReadByte.exit398
  %102 = phi i32 [ -1, %ReadByte.exit398.thread ], [ %call.i391, %ReadByte.exit398 ]
  %input_code_size440 = phi i32* [ %input_code_size436, %ReadByte.exit398.thread ], [ %input_code_size, %ReadByte.exit398 ]
  %103 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err129, align 8, !tbaa !22
  %msg_code190 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %103, i64 0, i32 5
  store i32 1013, i32* %msg_code190, align 8, !tbaa !23
  %arrayidx195 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %103, i64 0, i32 6, i32 0, i64 0
  store i32 %102, i32* %arrayidx195, align 4, !tbaa !28
  %error_exit197 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %103, i64 0, i32 0
  %104 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit197, align 8, !tbaa !25
  tail call void %104(%struct.jpeg_common_struct* %4) #4
  br label %for.end

for.end:                                          ; preds = %ReadByte.exit398, %if.then188
  %input_code_size441 = phi i32* [ %input_code_size, %ReadByte.exit398 ], [ %input_code_size440, %if.then188 ]
  %105 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !3
  %alloc_large = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %105, i64 0, i32 1
  %106 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_large, align 8, !tbaa !35
  %call200 = tail call i8* %106(%struct.jpeg_common_struct* %4, i32 1, i64 8192) #4
  %symbol_head = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 7, i32 5
  %107 = bitcast i32* %symbol_head to i8**
  store i8* %call200, i8** %107, align 8, !tbaa !36
  %108 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !3
  %alloc_large202 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %108, i64 0, i32 1
  %109 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_large202, align 8, !tbaa !35
  %call203 = tail call i8* %109(%struct.jpeg_common_struct* %4, i32 1, i64 4096) #4
  %symbol_tail = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 8
  %110 = bitcast %struct.cjpeg_source_struct* %symbol_tail to i8**
  store i8* %call203, i8** %110, align 8, !tbaa !37
  %111 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !3
  %alloc_large205 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %111, i64 0, i32 1
  %112 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_large205, align 8, !tbaa !35
  %call206 = tail call i8* %112(%struct.jpeg_common_struct* %4, i32 1, i64 4096) #4
  %symbol_stack = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 8, i32 1
  %113 = bitcast i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %symbol_stack to i8**
  store i8* %call206, i8** %113, align 8, !tbaa !38
  %last_byte.i = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %0, i64 0, i32 4
  %114 = bitcast i32* %last_byte.i to <4 x i32>*
  store <4 x i32> <i32 2, i32 0, i32 0, i32 0>, <4 x i32>* %114, align 4, !tbaa !28
  %115 = load i32, i32* %input_code_size441, align 4, !tbaa !33
  %shl.i = shl i32 1, %115
  %clear_code.i = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 7, i32 1
  %116 = bitcast i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %clear_code.i to i32*
  store i32 %shl.i, i32* %116, align 8, !tbaa !39
  %add.i = add nsw i32 %shl.i, 1
  %end_code.i = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %0, i64 0, i32 10
  store i32 %add.i, i32* %end_code.i, align 4, !tbaa !40
  %first_time.i = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %0, i64 0, i32 14
  store i32 1, i32* %first_time.i, align 4, !tbaa !41
  %add.i.i = add nsw i32 %115, 1
  %code_size.i.i = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 7, i32 2
  %117 = bitcast void (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %code_size.i.i to i32*
  store i32 %add.i.i, i32* %117, align 8, !tbaa !42
  %shl.i.i = shl i32 %shl.i, 1
  %limit_code.i.i = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %0, i64 0, i32 12
  store i32 %shl.i.i, i32* %limit_code.i.i, align 4, !tbaa !43
  %add2.i.i = add nsw i32 %shl.i, 2
  %max_code.i.i = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 7, i32 3
  %118 = bitcast %struct._IO_FILE** %max_code.i.i to i32*
  store i32 %add2.i.i, i32* %118, align 8, !tbaa !44
  %119 = ptrtoint i8* %call206 to i64
  %sp.i.i = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 8, i32 2
  %120 = bitcast void (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %sp.i.i to i64*
  store i64 %119, i64* %120, align 8, !tbaa !45
  %121 = load i32, i32* %76, align 8, !tbaa !32
  %tobool208 = icmp eq i32 %121, 0
  br i1 %tobool208, label %if.else, label %if.then209

if.then209:                                       ; preds = %for.end
  %122 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !3
  %request_virt_sarray = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %122, i64 0, i32 4
  %123 = load %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)** %request_virt_sarray, align 8, !tbaa !46
  %call211 = tail call %struct.jvirt_sarray_control* %123(%struct.jpeg_common_struct* nonnull %4, i32 1, i32 0, i32 %or157, i32 %or165, i32 1) #4
  %interlaced_image = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 8, i32 4
  %124 = bitcast i8*** %interlaced_image to %struct.jvirt_sarray_control**
  store %struct.jvirt_sarray_control* %call211, %struct.jvirt_sarray_control** %124, align 8, !tbaa !47
  %progress = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 2
  %125 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %progress, align 8, !tbaa !48
  %cmp212 = icmp eq %struct.jpeg_progress_mgr* %125, null
  br i1 %cmp212, label %if.end217, label %if.then214

if.then214:                                       ; preds = %if.then209
  %126 = bitcast %struct.jpeg_progress_mgr* %125 to %struct.cdjpeg_progress_mgr*
  %total_extra_passes = getelementptr inbounds %struct.cdjpeg_progress_mgr, %struct.cdjpeg_progress_mgr* %126, i64 0, i32 2
  %127 = load i32, i32* %total_extra_passes, align 4, !tbaa !49
  %inc = add nsw i32 %127, 1
  store i32 %inc, i32* %total_extra_passes, align 4, !tbaa !49
  br label %if.end217

if.end217:                                        ; preds = %if.then209, %if.then214
  %get_pixel_rows = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 0, i32 1
  store i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)* @load_interlaced_image, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %get_pixel_rows, align 8, !tbaa !52
  br label %if.end221

if.else:                                          ; preds = %for.end
  %get_pixel_rows220 = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 0, i32 1
  store i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)* @get_pixel_rows, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %get_pixel_rows220, align 8, !tbaa !52
  br label %if.end221

if.end221:                                        ; preds = %if.else, %if.end217
  %128 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !3
  %alloc_sarray223 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %128, i64 0, i32 2
  %129 = load i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)** %alloc_sarray223, align 8, !tbaa !19
  %mul = mul nuw nsw i32 %or157, 3
  %call224 = tail call i8** %129(%struct.jpeg_common_struct* %4, i32 1, i32 %mul, i32 1) #4
  %buffer = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 0, i32 4
  store i8** %call224, i8*** %buffer, align 8, !tbaa !53
  %buffer_height = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 0, i32 5
  store i32 1, i32* %buffer_height, align 8, !tbaa !54
  %in_color_space = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 9
  store i32 2, i32* %in_color_space, align 4, !tbaa !55
  %input_components = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 8
  store i32 3, i32* %input_components, align 8, !tbaa !56
  %data_precision = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 11
  store i32 8, i32* %data_precision, align 8, !tbaa !57
  %image_width = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 6
  store i32 %or157, i32* %image_width, align 8, !tbaa !58
  %image_height = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 7
  store i32 %or165, i32* %image_height, align 4, !tbaa !59
  %130 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err129, align 8, !tbaa !22
  %arraydecay232 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %130, i64 0, i32 6, i32 0, i64 0
  store i32 %or157, i32* %arraydecay232, align 4, !tbaa !28
  %arrayidx234 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %130, i64 0, i32 6, i32 0, i64 1
  store i32 %or165, i32* %arrayidx234, align 4, !tbaa !28
  %arrayidx235 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %130, i64 0, i32 6, i32 0, i64 2
  store i32 %colormaplen.0, i32* %arrayidx235, align 4, !tbaa !28
  %msg_code237 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %130, i64 0, i32 5
  store i32 1017, i32* %msg_code237, align 8, !tbaa !23
  %emit_message239 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %130, i64 0, i32 1
  %131 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %emit_message239, align 8, !tbaa !29
  tail call void %131(%struct.jpeg_common_struct* %4, i32 1) #4
  call void @llvm.lifetime.end(i64 10, i8* %1) #4
  ret void
}

; Function Attrs: norecurse nounwind readnone uwtable
define internal void @finish_input_gif(%struct.jpeg_compress_struct* nocapture %cinfo, %struct.cjpeg_source_struct* nocapture %sinfo) #2 !prof !2 {
entry:
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: nounwind
declare i64 @fread(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) #3

; Function Attrs: nounwind uwtable
define internal i32 @load_interlaced_image(%struct.jpeg_compress_struct* %cinfo, %struct.cjpeg_source_struct* %sinfo) #0 !prof !2 {
entry:
  %0 = bitcast %struct.cjpeg_source_struct* %sinfo to %struct.gif_source_struct*
  %progress1 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 2
  %1 = bitcast %struct.jpeg_progress_mgr** %progress1 to %struct.cdjpeg_progress_mgr**
  %2 = load %struct.cdjpeg_progress_mgr*, %struct.cdjpeg_progress_mgr** %1, align 8, !tbaa !48
  %image_height = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 7
  %3 = load i32, i32* %image_height, align 4, !tbaa !59
  %cmp70 = icmp eq i32 %3, 0
  %cmp2 = icmp ne %struct.cdjpeg_progress_mgr* %2, null
  br i1 %cmp70, label %for.end15, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %pass_counter = getelementptr inbounds %struct.cdjpeg_progress_mgr, %struct.cdjpeg_progress_mgr* %2, i64 0, i32 0, i32 1
  %pass_limit = getelementptr inbounds %struct.cdjpeg_progress_mgr, %struct.cdjpeg_progress_mgr* %2, i64 0, i32 0, i32 2
  %progress_monitor7 = bitcast %struct.cdjpeg_progress_mgr* %2 to void (%struct.jpeg_common_struct*)**
  %4 = bitcast %struct.jpeg_compress_struct* %cinfo to %struct.jpeg_common_struct*
  %mem = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 1
  %interlaced_image = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 8, i32 4
  %5 = bitcast i8*** %interlaced_image to %struct.jvirt_sarray_control**
  %image_width = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 6
  %6 = bitcast i32* %image_width to i64*
  br i1 %cmp2, label %if.then.us.preheader, label %if.end.preheader

if.end.preheader:                                 ; preds = %for.body.lr.ph
  br label %if.end

if.then.us.preheader:                             ; preds = %for.body.lr.ph
  br label %if.then.us

if.then.us:                                       ; preds = %if.then.us.preheader, %for.inc14.us
  %7 = phi i32 [ %17, %for.inc14.us ], [ %3, %if.then.us.preheader ]
  %row.071.us = phi i32 [ %inc.us, %for.inc14.us ], [ 0, %if.then.us.preheader ]
  %conv.us = zext i32 %row.071.us to i64
  store i64 %conv.us, i64* %pass_counter, align 8, !tbaa !60
  %conv4.us = zext i32 %7 to i64
  store i64 %conv4.us, i64* %pass_limit, align 8, !tbaa !61
  %8 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %progress_monitor7, align 8, !tbaa !62
  tail call void %8(%struct.jpeg_common_struct* %4) #4
  %9 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !3
  %access_virt_sarray.us = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %9, i64 0, i32 7
  %10 = load i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)** %access_virt_sarray.us, align 8, !tbaa !63
  %11 = load %struct.jvirt_sarray_control*, %struct.jvirt_sarray_control** %5, align 8, !tbaa !47
  %call.us = tail call i8** %10(%struct.jpeg_common_struct* %4, %struct.jvirt_sarray_control* %11, i32 %row.071.us, i32 1, i32 1) #4
  %12 = load i64, i64* %6, align 8
  %13 = trunc i64 %12 to i32
  %cmp967.us = icmp eq i32 %13, 0
  %14 = lshr i64 %12, 32
  %15 = trunc i64 %14 to i32
  br i1 %cmp967.us, label %for.inc14.us, label %for.body11.us.preheader

for.body11.us.preheader:                          ; preds = %if.then.us
  %16 = load i8*, i8** %call.us, align 8, !tbaa !30
  br label %for.body11.us

for.body11.us:                                    ; preds = %for.body11.us.preheader, %for.body11.us
  %sptr.069.us = phi i8* [ %incdec.ptr.us, %for.body11.us ], [ %16, %for.body11.us.preheader ]
  %col.068.us = phi i32 [ %dec.us, %for.body11.us ], [ %13, %for.body11.us.preheader ]
  %call12.us = tail call fastcc i32 @LZWReadByte(%struct.gif_source_struct* %0)
  %conv13.us = trunc i32 %call12.us to i8
  %incdec.ptr.us = getelementptr inbounds i8, i8* %sptr.069.us, i64 1
  store i8 %conv13.us, i8* %sptr.069.us, align 1, !tbaa !26
  %dec.us = add i32 %col.068.us, -1
  %cmp9.us = icmp eq i32 %dec.us, 0
  br i1 %cmp9.us, label %for.inc14.us.loopexit, label %for.body11.us

for.inc14.us.loopexit:                            ; preds = %for.body11.us
  %.pre74 = load i32, i32* %image_height, align 4, !tbaa !59
  br label %for.inc14.us

for.inc14.us:                                     ; preds = %for.inc14.us.loopexit, %if.then.us
  %17 = phi i32 [ %.pre74, %for.inc14.us.loopexit ], [ %15, %if.then.us ]
  %inc.us = add i32 %row.071.us, 1
  %cmp.us = icmp ult i32 %inc.us, %17
  br i1 %cmp.us, label %if.then.us, label %for.end15.loopexit

if.end:                                           ; preds = %if.end.preheader, %for.inc14
  %row.071 = phi i32 [ %inc, %for.inc14 ], [ 0, %if.end.preheader ]
  %18 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !3
  %access_virt_sarray = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %18, i64 0, i32 7
  %19 = load i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)** %access_virt_sarray, align 8, !tbaa !63
  %20 = load %struct.jvirt_sarray_control*, %struct.jvirt_sarray_control** %5, align 8, !tbaa !47
  %call = tail call i8** %19(%struct.jpeg_common_struct* %4, %struct.jvirt_sarray_control* %20, i32 %row.071, i32 1, i32 1) #4
  %21 = load i64, i64* %6, align 8
  %22 = trunc i64 %21 to i32
  %cmp967 = icmp eq i32 %22, 0
  %23 = lshr i64 %21, 32
  %24 = trunc i64 %23 to i32
  br i1 %cmp967, label %for.inc14, label %for.body11.preheader

for.body11.preheader:                             ; preds = %if.end
  %25 = load i8*, i8** %call, align 8, !tbaa !30
  br label %for.body11

for.body11:                                       ; preds = %for.body11.preheader, %for.body11
  %sptr.069 = phi i8* [ %incdec.ptr, %for.body11 ], [ %25, %for.body11.preheader ]
  %col.068 = phi i32 [ %dec, %for.body11 ], [ %22, %for.body11.preheader ]
  %call12 = tail call fastcc i32 @LZWReadByte(%struct.gif_source_struct* %0)
  %conv13 = trunc i32 %call12 to i8
  %incdec.ptr = getelementptr inbounds i8, i8* %sptr.069, i64 1
  store i8 %conv13, i8* %sptr.069, align 1, !tbaa !26
  %dec = add i32 %col.068, -1
  %cmp9 = icmp eq i32 %dec, 0
  br i1 %cmp9, label %for.inc14.loopexit, label %for.body11

for.inc14.loopexit:                               ; preds = %for.body11
  %.pre = load i32, i32* %image_height, align 4, !tbaa !59
  br label %for.inc14

for.inc14:                                        ; preds = %for.inc14.loopexit, %if.end
  %26 = phi i32 [ %.pre, %for.inc14.loopexit ], [ %24, %if.end ]
  %inc = add i32 %row.071, 1
  %cmp = icmp ult i32 %inc, %26
  br i1 %cmp, label %if.end, label %for.end15.loopexit83

for.end15.loopexit:                               ; preds = %for.inc14.us
  %.lcssa = phi i32 [ %17, %for.inc14.us ]
  br label %for.end15

for.end15.loopexit83:                             ; preds = %for.inc14
  %.lcssa85 = phi i32 [ %26, %for.inc14 ]
  br label %for.end15

for.end15:                                        ; preds = %for.end15.loopexit83, %for.end15.loopexit, %entry
  %27 = phi i32 [ 0, %entry ], [ %.lcssa, %for.end15.loopexit ], [ %.lcssa85, %for.end15.loopexit83 ]
  br i1 %cmp2, label %if.then18, label %if.end20

if.then18:                                        ; preds = %for.end15
  %completed_extra_passes = getelementptr inbounds %struct.cdjpeg_progress_mgr, %struct.cdjpeg_progress_mgr* %2, i64 0, i32 1
  %28 = load i32, i32* %completed_extra_passes, align 8, !tbaa !64
  %inc19 = add nsw i32 %28, 1
  store i32 %inc19, i32* %completed_extra_passes, align 8, !tbaa !64
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %for.end15
  %get_pixel_rows = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 0, i32 1
  store i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)* @get_interlaced_row, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %get_pixel_rows, align 8, !tbaa !52
  %29 = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 8, i32 5
  store i32 0, i32* %29, align 8, !tbaa !65
  %add = add i32 %27, 7
  %div = lshr i32 %add, 3
  %pass2_offset = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %0, i64 0, i32 24
  store i32 %div, i32* %pass2_offset, align 4, !tbaa !66
  %add25 = add i32 %27, 3
  %div26 = lshr i32 %add25, 3
  %add27 = add nuw nsw i32 %div26, %div
  %pass3_offset = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 9
  %30 = bitcast %struct.cjpeg_source_struct* %pass3_offset to i32*
  store i32 %add27, i32* %30, align 8, !tbaa !67
  %add30 = add i32 %27, 1
  %div31 = lshr i32 %add30, 2
  %add32 = add nuw nsw i32 %div31, %add27
  %pass4_offset = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %0, i64 0, i32 26
  store i32 %add32, i32* %pass4_offset, align 4, !tbaa !68
  %call33 = tail call i32 @get_interlaced_row(%struct.jpeg_compress_struct* nonnull %cinfo, %struct.cjpeg_source_struct* %sinfo)
  ret i32 1
}

; Function Attrs: nounwind uwtable
define internal i32 @get_pixel_rows(%struct.jpeg_compress_struct* nocapture readonly %cinfo, %struct.cjpeg_source_struct* %sinfo) #0 !prof !2 {
entry:
  %0 = bitcast %struct.cjpeg_source_struct* %sinfo to %struct.gif_source_struct*
  %colormap1 = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 1, i32 1
  %1 = bitcast i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %colormap1 to i8***
  %2 = load i8**, i8*** %1, align 8, !tbaa !20
  %image_width = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 6
  %3 = load i32, i32* %image_width, align 8, !tbaa !58
  %cmp26 = icmp eq i32 %3, 0
  br i1 %cmp26, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %buffer = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 0, i32 4
  %4 = load i8**, i8*** %buffer, align 8, !tbaa !53
  %5 = load i8*, i8** %4, align 8, !tbaa !30
  %arrayidx5 = getelementptr inbounds i8*, i8** %2, i64 1
  %arrayidx9 = getelementptr inbounds i8*, i8** %2, i64 2
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %ptr.028 = phi i8* [ %5, %for.body.lr.ph ], [ %incdec.ptr11, %for.body ]
  %col.027 = phi i32 [ %3, %for.body.lr.ph ], [ %dec, %for.body ]
  %call = tail call fastcc i32 @LZWReadByte(%struct.gif_source_struct* %0)
  %idxprom = sext i32 %call to i64
  %6 = load i8*, i8** %2, align 8, !tbaa !30
  %arrayidx3 = getelementptr inbounds i8, i8* %6, i64 %idxprom
  %7 = load i8, i8* %arrayidx3, align 1, !tbaa !26
  %incdec.ptr = getelementptr inbounds i8, i8* %ptr.028, i64 1
  store i8 %7, i8* %ptr.028, align 1, !tbaa !26
  %8 = load i8*, i8** %arrayidx5, align 8, !tbaa !30
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom
  %9 = load i8, i8* %arrayidx6, align 1, !tbaa !26
  %incdec.ptr7 = getelementptr inbounds i8, i8* %ptr.028, i64 2
  store i8 %9, i8* %incdec.ptr, align 1, !tbaa !26
  %10 = load i8*, i8** %arrayidx9, align 8, !tbaa !30
  %arrayidx10 = getelementptr inbounds i8, i8* %10, i64 %idxprom
  %11 = load i8, i8* %arrayidx10, align 1, !tbaa !26
  %incdec.ptr11 = getelementptr inbounds i8, i8* %ptr.028, i64 3
  store i8 %11, i8* %incdec.ptr7, align 1, !tbaa !26
  %dec = add i32 %col.027, -1
  %cmp = icmp eq i32 %dec, 0
  br i1 %cmp, label %for.end.loopexit, label %for.body

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret i32 1
}

; Function Attrs: nounwind
declare i32 @_IO_getc(%struct._IO_FILE* nocapture) #3

; Function Attrs: nounwind uwtable
define internal fastcc void @SkipDataBlocks(%struct.gif_source_struct* nocapture readonly %sinfo) unnamed_addr #0 !prof !2 {
entry:
  %buf = alloca [256 x i8], align 16
  %0 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start(i64 256, i8* %0) #4
  %input_file.i.i = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 0, i32 3
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %input_file.i.i, align 8, !tbaa !21
  %call.i.i2 = tail call i32 @_IO_getc(%struct._IO_FILE* %1) #4
  %cmp.i.i3 = icmp eq i32 %call.i.i2, -1
  %.pre = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 1
  br i1 %cmp.i.i3, label %ReadByte.exit.thread.i, label %ReadByte.exit.i.preheader

ReadByte.exit.i.preheader:                        ; preds = %entry
  br label %ReadByte.exit.i

ReadByte.exit.thread.i.loopexit:                  ; preds = %while.cond.backedge
  br label %ReadByte.exit.thread.i

ReadByte.exit.thread.i:                           ; preds = %ReadByte.exit.thread.i.loopexit, %entry
  %2 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %.pre, align 8, !tbaa !14
  %err.i.i = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %2, i64 0, i32 0
  %3 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err.i.i, align 8, !tbaa !22
  %msg_code.i.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %3, i64 0, i32 5
  store i32 42, i32* %msg_code.i.i, align 8, !tbaa !23
  %error_exit.i.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %3, i64 0, i32 0
  %4 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit.i.i, align 8, !tbaa !25
  %5 = bitcast %struct.jpeg_compress_struct* %2 to %struct.jpeg_common_struct*
  tail call void %4(%struct.jpeg_common_struct* %5) #4
  br label %while.end

ReadByte.exit.i:                                  ; preds = %ReadByte.exit.i.preheader, %while.cond.backedge
  %call.i.i4 = phi i32 [ %call.i.i, %while.cond.backedge ], [ %call.i.i2, %ReadByte.exit.i.preheader ]
  %cmp.i = icmp sgt i32 %call.i.i4, 0
  br i1 %cmp.i, label %if.then.i, label %while.end.loopexit, !prof !69

if.then.i:                                        ; preds = %ReadByte.exit.i
  %conv.i = sext i32 %call.i.i4 to i64
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %input_file.i.i, align 8, !tbaa !21
  %call1.i = call i64 @fread(i8* %0, i64 1, i64 %conv.i, %struct._IO_FILE* %6) #4
  %cmp3.i = icmp eq i64 %call1.i, %conv.i
  br i1 %cmp3.i, label %while.cond.backedge, label %if.then5.i

while.cond.backedge:                              ; preds = %if.then.i, %if.then5.i
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %input_file.i.i, align 8, !tbaa !21
  %call.i.i = tail call i32 @_IO_getc(%struct._IO_FILE* %7) #4
  %cmp.i.i = icmp eq i32 %call.i.i, -1
  br i1 %cmp.i.i, label %ReadByte.exit.thread.i.loopexit, label %ReadByte.exit.i

if.then5.i:                                       ; preds = %if.then.i
  %8 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %.pre, align 8, !tbaa !14
  %err.i = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %8, i64 0, i32 0
  %9 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err.i, align 8, !tbaa !22
  %msg_code.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %9, i64 0, i32 5
  store i32 42, i32* %msg_code.i, align 8, !tbaa !23
  %error_exit.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %9, i64 0, i32 0
  %10 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit.i, align 8, !tbaa !25
  %11 = bitcast %struct.jpeg_compress_struct* %8 to %struct.jpeg_common_struct*
  tail call void %10(%struct.jpeg_common_struct* %11) #4
  br label %while.cond.backedge

while.end.loopexit:                               ; preds = %ReadByte.exit.i
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %ReadByte.exit.thread.i
  call void @llvm.lifetime.end(i64 256, i8* %0) #4
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @LZWReadByte(%struct.gif_source_struct* %sinfo) unnamed_addr #0 !prof !2 {
entry:
  %first_time = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 14
  %0 = load i32, i32* %first_time, align 4, !tbaa !41
  %tobool = icmp eq i32 %0, 0
  br i1 %tobool, label %if.else, label %if.end4.thread

if.end4.thread:                                   ; preds = %entry
  store i32 0, i32* %first_time, align 4, !tbaa !41
  %clear_code = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 9
  br label %if.then8

if.else:                                          ; preds = %entry
  %sp = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 20
  %1 = load i8*, i8** %sp, align 8, !tbaa !45
  %symbol_stack = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 19
  %2 = load i8*, i8** %symbol_stack, align 8, !tbaa !38
  %cmp = icmp ugt i8* %1, %2
  br i1 %cmp, label %if.then2, label %if.end4

if.then2:                                         ; preds = %if.else
  %incdec.ptr = getelementptr inbounds i8, i8* %1, i64 -1
  store i8* %incdec.ptr, i8** %sp, align 8, !tbaa !45
  %3 = load i8, i8* %incdec.ptr, align 1, !tbaa !26
  %conv = zext i8 %3 to i32
  br label %cleanup

if.end4:                                          ; preds = %if.else
  %call = tail call fastcc i32 @GetCode(%struct.gif_source_struct* nonnull %sinfo)
  %clear_code5.phi.trans.insert = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 9
  %4 = bitcast i32* %clear_code5.phi.trans.insert to i64*
  %.pre = load i64, i64* %4, align 8
  %5 = trunc i64 %.pre to i32
  %cmp6 = icmp eq i32 %call, %5
  br i1 %cmp6, label %if.then8, label %if.end21, !prof !70

if.then8:                                         ; preds = %if.end4.thread, %if.end4
  %clear_code5.pre-phi163 = phi i32* [ %clear_code, %if.end4.thread ], [ %clear_code5.phi.trans.insert, %if.end4 ]
  %input_code_size.i = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 8
  %6 = load i32, i32* %input_code_size.i, align 4, !tbaa !33
  %add.i = add nsw i32 %6, 1
  %code_size.i = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 11
  store i32 %add.i, i32* %code_size.i, align 8, !tbaa !42
  %7 = load i32, i32* %clear_code5.pre-phi163, align 8, !tbaa !39
  %shl.i = shl i32 %7, 1
  %limit_code.i = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 12
  store i32 %shl.i, i32* %limit_code.i, align 4, !tbaa !43
  %add2.i = add nsw i32 %7, 2
  %max_code.i = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 13
  store i32 %add2.i, i32* %max_code.i, align 8, !tbaa !44
  %symbol_stack.i = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 19
  %8 = bitcast i8** %symbol_stack.i to i64*
  %9 = load i64, i64* %8, align 8, !tbaa !38
  %sp.i = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 20
  %10 = bitcast i8** %sp.i to i64*
  store i64 %9, i64* %10, align 8, !tbaa !45
  br label %do.body

do.body:                                          ; preds = %do.body, %if.then8
  %call9 = tail call fastcc i32 @GetCode(%struct.gif_source_struct* nonnull %sinfo)
  %11 = load i32, i32* %clear_code5.pre-phi163, align 8, !tbaa !39
  %cmp11 = icmp eq i32 %call9, %11
  br i1 %cmp11, label %do.body, label %do.end

do.end:                                           ; preds = %do.body
  %.lcssa = phi i32 [ %11, %do.body ]
  %call9.lcssa = phi i32 [ %call9, %do.body ]
  %cmp14 = icmp sgt i32 %call9.lcssa, %.lcssa
  br i1 %cmp14, label %if.then16, label %if.end20

if.then16:                                        ; preds = %do.end
  %cinfo = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 1
  %12 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %cinfo, align 8, !tbaa !14
  %err = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %12, i64 0, i32 0
  %13 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8, !tbaa !22
  %msg_code = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %13, i64 0, i32 5
  store i32 1021, i32* %msg_code, align 8, !tbaa !23
  %emit_message = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %13, i64 0, i32 1
  %14 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %emit_message, align 8, !tbaa !29
  %15 = bitcast %struct.jpeg_compress_struct* %12 to %struct.jpeg_common_struct*
  tail call void %14(%struct.jpeg_common_struct* %15, i32 -1) #4
  br label %if.end20

if.end20:                                         ; preds = %if.then16, %do.end
  %code.1 = phi i32 [ 0, %if.then16 ], [ %call9.lcssa, %do.end ]
  %oldcode = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 15
  store i32 %code.1, i32* %oldcode, align 8, !tbaa !71
  %firstcode = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 16
  store i32 %code.1, i32* %firstcode, align 4, !tbaa !72
  br label %cleanup

if.end21:                                         ; preds = %if.end4
  %.in = lshr i64 %.pre, 32
  %16 = trunc i64 %.in to i32
  %cmp22 = icmp eq i32 %call, %16
  br i1 %cmp22, label %if.then24, label %if.end36

if.then24:                                        ; preds = %if.end21
  %out_of_blocks = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 7
  %17 = load i32, i32* %out_of_blocks, align 8, !tbaa !73
  %tobool25 = icmp eq i32 %17, 0
  br i1 %tobool25, label %if.then26, label %if.end28

if.then26:                                        ; preds = %if.then24
  tail call fastcc void @SkipDataBlocks(%struct.gif_source_struct* nonnull %sinfo)
  store i32 1, i32* %out_of_blocks, align 8, !tbaa !73
  br label %if.end28

if.end28:                                         ; preds = %if.then24, %if.then26
  %cinfo29 = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 1
  %18 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %cinfo29, align 8, !tbaa !14
  %err30 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %18, i64 0, i32 0
  %19 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err30, align 8, !tbaa !22
  %msg_code31 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %19, i64 0, i32 5
  store i32 1023, i32* %msg_code31, align 8, !tbaa !23
  %emit_message34 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %19, i64 0, i32 1
  %20 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %emit_message34, align 8, !tbaa !29
  %21 = bitcast %struct.jpeg_compress_struct* %18 to %struct.jpeg_common_struct*
  tail call void %20(%struct.jpeg_common_struct* %21, i32 -1) #4
  br label %cleanup

if.end36:                                         ; preds = %if.end21
  %max_code = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 13
  %22 = load i32, i32* %max_code, align 8, !tbaa !44
  %cmp37 = icmp slt i32 %call, %22
  br i1 %cmp37, label %while.cond.preheader, label %if.then39

if.then39:                                        ; preds = %if.end36
  %cmp41 = icmp sgt i32 %call, %22
  br i1 %cmp41, label %if.then43, label %if.end51

if.then43:                                        ; preds = %if.then39
  %cinfo44 = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 1
  %23 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %cinfo44, align 8, !tbaa !14
  %err45 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %23, i64 0, i32 0
  %24 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err45, align 8, !tbaa !22
  %msg_code46 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %24, i64 0, i32 5
  store i32 1021, i32* %msg_code46, align 8, !tbaa !23
  %emit_message49 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %24, i64 0, i32 1
  %25 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %emit_message49, align 8, !tbaa !29
  %26 = bitcast %struct.jpeg_compress_struct* %23 to %struct.jpeg_common_struct*
  tail call void %25(%struct.jpeg_common_struct* %26, i32 -1) #4
  br label %if.end51

if.end51:                                         ; preds = %if.then43, %if.then39
  %incode.0 = phi i32 [ 0, %if.then43 ], [ %call, %if.then39 ]
  %firstcode52 = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 16
  %27 = load i32, i32* %firstcode52, align 4, !tbaa !72
  %conv53 = trunc i32 %27 to i8
  %sp54 = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 20
  %28 = load i8*, i8** %sp54, align 8, !tbaa !45
  %incdec.ptr55 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %incdec.ptr55, i8** %sp54, align 8, !tbaa !45
  store i8 %conv53, i8* %28, align 1, !tbaa !26
  %oldcode56 = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 15
  %29 = load i32, i32* %oldcode56, align 8, !tbaa !71
  br label %while.cond.preheader

while.cond.preheader:                             ; preds = %if.end51, %if.end36
  %code.2.ph = phi i32 [ %call, %if.end36 ], [ %29, %if.end51 ]
  %incode.1.ph = phi i32 [ %call, %if.end36 ], [ %incode.0, %if.end51 ]
  %30 = load i32, i32* %clear_code5.phi.trans.insert, align 8, !tbaa !39
  %cmp59158 = icmp slt i32 %code.2.ph, %30
  br i1 %cmp59158, label %while.end, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %while.cond.preheader
  %symbol_tail = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 18
  %sp61 = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 20
  %symbol_head = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 17
  br label %while.body

while.body:                                       ; preds = %while.body.lr.ph, %while.body
  %code.2159 = phi i32 [ %code.2.ph, %while.body.lr.ph ], [ %conv65, %while.body ]
  %idxprom = sext i32 %code.2159 to i64
  %31 = load i8*, i8** %symbol_tail, align 8, !tbaa !37
  %arrayidx = getelementptr inbounds i8, i8* %31, i64 %idxprom
  %32 = load i8, i8* %arrayidx, align 1, !tbaa !26
  %33 = load i8*, i8** %sp61, align 8, !tbaa !45
  %incdec.ptr62 = getelementptr inbounds i8, i8* %33, i64 1
  store i8* %incdec.ptr62, i8** %sp61, align 8, !tbaa !45
  store i8 %32, i8* %33, align 1, !tbaa !26
  %34 = load i16*, i16** %symbol_head, align 8, !tbaa !36
  %arrayidx64 = getelementptr inbounds i16, i16* %34, i64 %idxprom
  %35 = load i16, i16* %arrayidx64, align 2, !tbaa !74
  %conv65 = zext i16 %35 to i32
  %36 = load i32, i32* %clear_code5.phi.trans.insert, align 8, !tbaa !39
  %cmp59 = icmp slt i32 %conv65, %36
  br i1 %cmp59, label %while.end.loopexit, label %while.body

while.end.loopexit:                               ; preds = %while.body
  %conv65.lcssa = phi i32 [ %conv65, %while.body ]
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %while.cond.preheader
  %code.2.lcssa = phi i32 [ %code.2.ph, %while.cond.preheader ], [ %conv65.lcssa, %while.end.loopexit ]
  %firstcode66 = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 16
  store i32 %code.2.lcssa, i32* %firstcode66, align 4, !tbaa !72
  %37 = load i32, i32* %max_code, align 8, !tbaa !44
  %cmp68 = icmp slt i32 %37, 4096
  %oldcode71 = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 15
  br i1 %cmp68, label %if.then70, label %if.end92

if.then70:                                        ; preds = %while.end
  %38 = bitcast i32* %oldcode71 to i64*
  %39 = load i64, i64* %38, align 8
  %conv72 = trunc i64 %39 to i16
  %idxprom73 = sext i32 %37 to i64
  %symbol_head74 = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 17
  %40 = load i16*, i16** %symbol_head74, align 8, !tbaa !36
  %arrayidx75 = getelementptr inbounds i16, i16* %40, i64 %idxprom73
  store i16 %conv72, i16* %arrayidx75, align 2, !tbaa !74
  %41 = lshr i64 %39, 32
  %conv77 = trunc i64 %41 to i8
  %symbol_tail79 = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 18
  %42 = load i8*, i8** %symbol_tail79, align 8, !tbaa !37
  %arrayidx80 = getelementptr inbounds i8, i8* %42, i64 %idxprom73
  store i8 %conv77, i8* %arrayidx80, align 1, !tbaa !26
  %43 = load i32, i32* %max_code, align 8, !tbaa !44
  %inc = add nsw i32 %43, 1
  store i32 %inc, i32* %max_code, align 8, !tbaa !44
  %limit_code = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 12
  %44 = load i32, i32* %limit_code, align 4, !tbaa !43
  %cmp83 = icmp slt i32 %inc, %44
  br i1 %cmp83, label %if.end92, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then70
  %code_size = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 11
  %45 = bitcast i32* %code_size to i64*
  %46 = load i64, i64* %45, align 8
  %47 = trunc i64 %46 to i32
  %cmp85 = icmp slt i32 %47, 12
  br i1 %cmp85, label %if.then87, label %if.end92

if.then87:                                        ; preds = %land.lhs.true
  %inc89 = add nsw i32 %47, 1
  store i32 %inc89, i32* %code_size, align 8, !tbaa !42
  %48 = lshr i64 %46, 31
  %.tr = trunc i64 %48 to i32
  %shl = and i32 %.tr, -2
  store i32 %shl, i32* %limit_code, align 4, !tbaa !43
  br label %if.end92

if.end92:                                         ; preds = %while.end, %if.then70, %land.lhs.true, %if.then87
  store i32 %incode.1.ph, i32* %oldcode71, align 8, !tbaa !71
  %49 = load i32, i32* %firstcode66, align 4, !tbaa !72
  br label %cleanup

cleanup:                                          ; preds = %if.end92, %if.end28, %if.end20, %if.then2
  %retval.0 = phi i32 [ %code.1, %if.end20 ], [ 0, %if.end28 ], [ %49, %if.end92 ], [ %conv, %if.then2 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i32 @get_interlaced_row(%struct.jpeg_compress_struct* %cinfo, %struct.cjpeg_source_struct* nocapture %sinfo) #0 !prof !2 {
entry:
  %colormap1 = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 1, i32 1
  %0 = bitcast i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %colormap1 to i8***
  %1 = load i8**, i8*** %0, align 8, !tbaa !20
  %2 = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 8, i32 5
  %3 = bitcast i32* %2 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = trunc i64 %4 to i32
  %and = and i32 %5, 7
  switch i32 %and, label %sw.default [
    i32 0, label %sw.bb
    i32 4, label %sw.bb3
    i32 2, label %sw.bb6
    i32 6, label %sw.bb6
  ]

sw.bb:                                            ; preds = %entry
  %shr = lshr i32 %5, 3
  br label %sw.epilog

sw.bb3:                                           ; preds = %entry
  %6 = lshr i64 %4, 32
  %7 = trunc i64 %6 to i32
  %shr5 = lshr i32 %5, 3
  %add = add i32 %7, %shr5
  br label %sw.epilog

sw.bb6:                                           ; preds = %entry, %entry
  %shr8 = lshr i32 %5, 2
  %pass3_offset = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 9
  %8 = bitcast %struct.cjpeg_source_struct* %pass3_offset to i32*
  %9 = load i32, i32* %8, align 8, !tbaa !67
  %add9 = add i32 %shr8, %9
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  %10 = bitcast %struct.cjpeg_source_struct* %sinfo to %struct.gif_source_struct*
  %shr11 = lshr i32 %5, 1
  %pass4_offset = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %10, i64 0, i32 26
  %11 = load i32, i32* %pass4_offset, align 4, !tbaa !68
  %add12 = add i32 %11, %shr11
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb6, %sw.bb3, %sw.bb
  %irow.0 = phi i32 [ %add12, %sw.default ], [ %add9, %sw.bb6 ], [ %add, %sw.bb3 ], [ %shr, %sw.bb ]
  %mem = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 1
  %12 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !3
  %access_virt_sarray = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %12, i64 0, i32 7
  %13 = load i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)** %access_virt_sarray, align 8, !tbaa !63
  %14 = bitcast %struct.jpeg_compress_struct* %cinfo to %struct.jpeg_common_struct*
  %interlaced_image = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 8, i32 4
  %15 = bitcast i8*** %interlaced_image to %struct.jvirt_sarray_control**
  %16 = load %struct.jvirt_sarray_control*, %struct.jvirt_sarray_control** %15, align 8, !tbaa !47
  %call = tail call i8** %13(%struct.jpeg_common_struct* %14, %struct.jvirt_sarray_control* %16, i32 %irow.0, i32 1, i32 0) #4
  %image_width = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 6
  %17 = load i32, i32* %image_width, align 8, !tbaa !58
  %cmp54 = icmp eq i32 %17, 0
  br i1 %cmp54, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %sw.epilog
  %buffer = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 0, i32 4
  %18 = load i8**, i8*** %buffer, align 8, !tbaa !53
  %19 = load i8*, i8** %18, align 8, !tbaa !30
  %20 = load i8*, i8** %call, align 8, !tbaa !30
  %arrayidx18 = getelementptr inbounds i8*, i8** %1, i64 1
  %arrayidx22 = getelementptr inbounds i8*, i8** %1, i64 2
  %xtraiter = and i32 %17, 1
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod, label %for.body.lr.ph.split, label %for.body.prol

for.body.prol:                                    ; preds = %for.body.lr.ph
  %incdec.ptr.prol = getelementptr inbounds i8, i8* %20, i64 1
  %21 = load i8, i8* %20, align 1, !tbaa !26
  %idxprom.prol = zext i8 %21 to i64
  %22 = load i8*, i8** %1, align 8, !tbaa !30
  %arrayidx15.prol = getelementptr inbounds i8, i8* %22, i64 %idxprom.prol
  %23 = load i8, i8* %arrayidx15.prol, align 1, !tbaa !26
  %incdec.ptr16.prol = getelementptr inbounds i8, i8* %19, i64 1
  store i8 %23, i8* %19, align 1, !tbaa !26
  %24 = load i8*, i8** %arrayidx18, align 8, !tbaa !30
  %arrayidx19.prol = getelementptr inbounds i8, i8* %24, i64 %idxprom.prol
  %25 = load i8, i8* %arrayidx19.prol, align 1, !tbaa !26
  %incdec.ptr20.prol = getelementptr inbounds i8, i8* %19, i64 2
  store i8 %25, i8* %incdec.ptr16.prol, align 1, !tbaa !26
  %26 = load i8*, i8** %arrayidx22, align 8, !tbaa !30
  %arrayidx23.prol = getelementptr inbounds i8, i8* %26, i64 %idxprom.prol
  %27 = load i8, i8* %arrayidx23.prol, align 1, !tbaa !26
  %incdec.ptr24.prol = getelementptr inbounds i8, i8* %19, i64 3
  store i8 %27, i8* %incdec.ptr20.prol, align 1, !tbaa !26
  %dec.prol = add i32 %17, -1
  br label %for.body.lr.ph.split

for.body.lr.ph.split:                             ; preds = %for.body.lr.ph, %for.body.prol
  %sptr.057.unr = phi i8* [ %20, %for.body.lr.ph ], [ %incdec.ptr.prol, %for.body.prol ]
  %col.056.unr = phi i32 [ %17, %for.body.lr.ph ], [ %dec.prol, %for.body.prol ]
  %ptr.055.unr = phi i8* [ %19, %for.body.lr.ph ], [ %incdec.ptr24.prol, %for.body.prol ]
  %28 = icmp eq i32 %17, 1
  br i1 %28, label %for.end.loopexit, label %for.body.lr.ph.split.split

for.body.lr.ph.split.split:                       ; preds = %for.body.lr.ph.split
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.lr.ph.split.split
  %sptr.057 = phi i8* [ %sptr.057.unr, %for.body.lr.ph.split.split ], [ %incdec.ptr.1, %for.body ]
  %col.056 = phi i32 [ %col.056.unr, %for.body.lr.ph.split.split ], [ %dec.1, %for.body ]
  %ptr.055 = phi i8* [ %ptr.055.unr, %for.body.lr.ph.split.split ], [ %incdec.ptr24.1, %for.body ]
  %incdec.ptr = getelementptr inbounds i8, i8* %sptr.057, i64 1
  %29 = load i8, i8* %sptr.057, align 1, !tbaa !26
  %idxprom = zext i8 %29 to i64
  %30 = load i8*, i8** %1, align 8, !tbaa !30
  %arrayidx15 = getelementptr inbounds i8, i8* %30, i64 %idxprom
  %31 = load i8, i8* %arrayidx15, align 1, !tbaa !26
  %incdec.ptr16 = getelementptr inbounds i8, i8* %ptr.055, i64 1
  store i8 %31, i8* %ptr.055, align 1, !tbaa !26
  %32 = load i8*, i8** %arrayidx18, align 8, !tbaa !30
  %arrayidx19 = getelementptr inbounds i8, i8* %32, i64 %idxprom
  %33 = load i8, i8* %arrayidx19, align 1, !tbaa !26
  %incdec.ptr20 = getelementptr inbounds i8, i8* %ptr.055, i64 2
  store i8 %33, i8* %incdec.ptr16, align 1, !tbaa !26
  %34 = load i8*, i8** %arrayidx22, align 8, !tbaa !30
  %arrayidx23 = getelementptr inbounds i8, i8* %34, i64 %idxprom
  %35 = load i8, i8* %arrayidx23, align 1, !tbaa !26
  %incdec.ptr24 = getelementptr inbounds i8, i8* %ptr.055, i64 3
  store i8 %35, i8* %incdec.ptr20, align 1, !tbaa !26
  %incdec.ptr.1 = getelementptr inbounds i8, i8* %sptr.057, i64 2
  %36 = load i8, i8* %incdec.ptr, align 1, !tbaa !26
  %idxprom.1 = zext i8 %36 to i64
  %37 = load i8*, i8** %1, align 8, !tbaa !30
  %arrayidx15.1 = getelementptr inbounds i8, i8* %37, i64 %idxprom.1
  %38 = load i8, i8* %arrayidx15.1, align 1, !tbaa !26
  %incdec.ptr16.1 = getelementptr inbounds i8, i8* %ptr.055, i64 4
  store i8 %38, i8* %incdec.ptr24, align 1, !tbaa !26
  %39 = load i8*, i8** %arrayidx18, align 8, !tbaa !30
  %arrayidx19.1 = getelementptr inbounds i8, i8* %39, i64 %idxprom.1
  %40 = load i8, i8* %arrayidx19.1, align 1, !tbaa !26
  %incdec.ptr20.1 = getelementptr inbounds i8, i8* %ptr.055, i64 5
  store i8 %40, i8* %incdec.ptr16.1, align 1, !tbaa !26
  %41 = load i8*, i8** %arrayidx22, align 8, !tbaa !30
  %arrayidx23.1 = getelementptr inbounds i8, i8* %41, i64 %idxprom.1
  %42 = load i8, i8* %arrayidx23.1, align 1, !tbaa !26
  %incdec.ptr24.1 = getelementptr inbounds i8, i8* %ptr.055, i64 6
  store i8 %42, i8* %incdec.ptr20.1, align 1, !tbaa !26
  %dec.1 = add i32 %col.056, -2
  %cmp.1 = icmp eq i32 %dec.1, 0
  br i1 %cmp.1, label %for.end.loopexit.unr-lcssa, label %for.body

for.end.loopexit.unr-lcssa:                       ; preds = %for.body
  br label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body.lr.ph.split, %for.end.loopexit.unr-lcssa
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %sw.epilog
  %43 = load i32, i32* %2, align 8, !tbaa !65
  %inc = add i32 %43, 1
  store i32 %inc, i32* %2, align 8, !tbaa !65
  ret i32 1
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @GetCode(%struct.gif_source_struct* nocapture %sinfo) unnamed_addr #0 !prof !2 {
entry:
  %cur_bit = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 6
  %0 = load i32, i32* %cur_bit, align 4, !tbaa !75
  %code_size = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 11
  %1 = load i32, i32* %code_size, align 8, !tbaa !42
  %add127 = add nsw i32 %1, %0
  %last_bit = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 5
  %2 = load i32, i32* %last_bit, align 8, !tbaa !76
  %cmp128 = icmp sgt i32 %add127, %2
  br i1 %cmp128, label %while.body.lr.ph, label %while.end

while.body.lr.ph:                                 ; preds = %entry
  %out_of_blocks = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 7
  %last_byte = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 4
  %arrayidx5 = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 3, i64 0
  %arrayidx12 = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 3, i64 1
  %arrayidx14 = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 3, i64 2
  %input_file.i.i = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 0, i32 3
  %cinfo.i.i = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 1
  br label %while.body

while.body:                                       ; preds = %while.body.lr.ph, %if.end26
  %3 = load i32, i32* %out_of_blocks, align 8, !tbaa !73
  %tobool = icmp eq i32 %3, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %while.body
  %4 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %cinfo.i.i, align 8, !tbaa !14
  %err = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %4, i64 0, i32 0
  %5 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8, !tbaa !22
  %msg_code = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %5, i64 0, i32 5
  store i32 1024, i32* %msg_code, align 8, !tbaa !23
  %emit_message = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %5, i64 0, i32 1
  %6 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %emit_message, align 8, !tbaa !29
  %7 = bitcast %struct.jpeg_compress_struct* %4 to %struct.jpeg_common_struct*
  tail call void %6(%struct.jpeg_common_struct* %7, i32 -1) #4
  %end_code = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 10
  %8 = load i32, i32* %end_code, align 4, !tbaa !40
  br label %cleanup

if.end:                                           ; preds = %while.body
  %9 = load i32, i32* %last_byte, align 4, !tbaa !77
  %sub = add nsw i32 %9, -2
  %idxprom = sext i32 %sub to i64
  %arrayidx = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 3, i64 %idxprom
  %10 = load i8, i8* %arrayidx, align 1, !tbaa !26
  store i8 %10, i8* %arrayidx5, align 8, !tbaa !26
  %sub7 = add nsw i32 %9, -1
  %idxprom8 = sext i32 %sub7 to i64
  %arrayidx10 = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 3, i64 %idxprom8
  %11 = load i8, i8* %arrayidx10, align 1, !tbaa !26
  store i8 %11, i8* %arrayidx12, align 1, !tbaa !26
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %input_file.i.i, align 8, !tbaa !21
  %call.i.i = tail call i32 @_IO_getc(%struct._IO_FILE* %12) #4
  %cmp.i.i = icmp eq i32 %call.i.i, -1
  br i1 %cmp.i.i, label %ReadByte.exit.thread.i, label %ReadByte.exit.i

ReadByte.exit.thread.i:                           ; preds = %if.end
  %13 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %cinfo.i.i, align 8, !tbaa !14
  %err.i.i = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %13, i64 0, i32 0
  %14 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err.i.i, align 8, !tbaa !22
  %msg_code.i.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %14, i64 0, i32 5
  store i32 42, i32* %msg_code.i.i, align 8, !tbaa !23
  %error_exit.i.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %14, i64 0, i32 0
  %15 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit.i.i, align 8, !tbaa !25
  %16 = bitcast %struct.jpeg_compress_struct* %13 to %struct.jpeg_common_struct*
  tail call void %15(%struct.jpeg_common_struct* %16) #4
  br label %if.end26

ReadByte.exit.i:                                  ; preds = %if.end
  %cmp.i = icmp sgt i32 %call.i.i, 0
  br i1 %cmp.i, label %if.then.i, label %GetDataBlock.exit, !prof !69

if.then.i:                                        ; preds = %ReadByte.exit.i
  %conv.i = sext i32 %call.i.i to i64
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %input_file.i.i, align 8, !tbaa !21
  %call1.i = tail call i64 @fread(i8* nonnull %arrayidx14, i64 1, i64 %conv.i, %struct._IO_FILE* %17) #4
  %cmp3.i = icmp eq i64 %call1.i, %conv.i
  br i1 %cmp3.i, label %if.end26, label %if.then5.i

if.then5.i:                                       ; preds = %if.then.i
  %18 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %cinfo.i.i, align 8, !tbaa !14
  %err.i = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %18, i64 0, i32 0
  %19 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err.i, align 8, !tbaa !22
  %msg_code.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %19, i64 0, i32 5
  store i32 42, i32* %msg_code.i, align 8, !tbaa !23
  %error_exit.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %19, i64 0, i32 0
  %20 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit.i, align 8, !tbaa !25
  %21 = bitcast %struct.jpeg_compress_struct* %18 to %struct.jpeg_common_struct*
  tail call void %20(%struct.jpeg_common_struct* %21) #4
  br label %if.end26

GetDataBlock.exit:                                ; preds = %ReadByte.exit.i
  %cmp15 = icmp eq i32 %call.i.i, 0
  br i1 %cmp15, label %if.then16, label %if.end26, !prof !69

if.then16:                                        ; preds = %GetDataBlock.exit
  store i32 1, i32* %out_of_blocks, align 8, !tbaa !73
  %22 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %cinfo.i.i, align 8, !tbaa !14
  %err19 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %22, i64 0, i32 0
  %23 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err19, align 8, !tbaa !22
  %msg_code20 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %23, i64 0, i32 5
  store i32 1024, i32* %msg_code20, align 8, !tbaa !23
  %emit_message23 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %23, i64 0, i32 1
  %24 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %emit_message23, align 8, !tbaa !29
  %25 = bitcast %struct.jpeg_compress_struct* %22 to %struct.jpeg_common_struct*
  tail call void %24(%struct.jpeg_common_struct* %25, i32 -1) #4
  %end_code25 = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 10
  %26 = load i32, i32* %end_code25, align 4, !tbaa !40
  br label %cleanup

if.end26:                                         ; preds = %if.then5.i, %if.then.i, %ReadByte.exit.thread.i, %GetDataBlock.exit
  %27 = load i32, i32* %cur_bit, align 4, !tbaa !75
  %28 = load i32, i32* %last_bit, align 8, !tbaa !76
  %sub29 = add i32 %27, 16
  %add30 = sub i32 %sub29, %28
  store i32 %add30, i32* %cur_bit, align 4, !tbaa !75
  %add32 = add nsw i32 %call.i.i, 2
  store i32 %add32, i32* %last_byte, align 4, !tbaa !77
  %mul = shl nsw i32 %add32, 3
  store i32 %mul, i32* %last_bit, align 8, !tbaa !76
  %29 = load i32, i32* %code_size, align 8, !tbaa !42
  %add = add nsw i32 %29, %add30
  %cmp = icmp sgt i32 %add, %mul
  br i1 %cmp, label %while.body, label %while.end.loopexit

while.end.loopexit:                               ; preds = %if.end26
  %add.lcssa141 = phi i32 [ %add, %if.end26 ]
  %.lcssa140 = phi i32 [ %29, %if.end26 ]
  %add30.lcssa = phi i32 [ %add30, %if.end26 ]
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %entry
  %add.lcssa = phi i32 [ %add127, %entry ], [ %add.lcssa141, %while.end.loopexit ]
  %.lcssa121 = phi i32 [ %1, %entry ], [ %.lcssa140, %while.end.loopexit ]
  %.lcssa = phi i32 [ %0, %entry ], [ %add30.lcssa, %while.end.loopexit ]
  %shr = ashr i32 %.lcssa, 3
  %add37 = add nsw i32 %shr, 2
  %idxprom38 = sext i32 %add37 to i64
  %arrayidx40 = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 3, i64 %idxprom38
  %30 = load i8, i8* %arrayidx40, align 1, !tbaa !26
  %conv41 = zext i8 %30 to i64
  %shl = shl nuw nsw i64 %conv41, 8
  %add42 = add nsw i32 %shr, 1
  %idxprom43 = sext i32 %add42 to i64
  %arrayidx45 = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 3, i64 %idxprom43
  %31 = load i8, i8* %arrayidx45, align 1, !tbaa !26
  %conv48 = zext i8 %31 to i64
  %or = or i64 %shl, %conv48
  %shl49 = shl nuw nsw i64 %or, 8
  %idxprom50 = sext i32 %shr to i64
  %arrayidx52 = getelementptr inbounds %struct.gif_source_struct, %struct.gif_source_struct* %sinfo, i64 0, i32 3, i64 %idxprom50
  %32 = load i8, i8* %arrayidx52, align 1, !tbaa !26
  %conv55 = zext i8 %32 to i64
  %or56 = or i64 %shl49, %conv55
  %and58 = and i32 %.lcssa, 7
  %sh_prom = zext i32 %and58 to i64
  %shr59 = lshr i64 %or56, %sh_prom
  %conv60 = trunc i64 %shr59 to i32
  %shl62 = shl i32 1, %.lcssa121
  %sub63 = add nsw i32 %shl62, -1
  %and64 = and i32 %conv60, %sub63
  store i32 %add.lcssa, i32* %cur_bit, align 4, !tbaa !75
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then16, %if.then
  %retval.0 = phi i32 [ %8, %if.then ], [ %26, %if.then16 ], [ %and64, %while.end ]
  ret i32 %retval.0
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readnone uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"MaxFunctionCount", i32 150581}
!1 = !{!"clang version 3.8.0 (trunk 257473)"}
!2 = !{!"function_entry_count", i64 0}
!3 = !{!4, !5, i64 8}
!4 = !{!"jpeg_compress_struct", !5, i64 0, !5, i64 8, !5, i64 16, !8, i64 24, !8, i64 28, !5, i64 32, !8, i64 40, !8, i64 44, !8, i64 48, !6, i64 52, !9, i64 56, !8, i64 64, !8, i64 68, !6, i64 72, !5, i64 80, !6, i64 88, !6, i64 120, !6, i64 152, !6, i64 184, !6, i64 200, !6, i64 216, !8, i64 232, !5, i64 240, !8, i64 248, !8, i64 252, !8, i64 256, !8, i64 260, !8, i64 264, !6, i64 268, !8, i64 272, !8, i64 276, !8, i64 280, !6, i64 284, !10, i64 286, !10, i64 288, !8, i64 292, !8, i64 296, !8, i64 300, !8, i64 304, !8, i64 308, !8, i64 312, !8, i64 316, !6, i64 320, !8, i64 352, !8, i64 356, !8, i64 360, !6, i64 364, !8, i64 404, !8, i64 408, !8, i64 412, !8, i64 416, !5, i64 424, !5, i64 432, !5, i64 440, !5, i64 448, !5, i64 456, !5, i64 464, !5, i64 472, !5, i64 480, !5, i64 488}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = !{!"int", !6, i64 0}
!9 = !{!"double", !6, i64 0}
!10 = !{!"short", !6, i64 0}
!11 = !{!12, !5, i64 0}
!12 = !{!"jpeg_memory_mgr", !5, i64 0, !5, i64 8, !5, i64 16, !5, i64 24, !5, i64 32, !5, i64 40, !5, i64 48, !5, i64 56, !5, i64 64, !5, i64 72, !5, i64 80, !13, i64 88}
!13 = !{!"long", !6, i64 0}
!14 = !{!15, !5, i64 48}
!15 = !{!"", !16, i64 0, !5, i64 48, !5, i64 56, !6, i64 64, !8, i64 324, !8, i64 328, !8, i64 332, !8, i64 336, !8, i64 340, !8, i64 344, !8, i64 348, !8, i64 352, !8, i64 356, !8, i64 360, !8, i64 364, !8, i64 368, !8, i64 372, !5, i64 376, !5, i64 384, !5, i64 392, !5, i64 400, !8, i64 408, !5, i64 416, !8, i64 424, !8, i64 428, !8, i64 432, !8, i64 436}
!16 = !{!"cjpeg_source_struct", !5, i64 0, !5, i64 8, !5, i64 16, !5, i64 24, !5, i64 32, !8, i64 40}
!17 = !{!15, !5, i64 0}
!18 = !{!15, !5, i64 16}
!19 = !{!12, !5, i64 16}
!20 = !{!15, !5, i64 56}
!21 = !{!15, !5, i64 24}
!22 = !{!4, !5, i64 0}
!23 = !{!24, !8, i64 40}
!24 = !{!"jpeg_error_mgr", !5, i64 0, !5, i64 8, !5, i64 16, !5, i64 24, !5, i64 32, !8, i64 40, !6, i64 44, !8, i64 124, !13, i64 128, !5, i64 136, !8, i64 144, !5, i64 152, !8, i64 160, !8, i64 164}
!25 = !{!24, !5, i64 0}
!26 = !{!6, !6, i64 0}
!27 = !{!"branch_weights", i32 536870912, i32 -2147483648, i32 1610612736}
!28 = !{!8, !8, i64 0}
!29 = !{!24, !5, i64 8}
!30 = !{!5, !5, i64 0}
!31 = !{!"branch_weights", i32 0, i32 -2147483647, i32 1024811817, i32 1024811817, i32 97860015}
!32 = !{!15, !8, i64 408}
!33 = !{!15, !8, i64 340}
!34 = !{!"branch_weights", i32 466844272, i32 1680639376}
!35 = !{!12, !5, i64 8}
!36 = !{!15, !5, i64 376}
!37 = !{!15, !5, i64 384}
!38 = !{!15, !5, i64 392}
!39 = !{!15, !8, i64 344}
!40 = !{!15, !8, i64 348}
!41 = !{!15, !8, i64 364}
!42 = !{!15, !8, i64 352}
!43 = !{!15, !8, i64 356}
!44 = !{!15, !8, i64 360}
!45 = !{!15, !5, i64 400}
!46 = !{!12, !5, i64 32}
!47 = !{!15, !5, i64 416}
!48 = !{!4, !5, i64 16}
!49 = !{!50, !8, i64 36}
!50 = !{!"cdjpeg_progress_mgr", !51, i64 0, !8, i64 32, !8, i64 36, !8, i64 40}
!51 = !{!"jpeg_progress_mgr", !5, i64 0, !13, i64 8, !13, i64 16, !8, i64 24, !8, i64 28}
!52 = !{!15, !5, i64 8}
!53 = !{!15, !5, i64 32}
!54 = !{!15, !8, i64 40}
!55 = !{!4, !6, i64 52}
!56 = !{!4, !8, i64 48}
!57 = !{!4, !8, i64 64}
!58 = !{!4, !8, i64 40}
!59 = !{!4, !8, i64 44}
!60 = !{!50, !13, i64 8}
!61 = !{!50, !13, i64 16}
!62 = !{!50, !5, i64 0}
!63 = !{!12, !5, i64 56}
!64 = !{!50, !8, i64 32}
!65 = !{!15, !8, i64 424}
!66 = !{!15, !8, i64 428}
!67 = !{!15, !8, i64 432}
!68 = !{!15, !8, i64 436}
!69 = !{!"branch_weights", i32 -2147483648, i32 0}
!70 = !{!"branch_weights", i32 0, i32 -2147483648}
!71 = !{!15, !8, i64 368}
!72 = !{!15, !8, i64 372}
!73 = !{!15, !8, i64 336}
!74 = !{!10, !10, i64 0}
!75 = !{!15, !8, i64 332}
!76 = !{!15, !8, i64 328}
!77 = !{!15, !8, i64 324}
