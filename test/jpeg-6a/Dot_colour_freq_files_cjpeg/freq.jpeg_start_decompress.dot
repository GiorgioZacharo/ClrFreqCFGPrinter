digraph "CFG for 'jpeg_start_decompress' function" {
	label="CFG for 'jpeg_start_decompress' function";

	Node0x52d0270 [shape=record, style = filled, fillcolor = blue, label="{entry:\l  %global_state = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 4\l  %0 = load i32, i32* %global_state, align 4, !tbaa !2\l  switch i32 %0, label %if.then40 [\l    i32 202, label %if.then\l    i32 203, label %if.then7\l    i32 204, label %if.end45.thread\l  ]\l|{<s0>def|<s1>202|<s2>203|<s3>204}}"];
	Node0x52d0270:s0 -> Node0x52d4de0;
	Node0x52d0270:s1 -> Node0x52d4f00;
	Node0x52d0270:s2 -> Node0x52d5010;
	Node0x52d0270:s3 -> Node0x52d5130;
	Node0x52d5130 [shape=record, style = filled, fillcolor = blue, label="{if.end45.thread:                                  \l  %.pre62.i79 = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 73\l  br label %while.cond.preheader.i\l}"];
	Node0x52d5130 -> Node0x52d5480;
	Node0x52d4f00 [shape=record, style = filled, fillcolor = blue, label="{if.then:                                          \l  tail call void @jinit_master_decompress(%struct.jpeg_decompress_struct*\l... nonnull %cinfo) #3\l  %buffered_image = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 14\l  %1 = load i32, i32* %buffered_image, align 8, !tbaa !10\l  %tobool = icmp eq i32 %1, 0\l  br i1 %tobool, label %if.end4.thread, label %if.then1\l|{<s0>T|<s1>F}}"];
	Node0x52d4f00:s0 -> Node0x52d5b80;
	Node0x52d4f00:s1 -> Node0x52d5c60;
	Node0x52d5c60 [shape=record, style = filled, fillcolor = blue, label="{if.then1:                                         \l  store i32 207, i32* %global_state, align 4, !tbaa !2\l  br label %return\l}"];
	Node0x52d5c60 -> Node0x52d0170;
	Node0x52d5b80 [shape=record, style = filled, fillcolor = blue, label="{if.end4.thread:                                   \l  store i32 203, i32* %global_state, align 4, !tbaa !2\l  br label %if.then7\l}"];
	Node0x52d5b80 -> Node0x52d5010;
	Node0x52d5010 [shape=record, style = filled, fillcolor = blue, label="{if.then7:                                         \l  %inputctl = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 77\l  %2 = load %struct.jpeg_input_controller*, %struct.jpeg_input_controller**\l... %inputctl, align 8, !tbaa !11\l  %has_multiple_scans = getelementptr inbounds %struct.jpeg_input_controller,\l... %struct.jpeg_input_controller* %2, i64 0, i32 4\l  %3 = load i32, i32* %has_multiple_scans, align 8, !tbaa !12\l  %tobool8 = icmp eq i32 %3, 0\l  br i1 %tobool8, label %if.end36, label %for.cond.preheader\l|{<s0>T|<s1>F}}"];
	Node0x52d5010:s0 -> Node0x52d6c70;
	Node0x52d5010:s1 -> Node0x52d6d50;
	Node0x52d6d50 [shape=record, style = filled, fillcolor = blue, label="{for.cond.preheader:                               \l  %progress = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 2\l  %4 = bitcast %struct.jpeg_input_controller** %inputctl to i32\l... (%struct.jpeg_decompress_struct*)***\l  %total_iMCU_rows = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 60\l  %5 = bitcast %struct.jpeg_decompress_struct* %cinfo to\l... %struct.jpeg_common_struct*\l  %.pre = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr**\l... %progress, align 8, !tbaa !14\l  br label %for.cond\l}"];
	Node0x52d6d50 -> Node0x52d72e0;
	Node0x52d72e0 [shape=record, style = filled, fillcolor = blue, label="{for.cond:                                         \l  %6 = phi %struct.jpeg_progress_mgr* [ %.pre, %for.cond.preheader ], [ %10,\l... %for.cond.backedge ]\l  %cmp10 = icmp eq %struct.jpeg_progress_mgr* %6, null\l  br i1 %cmp10, label %if.end14, label %if.then11\l|{<s0>T|<s1>F}}"];
	Node0x52d72e0:s0 -> Node0x52d5ce0;
	Node0x52d72e0:s1 -> Node0x52d5dc0;
	Node0x52d5dc0 [shape=record, style = filled, fillcolor = blue, label="{if.then11:                                        \l  %progress_monitor13 = bitcast %struct.jpeg_progress_mgr* %6 to void\l... (%struct.jpeg_common_struct*)**\l  %7 = load void (%struct.jpeg_common_struct*)*, void\l... (%struct.jpeg_common_struct*)** %progress_monitor13, align 8, !tbaa !15\l  tail call void %7(%struct.jpeg_common_struct* %5) #3\l  br label %if.end14\l}"];
	Node0x52d5dc0 -> Node0x52d5ce0;
	Node0x52d5ce0 [shape=record, style = filled, fillcolor = blue, label="{if.end14:                                         \l  %8 = load i32 (%struct.jpeg_decompress_struct*)**, i32\l... (%struct.jpeg_decompress_struct*)*** %4, align 8, !tbaa !11\l  %9 = load i32 (%struct.jpeg_decompress_struct*)*, i32\l... (%struct.jpeg_decompress_struct*)** %8, align 8, !tbaa !18\l  %call = tail call i32 %9(%struct.jpeg_decompress_struct* nonnull %cinfo) #3\l  switch i32 %call, label %if.end22 [\l    i32 0, label %return.loopexit85\l    i32 2, label %if.end36.loopexit\l  ]\l|{<s0>def|<s1>0|<s2>2}}"];
	Node0x52d5ce0:s0 -> Node0x52d8ac0;
	Node0x52d5ce0:s1 -> Node0x52d8ba0;
	Node0x52d5ce0:s2 -> Node0x52d8ca0;
	Node0x52d8ac0 [shape=record, style = filled, fillcolor = blue, label="{if.end22:                                         \l  %10 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr**\l... %progress, align 8, !tbaa !14\l  %cmp24 = icmp ne %struct.jpeg_progress_mgr* %10, null\l  %11 = or i32 %call, 2\l  %12 = icmp eq i32 %11, 3\l  %or.cond = and i1 %12, %cmp24\l  br i1 %or.cond, label %if.then27, label %for.cond.backedge\l|{<s0>T|<s1>F}}"];
	Node0x52d8ac0:s0 -> Node0x52d96d0;
	Node0x52d8ac0:s1 -> Node0x52d74a0;
	Node0x52d74a0 [shape=record, style = filled, fillcolor = blue, label="{for.cond.backedge:                                \l  br label %for.cond\l}"];
	Node0x52d74a0 -> Node0x52d72e0;
	Node0x52d96d0 [shape=record, style = filled, fillcolor = blue, label="{if.then27:                                        \l  %pass_counter = getelementptr inbounds %struct.jpeg_progress_mgr,\l... %struct.jpeg_progress_mgr* %10, i64 0, i32 1\l  %13 = load i64, i64* %pass_counter, align 8, !tbaa !19\l  %inc = add nsw i64 %13, 1\l  store i64 %inc, i64* %pass_counter, align 8, !tbaa !19\l  %pass_limit = getelementptr inbounds %struct.jpeg_progress_mgr,\l... %struct.jpeg_progress_mgr* %10, i64 0, i32 2\l  %14 = load i64, i64* %pass_limit, align 8, !tbaa !20\l  %cmp30 = icmp slt i64 %inc, %14\l  br i1 %cmp30, label %for.cond.backedge, label %if.then31\l|{<s0>T|<s1>F}}"];
	Node0x52d96d0:s0 -> Node0x52d74a0;
	Node0x52d96d0:s1 -> Node0x52da4c0;
	Node0x52da4c0 [shape=record, style = filled, fillcolor = blue, label="{if.then31:                                        \l  %15 = load i32, i32* %total_iMCU_rows, align 8, !tbaa !21\l  %conv = zext i32 %15 to i64\l  %add = add nsw i64 %conv, %14\l  store i64 %add, i64* %pass_limit, align 8, !tbaa !20\l  br label %for.cond.backedge\l}"];
	Node0x52da4c0 -> Node0x52d74a0;
	Node0x52d8ca0 [shape=record, style = filled, fillcolor = blue, label="{if.end36.loopexit:                                \l  br label %if.end36\l}"];
	Node0x52d8ca0 -> Node0x52d6c70;
	Node0x52d6c70 [shape=record, style = filled, fillcolor = blue, label="{if.end36:                                         \l  %input_scan_number = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 34\l  %16 = load i32, i32* %input_scan_number, align 4, !tbaa !22\l  %output_scan_number = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 36\l  store i32 %16, i32* %output_scan_number, align 4, !tbaa !23\l  br label %if.end45\l}"];
	Node0x52d6c70 -> Node0x52db500;
	Node0x52d4de0 [shape=record, style = filled, fillcolor = blue, label="{if.then40:                                        \l  %err = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0\l  %17 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8,\l... !tbaa !24\l  %msg_code = getelementptr inbounds %struct.jpeg_error_mgr,\l... %struct.jpeg_error_mgr* %17, i64 0, i32 5\l  store i32 18, i32* %msg_code, align 8, !tbaa !25\l  %arrayidx = getelementptr inbounds %struct.jpeg_error_mgr,\l... %struct.jpeg_error_mgr* %17, i64 0, i32 6, i32 0, i64 0\l  store i32 %0, i32* %arrayidx, align 4, !tbaa !27\l  %error_exit = getelementptr inbounds %struct.jpeg_error_mgr,\l... %struct.jpeg_error_mgr* %17, i64 0, i32 0\l  %18 = load void (%struct.jpeg_common_struct*)*, void\l... (%struct.jpeg_common_struct*)** %error_exit, align 8, !tbaa !28\l  %19 = bitcast %struct.jpeg_decompress_struct* %cinfo to\l... %struct.jpeg_common_struct*\l  tail call void %18(%struct.jpeg_common_struct* %19) #3\l  br label %if.end45\l}"];
	Node0x52d4de0 -> Node0x52db500;
	Node0x52db500 [shape=record, style = filled, fillcolor = blue, label="{if.end45:                                         \l  %.pr = load i32, i32* %global_state, align 4, !tbaa !2\l  %cmp.i = icmp eq i32 %.pr, 204\l  %.pre62.i = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 73\l  br i1 %cmp.i, label %while.cond.preheader.i, label %if.then.i\l|{<s0>T|<s1>F}}"];
	Node0x52db500:s0 -> Node0x52d5480;
	Node0x52db500:s1 -> Node0x52dcac0;
	Node0x52dcac0 [shape=record, style = filled, fillcolor = blue, label="{if.then.i:                                        \l  %20 = load %struct.jpeg_decomp_master*, %struct.jpeg_decomp_master**\l... %.pre62.i, align 8, !tbaa !29\l  %prepare_for_output_pass.i = getelementptr inbounds\l... %struct.jpeg_decomp_master, %struct.jpeg_decomp_master* %20, i64 0, i32 0\l  %21 = load void (%struct.jpeg_decompress_struct*)*, void\l... (%struct.jpeg_decompress_struct*)** %prepare_for_output_pass.i, align 8,\l... !tbaa !30\l  tail call void %21(%struct.jpeg_decompress_struct* nonnull %cinfo) #3\l  %output_scanline.i = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 33\l  store i32 0, i32* %output_scanline.i, align 8, !tbaa !32\l  store i32 204, i32* %global_state, align 4, !tbaa !2\l  br label %while.cond.preheader.i\l}"];
	Node0x52dcac0 -> Node0x52d5480;
	Node0x52d5480 [shape=record, style = filled, fillcolor = blue, label="{while.cond.preheader.i:                           \l  %.pre62.i80 = phi %struct.jpeg_decomp_master** [ %.pre62.i79,\l... %if.end45.thread ], [ %.pre62.i, %if.then.i ], [ %.pre62.i, %if.end45 ]\l  %22 = load %struct.jpeg_decomp_master*, %struct.jpeg_decomp_master**\l... %.pre62.i80, align 8, !tbaa !29\l  %is_dummy_pass59.i = getelementptr inbounds %struct.jpeg_decomp_master,\l... %struct.jpeg_decomp_master* %22, i64 0, i32 2\l  %23 = load i32, i32* %is_dummy_pass59.i, align 8, !tbaa !33\l  %tobool60.i = icmp eq i32 %23, 0\l  br i1 %tobool60.i, label %while.end28.i, label %while.cond3.preheader.lr.ph.i\l|{<s0>T|<s1>F}}"];
	Node0x52d5480:s0 -> Node0x52ddea0;
	Node0x52d5480:s1 -> Node0x52ddfb0;
	Node0x52ddfb0 [shape=record, style = filled, fillcolor = blue, label="{while.cond3.preheader.lr.ph.i:                    \l  %output_scanline4.i = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 33\l  %output_height.i = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 27\l  %progress.i = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 2\l  %main.i = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 74\l  %24 = bitcast %struct.jpeg_decompress_struct* %cinfo to\l... %struct.jpeg_common_struct*\l  %.pre.i = load i32, i32* %output_scanline4.i, align 8, !tbaa !32\l  br label %while.cond3.i\l}"];
	Node0x52ddfb0 -> Node0x52deb50;
	Node0x52deb50 [shape=record, style = filled, fillcolor = blue, label="{while.cond3.i:                                    \l  %25 = phi i32 [ %.pre.i, %while.cond3.preheader.lr.ph.i ], [ %.be,\l... %while.cond3.i.backedge ]\l  %26 = load i32, i32* %output_height.i, align 4, !tbaa !34\l  %cmp5.i = icmp ult i32 %25, %26\l  br i1 %cmp5.i, label %while.body6.i, label %while.end.i\l|{<s0>T|<s1>F}}"];
	Node0x52deb50:s0 -> Node0x52df0a0;
	Node0x52deb50:s1 -> Node0x52df150;
	Node0x52df0a0 [shape=record, style = filled, fillcolor = blue, label="{while.body6.i:                                    \l  %27 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr**\l... %progress.i, align 8, !tbaa !14\l  %cmp7.i = icmp eq %struct.jpeg_progress_mgr* %27, null\l  br i1 %cmp7.i, label %if.end16.i, label %if.then8.i\l|{<s0>T|<s1>F}}"];
	Node0x52df0a0:s0 -> Node0x52df360;
	Node0x52df0a0:s1 -> Node0x52df440;
	Node0x52df440 [shape=record, style = filled, fillcolor = blue, label="{if.then8.i:                                       \l  %28 = bitcast %struct.jpeg_progress_mgr* %27 to void\l... (%struct.jpeg_common_struct*)**\l  %conv.i = zext i32 %25 to i64\l  %pass_counter.i = getelementptr inbounds %struct.jpeg_progress_mgr,\l... %struct.jpeg_progress_mgr* %27, i64 0, i32 1\l  store i64 %conv.i, i64* %pass_counter.i, align 8, !tbaa !19\l  %conv12.i = zext i32 %26 to i64\l  %pass_limit.i = getelementptr inbounds %struct.jpeg_progress_mgr,\l... %struct.jpeg_progress_mgr* %27, i64 0, i32 2\l  store i64 %conv12.i, i64* %pass_limit.i, align 8, !tbaa !20\l  %29 = load void (%struct.jpeg_common_struct*)*, void\l... (%struct.jpeg_common_struct*)** %28, align 8, !tbaa !15\l  tail call void %29(%struct.jpeg_common_struct* nonnull %24) #3\l  %.pre61.i = load i32, i32* %output_scanline4.i, align 8, !tbaa !32\l  br label %if.end16.i\l}"];
	Node0x52df440 -> Node0x52df360;
	Node0x52df360 [shape=record, style = filled, fillcolor = blue, label="{if.end16.i:                                       \l  %30 = phi i32 [ %25, %while.body6.i ], [ %.pre61.i, %if.then8.i ]\l  %31 = load %struct.jpeg_d_main_controller*, %struct.jpeg_d_main_controller**\l... %main.i, align 8, !tbaa !35\l  %process_data.i = getelementptr inbounds %struct.jpeg_d_main_controller,\l... %struct.jpeg_d_main_controller* %31, i64 0, i32 1\l  %32 = load void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)*, void\l... (%struct.jpeg_decompress_struct*, i8**, i32*, i32)** %process_data.i, align\l... 8, !tbaa !36\l  tail call void %32(%struct.jpeg_decompress_struct* nonnull %cinfo, i8**\l... null, i32* nonnull %output_scanline4.i, i32 0) #3\l  %33 = load i32, i32* %output_scanline4.i, align 8, !tbaa !32\l  %not.cmp20.i = icmp eq i32 %33, %30\l  br i1 %not.cmp20.i, label %return.loopexit, label %while.cond3.i.backedge\l|{<s0>T|<s1>F}}"];
	Node0x52df360:s0 -> Node0x52e0a50;
	Node0x52df360:s1 -> Node0x52decf0;
	Node0x52decf0 [shape=record, style = filled, fillcolor = blue, label="{while.cond3.i.backedge:                           \l  %.be = phi i32 [ %33, %if.end16.i ], [ 0, %while.end.i ]\l  br label %while.cond3.i\l}"];
	Node0x52decf0 -> Node0x52deb50;
	Node0x52df150 [shape=record, style = filled, fillcolor = blue, label="{while.end.i:                                      \l  %34 = load %struct.jpeg_decomp_master*, %struct.jpeg_decomp_master**\l... %.pre62.i80, align 8, !tbaa !29\l  %finish_output_pass.i = getelementptr inbounds %struct.jpeg_decomp_master,\l... %struct.jpeg_decomp_master* %34, i64 0, i32 1\l  %35 = load void (%struct.jpeg_decompress_struct*)*, void\l... (%struct.jpeg_decompress_struct*)** %finish_output_pass.i, align 8, !tbaa !38\l  tail call void %35(%struct.jpeg_decompress_struct* nonnull %cinfo) #3\l  %36 = load %struct.jpeg_decomp_master*, %struct.jpeg_decomp_master**\l... %.pre62.i80, align 8, !tbaa !29\l  %prepare_for_output_pass26.i = getelementptr inbounds\l... %struct.jpeg_decomp_master, %struct.jpeg_decomp_master* %36, i64 0, i32 0\l  %37 = load void (%struct.jpeg_decompress_struct*)*, void\l... (%struct.jpeg_decompress_struct*)** %prepare_for_output_pass26.i, align 8,\l... !tbaa !30\l  tail call void %37(%struct.jpeg_decompress_struct* nonnull %cinfo) #3\l  store i32 0, i32* %output_scanline4.i, align 8, !tbaa !32\l  %38 = load %struct.jpeg_decomp_master*, %struct.jpeg_decomp_master**\l... %.pre62.i80, align 8, !tbaa !29\l  %is_dummy_pass.i = getelementptr inbounds %struct.jpeg_decomp_master,\l... %struct.jpeg_decomp_master* %38, i64 0, i32 2\l  %39 = load i32, i32* %is_dummy_pass.i, align 8, !tbaa !33\l  %tobool.i = icmp eq i32 %39, 0\l  br i1 %tobool.i, label %while.end28.i.loopexit, label %while.cond3.i.backedge\l|{<s0>T|<s1>F}}"];
	Node0x52df150:s0 -> Node0x52e20b0;
	Node0x52df150:s1 -> Node0x52decf0;
	Node0x52e20b0 [shape=record, style = filled, fillcolor = blue, label="{while.end28.i.loopexit:                           \l  br label %while.end28.i\l}"];
	Node0x52e20b0 -> Node0x52ddea0;
	Node0x52ddea0 [shape=record, style = filled, fillcolor = blue, label="{while.end28.i:                                    \l  %raw_data_out.i = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 15\l  %40 = load i32, i32* %raw_data_out.i, align 4, !tbaa !39\l  %tobool29.i = icmp ne i32 %40, 0\l  %cond.i = select i1 %tobool29.i, i32 206, i32 205\l  store i32 %cond.i, i32* %global_state, align 4, !tbaa !2\l  br label %return\l}"];
	Node0x52ddea0 -> Node0x52d0170;
	Node0x52e0a50 [shape=record, style = filled, fillcolor = blue, label="{return.loopexit:                                  \l  br label %return\l}"];
	Node0x52e0a50 -> Node0x52d0170;
	Node0x52d8ba0 [shape=record, style = filled, fillcolor = blue, label="{return.loopexit85:                                \l  br label %return\l}"];
	Node0x52d8ba0 -> Node0x52d0170;
	Node0x52d0170 [shape=record, style = filled, fillcolor = blue, label="{return:                                           \l  %retval.2 = phi i32 [ 1, %if.then1 ], [ 1, %while.end28.i ], [ 0,\l... %return.loopexit ], [ 0, %return.loopexit85 ]\l  ret i32 %retval.2\l}"];
}
