digraph "CFG for 'jinit_d_main_controller' function" {
	label="CFG for 'jinit_d_main_controller' function";

	Node0x63445e0 [shape=record, style = filled, fillcolor = blue, label="{entry:\l  %mem = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 1\l  %0 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8,\l... !tbaa !2\l  %alloc_small = getelementptr inbounds %struct.jpeg_memory_mgr,\l... %struct.jpeg_memory_mgr* %0, i64 0, i32 0\l  %1 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8*\l... (%struct.jpeg_common_struct*, i32, i64)** %alloc_small, align 8, !tbaa !10\l  %2 = bitcast %struct.jpeg_decompress_struct* %cinfo to\l... %struct.jpeg_common_struct*\l  %call = tail call i8* %1(%struct.jpeg_common_struct* %2, i32 1, i64 136) #1\l  %main1 = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 74\l  %3 = bitcast %struct.jpeg_d_main_controller** %main1 to i8**\l  store i8* %call, i8** %3, align 8, !tbaa !13\l  %start_pass = bitcast i8* %call to void (%struct.jpeg_decompress_struct*,\l... i32)**\l  store void (%struct.jpeg_decompress_struct*, i32)* @start_pass_main, void\l... (%struct.jpeg_decompress_struct*, i32)** %start_pass, align 8, !tbaa !14\l  %tobool = icmp eq i32 %need_full_buffer, 0\l  br i1 %tobool, label %if.end, label %if.then\l|{<s0>T|<s1>F}}"];
	Node0x63445e0:s0 -> Node0x6346b10;
	Node0x63445e0:s1 -> Node0x6346be0;
	Node0x6346be0 [shape=record, style = filled, fillcolor = blue, label="{if.then:                                          \l  %err = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0\l  %4 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8,\l... !tbaa !17\l  %msg_code = getelementptr inbounds %struct.jpeg_error_mgr,\l... %struct.jpeg_error_mgr* %4, i64 0, i32 5\l  store i32 4, i32* %msg_code, align 8, !tbaa !18\l  %error_exit = getelementptr inbounds %struct.jpeg_error_mgr,\l... %struct.jpeg_error_mgr* %4, i64 0, i32 0\l  %5 = load void (%struct.jpeg_common_struct*)*, void\l... (%struct.jpeg_common_struct*)** %error_exit, align 8, !tbaa !20\l  tail call void %5(%struct.jpeg_common_struct* %2) #1\l  br label %if.end\l}"];
	Node0x6346be0 -> Node0x6346b10;
	Node0x6346b10 [shape=record, style = filled, fillcolor = blue, label="{if.end:                                           \l  %upsample = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 81\l  %6 = load %struct.jpeg_upsampler*, %struct.jpeg_upsampler** %upsample, align\l... 8, !tbaa !21\l  %need_context_rows = getelementptr inbounds %struct.jpeg_upsampler,\l... %struct.jpeg_upsampler* %6, i64 0, i32 2\l  %7 = load i32, i32* %need_context_rows, align 8, !tbaa !22\l  %tobool3 = icmp eq i32 %7, 0\l  %min_DCT_scaled_size = getelementptr inbounds\l... %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64\l... 0, i32 59\l  %8 = load i32, i32* %min_DCT_scaled_size, align 4, !tbaa !24\l  br i1 %tobool3, label %if.end.if.end13_crit_edge, label %if.then4\l|{<s0>T|<s1>F}}"];
	Node0x6346b10:s0 -> Node0x6346f30;
	Node0x6346b10:s1 -> Node0x6348080;
	Node0x6346f30 [shape=record, style = filled, fillcolor = blue, label="{if.end.if.end13_crit_edge:                        \l  %num_components.phi.trans.insert = getelementptr inbounds\l... %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64\l... 0, i32 8\l  %.pre54 = load i32, i32* %num_components.phi.trans.insert, align 8, !tbaa !25\l  br label %if.end13\l}"];
	Node0x6346f30 -> Node0x6348460;
	Node0x6348080 [shape=record, style = filled, fillcolor = blue, label="{if.then4:                                         \l  %cmp = icmp slt i32 %8, 2\l  br i1 %cmp, label %if.then5, label %if.end10\l|{<s0>T|<s1>F}}"];
	Node0x6348080:s0 -> Node0x6348610;
	Node0x6348080:s1 -> Node0x6347060;
	Node0x6348610 [shape=record, style = filled, fillcolor = blue, label="{if.then5:                                         \l  %err6 = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0\l  %9 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err6, align 8,\l... !tbaa !17\l  %msg_code7 = getelementptr inbounds %struct.jpeg_error_mgr,\l... %struct.jpeg_error_mgr* %9, i64 0, i32 5\l  store i32 46, i32* %msg_code7, align 8, !tbaa !18\l  %error_exit9 = getelementptr inbounds %struct.jpeg_error_mgr,\l... %struct.jpeg_error_mgr* %9, i64 0, i32 0\l  %10 = load void (%struct.jpeg_common_struct*)*, void\l... (%struct.jpeg_common_struct*)** %error_exit9, align 8, !tbaa !20\l  tail call void %10(%struct.jpeg_common_struct* nonnull %2) #1\l  %.pre = load i32, i32* %min_DCT_scaled_size, align 4, !tbaa !24\l  br label %if.end10\l}"];
	Node0x6348610 -> Node0x6347060;
	Node0x6347060 [shape=record, style = filled, fillcolor = blue, label="{if.end10:                                         \l  %11 = phi i32 [ %.pre, %if.then5 ], [ %8, %if.then4 ]\l  %12 = bitcast %struct.jpeg_d_main_controller** %main1 to\l... %struct.my_main_controller**\l  %13 = load %struct.my_main_controller*, %struct.my_main_controller** %12,\l... align 8, !tbaa !13\l  %14 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align\l... 8, !tbaa !2\l  %alloc_small.i = getelementptr inbounds %struct.jpeg_memory_mgr,\l... %struct.jpeg_memory_mgr* %14, i64 0, i32 0\l  %15 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8*\l... (%struct.jpeg_common_struct*, i32, i64)** %alloc_small.i, align 8, !tbaa !10\l  %num_components.i = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 8\l  %16 = load i32, i32* %num_components.i, align 8, !tbaa !25\l  %mul.i = shl nsw i32 %16, 1\l  %conv.i = sext i32 %mul.i to i64\l  %mul2.i = shl nsw i64 %conv.i, 3\l  %call.i = tail call i8* %15(%struct.jpeg_common_struct* nonnull %2, i32 1,\l... i64 %mul2.i) #1\l  %17 = bitcast i8* %call.i to i8***\l  %xbuffer.i = getelementptr inbounds %struct.my_main_controller,\l... %struct.my_main_controller* %13, i64 0, i32 4\l  %arrayidx.i = getelementptr inbounds [2 x i8***], [2 x i8***]* %xbuffer.i,\l... i64 0, i64 0\l  %18 = bitcast [2 x i8***]* %xbuffer.i to i8**\l  store i8* %call.i, i8** %18, align 8, !tbaa !26\l  %19 = load i32, i32* %num_components.i, align 8, !tbaa !25\l  %idx.ext.i = sext i32 %19 to i64\l  %add.ptr.i = getelementptr inbounds i8**, i8*** %17, i64 %idx.ext.i\l  %arrayidx7.i = getelementptr inbounds %struct.my_main_controller,\l... %struct.my_main_controller* %13, i64 0, i32 4, i64 1\l  store i8*** %add.ptr.i, i8**** %arrayidx7.i, align 8, !tbaa !26\l  %cmp63.i = icmp sgt i32 %19, 0\l  br i1 %cmp63.i, label %for.body.lr.ph.i, label %alloc_funny_pointers.exit\l|{<s0>T|<s1>F}}"];
	Node0x6347060:s0 -> Node0x634d5c0;
	Node0x6347060:s1 -> Node0x634d6c0;
	Node0x634d5c0 [shape=record, style = filled, fillcolor = blue, label="{for.body.lr.ph.i:                                 \l  %comp_info.i = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 43\l  %20 = load %struct.jpeg_component_info*, %struct.jpeg_component_info**\l... %comp_info.i, align 8, !tbaa !27\l  %add.i = add nsw i32 %11, 4\l  br label %for.body.i\l}"];
	Node0x634d5c0 -> Node0x63441a0;
	Node0x63441a0 [shape=record, style = filled, fillcolor = blue, label="{for.body.i:                                       \l  %indvars.iv.i = phi i64 [ 0, %for.body.lr.ph.i ], [ %indvars.iv.next.i,\l... %for.body.i ]\l  %compptr.064.i = phi %struct.jpeg_component_info* [ %20, %for.body.lr.ph.i\l... ], [ %incdec.ptr.i, %for.body.i ]\l  %v_samp_factor.i = getelementptr inbounds %struct.jpeg_component_info,\l... %struct.jpeg_component_info* %compptr.064.i, i64 0, i32 3\l  %21 = load i32, i32* %v_samp_factor.i, align 4, !tbaa !28\l  %DCT_scaled_size.i = getelementptr inbounds %struct.jpeg_component_info,\l... %struct.jpeg_component_info* %compptr.064.i, i64 0, i32 9\l  %22 = load i32, i32* %DCT_scaled_size.i, align 4, !tbaa !30\l  %mul10.i = mul nsw i32 %22, %21\l  %23 = load i32, i32* %min_DCT_scaled_size, align 4, !tbaa !24\l  %div.i = sdiv i32 %mul10.i, %23\l  %24 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align\l... 8, !tbaa !2\l  %alloc_small13.i = getelementptr inbounds %struct.jpeg_memory_mgr,\l... %struct.jpeg_memory_mgr* %24, i64 0, i32 0\l  %25 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8*\l... (%struct.jpeg_common_struct*, i32, i64)** %alloc_small13.i, align 8, !tbaa !10\l  %mul14.i = mul nsw i32 %div.i, %add.i\l  %mul15.i = shl nsw i32 %mul14.i, 1\l  %conv16.i = sext i32 %mul15.i to i64\l  %mul17.i = shl nsw i64 %conv16.i, 3\l  %call18.i = tail call i8* %25(%struct.jpeg_common_struct* nonnull %2, i32 1,\l... i64 %mul17.i) #1\l  %26 = bitcast i8* %call18.i to i8**\l  %idx.ext19.i = sext i32 %div.i to i64\l  %add.ptr20.i = getelementptr inbounds i8*, i8** %26, i64 %idx.ext19.i\l  %27 = load i8***, i8**** %arrayidx.i, align 8, !tbaa !26\l  %arrayidx23.i = getelementptr inbounds i8**, i8*** %27, i64 %indvars.iv.i\l  store i8** %add.ptr20.i, i8*** %arrayidx23.i, align 8, !tbaa !26\l  %idx.ext26.i = sext i32 %mul14.i to i64\l  %add.ptr27.i = getelementptr inbounds i8*, i8** %add.ptr20.i, i64\l... %idx.ext26.i\l  %28 = load i8***, i8**** %arrayidx7.i, align 8, !tbaa !26\l  %arrayidx31.i = getelementptr inbounds i8**, i8*** %28, i64 %indvars.iv.i\l  store i8** %add.ptr27.i, i8*** %arrayidx31.i, align 8, !tbaa !26\l  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1\l  %incdec.ptr.i = getelementptr inbounds %struct.jpeg_component_info,\l... %struct.jpeg_component_info* %compptr.064.i, i64 1\l  %29 = load i32, i32* %num_components.i, align 8, !tbaa !25\l  %30 = sext i32 %29 to i64\l  %cmp.i = icmp slt i64 %indvars.iv.next.i, %30\l  br i1 %cmp.i, label %for.body.i, label %alloc_funny_pointers.exit.loopexit\l|{<s0>T|<s1>F}}"];
	Node0x63441a0:s0 -> Node0x63441a0;
	Node0x63441a0:s1 -> Node0x634fb00;
	Node0x634fb00 [shape=record, style = filled, fillcolor = blue, label="{alloc_funny_pointers.exit.loopexit:               \l  %.lcssa = phi i32 [ %29, %for.body.i ]\l  br label %alloc_funny_pointers.exit\l}"];
	Node0x634fb00 -> Node0x634d6c0;
	Node0x634d6c0 [shape=record, style = filled, fillcolor = blue, label="{alloc_funny_pointers.exit:                        \l  %31 = phi i32 [ %19, %if.end10 ], [ %.lcssa,\l... %alloc_funny_pointers.exit.loopexit ]\l  %32 = load i32, i32* %min_DCT_scaled_size, align 4, !tbaa !24\l  %add = add nsw i32 %32, 2\l  br label %if.end13\l}"];
	Node0x634d6c0 -> Node0x6348460;
	Node0x6348460 [shape=record, style = filled, fillcolor = blue, label="{if.end13:                                         \l  %num_components.pre-phi = phi i32* [ %num_components.phi.trans.insert,\l... %if.end.if.end13_crit_edge ], [ %num_components.i, %alloc_funny_pointers.exit\l... ]\l  %33 = phi i32 [ %8, %if.end.if.end13_crit_edge ], [ %32,\l... %alloc_funny_pointers.exit ]\l  %34 = phi i32 [ %.pre54, %if.end.if.end13_crit_edge ], [ %31,\l... %alloc_funny_pointers.exit ]\l  %ngroups.0 = phi i32 [ %8, %if.end.if.end13_crit_edge ], [ %add,\l... %alloc_funny_pointers.exit ]\l  %cmp1451 = icmp sgt i32 %34, 0\l  br i1 %cmp1451, label %for.body.lr.ph, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x6348460:s0 -> Node0x6350270;
	Node0x6348460:s1 -> Node0x6350350;
	Node0x6350270 [shape=record, style = filled, fillcolor = blue, label="{for.body.lr.ph:                                   \l  %comp_info = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 43\l  %35 = load %struct.jpeg_component_info*, %struct.jpeg_component_info**\l... %comp_info, align 8, !tbaa !27\l  %buffer = getelementptr inbounds i8, i8* %call, i64 16\l  %36 = bitcast i8* %buffer to [10 x i8**]*\l  br label %for.body\l}"];
	Node0x6350270 -> Node0x6350c70;
	Node0x6350c70 [shape=record, style = filled, fillcolor = blue, label="{for.body:                                         \l  %37 = phi i32 [ %33, %for.body.lr.ph ], [ %.pre55,\l... %for.body.for.body_crit_edge ]\l  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next,\l... %for.body.for.body_crit_edge ]\l  %compptr.053 = phi %struct.jpeg_component_info* [ %35, %for.body.lr.ph ], [\l... %incdec.ptr, %for.body.for.body_crit_edge ]\l  %v_samp_factor = getelementptr inbounds %struct.jpeg_component_info,\l... %struct.jpeg_component_info* %compptr.053, i64 0, i32 3\l  %38 = load i32, i32* %v_samp_factor, align 4, !tbaa !28\l  %DCT_scaled_size = getelementptr inbounds %struct.jpeg_component_info,\l... %struct.jpeg_component_info* %compptr.053, i64 0, i32 9\l  %39 = load i32, i32* %DCT_scaled_size, align 4, !tbaa !30\l  %mul = mul nsw i32 %39, %38\l  %div = sdiv i32 %mul, %37\l  %40 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align\l... 8, !tbaa !2\l  %alloc_sarray = getelementptr inbounds %struct.jpeg_memory_mgr,\l... %struct.jpeg_memory_mgr* %40, i64 0, i32 2\l  %41 = load i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, i8**\l... (%struct.jpeg_common_struct*, i32, i32, i32)** %alloc_sarray, align 8, !tbaa\l... !31\l  %width_in_blocks = getelementptr inbounds %struct.jpeg_component_info,\l... %struct.jpeg_component_info* %compptr.053, i64 0, i32 7\l  %42 = load i32, i32* %width_in_blocks, align 4, !tbaa !32\l  %mul18 = mul i32 %42, %39\l  %mul19 = mul nsw i32 %div, %ngroups.0\l  %call20 = tail call i8** %41(%struct.jpeg_common_struct* nonnull %2, i32 1,\l... i32 %mul18, i32 %mul19) #1\l  %arrayidx = getelementptr inbounds [10 x i8**], [10 x i8**]* %36, i64 0, i64\l... %indvars.iv\l  store i8** %call20, i8*** %arrayidx, align 8, !tbaa !26\l  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1\l  %43 = load i32, i32* %num_components.pre-phi, align 8, !tbaa !25\l  %44 = sext i32 %43 to i64\l  %cmp14 = icmp slt i64 %indvars.iv.next, %44\l  br i1 %cmp14, label %for.body.for.body_crit_edge, label %for.end.loopexit\l|{<s0>T|<s1>F}}"];
	Node0x6350c70:s0 -> Node0x6350e40;
	Node0x6350c70:s1 -> Node0x634ddb0;
	Node0x6350e40 [shape=record, style = filled, fillcolor = blue, label="{for.body.for.body_crit_edge:                      \l  %incdec.ptr = getelementptr inbounds %struct.jpeg_component_info,\l... %struct.jpeg_component_info* %compptr.053, i64 1\l  %.pre55 = load i32, i32* %min_DCT_scaled_size, align 4, !tbaa !24\l  br label %for.body\l}"];
	Node0x6350e40 -> Node0x6350c70;
	Node0x634ddb0 [shape=record, style = filled, fillcolor = blue, label="{for.end.loopexit:                                 \l  br label %for.end\l}"];
	Node0x634ddb0 -> Node0x6350350;
	Node0x6350350 [shape=record, style = filled, fillcolor = blue, label="{for.end:                                          \l  ret void\l}"];
}
