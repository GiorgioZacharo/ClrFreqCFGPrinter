digraph "CFG for 'encode_mcu_DC_refine' function" {
	label="CFG for 'encode_mcu_DC_refine' function";

	Node0x562eb40 [shape=record, style = filled, fillcolor = turquoise, label="{entry:\l  %entropy1 = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %cinfo, i64 0, i32 59\l  %0 = bitcast %struct.jpeg_entropy_encoder** %entropy1 to\l... %struct.phuff_entropy_encoder**\l  %1 = load %struct.phuff_entropy_encoder*, %struct.phuff_entropy_encoder**\l... %0, align 8, !tbaa !3\l  %Al2 = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %cinfo, i64 0, i32 50\l  %2 = load i32, i32* %Al2, align 8, !tbaa !11\l  %dest = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %cinfo, i64 0, i32 5\l  %3 = bitcast %struct.jpeg_destination_mgr** %dest to \<2 x i64\>**\l  %4 = load \<2 x i64\>*, \<2 x i64\>** %3, align 8, !tbaa !12\l  %next_output_byte3 = getelementptr inbounds %struct.phuff_entropy_encoder,\l... %struct.phuff_entropy_encoder* %1, i64 0, i32 2\l  %5 = load \<2 x i64\>, \<2 x i64\>* %4, align 8, !tbaa !13\l  %free_in_buffer5 = getelementptr inbounds %struct.phuff_entropy_encoder,\l... %struct.phuff_entropy_encoder* %1, i64 0, i32 3\l  %6 = bitcast i8** %next_output_byte3 to \<2 x i64\>*\l  store \<2 x i64\> %5, \<2 x i64\>* %6, align 8, !tbaa !13\l  %restart_interval = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %cinfo, i64 0, i32 29\l  %7 = load i32, i32* %restart_interval, align 8, !tbaa !14\l  %tobool = icmp eq i32 %7, 0\l  br i1 %tobool, label %for.cond.preheader, label %if.then, !prof !15\l|{<s0>T|<s1>F}}"];
	Node0x562eb40:s0 -> Node0x562f490;
	Node0x562eb40:s1 -> Node0x562f590;
	Node0x562f590 [shape=record, style = filled, fillcolor = blue, label="{if.then:                                          \l  %restarts_to_go = getelementptr inbounds %struct.phuff_entropy_encoder,\l... %struct.phuff_entropy_encoder* %1, i64 0, i32 12\l  %8 = bitcast i32* %restarts_to_go to i64*\l  %9 = load i64, i64* %8, align 8\l  %10 = trunc i64 %9 to i32\l  %cmp = icmp eq i32 %10, 0\l  br i1 %cmp, label %if.then6, label %for.cond.preheader\l|{<s0>T|<s1>F}}"];
	Node0x562f590:s0 -> Node0x562ef60;
	Node0x562f590:s1 -> Node0x562f490;
	Node0x562ef60 [shape=record, style = filled, fillcolor = blue, label="{if.then6:                                         \l  %11 = lshr i64 %9, 32\l  %12 = trunc i64 %11 to i32\l  tail call fastcc void @emit_restart(%struct.phuff_entropy_encoder* nonnull\l... %1, i32 %12)\l  br label %for.cond.preheader\l}"];
	Node0x562ef60 -> Node0x562f490;
	Node0x562f490 [shape=record, style = filled, fillcolor = turquoise, label="{for.cond.preheader:                               \l  %blocks_in_MCU = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %cinfo, i64 0, i32 45\l  %13 = load i32, i32* %blocks_in_MCU, align 8, !tbaa !16\l  %cmp875 = icmp sgt i32 %13, 0\l  br i1 %cmp875, label %for.body.lr.ph, label %for.end, !prof !17\l|{<s0>T|<s1>F}}"];
	Node0x562f490:s0 -> Node0x563dc20;
	Node0x562f490:s1 -> Node0x563dd00;
	Node0x563dc20 [shape=record, style = filled, fillcolor = turquoise, label="{for.body.lr.ph:                                   \l  %put_bits1.i = getelementptr inbounds %struct.phuff_entropy_encoder,\l... %struct.phuff_entropy_encoder* %1, i64 0, i32 5\l  %gather_statistics.i = getelementptr inbounds %struct.phuff_entropy_encoder,\l... %struct.phuff_entropy_encoder* %1, i64 0, i32 1\l  %put_buffer11.i = getelementptr inbounds %struct.phuff_entropy_encoder,\l... %struct.phuff_entropy_encoder* %1, i64 0, i32 4\l  %cinfo.i61 = getelementptr inbounds %struct.phuff_entropy_encoder,\l... %struct.phuff_entropy_encoder* %1, i64 0, i32 6\l  %14 = bitcast i8** %next_output_byte3 to \<2 x i64\>*\l  %15 = bitcast i8** %next_output_byte3 to \<2 x i64\>*\l  br label %for.body\l}"];
	Node0x563dc20 -> Node0x563e320;
	Node0x563e320 [shape=record, style = filled, fillcolor = green, label="{for.body:                                         \l  %16 = phi i32 [ %13, %for.body.lr.ph ], [ %45, %emit_bits.exit ]\l  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next,\l... %emit_bits.exit ]\l  %17 = load i32, i32* %gather_statistics.i, align 8, !tbaa !18\l  %tobool.i = icmp eq i32 %17, 0\l  br i1 %tobool.i, label %if.end7.i, label %emit_bits.exit, !prof !22\l|{<s0>T|<s1>F}}"];
	Node0x563e320:s0 -> Node0x563ea90;
	Node0x563e320:s1 -> Node0x563e4b0;
	Node0x563ea90 [shape=record, style = filled, fillcolor = green, label="{if.end7.i:                                        \l  %18 = load i32, i32* %put_bits1.i, align 8, !tbaa !23\l  %arrayidx = getelementptr inbounds [64 x i16]*, [64 x i16]** %MCU_data, i64\l... %indvars.iv\l  %19 = load [64 x i16]*, [64 x i16]** %arrayidx, align 8, !tbaa !24\l  %arrayidx9 = getelementptr inbounds [64 x i16], [64 x i16]* %19, i64 0, i64 0\l  %20 = load i16, i16* %arrayidx9, align 2, !tbaa !25\l  %conv = sext i16 %20 to i32\l  %shr74 = lshr i32 %conv, %2\l  %conv.i = zext i32 %shr74 to i64\l  %and.i = and i64 %conv.i, 1\l  %add.i = add i32 %18, 1\l  %sub8.i = sub i32 23, %18\l  %sh_prom9.i = zext i32 %sub8.i to i64\l  %shl10.i = shl i64 %and.i, %sh_prom9.i\l  %21 = load i64, i64* %put_buffer11.i, align 8, !tbaa !26\l  %or.i = or i64 %shl10.i, %21\l  %cmp1267.i = icmp sgt i32 %add.i, 7\l  br i1 %cmp1267.i, label %while.body.i.preheader, label %while.end.i, !prof\l... !27\l|{<s0>T|<s1>F}}"];
	Node0x563ea90:s0 -> Node0x563f4c0;
	Node0x563ea90:s1 -> Node0x563f5c0;
	Node0x563f4c0 [shape=record, style = filled, fillcolor = turquoise, label="{while.body.i.preheader:                           \l  br label %while.body.i\l}"];
	Node0x563f4c0 -> Node0x563f730;
	Node0x563f730 [shape=record, style = filled, fillcolor = turquoise, label="{while.body.i:                                     \l  %put_buffer.069.i = phi i64 [ %shl33.i, %if.end32.i ], [ %or.i,\l... %while.body.i.preheader ]\l  %put_bits.068.i = phi i32 [ %sub34.i, %if.end32.i ], [ %add.i,\l... %while.body.i.preheader ]\l  %shr66.i = lshr i64 %put_buffer.069.i, 16\l  %conv16.i = trunc i64 %shr66.i to i8\l  %22 = load i8*, i8** %next_output_byte3, align 8, !tbaa !28\l  %incdec.ptr.i = getelementptr inbounds i8, i8* %22, i64 1\l  store i8* %incdec.ptr.i, i8** %next_output_byte3, align 8, !tbaa !28\l  store i8 %conv16.i, i8* %22, align 1, !tbaa !13\l  %23 = load i64, i64* %free_in_buffer5, align 8, !tbaa !29\l  %dec.i = add i64 %23, -1\l  store i64 %dec.i, i64* %free_in_buffer5, align 8, !tbaa !29\l  %cmp17.i = icmp eq i64 %dec.i, 0\l  br i1 %cmp17.i, label %if.then19.i, label %if.end20.i, !prof !30\l|{<s0>T|<s1>F}}"];
	Node0x563f730:s0 -> Node0x563e7d0;
	Node0x563f730:s1 -> Node0x5640500;
	Node0x563e7d0 [shape=record, style = filled, fillcolor = blue, label="{if.then19.i:                                      \l  %24 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct**\l... %cinfo.i61, align 8, !tbaa !31\l  %dest1.i62 = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %24, i64 0, i32 5\l  %25 = load %struct.jpeg_destination_mgr*, %struct.jpeg_destination_mgr**\l... %dest1.i62, align 8, !tbaa !12\l  %empty_output_buffer.i63 = getelementptr inbounds\l... %struct.jpeg_destination_mgr, %struct.jpeg_destination_mgr* %25, i64 0, i32 3\l  %26 = load i32 (%struct.jpeg_compress_struct*)*, i32\l... (%struct.jpeg_compress_struct*)** %empty_output_buffer.i63, align 8, !tbaa !32\l  %call.i64 = tail call i32 %26(%struct.jpeg_compress_struct* %24) #3\l  %tobool.i65 = icmp eq i32 %call.i64, 0\l  br i1 %tobool.i65, label %if.then.i69, label %dump_buffer.exit73, !prof !34\l|{<s0>T|<s1>F}}"];
	Node0x563e7d0:s0 -> Node0x5640ad0;
	Node0x563e7d0:s1 -> Node0x5640be0;
	Node0x5640ad0 [shape=record, style = filled, fillcolor = blue, label="{if.then.i69:                                      \l  %27 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct**\l... %cinfo.i61, align 8, !tbaa !31\l  %err.i66 = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %27, i64 0, i32 0\l  %28 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err.i66, align\l... 8, !tbaa !35\l  %msg_code.i67 = getelementptr inbounds %struct.jpeg_error_mgr,\l... %struct.jpeg_error_mgr* %28, i64 0, i32 5\l  store i32 22, i32* %msg_code.i67, align 8, !tbaa !36\l  %error_exit.i68 = getelementptr inbounds %struct.jpeg_error_mgr,\l... %struct.jpeg_error_mgr* %28, i64 0, i32 0\l  %29 = load void (%struct.jpeg_common_struct*)*, void\l... (%struct.jpeg_common_struct*)** %error_exit.i68, align 8, !tbaa !38\l  %30 = bitcast %struct.jpeg_compress_struct* %27 to\l... %struct.jpeg_common_struct*\l  tail call void %29(%struct.jpeg_common_struct* %30) #3\l  br label %dump_buffer.exit73\l}"];
	Node0x5640ad0 -> Node0x5640be0;
	Node0x5640be0 [shape=record, style = filled, fillcolor = blue, label="{dump_buffer.exit73:                               \l  %31 = bitcast %struct.jpeg_destination_mgr* %25 to \<2 x i64\>*\l  %32 = load \<2 x i64\>, \<2 x i64\>* %31, align 8, !tbaa !13\l  store \<2 x i64\> %32, \<2 x i64\>* %14, align 8, !tbaa !13\l  br label %if.end20.i\l}"];
	Node0x5640be0 -> Node0x5640500;
	Node0x5640500 [shape=record, style = filled, fillcolor = turquoise, label="{if.end20.i:                                       \l  %conv15.i = and i64 %shr66.i, 255\l  %cmp21.i = icmp eq i64 %conv15.i, 255\l  br i1 %cmp21.i, label %if.then23.i, label %if.end32.i, !prof !39\l|{<s0>T|<s1>F}}"];
	Node0x5640500:s0 -> Node0x5641610;
	Node0x5640500:s1 -> Node0x563f850;
	Node0x5641610 [shape=record, style = filled, fillcolor = skyblue, label="{if.then23.i:                                      \l  %33 = load i8*, i8** %next_output_byte3, align 8, !tbaa !28\l  %incdec.ptr25.i = getelementptr inbounds i8, i8* %33, i64 1\l  store i8* %incdec.ptr25.i, i8** %next_output_byte3, align 8, !tbaa !28\l  store i8 0, i8* %33, align 1, !tbaa !13\l  %34 = load i64, i64* %free_in_buffer5, align 8, !tbaa !29\l  %dec27.i = add i64 %34, -1\l  store i64 %dec27.i, i64* %free_in_buffer5, align 8, !tbaa !29\l  %cmp28.i = icmp eq i64 %dec27.i, 0\l  br i1 %cmp28.i, label %if.then30.i, label %if.end32.i, !prof !40\l|{<s0>T|<s1>F}}"];
	Node0x5641610:s0 -> Node0x5639470;
	Node0x5641610:s1 -> Node0x563f850;
	Node0x5639470 [shape=record, style = filled, fillcolor = blue, label="{if.then30.i:                                      \l  %35 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct**\l... %cinfo.i61, align 8, !tbaa !31\l  %dest1.i = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %35, i64 0, i32 5\l  %36 = load %struct.jpeg_destination_mgr*, %struct.jpeg_destination_mgr**\l... %dest1.i, align 8, !tbaa !12\l  %empty_output_buffer.i = getelementptr inbounds\l... %struct.jpeg_destination_mgr, %struct.jpeg_destination_mgr* %36, i64 0, i32 3\l  %37 = load i32 (%struct.jpeg_compress_struct*)*, i32\l... (%struct.jpeg_compress_struct*)** %empty_output_buffer.i, align 8, !tbaa !32\l  %call.i = tail call i32 %37(%struct.jpeg_compress_struct* %35) #3\l  %tobool.i59 = icmp eq i32 %call.i, 0\l  br i1 %tobool.i59, label %if.then.i, label %dump_buffer.exit, !prof !34\l|{<s0>T|<s1>F}}"];
	Node0x5639470:s0 -> Node0x5605ea0;
	Node0x5639470:s1 -> Node0x5605fb0;
	Node0x5605ea0 [shape=record, style = filled, fillcolor = blue, label="{if.then.i:                                        \l  %38 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct**\l... %cinfo.i61, align 8, !tbaa !31\l  %err.i = getelementptr inbounds %struct.jpeg_compress_struct,\l... %struct.jpeg_compress_struct* %38, i64 0, i32 0\l  %39 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err.i, align\l... 8, !tbaa !35\l  %msg_code.i = getelementptr inbounds %struct.jpeg_error_mgr,\l... %struct.jpeg_error_mgr* %39, i64 0, i32 5\l  store i32 22, i32* %msg_code.i, align 8, !tbaa !36\l  %error_exit.i = getelementptr inbounds %struct.jpeg_error_mgr,\l... %struct.jpeg_error_mgr* %39, i64 0, i32 0\l  %40 = load void (%struct.jpeg_common_struct*)*, void\l... (%struct.jpeg_common_struct*)** %error_exit.i, align 8, !tbaa !38\l  %41 = bitcast %struct.jpeg_compress_struct* %38 to\l... %struct.jpeg_common_struct*\l  tail call void %40(%struct.jpeg_common_struct* %41) #3\l  br label %dump_buffer.exit\l}"];
	Node0x5605ea0 -> Node0x5605fb0;
	Node0x5605fb0 [shape=record, style = filled, fillcolor = blue, label="{dump_buffer.exit:                                 \l  %42 = bitcast %struct.jpeg_destination_mgr* %36 to \<2 x i64\>*\l  %43 = load \<2 x i64\>, \<2 x i64\>* %42, align 8, !tbaa !13\l  store \<2 x i64\> %43, \<2 x i64\>* %15, align 8, !tbaa !13\l  br label %if.end32.i\l}"];
	Node0x5605fb0 -> Node0x563f850;
	Node0x563f850 [shape=record, style = filled, fillcolor = turquoise, label="{if.end32.i:                                       \l  %shl33.i = shl i64 %put_buffer.069.i, 8\l  %sub34.i = add nsw i32 %put_bits.068.i, -8\l  %cmp12.i = icmp sgt i32 %sub34.i, 7\l  br i1 %cmp12.i, label %while.body.i, label %while.end.loopexit.i, !prof !27\l|{<s0>T|<s1>F}}"];
	Node0x563f850:s0 -> Node0x563f730;
	Node0x563f850:s1 -> Node0x5643720;
	Node0x5643720 [shape=record, style = filled, fillcolor = turquoise, label="{while.end.loopexit.i:                             \l  %shl33.i.lcssa = phi i64 [ %shl33.i, %if.end32.i ]\l  %44 = and i32 %add.i, 7\l  %.pre.pre = load i32, i32* %blocks_in_MCU, align 8, !tbaa !16\l  br label %while.end.i\l}"];
	Node0x5643720 -> Node0x563f5c0;
	Node0x563f5c0 [shape=record, style = filled, fillcolor = green, label="{while.end.i:                                      \l  %.pre = phi i32 [ %16, %if.end7.i ], [ %.pre.pre, %while.end.loopexit.i ]\l  %put_buffer.0.lcssa.i = phi i64 [ %or.i, %if.end7.i ], [ %shl33.i.lcssa,\l... %while.end.loopexit.i ]\l  %put_bits.0.lcssa.i = phi i32 [ %add.i, %if.end7.i ], [ %44,\l... %while.end.loopexit.i ]\l  store i64 %put_buffer.0.lcssa.i, i64* %put_buffer11.i, align 8, !tbaa !26\l  store i32 %put_bits.0.lcssa.i, i32* %put_bits1.i, align 8, !tbaa !23\l  br label %emit_bits.exit\l}"];
	Node0x563f5c0 -> Node0x563e4b0;
	Node0x563e4b0 [shape=record, style = filled, fillcolor = green, label="{emit_bits.exit:                                   \l  %45 = phi i32 [ %16, %for.body ], [ %.pre, %while.end.i ]\l  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1\l  %46 = sext i32 %45 to i64\l  %cmp8 = icmp slt i64 %indvars.iv.next, %46\l  br i1 %cmp8, label %for.body, label %for.end.loopexit, !prof !17\l|{<s0>T|<s1>F}}"];
	Node0x563e4b0:s0 -> Node0x563e320;
	Node0x563e4b0:s1 -> Node0x5643e50;
	Node0x5643e50 [shape=record, style = filled, fillcolor = turquoise, label="{for.end.loopexit:                                 \l  br label %for.end\l}"];
	Node0x5643e50 -> Node0x563dd00;
	Node0x563dd00 [shape=record, style = filled, fillcolor = turquoise, label="{for.end:                                          \l  %47 = bitcast %struct.jpeg_destination_mgr** %dest to \<2 x i64\>**\l  %48 = load \<2 x i64\>*, \<2 x i64\>** %47, align 8, !tbaa !12\l  %49 = bitcast i8** %next_output_byte3 to \<2 x i64\>*\l  %50 = load \<2 x i64\>, \<2 x i64\>* %49, align 8, !tbaa !13\l  store \<2 x i64\> %50, \<2 x i64\>* %48, align 8, !tbaa !13\l  %51 = load i32, i32* %restart_interval, align 8, !tbaa !14\l  %tobool17 = icmp eq i32 %51, 0\l  br i1 %tobool17, label %if.end30, label %if.then18, !prof !15\l|{<s0>T|<s1>F}}"];
	Node0x563dd00:s0 -> Node0x56447e0;
	Node0x563dd00:s1 -> Node0x5644890;
	Node0x5644890 [shape=record, style = filled, fillcolor = blue, label="{if.then18:                                        \l  %restarts_to_go19 = getelementptr inbounds %struct.phuff_entropy_encoder,\l... %struct.phuff_entropy_encoder* %1, i64 0, i32 12\l  %52 = bitcast i32* %restarts_to_go19 to i64*\l  %53 = load i64, i64* %52, align 8\l  %54 = trunc i64 %53 to i32\l  %cmp20 = icmp eq i32 %54, 0\l  br i1 %cmp20, label %if.then22, label %if.end28\l|{<s0>T|<s1>F}}"];
	Node0x5644890:s0 -> Node0x5645220;
	Node0x5644890:s1 -> Node0x56452d0;
	Node0x5645220 [shape=record, style = filled, fillcolor = blue, label="{if.then22:                                        \l  %55 = lshr i64 %53, 32\l  %56 = trunc i64 %55 to i32\l  store i32 %51, i32* %restarts_to_go19, align 8, !tbaa !41\l  %next_restart_num25 = getelementptr inbounds %struct.phuff_entropy_encoder,\l... %struct.phuff_entropy_encoder* %1, i64 0, i32 13\l  %inc26 = add nsw i32 %56, 1\l  %and = and i32 %inc26, 7\l  store i32 %and, i32* %next_restart_num25, align 4, !tbaa !42\l  br label %if.end28\l}"];
	Node0x5645220 -> Node0x56452d0;
	Node0x56452d0 [shape=record, style = filled, fillcolor = blue, label="{if.end28:                                         \l  %57 = phi i32 [ %51, %if.then22 ], [ %54, %if.then18 ]\l  %dec = add i32 %57, -1\l  store i32 %dec, i32* %restarts_to_go19, align 8, !tbaa !41\l  br label %if.end30\l}"];
	Node0x56452d0 -> Node0x56447e0;
	Node0x56447e0 [shape=record, style = filled, fillcolor = turquoise, label="{if.end30:                                         \l  ret i32 1\l}"];
}
