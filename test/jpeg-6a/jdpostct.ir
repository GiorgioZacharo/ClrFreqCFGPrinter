; ModuleID = 'jdpostct.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_decompress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32, %struct.jpeg_source_mgr*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i16, i16, i32, i8, i32, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master*, %struct.jpeg_d_main_controller*, %struct.jpeg_d_coef_controller*, %struct.jpeg_d_post_controller*, %struct.jpeg_input_controller*, %struct.jpeg_marker_reader*, %struct.jpeg_entropy_decoder*, %struct.jpeg_inverse_dct*, %struct.jpeg_upsampler*, %struct.jpeg_color_deconverter*, %struct.jpeg_color_quantizer* }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_source_mgr = type { i8*, i64, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i64)*, i32 (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*)* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.jpeg_decomp_master = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32 }
%struct.jpeg_d_main_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)* }
%struct.jpeg_d_coef_controller = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*, i8***)*, %struct.jvirt_barray_control** }
%struct.jpeg_d_post_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)* }
%struct.jpeg_input_controller = type { i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32, i32 }
%struct.jpeg_marker_reader = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, [16 x i32 (%struct.jpeg_decompress_struct*)*], i32, i32, i32, i32 }
%struct.jpeg_entropy_decoder = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)* }
%struct.jpeg_inverse_dct = type { void (%struct.jpeg_decompress_struct*)*, [10 x void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)*] }
%struct.jpeg_upsampler = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)*, i32 }
%struct.jpeg_color_deconverter = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* }
%struct.jpeg_color_quantizer = type { {}*, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)* }
%struct.my_post_controller = type { %struct.jpeg_d_post_controller, %struct.jvirt_sarray_control*, i8**, i32, i32, i32 }

; Function Attrs: nounwind uwtable
define void @jinit_d_post_controller(%struct.jpeg_decompress_struct* %cinfo, i32 %need_full_buffer) #0 {
entry:
  %mem = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 1
  %0 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !2
  %alloc_small = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %0, i64 0, i32 0
  %1 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_small, align 8, !tbaa !10
  %2 = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  %call = tail call i8* %1(%struct.jpeg_common_struct* %2, i32 1, i64 48) #3
  %post1 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 76
  %3 = bitcast %struct.jpeg_d_post_controller** %post1 to i8**
  store i8* %call, i8** %3, align 8, !tbaa !13
  %start_pass = bitcast i8* %call to void (%struct.jpeg_decompress_struct*, i32)**
  store void (%struct.jpeg_decompress_struct*, i32)* @start_pass_dpost, void (%struct.jpeg_decompress_struct*, i32)** %start_pass, align 8, !tbaa !14
  %whole_image = getelementptr inbounds i8, i8* %call, i64 16
  %4 = bitcast i8* %whole_image to %struct.jvirt_sarray_control**
  %buffer = getelementptr inbounds i8, i8* %call, i64 24
  %5 = bitcast i8* %buffer to i8***
  %quantize_colors = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 19
  call void @llvm.memset.p0i8.i64(i8* %whole_image, i8 0, i64 16, i32 8, i1 false)
  %6 = load i32, i32* %quantize_colors, align 4, !tbaa !17
  %tobool = icmp eq i32 %6, 0
  br i1 %tobool, label %if.end19, label %if.then

if.then:                                          ; preds = %entry
  %max_v_samp_factor = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 58
  %7 = load i32, i32* %max_v_samp_factor, align 8, !tbaa !18
  %strip_height = getelementptr inbounds i8, i8* %call, i64 32
  %8 = bitcast i8* %strip_height to i32*
  store i32 %7, i32* %8, align 8, !tbaa !19
  %tobool2 = icmp eq i32 %need_full_buffer, 0
  %9 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !2
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 26
  %11 = bitcast i32* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = trunc i64 %12 to i32
  %14 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 28
  %15 = load i32, i32* %14, align 8
  br i1 %tobool2, label %if.else, label %if.then3

if.then3:                                         ; preds = %if.then
  %16 = lshr i64 %12, 32
  %request_virt_sarray = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %9, i64 0, i32 4
  %17 = load %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)** %request_virt_sarray, align 8, !tbaa !20
  %mul = mul i32 %15, %13
  %conv6 = zext i32 %7 to i64
  %call7 = tail call i64 @jround_up(i64 %16, i64 %conv6) #3
  %conv8 = trunc i64 %call7 to i32
  %18 = load i32, i32* %8, align 8, !tbaa !19
  %call10 = tail call %struct.jvirt_sarray_control* %17(%struct.jpeg_common_struct* nonnull %2, i32 1, i32 0, i32 %mul, i32 %conv8, i32 %18) #3
  store %struct.jvirt_sarray_control* %call10, %struct.jvirt_sarray_control** %4, align 8, !tbaa !21
  br label %if.end19

if.else:                                          ; preds = %if.then
  %alloc_sarray = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %9, i64 0, i32 2
  %19 = load i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)** %alloc_sarray, align 8, !tbaa !22
  %mul15 = mul i32 %15, %13
  %call17 = tail call i8** %19(%struct.jpeg_common_struct* nonnull %2, i32 1, i32 %mul15, i32 %7) #3
  store i8** %call17, i8*** %5, align 8, !tbaa !23
  br label %if.end19

if.end19:                                         ; preds = %entry, %if.then3, %if.else
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: nounwind uwtable
define internal void @start_pass_dpost(%struct.jpeg_decompress_struct* %cinfo, i32 %pass_mode) #0 {
entry:
  %post1 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 76
  %0 = bitcast %struct.jpeg_d_post_controller** %post1 to %struct.my_post_controller**
  %1 = load %struct.my_post_controller*, %struct.my_post_controller** %0, align 8, !tbaa !13
  switch i32 %pass_mode, label %sw.default [
    i32 0, label %sw.bb
    i32 3, label %sw.bb8
    i32 2, label %sw.bb16
  ]

sw.bb:                                            ; preds = %entry
  %quantize_colors = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 19
  %2 = load i32, i32* %quantize_colors, align 4, !tbaa !17
  %tobool = icmp eq i32 %2, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %sw.bb
  %post_process_data = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %1, i64 0, i32 0, i32 1
  store void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)* @post_process_1pass, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)** %post_process_data, align 8, !tbaa !24
  %buffer = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %1, i64 0, i32 2
  %3 = load i8**, i8*** %buffer, align 8, !tbaa !23
  %cmp = icmp eq i8** %3, null
  br i1 %cmp, label %if.then2, label %sw.epilog

if.then2:                                         ; preds = %if.then
  %mem = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 1
  %4 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !2
  %access_virt_sarray = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %4, i64 0, i32 7
  %5 = load i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)** %access_virt_sarray, align 8, !tbaa !25
  %6 = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  %whole_image = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %1, i64 0, i32 1
  %7 = load %struct.jvirt_sarray_control*, %struct.jvirt_sarray_control** %whole_image, align 8, !tbaa !21
  %strip_height = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %1, i64 0, i32 3
  %8 = load i32, i32* %strip_height, align 8, !tbaa !19
  %call = tail call i8** %5(%struct.jpeg_common_struct* %6, %struct.jvirt_sarray_control* %7, i32 0, i32 %8, i32 1) #3
  store i8** %call, i8*** %buffer, align 8, !tbaa !23
  br label %sw.epilog

if.else:                                          ; preds = %sw.bb
  %upsample = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 81
  %9 = load %struct.jpeg_upsampler*, %struct.jpeg_upsampler** %upsample, align 8, !tbaa !26
  %upsample4 = getelementptr inbounds %struct.jpeg_upsampler, %struct.jpeg_upsampler* %9, i64 0, i32 1
  %10 = bitcast void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)** %upsample4 to i64*
  %11 = load i64, i64* %10, align 8, !tbaa !27
  %post_process_data6 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %1, i64 0, i32 0, i32 1
  %12 = bitcast void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)** %post_process_data6 to i64*
  store i64 %11, i64* %12, align 8, !tbaa !24
  br label %sw.epilog

sw.bb8:                                           ; preds = %entry
  %whole_image9 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %1, i64 0, i32 1
  %13 = load %struct.jvirt_sarray_control*, %struct.jvirt_sarray_control** %whole_image9, align 8, !tbaa !21
  %cmp10 = icmp eq %struct.jvirt_sarray_control* %13, null
  br i1 %cmp10, label %if.then11, label %if.end13

if.then11:                                        ; preds = %sw.bb8
  %err = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0
  %14 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8, !tbaa !29
  %msg_code = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %14, i64 0, i32 5
  store i32 4, i32* %msg_code, align 8, !tbaa !30
  %error_exit = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %14, i64 0, i32 0
  %15 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit, align 8, !tbaa !32
  %16 = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  tail call void %15(%struct.jpeg_common_struct* %16) #3
  br label %if.end13

if.end13:                                         ; preds = %if.then11, %sw.bb8
  %post_process_data15 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %1, i64 0, i32 0, i32 1
  store void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)* @post_process_prepass, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)** %post_process_data15, align 8, !tbaa !24
  br label %sw.epilog

sw.bb16:                                          ; preds = %entry
  %whole_image17 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %1, i64 0, i32 1
  %17 = load %struct.jvirt_sarray_control*, %struct.jvirt_sarray_control** %whole_image17, align 8, !tbaa !21
  %cmp18 = icmp eq %struct.jvirt_sarray_control* %17, null
  br i1 %cmp18, label %if.then19, label %if.end24

if.then19:                                        ; preds = %sw.bb16
  %err20 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0
  %18 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err20, align 8, !tbaa !29
  %msg_code21 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %18, i64 0, i32 5
  store i32 4, i32* %msg_code21, align 8, !tbaa !30
  %error_exit23 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %18, i64 0, i32 0
  %19 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit23, align 8, !tbaa !32
  %20 = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  tail call void %19(%struct.jpeg_common_struct* %20) #3
  br label %if.end24

if.end24:                                         ; preds = %if.then19, %sw.bb16
  %post_process_data26 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %1, i64 0, i32 0, i32 1
  store void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)* @post_process_2pass, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)** %post_process_data26, align 8, !tbaa !24
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  %err27 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0
  %21 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err27, align 8, !tbaa !29
  %msg_code28 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %21, i64 0, i32 5
  store i32 4, i32* %msg_code28, align 8, !tbaa !30
  %error_exit30 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %21, i64 0, i32 0
  %22 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit30, align 8, !tbaa !32
  %23 = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  tail call void %22(%struct.jpeg_common_struct* %23) #3
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.else, %if.then2, %if.then, %sw.default, %if.end24, %if.end13
  %next_row = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %1, i64 0, i32 5
  store i32 0, i32* %next_row, align 8, !tbaa !33
  %starting_row = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %1, i64 0, i32 4
  store i32 0, i32* %starting_row, align 4, !tbaa !34
  ret void
}

declare i64 @jround_up(i64, i64) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: nounwind uwtable
define internal void @post_process_1pass(%struct.jpeg_decompress_struct* %cinfo, i8*** %input_buf, i32* %in_row_group_ctr, i32 %in_row_groups_avail, i8** %output_buf, i32* nocapture %out_row_ctr, i32 %out_rows_avail) #0 {
entry:
  %num_rows = alloca i32, align 4
  %post1 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 76
  %0 = bitcast %struct.jpeg_d_post_controller** %post1 to %struct.my_post_controller**
  %1 = load %struct.my_post_controller*, %struct.my_post_controller** %0, align 8, !tbaa !13
  %2 = bitcast i32* %num_rows to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #3
  %3 = load i32, i32* %out_row_ctr, align 4, !tbaa !35
  %sub = sub i32 %out_rows_avail, %3
  %strip_height = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %1, i64 0, i32 3
  %4 = load i32, i32* %strip_height, align 8, !tbaa !19
  %cmp = icmp ugt i32 %sub, %4
  %.sub = select i1 %cmp, i32 %4, i32 %sub
  store i32 0, i32* %num_rows, align 4, !tbaa !35
  %upsample = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 81
  %5 = load %struct.jpeg_upsampler*, %struct.jpeg_upsampler** %upsample, align 8, !tbaa !26
  %upsample3 = getelementptr inbounds %struct.jpeg_upsampler, %struct.jpeg_upsampler* %5, i64 0, i32 1
  %6 = load void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)** %upsample3, align 8, !tbaa !27
  %buffer = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %1, i64 0, i32 2
  %7 = load i8**, i8*** %buffer, align 8, !tbaa !23
  call void %6(%struct.jpeg_decompress_struct* %cinfo, i8*** %input_buf, i32* %in_row_group_ctr, i32 %in_row_groups_avail, i8** %7, i32* nonnull %num_rows, i32 %.sub) #3
  %cquantize = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 83
  %8 = load %struct.jpeg_color_quantizer*, %struct.jpeg_color_quantizer** %cquantize, align 8, !tbaa !36
  %color_quantize = getelementptr inbounds %struct.jpeg_color_quantizer, %struct.jpeg_color_quantizer* %8, i64 0, i32 1
  %9 = load void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)** %color_quantize, align 8, !tbaa !37
  %10 = load i8**, i8*** %buffer, align 8, !tbaa !23
  %11 = load i32, i32* %out_row_ctr, align 4, !tbaa !35
  %idx.ext = zext i32 %11 to i64
  %add.ptr = getelementptr inbounds i8*, i8** %output_buf, i64 %idx.ext
  %12 = load i32, i32* %num_rows, align 4, !tbaa !35
  call void %9(%struct.jpeg_decompress_struct* %cinfo, i8** %10, i8** %add.ptr, i32 %12) #3
  %13 = load i32, i32* %num_rows, align 4, !tbaa !35
  %14 = load i32, i32* %out_row_ctr, align 4, !tbaa !35
  %add = add i32 %14, %13
  store i32 %add, i32* %out_row_ctr, align 4, !tbaa !35
  call void @llvm.lifetime.end(i64 4, i8* %2) #3
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @post_process_prepass(%struct.jpeg_decompress_struct* %cinfo, i8*** %input_buf, i32* %in_row_group_ctr, i32 %in_row_groups_avail, i8** nocapture readnone %output_buf, i32* nocapture %out_row_ctr, i32 %out_rows_avail) #0 {
entry:
  %post1 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 76
  %0 = bitcast %struct.jpeg_d_post_controller** %post1 to %struct.my_post_controller**
  %1 = load %struct.my_post_controller*, %struct.my_post_controller** %0, align 8, !tbaa !13
  %next_row = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %1, i64 0, i32 5
  %2 = load i32, i32* %next_row, align 8, !tbaa !33
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.then, label %entry.if.end_crit_edge

entry.if.end_crit_edge:                           ; preds = %entry
  %buffer4.phi.trans.insert = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %1, i64 0, i32 2
  %.pre50 = load i8**, i8*** %buffer4.phi.trans.insert, align 8, !tbaa !23
  %.pre52 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %1, i64 0, i32 3
  br label %if.end

if.then:                                          ; preds = %entry
  %mem = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 1
  %3 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !2
  %access_virt_sarray = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %3, i64 0, i32 7
  %4 = load i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)** %access_virt_sarray, align 8, !tbaa !25
  %5 = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  %whole_image = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %1, i64 0, i32 1
  %6 = load %struct.jvirt_sarray_control*, %struct.jvirt_sarray_control** %whole_image, align 8, !tbaa !21
  %starting_row = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %1, i64 0, i32 4
  %7 = load i32, i32* %starting_row, align 4, !tbaa !34
  %strip_height = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %1, i64 0, i32 3
  %8 = load i32, i32* %strip_height, align 8, !tbaa !19
  %call = tail call i8** %4(%struct.jpeg_common_struct* %5, %struct.jvirt_sarray_control* %6, i32 %7, i32 %8, i32 1) #3
  %buffer = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %1, i64 0, i32 2
  store i8** %call, i8*** %buffer, align 8, !tbaa !23
  %.pre = load i32, i32* %next_row, align 8, !tbaa !33
  br label %if.end

if.end:                                           ; preds = %entry.if.end_crit_edge, %if.then
  %strip_height6.pre-phi = phi i32* [ %.pre52, %entry.if.end_crit_edge ], [ %strip_height, %if.then ]
  %buffer4.pre-phi = phi i8*** [ %buffer4.phi.trans.insert, %entry.if.end_crit_edge ], [ %buffer, %if.then ]
  %9 = phi i8** [ %.pre50, %entry.if.end_crit_edge ], [ %call, %if.then ]
  %10 = phi i32 [ %2, %entry.if.end_crit_edge ], [ %.pre, %if.then ]
  %upsample = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 81
  %11 = load %struct.jpeg_upsampler*, %struct.jpeg_upsampler** %upsample, align 8, !tbaa !26
  %upsample3 = getelementptr inbounds %struct.jpeg_upsampler, %struct.jpeg_upsampler* %11, i64 0, i32 1
  %12 = load void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)** %upsample3, align 8, !tbaa !27
  %13 = load i32, i32* %strip_height6.pre-phi, align 8, !tbaa !19
  tail call void %12(%struct.jpeg_decompress_struct* nonnull %cinfo, i8*** %input_buf, i32* %in_row_group_ctr, i32 %in_row_groups_avail, i8** %9, i32* nonnull %next_row, i32 %13) #3
  %14 = load i32, i32* %next_row, align 8, !tbaa !33
  %cmp8 = icmp ugt i32 %14, %10
  br i1 %cmp8, label %if.then9, label %if.end12

if.then9:                                         ; preds = %if.end
  %sub = sub i32 %14, %10
  %cquantize = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 83
  %15 = load %struct.jpeg_color_quantizer*, %struct.jpeg_color_quantizer** %cquantize, align 8, !tbaa !36
  %color_quantize = getelementptr inbounds %struct.jpeg_color_quantizer, %struct.jpeg_color_quantizer* %15, i64 0, i32 1
  %16 = load void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)** %color_quantize, align 8, !tbaa !37
  %17 = load i8**, i8*** %buffer4.pre-phi, align 8, !tbaa !23
  %idx.ext = zext i32 %10 to i64
  %add.ptr = getelementptr inbounds i8*, i8** %17, i64 %idx.ext
  tail call void %16(%struct.jpeg_decompress_struct* nonnull %cinfo, i8** %add.ptr, i8** null, i32 %sub) #3
  %18 = load i32, i32* %out_row_ctr, align 4, !tbaa !35
  %add = add i32 %18, %sub
  store i32 %add, i32* %out_row_ctr, align 4, !tbaa !35
  %.pre51 = load i32, i32* %next_row, align 8, !tbaa !33
  br label %if.end12

if.end12:                                         ; preds = %if.then9, %if.end
  %19 = phi i32 [ %.pre51, %if.then9 ], [ %14, %if.end ]
  %20 = bitcast i32* %strip_height6.pre-phi to i64*
  %21 = load i64, i64* %20, align 8
  %22 = trunc i64 %21 to i32
  %cmp15 = icmp ult i32 %19, %22
  br i1 %cmp15, label %if.end21, label %if.then16

if.then16:                                        ; preds = %if.end12
  %23 = lshr i64 %21, 32
  %24 = trunc i64 %23 to i32
  %starting_row18 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %1, i64 0, i32 4
  %add19 = add i32 %24, %22
  store i32 %add19, i32* %starting_row18, align 4, !tbaa !34
  store i32 0, i32* %next_row, align 8, !tbaa !33
  br label %if.end21

if.end21:                                         ; preds = %if.end12, %if.then16
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @post_process_2pass(%struct.jpeg_decompress_struct* %cinfo, i8*** nocapture readnone %input_buf, i32* nocapture readnone %in_row_group_ctr, i32 %in_row_groups_avail, i8** %output_buf, i32* nocapture %out_row_ctr, i32 %out_rows_avail) #0 {
entry:
  %post1 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 76
  %0 = bitcast %struct.jpeg_d_post_controller** %post1 to %struct.my_post_controller**
  %1 = load %struct.my_post_controller*, %struct.my_post_controller** %0, align 8, !tbaa !13
  %next_row = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %1, i64 0, i32 5
  %2 = load i32, i32* %next_row, align 8, !tbaa !33
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.then, label %entry.if.end_crit_edge

entry.if.end_crit_edge:                           ; preds = %entry
  %buffer13.phi.trans.insert = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %1, i64 0, i32 2
  %.pre60 = load i8**, i8*** %buffer13.phi.trans.insert, align 8, !tbaa !23
  %.pre61 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %1, i64 0, i32 3
  %.pre62 = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %1, i64 0, i32 4
  br label %if.end

if.then:                                          ; preds = %entry
  %mem = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 1
  %3 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !2
  %access_virt_sarray = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %3, i64 0, i32 7
  %4 = load i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)** %access_virt_sarray, align 8, !tbaa !25
  %5 = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  %whole_image = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %1, i64 0, i32 1
  %6 = load %struct.jvirt_sarray_control*, %struct.jvirt_sarray_control** %whole_image, align 8, !tbaa !21
  %starting_row = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %1, i64 0, i32 4
  %7 = load i32, i32* %starting_row, align 4, !tbaa !34
  %strip_height = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %1, i64 0, i32 3
  %8 = load i32, i32* %strip_height, align 8, !tbaa !19
  %call = tail call i8** %4(%struct.jpeg_common_struct* %5, %struct.jvirt_sarray_control* %6, i32 %7, i32 %8, i32 0) #3
  %buffer = getelementptr inbounds %struct.my_post_controller, %struct.my_post_controller* %1, i64 0, i32 2
  store i8** %call, i8*** %buffer, align 8, !tbaa !23
  %.pre = load i32, i32* %next_row, align 8, !tbaa !33
  br label %if.end

if.end:                                           ; preds = %entry.if.end_crit_edge, %if.then
  %starting_row8.pre-phi = phi i32* [ %.pre62, %entry.if.end_crit_edge ], [ %starting_row, %if.then ]
  %strip_height2.pre-phi = phi i32* [ %.pre61, %entry.if.end_crit_edge ], [ %strip_height, %if.then ]
  %9 = phi i8** [ %.pre60, %entry.if.end_crit_edge ], [ %call, %if.then ]
  %10 = phi i32 [ %2, %entry.if.end_crit_edge ], [ %.pre, %if.then ]
  %11 = bitcast i32* %strip_height2.pre-phi to i64*
  %12 = load i64, i64* %11, align 8
  %13 = trunc i64 %12 to i32
  %sub = sub i32 %13, %10
  %14 = load i32, i32* %out_row_ctr, align 4, !tbaa !35
  %sub4 = sub i32 %out_rows_avail, %14
  %cmp5 = icmp ugt i32 %sub, %sub4
  %sub4.sub = select i1 %cmp5, i32 %sub4, i32 %sub
  %output_height = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 27
  %15 = load i32, i32* %output_height, align 4, !tbaa !39
  %16 = lshr i64 %12, 32
  %17 = trunc i64 %16 to i32
  %sub9 = sub i32 %15, %17
  %cmp10 = icmp ugt i32 %sub4.sub, %sub9
  %num_rows.1 = select i1 %cmp10, i32 %sub9, i32 %sub4.sub
  %cquantize = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 83
  %18 = load %struct.jpeg_color_quantizer*, %struct.jpeg_color_quantizer** %cquantize, align 8, !tbaa !36
  %color_quantize = getelementptr inbounds %struct.jpeg_color_quantizer, %struct.jpeg_color_quantizer* %18, i64 0, i32 1
  %19 = load void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)** %color_quantize, align 8, !tbaa !37
  %idx.ext = zext i32 %10 to i64
  %add.ptr = getelementptr inbounds i8*, i8** %9, i64 %idx.ext
  %idx.ext15 = zext i32 %14 to i64
  %add.ptr16 = getelementptr inbounds i8*, i8** %output_buf, i64 %idx.ext15
  tail call void %19(%struct.jpeg_decompress_struct* nonnull %cinfo, i8** %add.ptr, i8** %add.ptr16, i32 %num_rows.1) #3
  %20 = load i32, i32* %out_row_ctr, align 4, !tbaa !35
  %add = add i32 %20, %num_rows.1
  store i32 %add, i32* %out_row_ctr, align 4, !tbaa !35
  %21 = load i32, i32* %next_row, align 8, !tbaa !33
  %add18 = add i32 %21, %num_rows.1
  store i32 %add18, i32* %next_row, align 8, !tbaa !33
  %22 = load i64, i64* %11, align 8
  %23 = trunc i64 %22 to i32
  %cmp21 = icmp ult i32 %add18, %23
  br i1 %cmp21, label %if.end27, label %if.then22

if.then22:                                        ; preds = %if.end
  %24 = lshr i64 %22, 32
  %25 = trunc i64 %24 to i32
  %add25 = add i32 %25, %23
  store i32 %add25, i32* %starting_row8.pre-phi, align 4, !tbaa !34
  store i32 0, i32* %next_row, align 8, !tbaa !33
  br label %if.end27

if.end27:                                         ; preds = %if.end, %if.then22
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"MaxFunctionCount", i32 150581}
!1 = !{!"clang version 3.8.0 (trunk 257473)"}
!2 = !{!3, !4, i64 8}
!3 = !{!"jpeg_decompress_struct", !4, i64 0, !4, i64 8, !4, i64 16, !7, i64 24, !7, i64 28, !4, i64 32, !7, i64 40, !7, i64 44, !7, i64 48, !5, i64 52, !5, i64 56, !7, i64 60, !7, i64 64, !8, i64 72, !7, i64 80, !7, i64 84, !5, i64 88, !7, i64 92, !7, i64 96, !7, i64 100, !5, i64 104, !7, i64 108, !7, i64 112, !7, i64 116, !7, i64 120, !7, i64 124, !7, i64 128, !7, i64 132, !7, i64 136, !7, i64 140, !7, i64 144, !7, i64 148, !4, i64 152, !7, i64 160, !7, i64 164, !7, i64 168, !7, i64 172, !7, i64 176, !4, i64 184, !5, i64 192, !5, i64 224, !5, i64 256, !7, i64 288, !4, i64 296, !7, i64 304, !7, i64 308, !5, i64 312, !5, i64 328, !5, i64 344, !7, i64 360, !7, i64 364, !5, i64 368, !9, i64 370, !9, i64 372, !7, i64 376, !5, i64 380, !7, i64 384, !7, i64 388, !7, i64 392, !7, i64 396, !7, i64 400, !4, i64 408, !7, i64 416, !5, i64 424, !7, i64 456, !7, i64 460, !7, i64 464, !5, i64 468, !7, i64 508, !7, i64 512, !7, i64 516, !7, i64 520, !7, i64 524, !4, i64 528, !4, i64 536, !4, i64 544, !4, i64 552, !4, i64 560, !4, i64 568, !4, i64 576, !4, i64 584, !4, i64 592, !4, i64 600, !4, i64 608}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!"int", !5, i64 0}
!8 = !{!"double", !5, i64 0}
!9 = !{!"short", !5, i64 0}
!10 = !{!11, !4, i64 0}
!11 = !{!"jpeg_memory_mgr", !4, i64 0, !4, i64 8, !4, i64 16, !4, i64 24, !4, i64 32, !4, i64 40, !4, i64 48, !4, i64 56, !4, i64 64, !4, i64 72, !4, i64 80, !12, i64 88}
!12 = !{!"long", !5, i64 0}
!13 = !{!3, !4, i64 552}
!14 = !{!15, !4, i64 0}
!15 = !{!"", !16, i64 0, !4, i64 16, !4, i64 24, !7, i64 32, !7, i64 36, !7, i64 40}
!16 = !{!"jpeg_d_post_controller", !4, i64 0, !4, i64 8}
!17 = !{!3, !7, i64 100}
!18 = !{!3, !7, i64 392}
!19 = !{!15, !7, i64 32}
!20 = !{!11, !4, i64 32}
!21 = !{!15, !4, i64 16}
!22 = !{!11, !4, i64 16}
!23 = !{!15, !4, i64 24}
!24 = !{!15, !4, i64 8}
!25 = !{!11, !4, i64 56}
!26 = !{!3, !4, i64 592}
!27 = !{!28, !4, i64 8}
!28 = !{!"jpeg_upsampler", !4, i64 0, !4, i64 8, !7, i64 16}
!29 = !{!3, !4, i64 0}
!30 = !{!31, !7, i64 40}
!31 = !{!"jpeg_error_mgr", !4, i64 0, !4, i64 8, !4, i64 16, !4, i64 24, !4, i64 32, !7, i64 40, !5, i64 44, !7, i64 124, !12, i64 128, !4, i64 136, !7, i64 144, !4, i64 152, !7, i64 160, !7, i64 164}
!32 = !{!31, !4, i64 0}
!33 = !{!15, !7, i64 40}
!34 = !{!15, !7, i64 36}
!35 = !{!7, !7, i64 0}
!36 = !{!3, !4, i64 608}
!37 = !{!38, !4, i64 8}
!38 = !{!"jpeg_color_quantizer", !4, i64 0, !4, i64 8, !4, i64 16, !4, i64 24}
!39 = !{!3, !7, i64 132}
