; ModuleID = 'wrbmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.djpeg_dest_struct = type { void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*)*, void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*, i32)*, void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*)*, %struct._IO_FILE*, i8**, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.jpeg_decompress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32, %struct.jpeg_source_mgr*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i16, i16, i32, i8, i32, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master*, %struct.jpeg_d_main_controller*, %struct.jpeg_d_coef_controller*, %struct.jpeg_d_post_controller*, %struct.jpeg_input_controller*, %struct.jpeg_marker_reader*, %struct.jpeg_entropy_decoder*, %struct.jpeg_inverse_dct*, %struct.jpeg_upsampler*, %struct.jpeg_color_deconverter*, %struct.jpeg_color_quantizer* }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_source_mgr = type { i8*, i64, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i64)*, i32 (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*)* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.jpeg_decomp_master = type opaque
%struct.jpeg_d_main_controller = type opaque
%struct.jpeg_d_coef_controller = type opaque
%struct.jpeg_d_post_controller = type opaque
%struct.jpeg_input_controller = type opaque
%struct.jpeg_marker_reader = type opaque
%struct.jpeg_entropy_decoder = type opaque
%struct.jpeg_inverse_dct = type opaque
%struct.jpeg_upsampler = type opaque
%struct.jpeg_color_deconverter = type opaque
%struct.jpeg_color_quantizer = type opaque
%struct.cdjpeg_progress_mgr = type { %struct.jpeg_progress_mgr, i32, i32, i32 }
%struct.bmp_dest_struct = type { %struct.djpeg_dest_struct, i32, %struct.jvirt_sarray_control*, i32, i32, i32, i32 }

; Function Attrs: nounwind uwtable
define %struct.djpeg_dest_struct* @jinit_write_bmp(%struct.jpeg_decompress_struct* %cinfo, i32 %is_os2) #0 {
entry:
  %mem = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 1
  %0 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !2
  %alloc_small = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %0, i64 0, i32 0
  %1 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_small, align 8, !tbaa !10
  %2 = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  %call = tail call i8* %1(%struct.jpeg_common_struct* %2, i32 1, i64 80) #6
  %start_output = bitcast i8* %call to void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*)**
  store void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*)* @start_output_bmp, void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*)** %start_output, align 8, !tbaa !13
  %finish_output = getelementptr inbounds i8, i8* %call, i64 16
  %3 = bitcast i8* %finish_output to void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*)**
  store void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*)* @finish_output_bmp, void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*)** %3, align 8, !tbaa !16
  %is_os22 = getelementptr inbounds i8, i8* %call, i64 48
  %4 = bitcast i8* %is_os22 to i32*
  store i32 %is_os2, i32* %4, align 8, !tbaa !17
  %out_color_space = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 10
  %5 = load i32, i32* %out_color_space, align 8, !tbaa !18
  switch i32 %5, label %if.else13 [
    i32 1, label %if.then
    i32 2, label %if.then6
  ]

if.then:                                          ; preds = %entry
  %put_pixel_rows = getelementptr inbounds i8, i8* %call, i64 8
  %6 = bitcast i8* %put_pixel_rows to void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*, i32)**
  store void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*, i32)* @put_gray_rows, void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*, i32)** %6, align 8, !tbaa !19
  br label %if.end16

if.then6:                                         ; preds = %entry
  %quantize_colors = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 19
  %7 = load i32, i32* %quantize_colors, align 4, !tbaa !20
  %tobool = icmp eq i32 %7, 0
  %put_pixel_rows9 = getelementptr inbounds i8, i8* %call, i64 8
  %8 = bitcast i8* %put_pixel_rows9 to void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*, i32)**
  br i1 %tobool, label %if.else10, label %if.then7

if.then7:                                         ; preds = %if.then6
  store void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*, i32)* @put_gray_rows, void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*, i32)** %8, align 8, !tbaa !19
  br label %if.end16

if.else10:                                        ; preds = %if.then6
  store void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*, i32)* @put_pixel_rows, void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*, i32)** %8, align 8, !tbaa !19
  br label %if.end16

if.else13:                                        ; preds = %entry
  %err = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0
  %9 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8, !tbaa !21
  %msg_code = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %9, i64 0, i32 5
  store i32 1005, i32* %msg_code, align 8, !tbaa !22
  %error_exit = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %9, i64 0, i32 0
  %10 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit, align 8, !tbaa !24
  tail call void %10(%struct.jpeg_common_struct* %2) #6
  br label %if.end16

if.end16:                                         ; preds = %if.else13, %if.else10, %if.then7, %if.then
  tail call void @jpeg_calc_output_dimensions(%struct.jpeg_decompress_struct* nonnull %cinfo) #6
  %output_width = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 26
  %11 = bitcast i32* %output_width to i64*
  %12 = load i64, i64* %11, align 8
  %13 = trunc i64 %12 to i32
  %output_components = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 29
  %14 = load i32, i32* %output_components, align 4, !tbaa !25
  %mul = mul i32 %14, %13
  %data_width = getelementptr inbounds i8, i8* %call, i64 64
  %15 = bitcast i8* %data_width to i32*
  store i32 %mul, i32* %15, align 8, !tbaa !26
  %16 = lshr i64 %12, 32
  %17 = trunc i64 %16 to i32
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %if.end16
  %row_width.0 = phi i32 [ %mul, %if.end16 ], [ %inc, %while.cond ]
  %and = and i32 %row_width.0, 3
  %cmp17 = icmp eq i32 %and, 0
  %inc = add i32 %row_width.0, 1
  br i1 %cmp17, label %while.end, label %while.cond

while.end:                                        ; preds = %while.cond
  %row_width.0.lcssa = phi i32 [ %row_width.0, %while.cond ]
  %row_width18 = getelementptr inbounds i8, i8* %call, i64 68
  %18 = bitcast i8* %row_width18 to i32*
  store i32 %row_width.0.lcssa, i32* %18, align 4, !tbaa !27
  %sub = sub i32 %row_width.0.lcssa, %mul
  %pad_bytes = getelementptr inbounds i8, i8* %call, i64 72
  %19 = bitcast i8* %pad_bytes to i32*
  store i32 %sub, i32* %19, align 8, !tbaa !28
  %20 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !2
  %request_virt_sarray = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %20, i64 0, i32 4
  %21 = load %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)** %request_virt_sarray, align 8, !tbaa !29
  %call21 = tail call %struct.jvirt_sarray_control* %21(%struct.jpeg_common_struct* %2, i32 1, i32 0, i32 %row_width.0.lcssa, i32 %17, i32 1) #6
  %whole_image = getelementptr inbounds i8, i8* %call, i64 56
  %22 = bitcast i8* %whole_image to %struct.jvirt_sarray_control**
  store %struct.jvirt_sarray_control* %call21, %struct.jvirt_sarray_control** %22, align 8, !tbaa !30
  %cur_output_row = getelementptr inbounds i8, i8* %call, i64 76
  %23 = bitcast i8* %cur_output_row to i32*
  store i32 0, i32* %23, align 4, !tbaa !31
  %progress = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 2
  %24 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %progress, align 8, !tbaa !32
  %cmp22 = icmp eq %struct.jpeg_progress_mgr* %24, null
  br i1 %cmp22, label %if.end27, label %if.then23

if.then23:                                        ; preds = %while.end
  %25 = bitcast %struct.jpeg_progress_mgr* %24 to %struct.cdjpeg_progress_mgr*
  %total_extra_passes = getelementptr inbounds %struct.cdjpeg_progress_mgr, %struct.cdjpeg_progress_mgr* %25, i64 0, i32 2
  %26 = load i32, i32* %total_extra_passes, align 4, !tbaa !33
  %inc26 = add nsw i32 %26, 1
  store i32 %inc26, i32* %total_extra_passes, align 4, !tbaa !33
  br label %if.end27

if.end27:                                         ; preds = %while.end, %if.then23
  %27 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !2
  %alloc_sarray = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %27, i64 0, i32 2
  %28 = load i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)** %alloc_sarray, align 8, !tbaa !36
  %call29 = tail call i8** %28(%struct.jpeg_common_struct* nonnull %2, i32 1, i32 %row_width.0.lcssa, i32 1) #6
  %buffer = getelementptr inbounds i8, i8* %call, i64 32
  %29 = bitcast i8* %buffer to i8***
  store i8** %call29, i8*** %29, align 8, !tbaa !37
  %buffer_height = getelementptr inbounds i8, i8* %call, i64 40
  %30 = bitcast i8* %buffer_height to i32*
  store i32 1, i32* %30, align 8, !tbaa !38
  %31 = bitcast i8* %call to %struct.djpeg_dest_struct*
  ret %struct.djpeg_dest_struct* %31
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: norecurse nounwind readnone uwtable
define internal void @start_output_bmp(%struct.jpeg_decompress_struct* nocapture %cinfo, %struct.djpeg_dest_struct* nocapture %dinfo) #2 {
entry:
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @finish_output_bmp(%struct.jpeg_decompress_struct* %cinfo, %struct.djpeg_dest_struct* nocapture readonly %dinfo) #0 {
entry:
  %bmpinfoheader.i = alloca [40 x i8], align 16
  %bmpfileheader.i = alloca [14 x i8], align 1
  %bmpcoreheader.i = alloca [12 x i8], align 1
  %0 = bitcast %struct.djpeg_dest_struct* %dinfo to %struct.bmp_dest_struct*
  %output_file = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 0, i32 3
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !39
  %progress1 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 2
  %2 = bitcast %struct.jpeg_progress_mgr** %progress1 to %struct.cdjpeg_progress_mgr**
  %3 = load %struct.cdjpeg_progress_mgr*, %struct.cdjpeg_progress_mgr** %2, align 8, !tbaa !32
  %is_os2 = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 1
  %4 = bitcast %struct.djpeg_dest_struct* %is_os2 to i32*
  %5 = load i32, i32* %4, align 8, !tbaa !17
  %tobool = icmp eq i32 %5, 0
  %6 = getelementptr inbounds [14 x i8], [14 x i8]* %bmpfileheader.i, i64 0, i64 0
  call void @llvm.lifetime.start(i64 14, i8* %6) #6
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %7 = getelementptr inbounds [12 x i8], [12 x i8]* %bmpcoreheader.i, i64 0, i64 0
  call void @llvm.lifetime.start(i64 12, i8* %7) #6
  %out_color_space.i = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 10
  %8 = load i32, i32* %out_color_space.i, align 8, !tbaa !18
  %cmp.i = icmp eq i32 %8, 2
  br i1 %cmp.i, label %if.then.i, label %if.end3.i

if.then.i:                                        ; preds = %if.then
  %quantize_colors.i = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 19
  %9 = load i32, i32* %quantize_colors.i, align 4, !tbaa !20
  %tobool.i = icmp eq i32 %9, 0
  %..i = select i1 %tobool.i, i8 24, i8 8
  %.123.i = select i1 %tobool.i, i32 0, i32 256
  br label %if.end3.i

if.end3.i:                                        ; preds = %if.then.i, %if.then
  %bits_per_pixel.0.i = phi i8 [ %..i, %if.then.i ], [ 8, %if.then ]
  %cmap_entries.0.i = phi i32 [ %.123.i, %if.then.i ], [ 256, %if.then ]
  %mul.i = mul nuw nsw i32 %cmap_entries.0.i, 3
  %add.i = or i32 %mul.i, 26
  %conv118.i = zext i32 %add.i to i64
  %row_width.i = getelementptr inbounds %struct.bmp_dest_struct, %struct.bmp_dest_struct* %0, i64 0, i32 4
  %10 = load i32, i32* %row_width.i, align 4, !tbaa !27
  %conv4.i = zext i32 %10 to i64
  %output_height.i = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 27
  %11 = load i32, i32* %output_height.i, align 4, !tbaa !40
  %conv5.i = zext i32 %11 to i64
  %mul6.i = mul nuw nsw i64 %conv5.i, %conv4.i
  %add7.i = add nuw nsw i64 %mul6.i, %conv118.i
  call void @llvm.memset.p0i8.i64(i8* %6, i8 0, i64 12, i32 1, i1 false) #6
  call void @llvm.memset.p0i8.i64(i8* %7, i8 0, i64 10, i32 1, i1 false) #6
  store i8 66, i8* %6, align 1, !tbaa !41
  %arrayidx9.i = getelementptr inbounds [14 x i8], [14 x i8]* %bmpfileheader.i, i64 0, i64 1
  store i8 77, i8* %arrayidx9.i, align 1, !tbaa !41
  %conv10.i = trunc i64 %add7.i to i8
  %arrayidx11.i = getelementptr inbounds [14 x i8], [14 x i8]* %bmpfileheader.i, i64 0, i64 2
  store i8 %conv10.i, i8* %arrayidx11.i, align 1, !tbaa !41
  %shr119.i = lshr i64 %add7.i, 8
  %conv13.i = trunc i64 %shr119.i to i8
  %arrayidx14.i = getelementptr inbounds [14 x i8], [14 x i8]* %bmpfileheader.i, i64 0, i64 3
  store i8 %conv13.i, i8* %arrayidx14.i, align 1, !tbaa !41
  %shr15120.i = lshr i64 %add7.i, 16
  %conv17.i = trunc i64 %shr15120.i to i8
  %arrayidx18.i = getelementptr inbounds [14 x i8], [14 x i8]* %bmpfileheader.i, i64 0, i64 4
  store i8 %conv17.i, i8* %arrayidx18.i, align 1, !tbaa !41
  %shr19121.i = lshr i64 %add7.i, 24
  %conv21.i = trunc i64 %shr19121.i to i8
  %arrayidx22.i = getelementptr inbounds [14 x i8], [14 x i8]* %bmpfileheader.i, i64 0, i64 5
  store i8 %conv21.i, i8* %arrayidx22.i, align 1, !tbaa !41
  %arrayidx25.i = getelementptr inbounds [14 x i8], [14 x i8]* %bmpfileheader.i, i64 0, i64 10
  store i8 26, i8* %arrayidx25.i, align 1, !tbaa !41
  %shr26122.i = lshr exact i32 %mul.i, 8
  %conv28.i = trunc i32 %shr26122.i to i8
  %arrayidx29.i = getelementptr inbounds [14 x i8], [14 x i8]* %bmpfileheader.i, i64 0, i64 11
  store i8 %conv28.i, i8* %arrayidx29.i, align 1, !tbaa !41
  %arrayidx33.i = getelementptr inbounds [14 x i8], [14 x i8]* %bmpfileheader.i, i64 0, i64 12
  store i8 0, i8* %arrayidx33.i, align 1, !tbaa !41
  %arrayidx37.i = getelementptr inbounds [14 x i8], [14 x i8]* %bmpfileheader.i, i64 0, i64 13
  store i8 0, i8* %arrayidx37.i, align 1, !tbaa !41
  store i8 12, i8* %7, align 1, !tbaa !41
  %arrayidx39.i = getelementptr inbounds [12 x i8], [12 x i8]* %bmpcoreheader.i, i64 0, i64 1
  store i8 0, i8* %arrayidx39.i, align 1, !tbaa !41
  %output_width.i = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 26
  %12 = bitcast i32* %output_width.i to i64*
  %13 = load i64, i64* %12, align 8
  %14 = trunc i64 %13 to i32
  %conv41.i = trunc i64 %13 to i8
  %arrayidx42.i = getelementptr inbounds [12 x i8], [12 x i8]* %bmpcoreheader.i, i64 0, i64 4
  store i8 %conv41.i, i8* %arrayidx42.i, align 1, !tbaa !41
  %shr44.i = lshr i32 %14, 8
  %conv46.i = trunc i32 %shr44.i to i8
  %arrayidx47.i = getelementptr inbounds [12 x i8], [12 x i8]* %bmpcoreheader.i, i64 0, i64 5
  store i8 %conv46.i, i8* %arrayidx47.i, align 1, !tbaa !41
  %15 = lshr i64 %13, 32
  %conv50.i = trunc i64 %15 to i8
  %arrayidx51.i = getelementptr inbounds [12 x i8], [12 x i8]* %bmpcoreheader.i, i64 0, i64 6
  store i8 %conv50.i, i8* %arrayidx51.i, align 1, !tbaa !41
  %shr53124.i = lshr i64 %13, 40
  %conv55.i = trunc i64 %shr53124.i to i8
  %arrayidx56.i = getelementptr inbounds [12 x i8], [12 x i8]* %bmpcoreheader.i, i64 0, i64 7
  store i8 %conv55.i, i8* %arrayidx56.i, align 1, !tbaa !41
  %arrayidx57.i = getelementptr inbounds [12 x i8], [12 x i8]* %bmpcoreheader.i, i64 0, i64 8
  store i8 1, i8* %arrayidx57.i, align 1, !tbaa !41
  %arrayidx58.i = getelementptr inbounds [12 x i8], [12 x i8]* %bmpcoreheader.i, i64 0, i64 9
  store i8 0, i8* %arrayidx58.i, align 1, !tbaa !41
  %arrayidx61.i = getelementptr inbounds [12 x i8], [12 x i8]* %bmpcoreheader.i, i64 0, i64 10
  store i8 %bits_per_pixel.0.i, i8* %arrayidx61.i, align 1, !tbaa !41
  %arrayidx65.i = getelementptr inbounds [12 x i8], [12 x i8]* %bmpcoreheader.i, i64 0, i64 11
  store i8 0, i8* %arrayidx65.i, align 1, !tbaa !41
  %call.i = call i64 @fwrite(i8* %6, i64 1, i64 14, %struct._IO_FILE* %1) #6
  %cmp67.i = icmp eq i64 %call.i, 14
  br i1 %cmp67.i, label %if.end71.i, label %if.then69.i

if.then69.i:                                      ; preds = %if.end3.i
  %err.i = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0
  %16 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err.i, align 8, !tbaa !21
  %msg_code.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %16, i64 0, i32 5
  store i32 36, i32* %msg_code.i, align 8, !tbaa !22
  %error_exit.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %16, i64 0, i32 0
  %17 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit.i, align 8, !tbaa !24
  %18 = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  tail call void %17(%struct.jpeg_common_struct* %18) #6
  br label %if.end71.i

if.end71.i:                                       ; preds = %if.then69.i, %if.end3.i
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !39
  %call75.i = call i64 @fwrite(i8* nonnull %7, i64 1, i64 12, %struct._IO_FILE* %19) #6
  %cmp76.i = icmp eq i64 %call75.i, 12
  br i1 %cmp76.i, label %if.end83.i, label %if.then78.i

if.then78.i:                                      ; preds = %if.end71.i
  %err79.i = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0
  %20 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err79.i, align 8, !tbaa !21
  %msg_code80.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %20, i64 0, i32 5
  store i32 36, i32* %msg_code80.i, align 8, !tbaa !22
  %error_exit82.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %20, i64 0, i32 0
  %21 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit82.i, align 8, !tbaa !24
  %22 = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  tail call void %21(%struct.jpeg_common_struct* %22) #6
  br label %if.end83.i

if.end83.i:                                       ; preds = %if.then78.i, %if.end71.i
  %cmp84.i = icmp eq i32 %cmap_entries.0.i, 0
  br i1 %cmp84.i, label %write_os2_header.exit, label %if.then86.i

if.then86.i:                                      ; preds = %if.end83.i
  %dest.idx.val.i = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !39
  tail call fastcc void @write_colormap(%struct.jpeg_decompress_struct* nonnull %cinfo, %struct._IO_FILE* %dest.idx.val.i, i32 %cmap_entries.0.i, i32 3) #6
  br label %write_os2_header.exit

write_os2_header.exit:                            ; preds = %if.end83.i, %if.then86.i
  call void @llvm.lifetime.end(i64 12, i8* nonnull %7) #6
  call void @llvm.lifetime.end(i64 14, i8* nonnull %6) #6
  br label %if.end

if.else:                                          ; preds = %entry
  %23 = getelementptr inbounds [40 x i8], [40 x i8]* %bmpinfoheader.i, i64 0, i64 0
  call void @llvm.lifetime.start(i64 40, i8* %23) #6
  %out_color_space.i65 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 10
  %24 = load i32, i32* %out_color_space.i65, align 8, !tbaa !18
  %cmp.i66 = icmp eq i32 %24, 2
  br i1 %cmp.i66, label %if.then.i70, label %if.end3.i104

if.then.i70:                                      ; preds = %if.else
  %quantize_colors.i67 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 19
  %25 = load i32, i32* %quantize_colors.i67, align 4, !tbaa !20
  %tobool.i68 = icmp eq i32 %25, 0
  %..i69 = select i1 %tobool.i68, i8 24, i8 8
  %.241.i = select i1 %tobool.i68, i32 0, i32 256
  br label %if.end3.i104

if.end3.i104:                                     ; preds = %if.then.i70, %if.else
  %bits_per_pixel.0.i71 = phi i8 [ %..i69, %if.then.i70 ], [ 8, %if.else ]
  %cmap_entries.0.i72 = phi i32 [ %.241.i, %if.then.i70 ], [ 256, %if.else ]
  %mul.i73 = shl nuw nsw i32 %cmap_entries.0.i72, 2
  %add.i74 = or i32 %mul.i73, 54
  %conv225.i = zext i32 %add.i74 to i64
  %row_width.i75 = getelementptr inbounds %struct.bmp_dest_struct, %struct.bmp_dest_struct* %0, i64 0, i32 4
  %26 = load i32, i32* %row_width.i75, align 4, !tbaa !27
  %conv4.i76 = zext i32 %26 to i64
  %output_height.i77 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 27
  %27 = load i32, i32* %output_height.i77, align 4, !tbaa !40
  %conv5.i78 = zext i32 %27 to i64
  %mul6.i79 = mul nuw nsw i64 %conv5.i78, %conv4.i76
  %add7.i80 = add nuw nsw i64 %mul6.i79, %conv225.i
  call void @llvm.memset.p0i8.i64(i8* %6, i8 0, i64 12, i32 1, i1 false) #6
  call void @llvm.memset.p0i8.i64(i8* %23, i8 0, i64 40, i32 16, i1 false) #6
  store i8 66, i8* %6, align 1, !tbaa !41
  %arrayidx9.i81 = getelementptr inbounds [14 x i8], [14 x i8]* %bmpfileheader.i, i64 0, i64 1
  store i8 77, i8* %arrayidx9.i81, align 1, !tbaa !41
  %conv10.i82 = trunc i64 %add7.i80 to i8
  %arrayidx11.i83 = getelementptr inbounds [14 x i8], [14 x i8]* %bmpfileheader.i, i64 0, i64 2
  store i8 %conv10.i82, i8* %arrayidx11.i83, align 1, !tbaa !41
  %shr226.i = lshr i64 %add7.i80, 8
  %conv13.i84 = trunc i64 %shr226.i to i8
  %arrayidx14.i85 = getelementptr inbounds [14 x i8], [14 x i8]* %bmpfileheader.i, i64 0, i64 3
  store i8 %conv13.i84, i8* %arrayidx14.i85, align 1, !tbaa !41
  %shr15227.i = lshr i64 %add7.i80, 16
  %conv17.i86 = trunc i64 %shr15227.i to i8
  %arrayidx18.i87 = getelementptr inbounds [14 x i8], [14 x i8]* %bmpfileheader.i, i64 0, i64 4
  store i8 %conv17.i86, i8* %arrayidx18.i87, align 1, !tbaa !41
  %shr19228.i = lshr i64 %add7.i80, 24
  %conv21.i88 = trunc i64 %shr19228.i to i8
  %arrayidx22.i89 = getelementptr inbounds [14 x i8], [14 x i8]* %bmpfileheader.i, i64 0, i64 5
  store i8 %conv21.i88, i8* %arrayidx22.i89, align 1, !tbaa !41
  %arrayidx25.i90 = getelementptr inbounds [14 x i8], [14 x i8]* %bmpfileheader.i, i64 0, i64 10
  store i8 54, i8* %arrayidx25.i90, align 1, !tbaa !41
  %shr26229.i = lshr exact i32 %cmap_entries.0.i72, 6
  %conv28.i91 = trunc i32 %shr26229.i to i8
  %arrayidx29.i92 = getelementptr inbounds [14 x i8], [14 x i8]* %bmpfileheader.i, i64 0, i64 11
  store i8 %conv28.i91, i8* %arrayidx29.i92, align 1, !tbaa !41
  %arrayidx33.i93 = getelementptr inbounds [14 x i8], [14 x i8]* %bmpfileheader.i, i64 0, i64 12
  store i8 0, i8* %arrayidx33.i93, align 1, !tbaa !41
  %arrayidx37.i94 = getelementptr inbounds [14 x i8], [14 x i8]* %bmpfileheader.i, i64 0, i64 13
  store i8 0, i8* %arrayidx37.i94, align 1, !tbaa !41
  store i8 40, i8* %23, align 16, !tbaa !41
  %arrayidx39.i95 = getelementptr inbounds [40 x i8], [40 x i8]* %bmpinfoheader.i, i64 0, i64 1
  store i8 0, i8* %arrayidx39.i95, align 1, !tbaa !41
  %output_width.i96 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 26
  %28 = bitcast i32* %output_width.i96 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = trunc i64 %29 to i32
  %conv41.i97 = trunc i64 %29 to i8
  %arrayidx42.i98 = getelementptr inbounds [40 x i8], [40 x i8]* %bmpinfoheader.i, i64 0, i64 4
  store i8 %conv41.i97, i8* %arrayidx42.i98, align 4, !tbaa !41
  %shr44.i99 = lshr i32 %30, 8
  %conv46.i100 = trunc i32 %shr44.i99 to i8
  %arrayidx47.i101 = getelementptr inbounds [40 x i8], [40 x i8]* %bmpinfoheader.i, i64 0, i64 5
  store i8 %conv46.i100, i8* %arrayidx47.i101, align 1, !tbaa !41
  %shr49.i = lshr i32 %30, 16
  %conv51.i = trunc i32 %shr49.i to i8
  %arrayidx52.i = getelementptr inbounds [40 x i8], [40 x i8]* %bmpinfoheader.i, i64 0, i64 6
  store i8 %conv51.i, i8* %arrayidx52.i, align 2, !tbaa !41
  %shr54.i = lshr i32 %30, 24
  %conv56.i = trunc i32 %shr54.i to i8
  %arrayidx57.i102 = getelementptr inbounds [40 x i8], [40 x i8]* %bmpinfoheader.i, i64 0, i64 7
  store i8 %conv56.i, i8* %arrayidx57.i102, align 1, !tbaa !41
  %31 = lshr i64 %29, 32
  %conv60.i = trunc i64 %31 to i8
  %arrayidx61.i103 = getelementptr inbounds [40 x i8], [40 x i8]* %bmpinfoheader.i, i64 0, i64 8
  store i8 %conv60.i, i8* %arrayidx61.i103, align 8, !tbaa !41
  %shr63242.i = lshr i64 %29, 40
  %conv65.i = trunc i64 %shr63242.i to i8
  %arrayidx66.i = getelementptr inbounds [40 x i8], [40 x i8]* %bmpinfoheader.i, i64 0, i64 9
  store i8 %conv65.i, i8* %arrayidx66.i, align 1, !tbaa !41
  %shr68243.i = lshr i64 %29, 48
  %conv70.i = trunc i64 %shr68243.i to i8
  %arrayidx71.i = getelementptr inbounds [40 x i8], [40 x i8]* %bmpinfoheader.i, i64 0, i64 10
  store i8 %conv70.i, i8* %arrayidx71.i, align 2, !tbaa !41
  %shr73244.i = lshr i64 %29, 56
  %conv75.i = trunc i64 %shr73244.i to i8
  %arrayidx76.i = getelementptr inbounds [40 x i8], [40 x i8]* %bmpinfoheader.i, i64 0, i64 11
  store i8 %conv75.i, i8* %arrayidx76.i, align 1, !tbaa !41
  %arrayidx77.i = getelementptr inbounds [40 x i8], [40 x i8]* %bmpinfoheader.i, i64 0, i64 12
  store i8 1, i8* %arrayidx77.i, align 4, !tbaa !41
  %arrayidx78.i = getelementptr inbounds [40 x i8], [40 x i8]* %bmpinfoheader.i, i64 0, i64 13
  store i8 0, i8* %arrayidx78.i, align 1, !tbaa !41
  %arrayidx81.i = getelementptr inbounds [40 x i8], [40 x i8]* %bmpinfoheader.i, i64 0, i64 14
  store i8 %bits_per_pixel.0.i71, i8* %arrayidx81.i, align 2, !tbaa !41
  %arrayidx85.i = getelementptr inbounds [40 x i8], [40 x i8]* %bmpinfoheader.i, i64 0, i64 15
  store i8 0, i8* %arrayidx85.i, align 1, !tbaa !41
  %density_unit.i = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 51
  %32 = bitcast i8* %density_unit.i to i64*
  %33 = load i64, i64* %32, align 8
  %34 = trunc i64 %33 to i32
  %35 = trunc i64 %33 to i8
  %cmp87.i = icmp eq i8 %35, 2
  %36 = lshr i32 %34, 16
  %37 = lshr i64 %33, 32
  br i1 %cmp87.i, label %if.then89.i, label %if.end150.i

if.then89.i:                                      ; preds = %if.end3.i104
  %38 = zext i32 %36 to i64
  %conv90.i = trunc i32 %36 to i8
  %mul91.i = mul i8 %conv90.i, 100
  %arrayidx95.i = getelementptr inbounds [40 x i8], [40 x i8]* %bmpinfoheader.i, i64 0, i64 24
  store i8 %mul91.i, i8* %arrayidx95.i, align 8, !tbaa !41
  %mul98.i = mul nuw nsw i64 %38, 100
  %shr100233.i = lshr i64 %mul98.i, 8
  %conv102.i = trunc i64 %shr100233.i to i8
  %arrayidx103.i = getelementptr inbounds [40 x i8], [40 x i8]* %bmpinfoheader.i, i64 0, i64 25
  store i8 %conv102.i, i8* %arrayidx103.i, align 1, !tbaa !41
  %shr108235.i = lshr i64 %mul98.i, 16
  %conv110.i = trunc i64 %shr108235.i to i8
  %arrayidx111.i = getelementptr inbounds [40 x i8], [40 x i8]* %bmpinfoheader.i, i64 0, i64 26
  store i8 %conv110.i, i8* %arrayidx111.i, align 2, !tbaa !41
  %arrayidx119.i = getelementptr inbounds [40 x i8], [40 x i8]* %bmpinfoheader.i, i64 0, i64 27
  store i8 0, i8* %arrayidx119.i, align 1, !tbaa !41
  %conv120.i = trunc i64 %37 to i8
  %mul121.i = mul i8 %conv120.i, 100
  %arrayidx125.i = getelementptr inbounds [40 x i8], [40 x i8]* %bmpinfoheader.i, i64 0, i64 28
  store i8 %mul121.i, i8* %arrayidx125.i, align 4, !tbaa !41
  %conv127.i = and i64 %37, 65535
  %mul128.i = mul nuw nsw i64 %conv127.i, 100
  %shr130238.i = lshr i64 %mul128.i, 8
  %conv132.i = trunc i64 %shr130238.i to i8
  %arrayidx133.i = getelementptr inbounds [40 x i8], [40 x i8]* %bmpinfoheader.i, i64 0, i64 29
  store i8 %conv132.i, i8* %arrayidx133.i, align 1, !tbaa !41
  %shr138240.i = lshr i64 %mul128.i, 16
  %conv140.i = trunc i64 %shr138240.i to i8
  %arrayidx141.i = getelementptr inbounds [40 x i8], [40 x i8]* %bmpinfoheader.i, i64 0, i64 30
  store i8 %conv140.i, i8* %arrayidx141.i, align 2, !tbaa !41
  %arrayidx149.i = getelementptr inbounds [40 x i8], [40 x i8]* %bmpinfoheader.i, i64 0, i64 31
  store i8 0, i8* %arrayidx149.i, align 1, !tbaa !41
  br label %if.end150.i

if.end150.i:                                      ; preds = %if.then89.i, %if.end3.i104
  %arrayidx153.i = getelementptr inbounds [40 x i8], [40 x i8]* %bmpinfoheader.i, i64 0, i64 32
  store i8 0, i8* %arrayidx153.i, align 16, !tbaa !41
  %shr154230.i = lshr exact i32 %cmap_entries.0.i72, 8
  %conv156.i = trunc i32 %shr154230.i to i8
  %arrayidx157.i = getelementptr inbounds [40 x i8], [40 x i8]* %bmpinfoheader.i, i64 0, i64 33
  store i8 %conv156.i, i8* %arrayidx157.i, align 1, !tbaa !41
  %call.i106 = call i64 @fwrite(i8* nonnull %6, i64 1, i64 14, %struct._IO_FILE* %1) #6
  %cmp159.i = icmp eq i64 %call.i106, 14
  br i1 %cmp159.i, label %if.end163.i, label %if.then161.i

if.then161.i:                                     ; preds = %if.end150.i
  %err.i107 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0
  %39 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err.i107, align 8, !tbaa !21
  %msg_code.i108 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %39, i64 0, i32 5
  store i32 36, i32* %msg_code.i108, align 8, !tbaa !22
  %error_exit.i109 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %39, i64 0, i32 0
  %40 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit.i109, align 8, !tbaa !24
  %41 = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  tail call void %40(%struct.jpeg_common_struct* %41) #6
  br label %if.end163.i

if.end163.i:                                      ; preds = %if.then161.i, %if.end150.i
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !39
  %call167.i = call i64 @fwrite(i8* nonnull %23, i64 1, i64 40, %struct._IO_FILE* %42) #6
  %cmp168.i = icmp eq i64 %call167.i, 40
  br i1 %cmp168.i, label %if.end175.i, label %if.then170.i

if.then170.i:                                     ; preds = %if.end163.i
  %err171.i = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0
  %43 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err171.i, align 8, !tbaa !21
  %msg_code172.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %43, i64 0, i32 5
  store i32 36, i32* %msg_code172.i, align 8, !tbaa !22
  %error_exit174.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %43, i64 0, i32 0
  %44 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit174.i, align 8, !tbaa !24
  %45 = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  tail call void %44(%struct.jpeg_common_struct* %45) #6
  br label %if.end175.i

if.end175.i:                                      ; preds = %if.then170.i, %if.end163.i
  %cmp176.i = icmp eq i32 %cmap_entries.0.i72, 0
  br i1 %cmp176.i, label %write_bmp_header.exit, label %if.then178.i

if.then178.i:                                     ; preds = %if.end175.i
  %dest.idx.val.i110 = load %struct._IO_FILE*, %struct._IO_FILE** %output_file, align 8, !tbaa !39
  tail call fastcc void @write_colormap(%struct.jpeg_decompress_struct* nonnull %cinfo, %struct._IO_FILE* %dest.idx.val.i110, i32 %cmap_entries.0.i72, i32 4) #6
  br label %write_bmp_header.exit

write_bmp_header.exit:                            ; preds = %if.end175.i, %if.then178.i
  call void @llvm.lifetime.end(i64 40, i8* nonnull %23) #6
  call void @llvm.lifetime.end(i64 14, i8* nonnull %6) #6
  br label %if.end

if.end:                                           ; preds = %write_bmp_header.exit, %write_os2_header.exit
  %output_height.pre-phi = phi i32* [ %output_height.i77, %write_bmp_header.exit ], [ %output_height.i, %write_os2_header.exit ]
  %46 = load i32, i32* %output_height.pre-phi, align 4, !tbaa !40
  %cmp114 = icmp eq i32 %46, 0
  %cmp2 = icmp ne %struct.cdjpeg_progress_mgr* %3, null
  br i1 %cmp114, label %for.end21, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end
  %pass_counter = getelementptr inbounds %struct.cdjpeg_progress_mgr, %struct.cdjpeg_progress_mgr* %3, i64 0, i32 0, i32 1
  %pass_limit = getelementptr inbounds %struct.cdjpeg_progress_mgr, %struct.cdjpeg_progress_mgr* %3, i64 0, i32 0, i32 2
  %progress_monitor10 = bitcast %struct.cdjpeg_progress_mgr* %3 to void (%struct.jpeg_common_struct*)**
  %47 = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  %mem = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 1
  %whole_image = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 1, i32 1
  %48 = bitcast void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*, i32)** %whole_image to %struct.jvirt_sarray_control**
  %row_width = getelementptr inbounds %struct.bmp_dest_struct, %struct.bmp_dest_struct* %0, i64 0, i32 4
  br i1 %cmp2, label %if.then3.us.preheader, label %if.end11.preheader

if.end11.preheader:                               ; preds = %for.body.lr.ph
  br label %if.end11

if.then3.us.preheader:                            ; preds = %for.body.lr.ph
  br label %if.then3.us

if.then3.us:                                      ; preds = %if.then3.us.preheader, %for.cond.loopexit.us.if.then3.us_crit_edge
  %49 = phi i32 [ %.pre, %for.cond.loopexit.us.if.then3.us_crit_edge ], [ %46, %if.then3.us.preheader ]
  %row.0115.us = phi i32 [ %sub12.us, %for.cond.loopexit.us.if.then3.us_crit_edge ], [ %46, %if.then3.us.preheader ]
  %sub.us = sub i32 %49, %row.0115.us
  %conv.us = zext i32 %sub.us to i64
  store i64 %conv.us, i64* %pass_counter, align 8, !tbaa !42
  %conv7.us = zext i32 %49 to i64
  store i64 %conv7.us, i64* %pass_limit, align 8, !tbaa !43
  %50 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %progress_monitor10, align 8, !tbaa !44
  tail call void %50(%struct.jpeg_common_struct* %47) #6
  %51 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !2
  %access_virt_sarray.us = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %51, i64 0, i32 7
  %52 = load i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)** %access_virt_sarray.us, align 8, !tbaa !45
  %53 = load %struct.jvirt_sarray_control*, %struct.jvirt_sarray_control** %48, align 8, !tbaa !30
  %sub12.us = add i32 %row.0115.us, -1
  %call.us = tail call i8** %52(%struct.jpeg_common_struct* %47, %struct.jvirt_sarray_control* %53, i32 %sub12.us, i32 1, i32 0) #6
  %54 = load i32, i32* %row_width, align 4, !tbaa !27
  %cmp14111.us = icmp eq i32 %54, 0
  br i1 %cmp14111.us, label %for.cond.loopexit.us, label %for.body16.us.preheader

for.body16.us.preheader:                          ; preds = %if.then3.us
  %55 = load i8*, i8** %call.us, align 8, !tbaa !46
  br label %for.body16.us

for.body16.us:                                    ; preds = %for.body16.us.preheader, %for.body16.us
  %data_ptr.0113.us = phi i8* [ %incdec.ptr.us, %for.body16.us ], [ %55, %for.body16.us.preheader ]
  %col.0112.us = phi i32 [ %dec.us, %for.body16.us ], [ %54, %for.body16.us.preheader ]
  %56 = load i8, i8* %data_ptr.0113.us, align 1, !tbaa !41
  %conv17.us = zext i8 %56 to i32
  %call18.us = tail call i32 @_IO_putc(i32 %conv17.us, %struct._IO_FILE* %1)
  %incdec.ptr.us = getelementptr inbounds i8, i8* %data_ptr.0113.us, i64 1
  %dec.us = add i32 %col.0112.us, -1
  %cmp14.us = icmp eq i32 %dec.us, 0
  br i1 %cmp14.us, label %for.cond.loopexit.us.loopexit, label %for.body16.us

for.cond.loopexit.us.loopexit:                    ; preds = %for.body16.us
  br label %for.cond.loopexit.us

for.cond.loopexit.us:                             ; preds = %for.cond.loopexit.us.loopexit, %if.then3.us
  %cmp.us = icmp eq i32 %sub12.us, 0
  br i1 %cmp.us, label %for.end21.loopexit, label %for.cond.loopexit.us.if.then3.us_crit_edge

for.cond.loopexit.us.if.then3.us_crit_edge:       ; preds = %for.cond.loopexit.us
  %.pre = load i32, i32* %output_height.pre-phi, align 4, !tbaa !40
  br label %if.then3.us

for.cond.loopexit.loopexit:                       ; preds = %for.body16
  br label %for.cond.loopexit

for.cond.loopexit:                                ; preds = %for.cond.loopexit.loopexit, %if.end11
  %cmp = icmp eq i32 %sub12, 0
  br i1 %cmp, label %for.end21.loopexit119, label %if.end11

if.end11:                                         ; preds = %if.end11.preheader, %for.cond.loopexit
  %row.0115 = phi i32 [ %sub12, %for.cond.loopexit ], [ %46, %if.end11.preheader ]
  %57 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !2
  %access_virt_sarray = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %57, i64 0, i32 7
  %58 = load i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)** %access_virt_sarray, align 8, !tbaa !45
  %59 = load %struct.jvirt_sarray_control*, %struct.jvirt_sarray_control** %48, align 8, !tbaa !30
  %sub12 = add i32 %row.0115, -1
  %call = tail call i8** %58(%struct.jpeg_common_struct* %47, %struct.jvirt_sarray_control* %59, i32 %sub12, i32 1, i32 0) #6
  %60 = load i32, i32* %row_width, align 4, !tbaa !27
  %cmp14111 = icmp eq i32 %60, 0
  br i1 %cmp14111, label %for.cond.loopexit, label %for.body16.preheader

for.body16.preheader:                             ; preds = %if.end11
  %61 = load i8*, i8** %call, align 8, !tbaa !46
  br label %for.body16

for.body16:                                       ; preds = %for.body16.preheader, %for.body16
  %data_ptr.0113 = phi i8* [ %incdec.ptr, %for.body16 ], [ %61, %for.body16.preheader ]
  %col.0112 = phi i32 [ %dec, %for.body16 ], [ %60, %for.body16.preheader ]
  %62 = load i8, i8* %data_ptr.0113, align 1, !tbaa !41
  %conv17 = zext i8 %62 to i32
  %call18 = tail call i32 @_IO_putc(i32 %conv17, %struct._IO_FILE* %1)
  %incdec.ptr = getelementptr inbounds i8, i8* %data_ptr.0113, i64 1
  %dec = add i32 %col.0112, -1
  %cmp14 = icmp eq i32 %dec, 0
  br i1 %cmp14, label %for.cond.loopexit.loopexit, label %for.body16

for.end21.loopexit:                               ; preds = %for.cond.loopexit.us
  br label %for.end21

for.end21.loopexit119:                            ; preds = %for.cond.loopexit
  br label %for.end21

for.end21:                                        ; preds = %for.end21.loopexit119, %for.end21.loopexit, %if.end
  br i1 %cmp2, label %if.then24, label %if.end25

if.then24:                                        ; preds = %for.end21
  %completed_extra_passes = getelementptr inbounds %struct.cdjpeg_progress_mgr, %struct.cdjpeg_progress_mgr* %3, i64 0, i32 1
  %63 = load i32, i32* %completed_extra_passes, align 8, !tbaa !47
  %inc = add nsw i32 %63, 1
  store i32 %inc, i32* %completed_extra_passes, align 8, !tbaa !47
  br label %if.end25

if.end25:                                         ; preds = %if.then24, %for.end21
  %call26 = tail call i32 @fflush(%struct._IO_FILE* %1)
  %call27 = tail call i32 @ferror(%struct._IO_FILE* %1) #6
  %tobool28 = icmp eq i32 %call27, 0
  br i1 %tobool28, label %if.end31, label %if.then29

if.then29:                                        ; preds = %if.end25
  %err = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0
  %64 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8, !tbaa !21
  %msg_code = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %64, i64 0, i32 5
  store i32 36, i32* %msg_code, align 8, !tbaa !22
  %error_exit = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %64, i64 0, i32 0
  %65 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit, align 8, !tbaa !24
  %66 = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  tail call void %65(%struct.jpeg_common_struct* %66) #6
  br label %if.end31

if.end31:                                         ; preds = %if.end25, %if.then29
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @put_gray_rows(%struct.jpeg_decompress_struct* %cinfo, %struct.djpeg_dest_struct* nocapture %dinfo, i32 %rows_supplied) #0 {
entry:
  %0 = bitcast %struct.djpeg_dest_struct* %dinfo to %struct.bmp_dest_struct*
  %mem = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 1
  %1 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !2
  %access_virt_sarray = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %1, i64 0, i32 7
  %2 = load i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)** %access_virt_sarray, align 8, !tbaa !45
  %3 = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  %whole_image = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 1, i32 1
  %4 = bitcast void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*, i32)** %whole_image to %struct.jvirt_sarray_control**
  %5 = load %struct.jvirt_sarray_control*, %struct.jvirt_sarray_control** %4, align 8, !tbaa !30
  %cur_output_row = getelementptr inbounds %struct.bmp_dest_struct, %struct.bmp_dest_struct* %0, i64 0, i32 6
  %6 = load i32, i32* %cur_output_row, align 4, !tbaa !31
  %call = tail call i8** %2(%struct.jpeg_common_struct* %3, %struct.jvirt_sarray_control* %5, i32 %6, i32 1, i32 1) #6
  %7 = load i32, i32* %cur_output_row, align 4, !tbaa !31
  %inc = add i32 %7, 1
  store i32 %inc, i32* %cur_output_row, align 4, !tbaa !31
  %8 = load i8*, i8** %call, align 8, !tbaa !46
  %output_width = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 26
  %9 = load i32, i32* %output_width, align 8, !tbaa !48
  %cmp24 = icmp eq i32 %9, 0
  br i1 %cmp24, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  %buffer = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 0, i32 4
  %10 = load i8**, i8*** %buffer, align 8, !tbaa !37
  %11 = load i8*, i8** %10, align 8, !tbaa !46
  %12 = add i32 %9, -1
  %13 = zext i32 %12 to i64
  %14 = add nuw nsw i64 %13, 1
  %15 = zext i32 %12 to i64
  %16 = add nuw nsw i64 %15, 1
  %min.iters.check = icmp ult i64 %16, 32
  br i1 %min.iters.check, label %for.body.preheader162, label %min.iters.checked

min.iters.checked:                                ; preds = %for.body.preheader
  %n.vec = and i64 %16, 8589934560
  %cmp.zero = icmp eq i64 %n.vec, 0
  br i1 %cmp.zero, label %for.body.preheader162, label %vector.memcheck

vector.memcheck:                                  ; preds = %min.iters.checked
  %17 = add i32 %9, -1
  %18 = zext i32 %17 to i64
  %scevgep28 = getelementptr i8, i8* %8, i64 %18
  %scevgep29 = getelementptr i8, i8* %11, i64 %18
  %bound0 = icmp ule i8* %8, %scevgep29
  %bound1 = icmp ule i8* %11, %scevgep28
  %memcheck.conflict = and i1 %bound0, %bound1
  %cast.crd = trunc i64 %n.vec to i32
  %ind.end = sub i32 %9, %cast.crd
  %ind.end31 = getelementptr i8, i8* %8, i64 %n.vec
  %ind.end33 = getelementptr i8, i8* %11, i64 %n.vec
  br i1 %memcheck.conflict, label %for.body.preheader162, label %vector.body.preheader

vector.body.preheader:                            ; preds = %vector.memcheck
  %19 = add i32 %9, -1
  %20 = zext i32 %19 to i64
  %21 = add nuw nsw i64 %20, 1
  %22 = and i64 %21, 8589934560
  %23 = add nsw i64 %22, -32
  %24 = lshr exact i64 %23, 5
  %25 = add nuw nsw i64 %24, 1
  %xtraiter163 = and i64 %25, 3
  %lcmp.mod164 = icmp eq i64 %xtraiter163, 0
  br i1 %lcmp.mod164, label %vector.body.preheader.split, label %vector.body.prol.preheader

vector.body.prol.preheader:                       ; preds = %vector.body.preheader
  br label %vector.body.prol

vector.body.prol:                                 ; preds = %vector.body.prol.preheader, %vector.body.prol
  %index.prol = phi i64 [ %index.next.prol, %vector.body.prol ], [ 0, %vector.body.prol.preheader ]
  %prol.iter165 = phi i64 [ %prol.iter165.sub, %vector.body.prol ], [ %xtraiter163, %vector.body.prol.preheader ]
  %next.gep.prol = getelementptr i8, i8* %8, i64 %index.prol
  %next.gep97.prol = getelementptr i8, i8* %11, i64 %index.prol
  %26 = bitcast i8* %next.gep97.prol to <16 x i8>*
  %wide.load.prol = load <16 x i8>, <16 x i8>* %26, align 1, !tbaa !41
  %27 = getelementptr i8, i8* %next.gep97.prol, i64 16
  %28 = bitcast i8* %27 to <16 x i8>*
  %wide.load161.prol = load <16 x i8>, <16 x i8>* %28, align 1, !tbaa !41
  %29 = bitcast i8* %next.gep.prol to <16 x i8>*
  store <16 x i8> %wide.load.prol, <16 x i8>* %29, align 1, !tbaa !41
  %30 = getelementptr i8, i8* %next.gep.prol, i64 16
  %31 = bitcast i8* %30 to <16 x i8>*
  store <16 x i8> %wide.load161.prol, <16 x i8>* %31, align 1, !tbaa !41
  %index.next.prol = add i64 %index.prol, 32
  %prol.iter165.sub = add i64 %prol.iter165, -1
  %prol.iter165.cmp = icmp eq i64 %prol.iter165.sub, 0
  br i1 %prol.iter165.cmp, label %vector.body.preheader.split.loopexit, label %vector.body.prol, !llvm.loop !49

vector.body.preheader.split.loopexit:             ; preds = %vector.body.prol
  %index.next.prol.lcssa = phi i64 [ %index.next.prol, %vector.body.prol ]
  br label %vector.body.preheader.split

vector.body.preheader.split:                      ; preds = %vector.body.preheader.split.loopexit, %vector.body.preheader
  %index.unr = phi i64 [ 0, %vector.body.preheader ], [ %index.next.prol.lcssa, %vector.body.preheader.split.loopexit ]
  %32 = icmp ult i64 %23, 96
  br i1 %32, label %middle.block, label %vector.body.preheader.split.split

vector.body.preheader.split.split:                ; preds = %vector.body.preheader.split
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.body.preheader.split.split
  %index = phi i64 [ %index.unr, %vector.body.preheader.split.split ], [ %index.next.3, %vector.body ]
  %next.gep = getelementptr i8, i8* %8, i64 %index
  %next.gep97 = getelementptr i8, i8* %11, i64 %index
  %33 = bitcast i8* %next.gep97 to <16 x i8>*
  %wide.load = load <16 x i8>, <16 x i8>* %33, align 1, !tbaa !41
  %34 = getelementptr i8, i8* %next.gep97, i64 16
  %35 = bitcast i8* %34 to <16 x i8>*
  %wide.load161 = load <16 x i8>, <16 x i8>* %35, align 1, !tbaa !41
  %36 = bitcast i8* %next.gep to <16 x i8>*
  store <16 x i8> %wide.load, <16 x i8>* %36, align 1, !tbaa !41
  %37 = getelementptr i8, i8* %next.gep, i64 16
  %38 = bitcast i8* %37 to <16 x i8>*
  store <16 x i8> %wide.load161, <16 x i8>* %38, align 1, !tbaa !41
  %index.next = add i64 %index, 32
  %next.gep.1 = getelementptr i8, i8* %8, i64 %index.next
  %next.gep97.1 = getelementptr i8, i8* %11, i64 %index.next
  %39 = bitcast i8* %next.gep97.1 to <16 x i8>*
  %wide.load.1 = load <16 x i8>, <16 x i8>* %39, align 1, !tbaa !41
  %40 = getelementptr i8, i8* %next.gep97.1, i64 16
  %41 = bitcast i8* %40 to <16 x i8>*
  %wide.load161.1 = load <16 x i8>, <16 x i8>* %41, align 1, !tbaa !41
  %42 = bitcast i8* %next.gep.1 to <16 x i8>*
  store <16 x i8> %wide.load.1, <16 x i8>* %42, align 1, !tbaa !41
  %43 = getelementptr i8, i8* %next.gep.1, i64 16
  %44 = bitcast i8* %43 to <16 x i8>*
  store <16 x i8> %wide.load161.1, <16 x i8>* %44, align 1, !tbaa !41
  %index.next.1 = add i64 %index, 64
  %next.gep.2 = getelementptr i8, i8* %8, i64 %index.next.1
  %next.gep97.2 = getelementptr i8, i8* %11, i64 %index.next.1
  %45 = bitcast i8* %next.gep97.2 to <16 x i8>*
  %wide.load.2 = load <16 x i8>, <16 x i8>* %45, align 1, !tbaa !41
  %46 = getelementptr i8, i8* %next.gep97.2, i64 16
  %47 = bitcast i8* %46 to <16 x i8>*
  %wide.load161.2 = load <16 x i8>, <16 x i8>* %47, align 1, !tbaa !41
  %48 = bitcast i8* %next.gep.2 to <16 x i8>*
  store <16 x i8> %wide.load.2, <16 x i8>* %48, align 1, !tbaa !41
  %49 = getelementptr i8, i8* %next.gep.2, i64 16
  %50 = bitcast i8* %49 to <16 x i8>*
  store <16 x i8> %wide.load161.2, <16 x i8>* %50, align 1, !tbaa !41
  %index.next.2 = add i64 %index, 96
  %next.gep.3 = getelementptr i8, i8* %8, i64 %index.next.2
  %next.gep97.3 = getelementptr i8, i8* %11, i64 %index.next.2
  %51 = bitcast i8* %next.gep97.3 to <16 x i8>*
  %wide.load.3 = load <16 x i8>, <16 x i8>* %51, align 1, !tbaa !41
  %52 = getelementptr i8, i8* %next.gep97.3, i64 16
  %53 = bitcast i8* %52 to <16 x i8>*
  %wide.load161.3 = load <16 x i8>, <16 x i8>* %53, align 1, !tbaa !41
  %54 = bitcast i8* %next.gep.3 to <16 x i8>*
  store <16 x i8> %wide.load.3, <16 x i8>* %54, align 1, !tbaa !41
  %55 = getelementptr i8, i8* %next.gep.3, i64 16
  %56 = bitcast i8* %55 to <16 x i8>*
  store <16 x i8> %wide.load161.3, <16 x i8>* %56, align 1, !tbaa !41
  %index.next.3 = add i64 %index, 128
  %57 = icmp eq i64 %index.next.3, %n.vec
  br i1 %57, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !51

middle.block.unr-lcssa:                           ; preds = %vector.body
  br label %middle.block

middle.block:                                     ; preds = %vector.body.preheader.split, %middle.block.unr-lcssa
  %cmp.n = icmp eq i64 %16, %n.vec
  br i1 %cmp.n, label %for.end.loopexit, label %for.body.preheader162

for.body.preheader162:                            ; preds = %middle.block, %vector.memcheck, %min.iters.checked, %for.body.preheader
  %col.027.ph = phi i32 [ %9, %vector.memcheck ], [ %9, %min.iters.checked ], [ %9, %for.body.preheader ], [ %ind.end, %middle.block ]
  %outptr.026.ph = phi i8* [ %8, %vector.memcheck ], [ %8, %min.iters.checked ], [ %8, %for.body.preheader ], [ %ind.end31, %middle.block ]
  %inptr.025.ph = phi i8* [ %11, %vector.memcheck ], [ %11, %min.iters.checked ], [ %11, %for.body.preheader ], [ %ind.end33, %middle.block ]
  %58 = add i32 %col.027.ph, -1
  %xtraiter = and i32 %col.027.ph, 7
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod, label %for.body.preheader162.split, label %for.body.prol.preheader

for.body.prol.preheader:                          ; preds = %for.body.preheader162
  br label %for.body.prol

for.body.prol:                                    ; preds = %for.body.prol.preheader, %for.body.prol
  %col.027.prol = phi i32 [ %dec.prol, %for.body.prol ], [ %col.027.ph, %for.body.prol.preheader ]
  %outptr.026.prol = phi i8* [ %incdec.ptr3.prol, %for.body.prol ], [ %outptr.026.ph, %for.body.prol.preheader ]
  %inptr.025.prol = phi i8* [ %incdec.ptr.prol, %for.body.prol ], [ %inptr.025.ph, %for.body.prol.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %for.body.prol ], [ %xtraiter, %for.body.prol.preheader ]
  %incdec.ptr.prol = getelementptr inbounds i8, i8* %inptr.025.prol, i64 1
  %59 = load i8, i8* %inptr.025.prol, align 1, !tbaa !41
  %incdec.ptr3.prol = getelementptr inbounds i8, i8* %outptr.026.prol, i64 1
  store i8 %59, i8* %outptr.026.prol, align 1, !tbaa !41
  %dec.prol = add i32 %col.027.prol, -1
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %for.body.preheader162.split.loopexit, label %for.body.prol, !llvm.loop !54

for.body.preheader162.split.loopexit:             ; preds = %for.body.prol
  %dec.prol.lcssa = phi i32 [ %dec.prol, %for.body.prol ]
  %incdec.ptr3.prol.lcssa = phi i8* [ %incdec.ptr3.prol, %for.body.prol ]
  %incdec.ptr.prol.lcssa = phi i8* [ %incdec.ptr.prol, %for.body.prol ]
  br label %for.body.preheader162.split

for.body.preheader162.split:                      ; preds = %for.body.preheader162.split.loopexit, %for.body.preheader162
  %col.027.unr = phi i32 [ %col.027.ph, %for.body.preheader162 ], [ %dec.prol.lcssa, %for.body.preheader162.split.loopexit ]
  %outptr.026.unr = phi i8* [ %outptr.026.ph, %for.body.preheader162 ], [ %incdec.ptr3.prol.lcssa, %for.body.preheader162.split.loopexit ]
  %inptr.025.unr = phi i8* [ %inptr.025.ph, %for.body.preheader162 ], [ %incdec.ptr.prol.lcssa, %for.body.preheader162.split.loopexit ]
  %60 = icmp ult i32 %58, 7
  br i1 %60, label %for.end.loopexit.loopexit, label %for.body.preheader162.split.split

for.body.preheader162.split.split:                ; preds = %for.body.preheader162.split
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader162.split.split
  %col.027 = phi i32 [ %col.027.unr, %for.body.preheader162.split.split ], [ %dec.7, %for.body ]
  %outptr.026 = phi i8* [ %outptr.026.unr, %for.body.preheader162.split.split ], [ %incdec.ptr3.7, %for.body ]
  %inptr.025 = phi i8* [ %inptr.025.unr, %for.body.preheader162.split.split ], [ %incdec.ptr.7, %for.body ]
  %incdec.ptr = getelementptr inbounds i8, i8* %inptr.025, i64 1
  %61 = load i8, i8* %inptr.025, align 1, !tbaa !41
  %incdec.ptr3 = getelementptr inbounds i8, i8* %outptr.026, i64 1
  store i8 %61, i8* %outptr.026, align 1, !tbaa !41
  %incdec.ptr.1 = getelementptr inbounds i8, i8* %inptr.025, i64 2
  %62 = load i8, i8* %incdec.ptr, align 1, !tbaa !41
  %incdec.ptr3.1 = getelementptr inbounds i8, i8* %outptr.026, i64 2
  store i8 %62, i8* %incdec.ptr3, align 1, !tbaa !41
  %incdec.ptr.2 = getelementptr inbounds i8, i8* %inptr.025, i64 3
  %63 = load i8, i8* %incdec.ptr.1, align 1, !tbaa !41
  %incdec.ptr3.2 = getelementptr inbounds i8, i8* %outptr.026, i64 3
  store i8 %63, i8* %incdec.ptr3.1, align 1, !tbaa !41
  %incdec.ptr.3 = getelementptr inbounds i8, i8* %inptr.025, i64 4
  %64 = load i8, i8* %incdec.ptr.2, align 1, !tbaa !41
  %incdec.ptr3.3 = getelementptr inbounds i8, i8* %outptr.026, i64 4
  store i8 %64, i8* %incdec.ptr3.2, align 1, !tbaa !41
  %incdec.ptr.4 = getelementptr inbounds i8, i8* %inptr.025, i64 5
  %65 = load i8, i8* %incdec.ptr.3, align 1, !tbaa !41
  %incdec.ptr3.4 = getelementptr inbounds i8, i8* %outptr.026, i64 5
  store i8 %65, i8* %incdec.ptr3.3, align 1, !tbaa !41
  %incdec.ptr.5 = getelementptr inbounds i8, i8* %inptr.025, i64 6
  %66 = load i8, i8* %incdec.ptr.4, align 1, !tbaa !41
  %incdec.ptr3.5 = getelementptr inbounds i8, i8* %outptr.026, i64 6
  store i8 %66, i8* %incdec.ptr3.4, align 1, !tbaa !41
  %incdec.ptr.6 = getelementptr inbounds i8, i8* %inptr.025, i64 7
  %67 = load i8, i8* %incdec.ptr.5, align 1, !tbaa !41
  %incdec.ptr3.6 = getelementptr inbounds i8, i8* %outptr.026, i64 7
  store i8 %67, i8* %incdec.ptr3.5, align 1, !tbaa !41
  %incdec.ptr.7 = getelementptr inbounds i8, i8* %inptr.025, i64 8
  %68 = load i8, i8* %incdec.ptr.6, align 1, !tbaa !41
  %incdec.ptr3.7 = getelementptr inbounds i8, i8* %outptr.026, i64 8
  store i8 %68, i8* %incdec.ptr3.6, align 1, !tbaa !41
  %dec.7 = add i32 %col.027, -8
  %cmp.7 = icmp eq i32 %dec.7, 0
  br i1 %cmp.7, label %for.end.loopexit.loopexit.unr-lcssa, label %for.body, !llvm.loop !55

for.end.loopexit.loopexit.unr-lcssa:              ; preds = %for.body
  br label %for.end.loopexit.loopexit

for.end.loopexit.loopexit:                        ; preds = %for.body.preheader162.split, %for.end.loopexit.loopexit.unr-lcssa
  br label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.end.loopexit.loopexit, %middle.block
  %scevgep = getelementptr i8, i8* %8, i64 %14
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  %outptr.0.lcssa = phi i8* [ %8, %entry ], [ %scevgep, %for.end.loopexit ]
  %pad_bytes = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 1, i32 3
  %69 = bitcast %struct._IO_FILE** %pad_bytes to i32*
  %70 = load i32, i32* %69, align 8, !tbaa !28
  %cmp521 = icmp sgt i32 %70, 0
  br i1 %cmp521, label %while.body.preheader, label %while.end

while.body.preheader:                             ; preds = %for.end
  %71 = add i32 %70, -1
  %72 = zext i32 %71 to i64
  %73 = add nuw nsw i64 %72, 1
  call void @llvm.memset.p0i8.i64(i8* %outptr.0.lcssa, i8 0, i64 %73, i32 1, i1 false)
  br label %while.end

while.end:                                        ; preds = %while.body.preheader, %for.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @put_pixel_rows(%struct.jpeg_decompress_struct* %cinfo, %struct.djpeg_dest_struct* nocapture %dinfo, i32 %rows_supplied) #0 {
entry:
  %0 = bitcast %struct.djpeg_dest_struct* %dinfo to %struct.bmp_dest_struct*
  %mem = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 1
  %1 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !2
  %access_virt_sarray = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %1, i64 0, i32 7
  %2 = load i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)** %access_virt_sarray, align 8, !tbaa !45
  %3 = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  %whole_image = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 1, i32 1
  %4 = bitcast void (%struct.jpeg_decompress_struct*, %struct.djpeg_dest_struct*, i32)** %whole_image to %struct.jvirt_sarray_control**
  %5 = load %struct.jvirt_sarray_control*, %struct.jvirt_sarray_control** %4, align 8, !tbaa !30
  %cur_output_row = getelementptr inbounds %struct.bmp_dest_struct, %struct.bmp_dest_struct* %0, i64 0, i32 6
  %6 = load i32, i32* %cur_output_row, align 4, !tbaa !31
  %call = tail call i8** %2(%struct.jpeg_common_struct* %3, %struct.jvirt_sarray_control* %5, i32 %6, i32 1, i32 1) #6
  %7 = load i32, i32* %cur_output_row, align 4, !tbaa !31
  %inc = add i32 %7, 1
  store i32 %inc, i32* %cur_output_row, align 4, !tbaa !31
  %8 = load i8*, i8** %call, align 8, !tbaa !46
  %output_width = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 26
  %9 = load i32, i32* %output_width, align 8, !tbaa !48
  %cmp33 = icmp eq i32 %9, 0
  br i1 %cmp33, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  %buffer = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 0, i32 4
  %10 = load i8**, i8*** %buffer, align 8, !tbaa !37
  %11 = load i8*, i8** %10, align 8, !tbaa !46
  %12 = add i32 %9, -1
  %13 = zext i32 %12 to i64
  %14 = mul nuw nsw i64 %13, 3
  %15 = add nuw nsw i64 %14, 3
  %xtraiter = and i32 %9, 1
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod, label %for.body.preheader.split, label %for.body.prol

for.body.prol:                                    ; preds = %for.body.preheader
  %incdec.ptr.prol = getelementptr inbounds i8, i8* %11, i64 1
  %16 = load i8, i8* %11, align 1, !tbaa !41
  %arrayidx3.prol = getelementptr inbounds i8, i8* %8, i64 2
  store i8 %16, i8* %arrayidx3.prol, align 1, !tbaa !41
  %incdec.ptr4.prol = getelementptr inbounds i8, i8* %11, i64 2
  %17 = load i8, i8* %incdec.ptr.prol, align 1, !tbaa !41
  %arrayidx5.prol = getelementptr inbounds i8, i8* %8, i64 1
  store i8 %17, i8* %arrayidx5.prol, align 1, !tbaa !41
  %incdec.ptr6.prol = getelementptr inbounds i8, i8* %11, i64 3
  %18 = load i8, i8* %incdec.ptr4.prol, align 1, !tbaa !41
  store i8 %18, i8* %8, align 1, !tbaa !41
  %add.ptr.prol = getelementptr inbounds i8, i8* %8, i64 3
  %dec.prol = add i32 %9, -1
  br label %for.body.preheader.split

for.body.preheader.split:                         ; preds = %for.body.preheader, %for.body.prol
  %col.036.unr = phi i32 [ %9, %for.body.preheader ], [ %dec.prol, %for.body.prol ]
  %outptr.035.unr = phi i8* [ %8, %for.body.preheader ], [ %add.ptr.prol, %for.body.prol ]
  %inptr.034.unr = phi i8* [ %11, %for.body.preheader ], [ %incdec.ptr6.prol, %for.body.prol ]
  %19 = icmp eq i32 %12, 0
  br i1 %19, label %for.end.loopexit, label %for.body.preheader.split.split

for.body.preheader.split.split:                   ; preds = %for.body.preheader.split
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader.split.split
  %col.036 = phi i32 [ %col.036.unr, %for.body.preheader.split.split ], [ %dec.1, %for.body ]
  %outptr.035 = phi i8* [ %outptr.035.unr, %for.body.preheader.split.split ], [ %add.ptr.1, %for.body ]
  %inptr.034 = phi i8* [ %inptr.034.unr, %for.body.preheader.split.split ], [ %incdec.ptr6.1, %for.body ]
  %incdec.ptr = getelementptr inbounds i8, i8* %inptr.034, i64 1
  %20 = load i8, i8* %inptr.034, align 1, !tbaa !41
  %arrayidx3 = getelementptr inbounds i8, i8* %outptr.035, i64 2
  store i8 %20, i8* %arrayidx3, align 1, !tbaa !41
  %incdec.ptr4 = getelementptr inbounds i8, i8* %inptr.034, i64 2
  %21 = load i8, i8* %incdec.ptr, align 1, !tbaa !41
  %arrayidx5 = getelementptr inbounds i8, i8* %outptr.035, i64 1
  store i8 %21, i8* %arrayidx5, align 1, !tbaa !41
  %incdec.ptr6 = getelementptr inbounds i8, i8* %inptr.034, i64 3
  %22 = load i8, i8* %incdec.ptr4, align 1, !tbaa !41
  store i8 %22, i8* %outptr.035, align 1, !tbaa !41
  %add.ptr = getelementptr inbounds i8, i8* %outptr.035, i64 3
  %incdec.ptr.1 = getelementptr inbounds i8, i8* %inptr.034, i64 4
  %23 = load i8, i8* %incdec.ptr6, align 1, !tbaa !41
  %arrayidx3.1 = getelementptr inbounds i8, i8* %outptr.035, i64 5
  store i8 %23, i8* %arrayidx3.1, align 1, !tbaa !41
  %incdec.ptr4.1 = getelementptr inbounds i8, i8* %inptr.034, i64 5
  %24 = load i8, i8* %incdec.ptr.1, align 1, !tbaa !41
  %arrayidx5.1 = getelementptr inbounds i8, i8* %outptr.035, i64 4
  store i8 %24, i8* %arrayidx5.1, align 1, !tbaa !41
  %incdec.ptr6.1 = getelementptr inbounds i8, i8* %inptr.034, i64 6
  %25 = load i8, i8* %incdec.ptr4.1, align 1, !tbaa !41
  store i8 %25, i8* %add.ptr, align 1, !tbaa !41
  %add.ptr.1 = getelementptr inbounds i8, i8* %outptr.035, i64 6
  %dec.1 = add i32 %col.036, -2
  %cmp.1 = icmp eq i32 %dec.1, 0
  br i1 %cmp.1, label %for.end.loopexit.unr-lcssa, label %for.body

for.end.loopexit.unr-lcssa:                       ; preds = %for.body
  br label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body.preheader.split, %for.end.loopexit.unr-lcssa
  %scevgep = getelementptr i8, i8* %8, i64 %15
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  %outptr.0.lcssa = phi i8* [ %8, %entry ], [ %scevgep, %for.end.loopexit ]
  %pad_bytes = getelementptr inbounds %struct.djpeg_dest_struct, %struct.djpeg_dest_struct* %dinfo, i64 1, i32 3
  %26 = bitcast %struct._IO_FILE** %pad_bytes to i32*
  %27 = load i32, i32* %26, align 8, !tbaa !28
  %cmp930 = icmp sgt i32 %27, 0
  br i1 %cmp930, label %while.body.preheader, label %while.end

while.body.preheader:                             ; preds = %for.end
  %28 = add i32 %27, -1
  %29 = zext i32 %28 to i64
  %30 = add nuw nsw i64 %29, 1
  call void @llvm.memset.p0i8.i64(i8* %outptr.0.lcssa, i8 0, i64 %30, i32 1, i1 false)
  br label %while.end

while.end:                                        ; preds = %while.body.preheader, %for.end
  ret void
}

declare void @jpeg_calc_output_dimensions(%struct.jpeg_decompress_struct*) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: nounwind
declare i32 @_IO_putc(i32, %struct._IO_FILE* nocapture) #4

; Function Attrs: nounwind
declare i32 @fflush(%struct._IO_FILE* nocapture) #4

; Function Attrs: nounwind readonly
declare i32 @ferror(%struct._IO_FILE* nocapture) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #1

; Function Attrs: nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) #4

; Function Attrs: nounwind uwtable
define internal fastcc void @write_colormap(%struct.jpeg_decompress_struct* %cinfo, %struct._IO_FILE* %dest.0.0.3.val, i32 %map_colors, i32 %map_entry_size) unnamed_addr #0 {
entry:
  %colormap1 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 32
  %0 = load i8**, i8*** %colormap1, align 8, !tbaa !56
  %actual_number_of_colors = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 31
  %1 = load i32, i32* %actual_number_of_colors, align 4, !tbaa !57
  %cmp = icmp eq i8** %0, null
  br i1 %cmp, label %for.cond49.preheader, label %if.then

for.cond49.preheader:                             ; preds = %entry
  %cmp56 = icmp eq i32 %map_entry_size, 4
  br i1 %cmp56, label %for.body52.us.preheader, label %for.body52.preheader

for.body52.preheader:                             ; preds = %for.cond49.preheader
  br label %for.body52

for.body52.us.preheader:                          ; preds = %for.cond49.preheader
  br label %for.body52.us

for.body52.us:                                    ; preds = %for.body52.us.preheader, %for.body52.us
  %i.25.us = phi i32 [ %inc62.us, %for.body52.us ], [ 0, %for.body52.us.preheader ]
  %call53.us = tail call i32 @_IO_putc(i32 %i.25.us, %struct._IO_FILE* %dest.0.0.3.val)
  %call54.us = tail call i32 @_IO_putc(i32 %i.25.us, %struct._IO_FILE* %dest.0.0.3.val)
  %call55.us = tail call i32 @_IO_putc(i32 %i.25.us, %struct._IO_FILE* %dest.0.0.3.val)
  %call59.us = tail call i32 @_IO_putc(i32 0, %struct._IO_FILE* %dest.0.0.3.val)
  %inc62.us = add nuw nsw i32 %i.25.us, 1
  %exitcond18 = icmp eq i32 %inc62.us, 256
  br i1 %exitcond18, label %if.end64.loopexit, label %for.body52.us

if.then:                                          ; preds = %entry
  %out_color_components = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 28
  %2 = load i32, i32* %out_color_components, align 8, !tbaa !58
  %cmp2 = icmp eq i32 %2, 3
  %cmp46 = icmp sgt i32 %1, 0
  br i1 %cmp2, label %for.cond.preheader, label %for.cond20.preheader

for.cond20.preheader:                             ; preds = %if.then
  br i1 %cmp46, label %for.body23.lr.ph, label %if.end64

for.body23.lr.ph:                                 ; preds = %for.cond20.preheader
  %cmp39 = icmp eq i32 %map_entry_size, 4
  br i1 %cmp39, label %for.body23.us.preheader, label %for.body23.preheader

for.body23.preheader:                             ; preds = %for.body23.lr.ph
  br label %for.body23

for.body23.us.preheader:                          ; preds = %for.body23.lr.ph
  br label %for.body23.us

for.body23.us:                                    ; preds = %for.body23.us.preheader, %for.body23.us
  %indvars.iv25 = phi i64 [ %indvars.iv.next26, %for.body23.us ], [ 0, %for.body23.us.preheader ]
  %3 = load i8*, i8** %0, align 8, !tbaa !46
  %arrayidx26.us = getelementptr inbounds i8, i8* %3, i64 %indvars.iv25
  %4 = load i8, i8* %arrayidx26.us, align 1, !tbaa !41
  %conv27.us = zext i8 %4 to i32
  %call28.us = tail call i32 @_IO_putc(i32 %conv27.us, %struct._IO_FILE* %dest.0.0.3.val)
  %5 = load i8*, i8** %0, align 8, !tbaa !46
  %arrayidx31.us = getelementptr inbounds i8, i8* %5, i64 %indvars.iv25
  %6 = load i8, i8* %arrayidx31.us, align 1, !tbaa !41
  %conv32.us = zext i8 %6 to i32
  %call33.us = tail call i32 @_IO_putc(i32 %conv32.us, %struct._IO_FILE* %dest.0.0.3.val)
  %7 = load i8*, i8** %0, align 8, !tbaa !46
  %arrayidx36.us = getelementptr inbounds i8, i8* %7, i64 %indvars.iv25
  %8 = load i8, i8* %arrayidx36.us, align 1, !tbaa !41
  %conv37.us = zext i8 %8 to i32
  %call38.us = tail call i32 @_IO_putc(i32 %conv37.us, %struct._IO_FILE* %dest.0.0.3.val)
  %call42.us = tail call i32 @_IO_putc(i32 0, %struct._IO_FILE* %dest.0.0.3.val)
  %indvars.iv.next26 = add nuw nsw i64 %indvars.iv25, 1
  %lftr.wideiv27 = trunc i64 %indvars.iv.next26 to i32
  %exitcond28 = icmp eq i32 %lftr.wideiv27, %1
  br i1 %exitcond28, label %if.end64.loopexit49, label %for.body23.us

for.cond.preheader:                               ; preds = %if.then
  br i1 %cmp46, label %for.body.lr.ph, label %if.end64

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %arrayidx = getelementptr inbounds i8*, i8** %0, i64 2
  %arrayidx7 = getelementptr inbounds i8*, i8** %0, i64 1
  %cmp16 = icmp eq i32 %map_entry_size, 4
  br i1 %cmp16, label %for.body.us.preheader, label %for.body.preheader

for.body.preheader:                               ; preds = %for.body.lr.ph
  br label %for.body

for.body.us.preheader:                            ; preds = %for.body.lr.ph
  br label %for.body.us

for.body.us:                                      ; preds = %for.body.us.preheader, %for.body.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body.us ], [ 0, %for.body.us.preheader ]
  %9 = load i8*, i8** %arrayidx, align 8, !tbaa !46
  %arrayidx5.us = getelementptr inbounds i8, i8* %9, i64 %indvars.iv
  %10 = load i8, i8* %arrayidx5.us, align 1, !tbaa !41
  %conv.us = zext i8 %10 to i32
  %call.us = tail call i32 @_IO_putc(i32 %conv.us, %struct._IO_FILE* %dest.0.0.3.val)
  %11 = load i8*, i8** %arrayidx7, align 8, !tbaa !46
  %arrayidx8.us = getelementptr inbounds i8, i8* %11, i64 %indvars.iv
  %12 = load i8, i8* %arrayidx8.us, align 1, !tbaa !41
  %conv9.us = zext i8 %12 to i32
  %call10.us = tail call i32 @_IO_putc(i32 %conv9.us, %struct._IO_FILE* %dest.0.0.3.val)
  %13 = load i8*, i8** %0, align 8, !tbaa !46
  %arrayidx13.us = getelementptr inbounds i8, i8* %13, i64 %indvars.iv
  %14 = load i8, i8* %arrayidx13.us, align 1, !tbaa !41
  %conv14.us = zext i8 %14 to i32
  %call15.us = tail call i32 @_IO_putc(i32 %conv14.us, %struct._IO_FILE* %dest.0.0.3.val)
  %call19.us = tail call i32 @_IO_putc(i32 0, %struct._IO_FILE* %dest.0.0.3.val)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond20 = icmp eq i32 %lftr.wideiv, %1
  br i1 %exitcond20, label %if.end64.loopexit47, label %for.body.us

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv21 = phi i64 [ %indvars.iv.next22, %for.body ], [ 0, %for.body.preheader ]
  %15 = load i8*, i8** %arrayidx, align 8, !tbaa !46
  %arrayidx5 = getelementptr inbounds i8, i8* %15, i64 %indvars.iv21
  %16 = load i8, i8* %arrayidx5, align 1, !tbaa !41
  %conv = zext i8 %16 to i32
  %call = tail call i32 @_IO_putc(i32 %conv, %struct._IO_FILE* %dest.0.0.3.val)
  %17 = load i8*, i8** %arrayidx7, align 8, !tbaa !46
  %arrayidx8 = getelementptr inbounds i8, i8* %17, i64 %indvars.iv21
  %18 = load i8, i8* %arrayidx8, align 1, !tbaa !41
  %conv9 = zext i8 %18 to i32
  %call10 = tail call i32 @_IO_putc(i32 %conv9, %struct._IO_FILE* %dest.0.0.3.val)
  %19 = load i8*, i8** %0, align 8, !tbaa !46
  %arrayidx13 = getelementptr inbounds i8, i8* %19, i64 %indvars.iv21
  %20 = load i8, i8* %arrayidx13, align 1, !tbaa !41
  %conv14 = zext i8 %20 to i32
  %call15 = tail call i32 @_IO_putc(i32 %conv14, %struct._IO_FILE* %dest.0.0.3.val)
  %indvars.iv.next22 = add nuw nsw i64 %indvars.iv21, 1
  %lftr.wideiv23 = trunc i64 %indvars.iv.next22 to i32
  %exitcond24 = icmp eq i32 %lftr.wideiv23, %1
  br i1 %exitcond24, label %if.end64.loopexit48, label %for.body

for.body23:                                       ; preds = %for.body23.preheader, %for.body23
  %indvars.iv29 = phi i64 [ %indvars.iv.next30, %for.body23 ], [ 0, %for.body23.preheader ]
  %21 = load i8*, i8** %0, align 8, !tbaa !46
  %arrayidx26 = getelementptr inbounds i8, i8* %21, i64 %indvars.iv29
  %22 = load i8, i8* %arrayidx26, align 1, !tbaa !41
  %conv27 = zext i8 %22 to i32
  %call28 = tail call i32 @_IO_putc(i32 %conv27, %struct._IO_FILE* %dest.0.0.3.val)
  %23 = load i8*, i8** %0, align 8, !tbaa !46
  %arrayidx31 = getelementptr inbounds i8, i8* %23, i64 %indvars.iv29
  %24 = load i8, i8* %arrayidx31, align 1, !tbaa !41
  %conv32 = zext i8 %24 to i32
  %call33 = tail call i32 @_IO_putc(i32 %conv32, %struct._IO_FILE* %dest.0.0.3.val)
  %25 = load i8*, i8** %0, align 8, !tbaa !46
  %arrayidx36 = getelementptr inbounds i8, i8* %25, i64 %indvars.iv29
  %26 = load i8, i8* %arrayidx36, align 1, !tbaa !41
  %conv37 = zext i8 %26 to i32
  %call38 = tail call i32 @_IO_putc(i32 %conv37, %struct._IO_FILE* %dest.0.0.3.val)
  %indvars.iv.next30 = add nuw nsw i64 %indvars.iv29, 1
  %lftr.wideiv31 = trunc i64 %indvars.iv.next30 to i32
  %exitcond32 = icmp eq i32 %lftr.wideiv31, %1
  br i1 %exitcond32, label %if.end64.loopexit50, label %for.body23

for.body52:                                       ; preds = %for.body52.preheader, %for.body52
  %i.25 = phi i32 [ %inc62, %for.body52 ], [ 0, %for.body52.preheader ]
  %call53 = tail call i32 @_IO_putc(i32 %i.25, %struct._IO_FILE* %dest.0.0.3.val)
  %call54 = tail call i32 @_IO_putc(i32 %i.25, %struct._IO_FILE* %dest.0.0.3.val)
  %call55 = tail call i32 @_IO_putc(i32 %i.25, %struct._IO_FILE* %dest.0.0.3.val)
  %inc62 = add nuw nsw i32 %i.25, 1
  %exitcond19 = icmp eq i32 %inc62, 256
  br i1 %exitcond19, label %if.end64.loopexit46, label %for.body52

if.end64.loopexit:                                ; preds = %for.body52.us
  br label %if.end64

if.end64.loopexit46:                              ; preds = %for.body52
  br label %if.end64

if.end64.loopexit47:                              ; preds = %for.body.us
  br label %if.end64

if.end64.loopexit48:                              ; preds = %for.body
  br label %if.end64

if.end64.loopexit49:                              ; preds = %for.body23.us
  br label %if.end64

if.end64.loopexit50:                              ; preds = %for.body23
  br label %if.end64

if.end64:                                         ; preds = %if.end64.loopexit50, %if.end64.loopexit49, %if.end64.loopexit48, %if.end64.loopexit47, %if.end64.loopexit46, %if.end64.loopexit, %for.cond20.preheader, %for.cond.preheader
  %i.3 = phi i32 [ 0, %for.cond.preheader ], [ 0, %for.cond20.preheader ], [ 256, %if.end64.loopexit ], [ 256, %if.end64.loopexit46 ], [ %1, %if.end64.loopexit47 ], [ %1, %if.end64.loopexit48 ], [ %1, %if.end64.loopexit49 ], [ %1, %if.end64.loopexit50 ]
  %cmp65 = icmp sgt i32 %i.3, %map_colors
  br i1 %cmp65, label %if.then67, label %for.cond73.preheader

if.then67:                                        ; preds = %if.end64
  %err = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 0
  %27 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8, !tbaa !21
  %msg_code = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %27, i64 0, i32 5
  store i32 1039, i32* %msg_code, align 8, !tbaa !22
  %arrayidx70 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %27, i64 0, i32 6, i32 0, i64 0
  store i32 %i.3, i32* %arrayidx70, align 4, !tbaa !59
  %error_exit = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %27, i64 0, i32 0
  %28 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit, align 8, !tbaa !24
  %29 = bitcast %struct.jpeg_decompress_struct* %cinfo to %struct.jpeg_common_struct*
  tail call void %28(%struct.jpeg_common_struct* %29) #6
  br label %for.cond73.preheader

for.cond73.preheader:                             ; preds = %if.then67, %if.end64
  %cmp743 = icmp slt i32 %i.3, %map_colors
  br i1 %cmp743, label %for.body76.lr.ph, label %for.end87

for.body76.lr.ph:                                 ; preds = %for.cond73.preheader
  %cmp80 = icmp eq i32 %map_entry_size, 4
  br i1 %cmp80, label %for.body76.us.preheader, label %for.body76.preheader

for.body76.preheader:                             ; preds = %for.body76.lr.ph
  br label %for.body76

for.body76.us.preheader:                          ; preds = %for.body76.lr.ph
  br label %for.body76.us

for.body76.us:                                    ; preds = %for.body76.us.preheader, %for.body76.us
  %i.44.us = phi i32 [ %inc86.us, %for.body76.us ], [ %i.3, %for.body76.us.preheader ]
  %call77.us = tail call i32 @_IO_putc(i32 0, %struct._IO_FILE* %dest.0.0.3.val)
  %call78.us = tail call i32 @_IO_putc(i32 0, %struct._IO_FILE* %dest.0.0.3.val)
  %call79.us = tail call i32 @_IO_putc(i32 0, %struct._IO_FILE* %dest.0.0.3.val)
  %call83.us = tail call i32 @_IO_putc(i32 0, %struct._IO_FILE* %dest.0.0.3.val)
  %inc86.us = add nsw i32 %i.44.us, 1
  %exitcond = icmp eq i32 %inc86.us, %map_colors
  br i1 %exitcond, label %for.end87.loopexit, label %for.body76.us

for.body76:                                       ; preds = %for.body76.preheader, %for.body76
  %i.44 = phi i32 [ %inc86, %for.body76 ], [ %i.3, %for.body76.preheader ]
  %call77 = tail call i32 @_IO_putc(i32 0, %struct._IO_FILE* %dest.0.0.3.val)
  %call78 = tail call i32 @_IO_putc(i32 0, %struct._IO_FILE* %dest.0.0.3.val)
  %call79 = tail call i32 @_IO_putc(i32 0, %struct._IO_FILE* %dest.0.0.3.val)
  %inc86 = add nsw i32 %i.44, 1
  %exitcond17 = icmp eq i32 %inc86, %map_colors
  br i1 %exitcond17, label %for.end87.loopexit45, label %for.body76

for.end87.loopexit:                               ; preds = %for.body76.us
  br label %for.end87

for.end87.loopexit45:                             ; preds = %for.body76
  br label %for.end87

for.end87:                                        ; preds = %for.end87.loopexit45, %for.end87.loopexit, %for.cond73.preheader
  ret void
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readnone uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"MaxFunctionCount", i32 150581}
!1 = !{!"clang version 3.8.0 (trunk 257473)"}
!2 = !{!3, !4, i64 8}
!3 = !{!"jpeg_decompress_struct", !4, i64 0, !4, i64 8, !4, i64 16, !7, i64 24, !7, i64 28, !4, i64 32, !7, i64 40, !7, i64 44, !7, i64 48, !5, i64 52, !5, i64 56, !7, i64 60, !7, i64 64, !8, i64 72, !7, i64 80, !7, i64 84, !5, i64 88, !7, i64 92, !7, i64 96, !7, i64 100, !5, i64 104, !7, i64 108, !7, i64 112, !7, i64 116, !7, i64 120, !7, i64 124, !7, i64 128, !7, i64 132, !7, i64 136, !7, i64 140, !7, i64 144, !7, i64 148, !4, i64 152, !7, i64 160, !7, i64 164, !7, i64 168, !7, i64 172, !7, i64 176, !4, i64 184, !5, i64 192, !5, i64 224, !5, i64 256, !7, i64 288, !4, i64 296, !7, i64 304, !7, i64 308, !5, i64 312, !5, i64 328, !5, i64 344, !7, i64 360, !7, i64 364, !5, i64 368, !9, i64 370, !9, i64 372, !7, i64 376, !5, i64 380, !7, i64 384, !7, i64 388, !7, i64 392, !7, i64 396, !7, i64 400, !4, i64 408, !7, i64 416, !5, i64 424, !7, i64 456, !7, i64 460, !7, i64 464, !5, i64 468, !7, i64 508, !7, i64 512, !7, i64 516, !7, i64 520, !7, i64 524, !4, i64 528, !4, i64 536, !4, i64 544, !4, i64 552, !4, i64 560, !4, i64 568, !4, i64 576, !4, i64 584, !4, i64 592, !4, i64 600, !4, i64 608}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!"int", !5, i64 0}
!8 = !{!"double", !5, i64 0}
!9 = !{!"short", !5, i64 0}
!10 = !{!11, !4, i64 0}
!11 = !{!"jpeg_memory_mgr", !4, i64 0, !4, i64 8, !4, i64 16, !4, i64 24, !4, i64 32, !4, i64 40, !4, i64 48, !4, i64 56, !4, i64 64, !4, i64 72, !4, i64 80, !12, i64 88}
!12 = !{!"long", !5, i64 0}
!13 = !{!14, !4, i64 0}
!14 = !{!"", !15, i64 0, !7, i64 48, !4, i64 56, !7, i64 64, !7, i64 68, !7, i64 72, !7, i64 76}
!15 = !{!"djpeg_dest_struct", !4, i64 0, !4, i64 8, !4, i64 16, !4, i64 24, !4, i64 32, !7, i64 40}
!16 = !{!14, !4, i64 16}
!17 = !{!14, !7, i64 48}
!18 = !{!3, !5, i64 56}
!19 = !{!14, !4, i64 8}
!20 = !{!3, !7, i64 100}
!21 = !{!3, !4, i64 0}
!22 = !{!23, !7, i64 40}
!23 = !{!"jpeg_error_mgr", !4, i64 0, !4, i64 8, !4, i64 16, !4, i64 24, !4, i64 32, !7, i64 40, !5, i64 44, !7, i64 124, !12, i64 128, !4, i64 136, !7, i64 144, !4, i64 152, !7, i64 160, !7, i64 164}
!24 = !{!23, !4, i64 0}
!25 = !{!3, !7, i64 140}
!26 = !{!14, !7, i64 64}
!27 = !{!14, !7, i64 68}
!28 = !{!14, !7, i64 72}
!29 = !{!11, !4, i64 32}
!30 = !{!14, !4, i64 56}
!31 = !{!14, !7, i64 76}
!32 = !{!3, !4, i64 16}
!33 = !{!34, !7, i64 36}
!34 = !{!"cdjpeg_progress_mgr", !35, i64 0, !7, i64 32, !7, i64 36, !7, i64 40}
!35 = !{!"jpeg_progress_mgr", !4, i64 0, !12, i64 8, !12, i64 16, !7, i64 24, !7, i64 28}
!36 = !{!11, !4, i64 16}
!37 = !{!14, !4, i64 32}
!38 = !{!14, !7, i64 40}
!39 = !{!14, !4, i64 24}
!40 = !{!3, !7, i64 132}
!41 = !{!5, !5, i64 0}
!42 = !{!34, !12, i64 8}
!43 = !{!34, !12, i64 16}
!44 = !{!34, !4, i64 0}
!45 = !{!11, !4, i64 56}
!46 = !{!4, !4, i64 0}
!47 = !{!34, !7, i64 32}
!48 = !{!3, !7, i64 128}
!49 = distinct !{!49, !50}
!50 = !{!"llvm.loop.unroll.disable"}
!51 = distinct !{!51, !52, !53}
!52 = !{!"llvm.loop.vectorize.width", i32 1}
!53 = !{!"llvm.loop.interleave.count", i32 1}
!54 = distinct !{!54, !50}
!55 = distinct !{!55, !52, !53}
!56 = !{!3, !4, i64 152}
!57 = !{!3, !7, i64 148}
!58 = !{!3, !7, i64 136}
!59 = !{!7, !7, i64 0}
