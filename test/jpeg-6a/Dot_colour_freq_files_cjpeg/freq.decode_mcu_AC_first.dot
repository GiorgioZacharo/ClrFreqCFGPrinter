digraph "CFG for 'decode_mcu_AC_first' function" {
	label="CFG for 'decode_mcu_AC_first' function";

	Node0x4fc4db0 [shape=record, style = filled, fillcolor = blue, label="{entry:\l  %br_state = alloca %struct.bitread_working_state, align 16\l  %entropy1 = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 79\l  %0 = bitcast %struct.jpeg_entropy_decoder** %entropy1 to\l... %struct.phuff_entropy_decoder**\l  %1 = load %struct.phuff_entropy_decoder*, %struct.phuff_entropy_decoder**\l... %0, align 8, !tbaa !2\l  %Se2 = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 69\l  %2 = load i32, i32* %Se2, align 8, !tbaa !10\l  %Al3 = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 71\l  %3 = load i32, i32* %Al3, align 8, !tbaa !11\l  %4 = bitcast %struct.bitread_working_state* %br_state to i8*\l  call void @llvm.lifetime.start(i64 56, i8* %4) #3\l  %restart_interval = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 49\l  %5 = load i32, i32* %restart_interval, align 8, !tbaa !12\l  %tobool = icmp eq i32 %5, 0\l  br i1 %tobool, label %if.end8, label %if.then\l|{<s0>T|<s1>F}}"];
	Node0x4fc4db0:s0 -> Node0x4fc55d0;
	Node0x4fc4db0:s1 -> Node0x4fc5680;
	Node0x4fc5680 [shape=record, style = filled, fillcolor = blue, label="{if.then:                                          \l  %restarts_to_go = getelementptr inbounds %struct.phuff_entropy_decoder,\l... %struct.phuff_entropy_decoder* %1, i64 0, i32 3\l  %6 = load i32, i32* %restarts_to_go, align 4, !tbaa !13\l  %cmp = icmp eq i32 %6, 0\l  br i1 %cmp, label %if.then4, label %if.end8\l|{<s0>T|<s1>F}}"];
	Node0x4fc5680:s0 -> Node0x4fbafd0;
	Node0x4fc5680:s1 -> Node0x4fc55d0;
	Node0x4fbafd0 [shape=record, style = filled, fillcolor = blue, label="{if.then4:                                         \l  %bits_left.i = getelementptr inbounds %struct.phuff_entropy_decoder,\l... %struct.phuff_entropy_decoder* %1, i64 0, i32 1, i32 1\l  %7 = load i32, i32* %bits_left.i, align 8, !tbaa !19\l  %div.i = sdiv i32 %7, 8\l  %marker.i = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 78\l  %8 = load %struct.jpeg_marker_reader*, %struct.jpeg_marker_reader**\l... %marker.i, align 8, !tbaa !20\l  %discarded_bytes.i = getelementptr inbounds %struct.jpeg_marker_reader,\l... %struct.jpeg_marker_reader* %8, i64 0, i32 8\l  %9 = load i32, i32* %discarded_bytes.i, align 4, !tbaa !21\l  %add.i = add i32 %9, %div.i\l  store i32 %add.i, i32* %discarded_bytes.i, align 4, !tbaa !21\l  store i32 0, i32* %bits_left.i, align 8, !tbaa !19\l  %read_restart_marker.i = getelementptr inbounds %struct.jpeg_marker_reader,\l... %struct.jpeg_marker_reader* %8, i64 0, i32 2\l  %10 = load i32 (%struct.jpeg_decompress_struct*)*, i32\l... (%struct.jpeg_decompress_struct*)** %read_restart_marker.i, align 8, !tbaa !23\l  %call.i = tail call i32 %10(%struct.jpeg_decompress_struct* nonnull %cinfo)\l... #3\l  %tobool.i = icmp eq i32 %call.i, 0\l  br i1 %tobool.i, label %cleanup133, label %for.cond.preheader.i\l|{<s0>T|<s1>F}}"];
	Node0x4fbafd0:s0 -> Node0x4fab0c0;
	Node0x4fbafd0:s1 -> Node0x4fab1d0;
	Node0x4fab1d0 [shape=record, style = filled, fillcolor = blue, label="{for.cond.preheader.i:                             \l  %comps_in_scan.i = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 62\l  %11 = load i32, i32* %comps_in_scan.i, align 8, !tbaa !24\l  %cmp22.i = icmp sgt i32 %11, 0\l  br i1 %cmp22.i, label %for.body.i.preheader, label %process_restart.exit\l|{<s0>T|<s1>F}}"];
	Node0x4fab1d0:s0 -> Node0x4fc59d0;
	Node0x4fab1d0:s1 -> Node0x4fab740;
	Node0x4fc59d0 [shape=record, style = filled, fillcolor = blue, label="{for.body.i.preheader:                             \l  br label %for.body.i\l}"];
	Node0x4fc59d0 -> Node0x4fab8d0;
	Node0x4fab8d0 [shape=record, style = filled, fillcolor = blue, label="{for.body.i:                                       \l  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %for.body.i ], [ 0,\l... %for.body.i.preheader ]\l  %arrayidx.i = getelementptr inbounds %struct.phuff_entropy_decoder,\l... %struct.phuff_entropy_decoder* %1, i64 0, i32 2, i32 1, i64 %indvars.iv.i\l  store i32 0, i32* %arrayidx.i, align 4, !tbaa !25\l  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1\l  %12 = load i32, i32* %comps_in_scan.i, align 8, !tbaa !24\l  %13 = sext i32 %12 to i64\l  %cmp.i = icmp slt i64 %indvars.iv.next.i, %13\l  br i1 %cmp.i, label %for.body.i, label %process_restart.exit.loopexit\l|{<s0>T|<s1>F}}"];
	Node0x4fab8d0:s0 -> Node0x4fab8d0;
	Node0x4fab8d0:s1 -> Node0x4fabe40;
	Node0x4fabe40 [shape=record, style = filled, fillcolor = blue, label="{process_restart.exit.loopexit:                    \l  br label %process_restart.exit\l}"];
	Node0x4fabe40 -> Node0x4fab740;
	Node0x4fab740 [shape=record, style = filled, fillcolor = blue, label="{process_restart.exit:                             \l  %EOBRUN.i = getelementptr inbounds %struct.phuff_entropy_decoder,\l... %struct.phuff_entropy_decoder* %1, i64 0, i32 2, i32 0\l  store i32 0, i32* %EOBRUN.i, align 8, !tbaa !26\l  %14 = load i32, i32* %restart_interval, align 8, !tbaa !12\l  store i32 %14, i32* %restarts_to_go, align 4, !tbaa !13\l  %printed_eod.i = getelementptr inbounds %struct.phuff_entropy_decoder,\l... %struct.phuff_entropy_decoder* %1, i64 0, i32 1, i32 2\l  store i32 0, i32* %printed_eod.i, align 4, !tbaa !27\l  br label %if.end8\l}"];
	Node0x4fab740 -> Node0x4fc55d0;
	Node0x4fc55d0 [shape=record, style = filled, fillcolor = blue, label="{if.end8:                                          \l  %EOBRUN9 = getelementptr inbounds %struct.phuff_entropy_decoder,\l... %struct.phuff_entropy_decoder* %1, i64 0, i32 2, i32 0\l  %15 = load i32, i32* %EOBRUN9, align 8, !tbaa !26\l  %cmp10 = icmp eq i32 %15, 0\l  br i1 %cmp10, label %if.else, label %if.then11\l|{<s0>T|<s1>F}}"];
	Node0x4fc55d0:s0 -> Node0x4fcafe0;
	Node0x4fc55d0:s1 -> Node0x4fcb090;
	Node0x4fcb090 [shape=record, style = filled, fillcolor = blue, label="{if.then11:                                        \l  %dec = add i32 %15, -1\l  br label %if.end128\l}"];
	Node0x4fcb090 -> Node0x4fcb270;
	Node0x4fcafe0 [shape=record, style = filled, fillcolor = blue, label="{if.else:                                          \l  %cinfo12 = getelementptr inbounds %struct.bitread_working_state,\l... %struct.bitread_working_state* %br_state, i64 0, i32 5\l  store %struct.jpeg_decompress_struct* %cinfo,\l... %struct.jpeg_decompress_struct** %cinfo12, align 8, !tbaa !28\l  %src = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 5\l  %16 = bitcast %struct.jpeg_source_mgr** %src to \<2 x i64\>**\l  %17 = load \<2 x i64\>*, \<2 x i64\>** %16, align 8, !tbaa !30\l  %18 = load \<2 x i64\>, \<2 x i64\>* %17, align 8, !tbaa !31\l  %19 = bitcast %struct.bitread_working_state* %br_state to \<2 x i64\>*\l  store \<2 x i64\> %18, \<2 x i64\>* %19, align 16, !tbaa !31\l  %unread_marker = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 72\l  %20 = load i32, i32* %unread_marker, align 4, !tbaa !32\l  %unread_marker16 = getelementptr inbounds %struct.bitread_working_state,\l... %struct.bitread_working_state* %br_state, i64 0, i32 2\l  store i32 %20, i32* %unread_marker16, align 16, !tbaa !33\l  %get_buffer17 = getelementptr inbounds %struct.phuff_entropy_decoder,\l... %struct.phuff_entropy_decoder* %1, i64 0, i32 1, i32 0\l  %21 = load i64, i64* %get_buffer17, align 8, !tbaa !34\l  %bits_left19 = getelementptr inbounds %struct.phuff_entropy_decoder,\l... %struct.phuff_entropy_decoder* %1, i64 0, i32 1, i32 1\l  %22 = load i32, i32* %bits_left19, align 8, !tbaa !19\l  %printed_eod = getelementptr inbounds %struct.phuff_entropy_decoder,\l... %struct.phuff_entropy_decoder* %1, i64 0, i32 1, i32 2\l  %printed_eod_ptr = getelementptr inbounds %struct.bitread_working_state,\l... %struct.bitread_working_state* %br_state, i64 0, i32 6\l  store i32* %printed_eod, i32** %printed_eod_ptr, align 16, !tbaa !35\l  %23 = load [64 x i16]*, [64 x i16]** %MCU_data, align 8, !tbaa !36\l  %ac_derived_tbl = getelementptr inbounds %struct.phuff_entropy_decoder,\l... %struct.phuff_entropy_decoder* %1, i64 0, i32 5\l  %24 = load %struct.d_derived_tbl*, %struct.d_derived_tbl** %ac_derived_tbl,\l... align 8, !tbaa !37\l  %Ss = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 68\l  %25 = load i32, i32* %Ss, align 4, !tbaa !38\l  %cmp21239 = icmp sgt i32 %25, %2\l  br i1 %cmp21239, label %for.end, label %for.body.lr.ph\l|{<s0>T|<s1>F}}"];
	Node0x4fcafe0:s0 -> Node0x4fcd790;
	Node0x4fcafe0:s1 -> Node0x4fcd840;
	Node0x4fcd840 [shape=record, style = filled, fillcolor = blue, label="{for.body.lr.ph:                                   \l  %get_buffer28 = getelementptr inbounds %struct.bitread_working_state,\l... %struct.bitread_working_state* %br_state, i64 0, i32 3\l  %bits_left29 = getelementptr inbounds %struct.bitread_working_state,\l... %struct.bitread_working_state* %br_state, i64 0, i32 4\l  br label %for.body\l}"];
	Node0x4fcd840 -> Node0x4fcdb50;
	Node0x4fcdb50 [shape=record, style = filled, fillcolor = blue, label="{for.body:                                         \l  %bits_left.0242 = phi i32 [ %22, %for.body.lr.ph ], [ %bits_left.8, %for.inc\l... ]\l  %get_buffer.0241 = phi i64 [ %21, %for.body.lr.ph ], [ %get_buffer.8,\l... %for.inc ]\l  %k.0240 = phi i32 [ %25, %for.body.lr.ph ], [ %inc, %for.inc ]\l  %cmp22 = icmp slt i32 %bits_left.0242, 8\l  br i1 %cmp22, label %if.then23, label %if.end33\l|{<s0>T|<s1>F}}"];
	Node0x4fcdb50:s0 -> Node0x4fce230;
	Node0x4fcdb50:s1 -> Node0x4fce310;
	Node0x4fce230 [shape=record, style = filled, fillcolor = blue, label="{if.then23:                                        \l  %call24 = call i32 @jpeg_fill_bit_buffer(%struct.bitread_working_state*\l... nonnull %br_state, i64 %get_buffer.0241, i32 %bits_left.0242, i32 0) #3\l  %tobool25 = icmp eq i32 %call24, 0\l  br i1 %tobool25, label %cleanup133.loopexit, label %if.end27\l|{<s0>T|<s1>F}}"];
	Node0x4fce230:s0 -> Node0x4fce6e0;
	Node0x4fce230:s1 -> Node0x4fce760;
	Node0x4fce760 [shape=record, style = filled, fillcolor = blue, label="{if.end27:                                         \l  %26 = load i64, i64* %get_buffer28, align 8, !tbaa !39\l  %27 = load i32, i32* %bits_left29, align 16, !tbaa !40\l  %cmp30 = icmp slt i32 %27, 8\l  br i1 %cmp30, label %label2, label %if.end33\l|{<s0>T|<s1>F}}"];
	Node0x4fce760:s0 -> Node0x4fce9a0;
	Node0x4fce760:s1 -> Node0x4fce310;
	Node0x4fce310 [shape=record, style = filled, fillcolor = blue, label="{if.end33:                                         \l  %get_buffer.1 = phi i64 [ %26, %if.end27 ], [ %get_buffer.0241, %for.body ]\l  %bits_left.1 = phi i32 [ %27, %if.end27 ], [ %bits_left.0242, %for.body ]\l  %sub = add nsw i32 %bits_left.1, -8\l  %sh_prom = zext i32 %sub to i64\l  %shr = ashr i64 %get_buffer.1, %sh_prom\l  %and = and i64 %shr, 255\l  %arrayidx34 = getelementptr inbounds %struct.d_derived_tbl,\l... %struct.d_derived_tbl* %24, i64 0, i32 4, i64 %and\l  %28 = load i32, i32* %arrayidx34, align 4, !tbaa !25\l  %cmp35 = icmp eq i32 %28, 0\l  br i1 %cmp35, label %label2, label %if.then37\l|{<s0>T|<s1>F}}"];
	Node0x4fce310:s0 -> Node0x4fce9a0;
	Node0x4fce310:s1 -> Node0x4fcf0b0;
	Node0x4fcf0b0 [shape=record, style = filled, fillcolor = blue, label="{if.then37:                                        \l  %sub38 = sub nsw i32 %bits_left.1, %28\l  %arrayidx40 = getelementptr inbounds %struct.d_derived_tbl,\l... %struct.d_derived_tbl* %24, i64 0, i32 5, i64 %and\l  %29 = load i8, i8* %arrayidx40, align 1, !tbaa !31\l  %conv41 = zext i8 %29 to i32\l  br label %cleanup.cont\l}"];
	Node0x4fcf0b0 -> Node0x4fcf430;
	Node0x4fce9a0 [shape=record, style = filled, fillcolor = blue, label="{label2:                                           \l  %get_buffer.2 = phi i64 [ %26, %if.end27 ], [ %get_buffer.1, %if.end33 ]\l  %bits_left.2 = phi i32 [ %27, %if.end27 ], [ %bits_left.1, %if.end33 ]\l  %nb.0 = phi i32 [ 1, %if.end27 ], [ 9, %if.end33 ]\l  %call43 = call i32 @jpeg_huff_decode(%struct.bitread_working_state* nonnull\l... %br_state, i64 %get_buffer.2, i32 %bits_left.2, %struct.d_derived_tbl* %24,\l... i32 %nb.0) #3\l  %cmp44 = icmp slt i32 %call43, 0\l  br i1 %cmp44, label %cleanup133.loopexit, label %if.end47\l|{<s0>T|<s1>F}}"];
	Node0x4fce9a0:s0 -> Node0x4fce6e0;
	Node0x4fce9a0:s1 -> Node0x4fcfa20;
	Node0x4fcfa20 [shape=record, style = filled, fillcolor = blue, label="{if.end47:                                         \l  %30 = load i64, i64* %get_buffer28, align 8, !tbaa !39\l  %31 = load i32, i32* %bits_left29, align 16, !tbaa !40\l  br label %cleanup.cont\l}"];
	Node0x4fcfa20 -> Node0x4fcf430;
	Node0x4fcf430 [shape=record, style = filled, fillcolor = blue, label="{cleanup.cont:                                     \l  %get_buffer.4.ph = phi i64 [ %get_buffer.1, %if.then37 ], [ %30, %if.end47 ]\l  %bits_left.4.ph = phi i32 [ %sub38, %if.then37 ], [ %31, %if.end47 ]\l  %s.2.ph = phi i32 [ %conv41, %if.then37 ], [ %call43, %if.end47 ]\l  %shr52 = ashr i32 %s.2.ph, 4\l  %and53 = and i32 %s.2.ph, 15\l  %tobool54 = icmp eq i32 %and53, 0\l  br i1 %tobool54, label %if.else85, label %if.then55\l|{<s0>T|<s1>F}}"];
	Node0x4fcf430:s0 -> Node0x4fd0050;
	Node0x4fcf430:s1 -> Node0x4fcc400;
	Node0x4fcc400 [shape=record, style = filled, fillcolor = blue, label="{if.then55:                                        \l  %add = add nsw i32 %shr52, %k.0240\l  %cmp56 = icmp slt i32 %bits_left.4.ph, %and53\l  br i1 %cmp56, label %if.then58, label %if.end65\l|{<s0>T|<s1>F}}"];
	Node0x4fcc400:s0 -> Node0x4fcc6b0;
	Node0x4fcc400:s1 -> Node0x4fcc730;
	Node0x4fcc6b0 [shape=record, style = filled, fillcolor = blue, label="{if.then58:                                        \l  %call59 = call i32 @jpeg_fill_bit_buffer(%struct.bitread_working_state*\l... nonnull %br_state, i64 %get_buffer.4.ph, i32 %bits_left.4.ph, i32 %and53) #3\l  %tobool60 = icmp eq i32 %call59, 0\l  br i1 %tobool60, label %cleanup133.loopexit, label %if.end62\l|{<s0>T|<s1>F}}"];
	Node0x4fcc6b0:s0 -> Node0x4fce6e0;
	Node0x4fcc6b0:s1 -> Node0x4fd0e40;
	Node0x4fd0e40 [shape=record, style = filled, fillcolor = blue, label="{if.end62:                                         \l  %32 = load i64, i64* %get_buffer28, align 8, !tbaa !39\l  %33 = load i32, i32* %bits_left29, align 16, !tbaa !40\l  br label %if.end65\l}"];
	Node0x4fd0e40 -> Node0x4fcc730;
	Node0x4fcc730 [shape=record, style = filled, fillcolor = blue, label="{if.end65:                                         \l  %get_buffer.5 = phi i64 [ %32, %if.end62 ], [ %get_buffer.4.ph, %if.then55 ]\l  %bits_left.5 = phi i32 [ %33, %if.end62 ], [ %bits_left.4.ph, %if.then55 ]\l  %sub66 = sub nsw i32 %bits_left.5, %and53\l  %sh_prom67 = zext i32 %sub66 to i64\l  %shr68 = ashr i64 %get_buffer.5, %sh_prom67\l  %conv69 = trunc i64 %shr68 to i32\l  %shl = shl i32 1, %and53\l  %sub70 = add nsw i32 %shl, -1\l  %and71 = and i32 %conv69, %sub70\l  %idxprom72230 = zext i32 %and53 to i64\l  %arrayidx73 = getelementptr inbounds [16 x i32], [16 x i32]* @extend_test,\l... i64 0, i64 %idxprom72230\l  %34 = load i32, i32* %arrayidx73, align 4, !tbaa !25\l  %cmp74 = icmp slt i32 %and71, %34\l  br i1 %cmp74, label %cond.true, label %cond.end\l|{<s0>T|<s1>F}}"];
	Node0x4fcc730:s0 -> Node0x4fd18b0;
	Node0x4fcc730:s1 -> Node0x4fd1990;
	Node0x4fd18b0 [shape=record, style = filled, fillcolor = blue, label="{cond.true:                                        \l  %arrayidx77 = getelementptr inbounds [16 x i32], [16 x i32]* @extend_offset,\l... i64 0, i64 %idxprom72230\l  %35 = load i32, i32* %arrayidx77, align 4, !tbaa !25\l  %add78 = add nsw i32 %35, %and71\l  br label %cond.end\l}"];
	Node0x4fd18b0 -> Node0x4fd1990;
	Node0x4fd1990 [shape=record, style = filled, fillcolor = blue, label="{cond.end:                                         \l  %cond = phi i32 [ %add78, %cond.true ], [ %and71, %if.end65 ]\l  %shl79 = shl i32 %cond, %3\l  %conv80 = trunc i32 %shl79 to i16\l  %idxprom81 = sext i32 %add to i64\l  %arrayidx82 = getelementptr inbounds [0 x i32], [0 x i32]*\l... @jpeg_natural_order, i64 0, i64 %idxprom81\l  %36 = load i32, i32* %arrayidx82, align 4, !tbaa !25\l  %idxprom83 = sext i32 %36 to i64\l  %arrayidx84 = getelementptr inbounds [64 x i16], [64 x i16]* %23, i64 0, i64\l... %idxprom83\l  store i16 %conv80, i16* %arrayidx84, align 2, !tbaa !41\l  br label %for.inc\l}"];
	Node0x4fd1990 -> Node0x4fcdca0;
	Node0x4fd0050 [shape=record, style = filled, fillcolor = blue, label="{if.else85:                                        \l  %cmp86 = icmp eq i32 %shr52, 15\l  br i1 %cmp86, label %if.then88, label %if.else90\l|{<s0>T|<s1>F}}"];
	Node0x4fd0050:s0 -> Node0x4fd2910;
	Node0x4fd0050:s1 -> Node0x4fd2990;
	Node0x4fd2910 [shape=record, style = filled, fillcolor = blue, label="{if.then88:                                        \l  %add89 = add nsw i32 %k.0240, 15\l  br label %for.inc\l}"];
	Node0x4fd2910 -> Node0x4fcdca0;
	Node0x4fd2990 [shape=record, style = filled, fillcolor = blue, label="{if.else90:                                        \l  %shr52.lcssa = phi i32 [ %shr52, %if.else85 ]\l  %bits_left.4.ph.lcssa = phi i32 [ %bits_left.4.ph, %if.else85 ]\l  %get_buffer.4.ph.lcssa = phi i64 [ %get_buffer.4.ph, %if.else85 ]\l  %shl91 = shl i32 1, %shr52.lcssa\l  %tobool92 = icmp eq i32 %shr52.lcssa, 0\l  br i1 %tobool92, label %if.end112, label %if.then93\l|{<s0>T|<s1>F}}"];
	Node0x4fd2990:s0 -> Node0x4fd2f00;
	Node0x4fd2990:s1 -> Node0x4fd2fe0;
	Node0x4fd2fe0 [shape=record, style = filled, fillcolor = blue, label="{if.then93:                                        \l  %cmp94 = icmp slt i32 %bits_left.4.ph.lcssa, %shr52.lcssa\l  br i1 %cmp94, label %if.then96, label %if.end103\l|{<s0>T|<s1>F}}"];
	Node0x4fd2fe0:s0 -> Node0x4fd31f0;
	Node0x4fd2fe0:s1 -> Node0x4fd3240;
	Node0x4fd31f0 [shape=record, style = filled, fillcolor = blue, label="{if.then96:                                        \l  %call97 = call i32 @jpeg_fill_bit_buffer(%struct.bitread_working_state*\l... nonnull %br_state, i64 %get_buffer.4.ph.lcssa, i32 %bits_left.4.ph.lcssa, i32\l... %shr52.lcssa) #3\l  %tobool98 = icmp eq i32 %call97, 0\l  br i1 %tobool98, label %cleanup133, label %if.end100\l|{<s0>T|<s1>F}}"];
	Node0x4fd31f0:s0 -> Node0x4fab0c0;
	Node0x4fd31f0:s1 -> Node0x4fd3610;
	Node0x4fd3610 [shape=record, style = filled, fillcolor = blue, label="{if.end100:                                        \l  %37 = load i64, i64* %get_buffer28, align 8, !tbaa !39\l  %38 = load i32, i32* %bits_left29, align 16, !tbaa !40\l  br label %if.end103\l}"];
	Node0x4fd3610 -> Node0x4fd3240;
	Node0x4fd3240 [shape=record, style = filled, fillcolor = blue, label="{if.end103:                                        \l  %get_buffer.6 = phi i64 [ %37, %if.end100 ], [ %get_buffer.4.ph.lcssa,\l... %if.then93 ]\l  %bits_left.6 = phi i32 [ %38, %if.end100 ], [ %bits_left.4.ph.lcssa,\l... %if.then93 ]\l  %sub104 = sub nsw i32 %bits_left.6, %shr52.lcssa\l  %sh_prom105 = zext i32 %sub104 to i64\l  %shr106 = ashr i64 %get_buffer.6, %sh_prom105\l  %conv107 = trunc i64 %shr106 to i32\l  %sub109 = add nsw i32 %shl91, -1\l  %and110 = and i32 %conv107, %sub109\l  %add111 = add i32 %and110, %shl91\l  br label %if.end112\l}"];
	Node0x4fd3240 -> Node0x4fd2f00;
	Node0x4fd2f00 [shape=record, style = filled, fillcolor = blue, label="{if.end112:                                        \l  %EOBRUN.0 = phi i32 [ %add111, %if.end103 ], [ %shl91, %if.else90 ]\l  %get_buffer.7 = phi i64 [ %get_buffer.6, %if.end103 ], [\l... %get_buffer.4.ph.lcssa, %if.else90 ]\l  %bits_left.7 = phi i32 [ %sub104, %if.end103 ], [ %bits_left.4.ph.lcssa,\l... %if.else90 ]\l  %dec113 = add i32 %EOBRUN.0, -1\l  br label %for.end\l}"];
	Node0x4fd2f00 -> Node0x4fcd790;
	Node0x4fcdca0 [shape=record, style = filled, fillcolor = blue, label="{for.inc:                                          \l  %k.1 = phi i32 [ %add, %cond.end ], [ %add89, %if.then88 ]\l  %get_buffer.8 = phi i64 [ %get_buffer.5, %cond.end ], [ %get_buffer.4.ph,\l... %if.then88 ]\l  %bits_left.8 = phi i32 [ %sub66, %cond.end ], [ %bits_left.4.ph, %if.then88 ]\l  %inc = add nsw i32 %k.1, 1\l  %cmp21 = icmp slt i32 %k.1, %2\l  br i1 %cmp21, label %for.body, label %for.end.loopexit\l|{<s0>T|<s1>F}}"];
	Node0x4fcdca0:s0 -> Node0x4fcdb50;
	Node0x4fcdca0:s1 -> Node0x4fd4380;
	Node0x4fd4380 [shape=record, style = filled, fillcolor = blue, label="{for.end.loopexit:                                 \l  %bits_left.8.lcssa = phi i32 [ %bits_left.8, %for.inc ]\l  %get_buffer.8.lcssa = phi i64 [ %get_buffer.8, %for.inc ]\l  br label %for.end\l}"];
	Node0x4fd4380 -> Node0x4fcd790;
	Node0x4fcd790 [shape=record, style = filled, fillcolor = blue, label="{for.end:                                          \l  %EOBRUN.1 = phi i32 [ %dec113, %if.end112 ], [ 0, %if.else ], [ 0,\l... %for.end.loopexit ]\l  %get_buffer.9 = phi i64 [ %get_buffer.7, %if.end112 ], [ %21, %if.else ], [\l... %get_buffer.8.lcssa, %for.end.loopexit ]\l  %bits_left.9 = phi i32 [ %bits_left.7, %if.end112 ], [ %22, %if.else ], [\l... %bits_left.8.lcssa, %for.end.loopexit ]\l  %39 = bitcast %struct.jpeg_source_mgr** %src to \<2 x i64\>**\l  %40 = load \<2 x i64\>*, \<2 x i64\>** %39, align 8, !tbaa !30\l  %41 = bitcast %struct.bitread_working_state* %br_state to \<2 x i64\>*\l  %42 = load \<2 x i64\>, \<2 x i64\>* %41, align 16, !tbaa !31\l  store \<2 x i64\> %42, \<2 x i64\>* %40, align 8, !tbaa !31\l  %43 = load i32, i32* %unread_marker16, align 16, !tbaa !33\l  store i32 %43, i32* %unread_marker, align 4, !tbaa !32\l  store i64 %get_buffer.9, i64* %get_buffer17, align 8, !tbaa !34\l  store i32 %bits_left.9, i32* %bits_left19, align 8, !tbaa !19\l  br label %if.end128\l}"];
	Node0x4fcd790 -> Node0x4fcb270;
	Node0x4fcb270 [shape=record, style = filled, fillcolor = blue, label="{if.end128:                                        \l  %EOBRUN.2 = phi i32 [ %dec, %if.then11 ], [ %EOBRUN.1, %for.end ]\l  store i32 %EOBRUN.2, i32* %EOBRUN9, align 8, !tbaa !26\l  %restarts_to_go131 = getelementptr inbounds %struct.phuff_entropy_decoder,\l... %struct.phuff_entropy_decoder* %1, i64 0, i32 3\l  %44 = load i32, i32* %restarts_to_go131, align 4, !tbaa !13\l  %dec132 = add i32 %44, -1\l  store i32 %dec132, i32* %restarts_to_go131, align 4, !tbaa !13\l  br label %cleanup133\l}"];
	Node0x4fcb270 -> Node0x4fab0c0;
	Node0x4fce6e0 [shape=record, style = filled, fillcolor = blue, label="{cleanup133.loopexit:                              \l  br label %cleanup133\l}"];
	Node0x4fce6e0 -> Node0x4fab0c0;
	Node0x4fab0c0 [shape=record, style = filled, fillcolor = blue, label="{cleanup133:                                       \l  %retval.2 = phi i32 [ 1, %if.end128 ], [ 0, %if.then96 ], [ 0, %if.then4 ],\l... [ 0, %cleanup133.loopexit ]\l  call void @llvm.lifetime.end(i64 56, i8* %4) #3\l  ret i32 %retval.2\l}"];
}
