digraph "CFG for 'post_process_prepass' function" {
	label="CFG for 'post_process_prepass' function";

	Node0x4dc1920 [shape=record, style = filled, fillcolor = blue, label="{entry:\l  %post1 = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 76\l  %0 = bitcast %struct.jpeg_d_post_controller** %post1 to\l... %struct.my_post_controller**\l  %1 = load %struct.my_post_controller*, %struct.my_post_controller** %0,\l... align 8, !tbaa !2\l  %next_row = getelementptr inbounds %struct.my_post_controller,\l... %struct.my_post_controller* %1, i64 0, i32 5\l  %2 = load i32, i32* %next_row, align 8, !tbaa !10\l  %cmp = icmp eq i32 %2, 0\l  br i1 %cmp, label %if.then, label %entry.if.end_crit_edge\l|{<s0>T|<s1>F}}"];
	Node0x4dc1920:s0 -> Node0x4dd4530;
	Node0x4dc1920:s1 -> Node0x4dd4610;
	Node0x4dd4610 [shape=record, style = filled, fillcolor = blue, label="{entry.if.end_crit_edge:                           \l  %buffer4.phi.trans.insert = getelementptr inbounds\l... %struct.my_post_controller, %struct.my_post_controller* %1, i64 0, i32 2\l  %.pre50 = load i8**, i8*** %buffer4.phi.trans.insert, align 8, !tbaa !13\l  %.pre52 = getelementptr inbounds %struct.my_post_controller,\l... %struct.my_post_controller* %1, i64 0, i32 3\l  br label %if.end\l}"];
	Node0x4dd4610 -> Node0x4dd4a50;
	Node0x4dd4530 [shape=record, style = filled, fillcolor = blue, label="{if.then:                                          \l  %mem = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 1\l  %3 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8,\l... !tbaa !14\l  %access_virt_sarray = getelementptr inbounds %struct.jpeg_memory_mgr,\l... %struct.jpeg_memory_mgr* %3, i64 0, i32 7\l  %4 = load i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*,\l... i32, i32, i32)*, i8** (%struct.jpeg_common_struct*,\l... %struct.jvirt_sarray_control*, i32, i32, i32)** %access_virt_sarray, align 8,\l... !tbaa !15\l  %5 = bitcast %struct.jpeg_decompress_struct* %cinfo to\l... %struct.jpeg_common_struct*\l  %whole_image = getelementptr inbounds %struct.my_post_controller,\l... %struct.my_post_controller* %1, i64 0, i32 1\l  %6 = load %struct.jvirt_sarray_control*, %struct.jvirt_sarray_control**\l... %whole_image, align 8, !tbaa !18\l  %starting_row = getelementptr inbounds %struct.my_post_controller,\l... %struct.my_post_controller* %1, i64 0, i32 4\l  %7 = load i32, i32* %starting_row, align 4, !tbaa !19\l  %strip_height = getelementptr inbounds %struct.my_post_controller,\l... %struct.my_post_controller* %1, i64 0, i32 3\l  %8 = load i32, i32* %strip_height, align 8, !tbaa !20\l  %call = tail call i8** %4(%struct.jpeg_common_struct* %5,\l... %struct.jvirt_sarray_control* %6, i32 %7, i32 %8, i32 1) #3\l  %buffer = getelementptr inbounds %struct.my_post_controller,\l... %struct.my_post_controller* %1, i64 0, i32 2\l  store i8** %call, i8*** %buffer, align 8, !tbaa !13\l  %.pre = load i32, i32* %next_row, align 8, !tbaa !10\l  br label %if.end\l}"];
	Node0x4dd4530 -> Node0x4dd4a50;
	Node0x4dd4a50 [shape=record, style = filled, fillcolor = blue, label="{if.end:                                           \l  %strip_height6.pre-phi = phi i32* [ %.pre52, %entry.if.end_crit_edge ], [\l... %strip_height, %if.then ]\l  %buffer4.pre-phi = phi i8*** [ %buffer4.phi.trans.insert,\l... %entry.if.end_crit_edge ], [ %buffer, %if.then ]\l  %9 = phi i8** [ %.pre50, %entry.if.end_crit_edge ], [ %call, %if.then ]\l  %10 = phi i32 [ %2, %entry.if.end_crit_edge ], [ %.pre, %if.then ]\l  %upsample = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 81\l  %11 = load %struct.jpeg_upsampler*, %struct.jpeg_upsampler** %upsample,\l... align 8, !tbaa !21\l  %upsample3 = getelementptr inbounds %struct.jpeg_upsampler,\l... %struct.jpeg_upsampler* %11, i64 0, i32 1\l  %12 = load void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**,\l... i32*, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**,\l... i32*, i32)** %upsample3, align 8, !tbaa !22\l  %13 = load i32, i32* %strip_height6.pre-phi, align 8, !tbaa !20\l  tail call void %12(%struct.jpeg_decompress_struct* nonnull %cinfo, i8***\l... %input_buf, i32* %in_row_group_ctr, i32 %in_row_groups_avail, i8** %9, i32*\l... nonnull %next_row, i32 %13) #3\l  %14 = load i32, i32* %next_row, align 8, !tbaa !10\l  %cmp8 = icmp ugt i32 %14, %10\l  br i1 %cmp8, label %if.then9, label %if.end12\l|{<s0>T|<s1>F}}"];
	Node0x4dd4a50:s0 -> Node0x4dd6f60;
	Node0x4dd4a50:s1 -> Node0x4dd7010;
	Node0x4dd6f60 [shape=record, style = filled, fillcolor = blue, label="{if.then9:                                         \l  %sub = sub i32 %14, %10\l  %cquantize = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 83\l  %15 = load %struct.jpeg_color_quantizer*, %struct.jpeg_color_quantizer**\l... %cquantize, align 8, !tbaa !24\l  %color_quantize = getelementptr inbounds %struct.jpeg_color_quantizer,\l... %struct.jpeg_color_quantizer* %15, i64 0, i32 1\l  %16 = load void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)*, void\l... (%struct.jpeg_decompress_struct*, i8**, i8**, i32)** %color_quantize, align\l... 8, !tbaa !25\l  %17 = load i8**, i8*** %buffer4.pre-phi, align 8, !tbaa !13\l  %idx.ext = zext i32 %10 to i64\l  %add.ptr = getelementptr inbounds i8*, i8** %17, i64 %idx.ext\l  tail call void %16(%struct.jpeg_decompress_struct* nonnull %cinfo, i8**\l... %add.ptr, i8** null, i32 %sub) #3\l  %18 = load i32, i32* %out_row_ctr, align 4, !tbaa !27\l  %add = add i32 %18, %sub\l  store i32 %add, i32* %out_row_ctr, align 4, !tbaa !27\l  %.pre51 = load i32, i32* %next_row, align 8, !tbaa !10\l  br label %if.end12\l}"];
	Node0x4dd6f60 -> Node0x4dd7010;
	Node0x4dd7010 [shape=record, style = filled, fillcolor = blue, label="{if.end12:                                         \l  %19 = phi i32 [ %.pre51, %if.then9 ], [ %14, %if.end ]\l  %20 = bitcast i32* %strip_height6.pre-phi to i64*\l  %21 = load i64, i64* %20, align 8\l  %22 = trunc i64 %21 to i32\l  %cmp15 = icmp ult i32 %19, %22\l  br i1 %cmp15, label %if.end21, label %if.then16\l|{<s0>T|<s1>F}}"];
	Node0x4dd7010:s0 -> Node0x4dd87f0;
	Node0x4dd7010:s1 -> Node0x4dd88a0;
	Node0x4dd88a0 [shape=record, style = filled, fillcolor = blue, label="{if.then16:                                        \l  %23 = lshr i64 %21, 32\l  %24 = trunc i64 %23 to i32\l  %starting_row18 = getelementptr inbounds %struct.my_post_controller,\l... %struct.my_post_controller* %1, i64 0, i32 4\l  %add19 = add i32 %24, %22\l  store i32 %add19, i32* %starting_row18, align 4, !tbaa !19\l  store i32 0, i32* %next_row, align 8, !tbaa !10\l  br label %if.end21\l}"];
	Node0x4dd88a0 -> Node0x4dd87f0;
	Node0x4dd87f0 [shape=record, style = filled, fillcolor = blue, label="{if.end21:                                         \l  ret void\l}"];
}
