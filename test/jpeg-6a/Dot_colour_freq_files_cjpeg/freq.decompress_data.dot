digraph "CFG for 'decompress_data' function" {
	label="CFG for 'decompress_data' function";

	Node0x5868c70 [shape=record, style = filled, fillcolor = blue, label="{entry:\l  %coef1 = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 75\l  %0 = bitcast %struct.jpeg_d_coef_controller** %coef1 to\l... %struct.my_coef_controller**\l  %1 = load %struct.my_coef_controller*, %struct.my_coef_controller** %0,\l... align 8, !tbaa !2\l  %total_iMCU_rows = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 60\l  %2 = load i32, i32* %total_iMCU_rows, align 8, !tbaa !10\l  %sub = add i32 %2, -1\l  %input_scan_number = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 34\l  %output_scan_number = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 36\l  %inputctl = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 77\l  %input_iMCU_row = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 35\l  %output_iMCU_row = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 37\l  br label %while.cond\l}"];
	Node0x5868c70 -> Node0x586cd00;
	Node0x586cd00 [shape=record, style = filled, fillcolor = blue, label="{while.cond:                                       \l  %3 = load i32, i32* %input_scan_number, align 4, !tbaa !11\l  %4 = load i32, i32* %output_scan_number, align 4, !tbaa !12\l  %cmp = icmp slt i32 %3, %4\l  br i1 %cmp, label %while.body, label %lor.rhs\l|{<s0>T|<s1>F}}"];
	Node0x586cd00:s0 -> Node0x586c440;
	Node0x586cd00:s1 -> Node0x586d370;
	Node0x586d370 [shape=record, style = filled, fillcolor = blue, label="{lor.rhs:                                          \l  %cmp4 = icmp eq i32 %3, %4\l  br i1 %cmp4, label %land.rhs, label %while.end\l|{<s0>T|<s1>F}}"];
	Node0x586d370:s0 -> Node0x586d550;
	Node0x586d370:s1 -> Node0x586d5a0;
	Node0x586d550 [shape=record, style = filled, fillcolor = blue, label="{land.rhs:                                         \l  %5 = load i32, i32* %input_iMCU_row, align 8, !tbaa !13\l  %6 = load i32, i32* %output_iMCU_row, align 8, !tbaa !14\l  %cmp5 = icmp ugt i32 %5, %6\l  br i1 %cmp5, label %while.end, label %while.body\l|{<s0>T|<s1>F}}"];
	Node0x586d550:s0 -> Node0x586d5a0;
	Node0x586d550:s1 -> Node0x586c440;
	Node0x586c440 [shape=record, style = filled, fillcolor = blue, label="{while.body:                                       \l  %7 = load %struct.jpeg_input_controller*, %struct.jpeg_input_controller**\l... %inputctl, align 8, !tbaa !15\l  %consume_input = getelementptr inbounds %struct.jpeg_input_controller,\l... %struct.jpeg_input_controller* %7, i64 0, i32 0\l  %8 = load i32 (%struct.jpeg_decompress_struct*)*, i32\l... (%struct.jpeg_decompress_struct*)** %consume_input, align 8, !tbaa !16\l  %call = tail call i32 %8(%struct.jpeg_decompress_struct* nonnull %cinfo) #5\l  %cmp6 = icmp eq i32 %call, 0\l  br i1 %cmp6, label %cleanup.loopexit, label %while.cond\l|{<s0>T|<s1>F}}"];
	Node0x586c440:s0 -> Node0x5857e10;
	Node0x586c440:s1 -> Node0x586cd00;
	Node0x586d5a0 [shape=record, style = filled, fillcolor = blue, label="{while.end:                                        \l  %num_components = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 8\l  %9 = load i32, i32* %num_components, align 8, !tbaa !18\l  %cmp7120 = icmp sgt i32 %9, 0\l  br i1 %cmp7120, label %for.body.lr.ph, label %for.end43\l|{<s0>T|<s1>F}}"];
	Node0x586d5a0:s0 -> Node0x586d1d0;
	Node0x586d5a0:s1 -> Node0x586d280;
	Node0x586d1d0 [shape=record, style = filled, fillcolor = blue, label="{for.body.lr.ph:                                   \l  %comp_info = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 43\l  %10 = load %struct.jpeg_component_info*, %struct.jpeg_component_info**\l... %comp_info, align 8, !tbaa !19\l  %mem = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 1\l  %11 = bitcast %struct.jpeg_decompress_struct* %cinfo to\l... %struct.jpeg_common_struct*\l  %idct = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %cinfo, i64 0, i32 80\l  br label %for.body\l}"];
	Node0x586d1d0 -> Node0x586f700;
	Node0x586f700 [shape=record, style = filled, fillcolor = blue, label="{for.body:                                         \l  %indvars.iv123 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next124,\l... %for.inc40 ]\l  %compptr.0122 = phi %struct.jpeg_component_info* [ %10, %for.body.lr.ph ], [\l... %incdec.ptr42, %for.inc40 ]\l  %component_needed = getelementptr inbounds %struct.jpeg_component_info,\l... %struct.jpeg_component_info* %compptr.0122, i64 0, i32 12\l  %12 = load i32, i32* %component_needed, align 8, !tbaa !20\l  %tobool = icmp eq i32 %12, 0\l  br i1 %tobool, label %for.inc40, label %if.end9\l|{<s0>T|<s1>F}}"];
	Node0x586f700:s0 -> Node0x586f900;
	Node0x586f700:s1 -> Node0x586ffe0;
	Node0x586ffe0 [shape=record, style = filled, fillcolor = blue, label="{if.end9:                                          \l  %13 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align\l... 8, !tbaa !22\l  %access_virt_barray = getelementptr inbounds %struct.jpeg_memory_mgr,\l... %struct.jpeg_memory_mgr* %13, i64 0, i32 8\l  %14 = load [64 x i16]** (%struct.jpeg_common_struct*,\l... %struct.jvirt_barray_control*, i32, i32, i32)*, [64 x i16]**\l... (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)**\l... %access_virt_barray, align 8, !tbaa !23\l  %arrayidx = getelementptr inbounds %struct.my_coef_controller,\l... %struct.my_coef_controller* %1, i64 0, i32 5, i64 %indvars.iv123\l  %15 = load %struct.jvirt_barray_control*, %struct.jvirt_barray_control**\l... %arrayidx, align 8, !tbaa !26\l  %16 = load i32, i32* %output_iMCU_row, align 8, !tbaa !14\l  %v_samp_factor = getelementptr inbounds %struct.jpeg_component_info,\l... %struct.jpeg_component_info* %compptr.0122, i64 0, i32 3\l  %17 = load i32, i32* %v_samp_factor, align 4, !tbaa !27\l  %mul = mul i32 %17, %16\l  %call12 = tail call [64 x i16]** %14(%struct.jpeg_common_struct* %11,\l... %struct.jvirt_barray_control* %15, i32 %mul, i32 %17, i32 0) #5\l  %18 = load i32, i32* %output_iMCU_row, align 8, !tbaa !14\l  %cmp14 = icmp ult i32 %18, %sub\l  br i1 %cmp14, label %if.then15, label %if.else\l|{<s0>T|<s1>F}}"];
	Node0x586ffe0:s0 -> Node0x5870f00;
	Node0x586ffe0:s1 -> Node0x5870fb0;
	Node0x5870f00 [shape=record, style = filled, fillcolor = blue, label="{if.then15:                                        \l  %19 = load i32, i32* %v_samp_factor, align 4, !tbaa !27\l  br label %if.end22\l}"];
	Node0x5870f00 -> Node0x5871110;
	Node0x5870fb0 [shape=record, style = filled, fillcolor = blue, label="{if.else:                                          \l  %height_in_blocks = getelementptr inbounds %struct.jpeg_component_info,\l... %struct.jpeg_component_info* %compptr.0122, i64 0, i32 8\l  %20 = bitcast i32* %height_in_blocks to i64*\l  %21 = load i64, i64* %20, align 8\l  %22 = trunc i64 %21 to i32\l  %23 = load i32, i32* %v_samp_factor, align 4, !tbaa !27\l  %rem = urem i32 %22, %23\l  %cmp18 = icmp eq i32 %rem, 0\l  %.rem = select i1 %cmp18, i32 %23, i32 %rem\l  br label %if.end22\l}"];
	Node0x5870fb0 -> Node0x5871110;
	Node0x5871110 [shape=record, style = filled, fillcolor = blue, label="{if.end22:                                         \l  %block_rows.0 = phi i32 [ %19, %if.then15 ], [ %.rem, %if.else ]\l  %24 = load %struct.jpeg_inverse_dct*, %struct.jpeg_inverse_dct** %idct,\l... align 8, !tbaa !28\l  %arrayidx25 = getelementptr inbounds %struct.jpeg_inverse_dct,\l... %struct.jpeg_inverse_dct* %24, i64 0, i32 1, i64 %indvars.iv123\l  %25 = load void (%struct.jpeg_decompress_struct*,\l... %struct.jpeg_component_info*, i16*, i8**, i32)*, void\l... (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**,\l... i32)** %arrayidx25, align 8, !tbaa !26\l  %cmp29117 = icmp sgt i32 %block_rows.0, 0\l  br i1 %cmp29117, label %for.body30.lr.ph, label %for.inc40\l|{<s0>T|<s1>F}}"];
	Node0x5871110:s0 -> Node0x5871da0;
	Node0x5871110:s1 -> Node0x586f900;
	Node0x5871da0 [shape=record, style = filled, fillcolor = blue, label="{for.body30.lr.ph:                                 \l  %arrayidx27 = getelementptr inbounds i8**, i8*** %output_buf, i64\l... %indvars.iv123\l  %26 = load i8**, i8*** %arrayidx27, align 8, !tbaa !26\l  %width_in_blocks = getelementptr inbounds %struct.jpeg_component_info,\l... %struct.jpeg_component_info* %compptr.0122, i64 0, i32 7\l  %DCT_scaled_size36 = getelementptr inbounds %struct.jpeg_component_info,\l... %struct.jpeg_component_info* %compptr.0122, i64 0, i32 9\l  %.pre = load i32, i32* %width_in_blocks, align 4, !tbaa !29\l  br label %for.body30\l}"];
	Node0x5871da0 -> Node0x5872260;
	Node0x5872260 [shape=record, style = filled, fillcolor = blue, label="{for.body30:                                       \l  %27 = phi i32 [ %.pre, %for.body30.lr.ph ], [ %33, %for.end ]\l  %indvars.iv = phi i64 [ 0, %for.body30.lr.ph ], [ %indvars.iv.next, %for.end\l... ]\l  %output_ptr.0119 = phi i8** [ %26, %for.body30.lr.ph ], [ %add.ptr, %for.end\l... ]\l  %cmp34113 = icmp eq i32 %27, 0\l  br i1 %cmp34113, label %for.body30.for.end_crit_edge, label\l... %for.body35.preheader\l|{<s0>T|<s1>F}}"];
	Node0x5872260:s0 -> Node0x5872910;
	Node0x5872260:s1 -> Node0x5872a30;
	Node0x5872910 [shape=record, style = filled, fillcolor = blue, label="{for.body30.for.end_crit_edge:                     \l  %.pre125 = load i32, i32* %DCT_scaled_size36, align 4, !tbaa !30\l  br label %for.end\l}"];
	Node0x5872910 -> Node0x5872420;
	Node0x5872a30 [shape=record, style = filled, fillcolor = blue, label="{for.body35.preheader:                             \l  %arrayidx32 = getelementptr inbounds [64 x i16]*, [64 x i16]** %call12, i64\l... %indvars.iv\l  %28 = load [64 x i16]*, [64 x i16]** %arrayidx32, align 8, !tbaa !26\l  br label %for.body35\l}"];
	Node0x5872a30 -> Node0x5872e00;
	Node0x5872e00 [shape=record, style = filled, fillcolor = blue, label="{for.body35:                                       \l  %output_col.0116 = phi i32 [ %add, %for.body35 ], [ 0, %for.body35.preheader\l... ]\l  %buffer_ptr.0115 = phi [64 x i16]* [ %incdec.ptr, %for.body35 ], [ %28,\l... %for.body35.preheader ]\l  %block_num.0114 = phi i32 [ %inc, %for.body35 ], [ 0, %for.body35.preheader ]\l  %29 = getelementptr inbounds [64 x i16], [64 x i16]* %buffer_ptr.0115, i64\l... 0, i64 0\l  tail call void %25(%struct.jpeg_decompress_struct* %cinfo,\l... %struct.jpeg_component_info* nonnull %compptr.0122, i16* %29, i8**\l... %output_ptr.0119, i32 %output_col.0116) #5\l  %incdec.ptr = getelementptr inbounds [64 x i16], [64 x i16]*\l... %buffer_ptr.0115, i64 1\l  %30 = load i32, i32* %DCT_scaled_size36, align 4, !tbaa !30\l  %add = add i32 %30, %output_col.0116\l  %inc = add i32 %block_num.0114, 1\l  %31 = load i32, i32* %width_in_blocks, align 4, !tbaa !29\l  %cmp34 = icmp ult i32 %inc, %31\l  br i1 %cmp34, label %for.body35, label %for.end.loopexit\l|{<s0>T|<s1>F}}"];
	Node0x5872e00:s0 -> Node0x5872e00;
	Node0x5872e00:s1 -> Node0x585c110;
	Node0x585c110 [shape=record, style = filled, fillcolor = blue, label="{for.end.loopexit:                                 \l  %.lcssa129 = phi i32 [ %31, %for.body35 ]\l  %.lcssa = phi i32 [ %30, %for.body35 ]\l  br label %for.end\l}"];
	Node0x585c110 -> Node0x5872420;
	Node0x5872420 [shape=record, style = filled, fillcolor = blue, label="{for.end:                                          \l  %32 = phi i32 [ %.pre125, %for.body30.for.end_crit_edge ], [ %.lcssa,\l... %for.end.loopexit ]\l  %33 = phi i32 [ 0, %for.body30.for.end_crit_edge ], [ %.lcssa129,\l... %for.end.loopexit ]\l  %idx.ext = sext i32 %32 to i64\l  %add.ptr = getelementptr inbounds i8*, i8** %output_ptr.0119, i64 %idx.ext\l  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1\l  %lftr.wideiv = trunc i64 %indvars.iv.next to i32\l  %exitcond = icmp eq i32 %lftr.wideiv, %block_rows.0\l  br i1 %exitcond, label %for.inc40.loopexit, label %for.body30\l|{<s0>T|<s1>F}}"];
	Node0x5872420:s0 -> Node0x585c7e0;
	Node0x5872420:s1 -> Node0x5872260;
	Node0x585c7e0 [shape=record, style = filled, fillcolor = blue, label="{for.inc40.loopexit:                               \l  br label %for.inc40\l}"];
	Node0x585c7e0 -> Node0x586f900;
	Node0x586f900 [shape=record, style = filled, fillcolor = blue, label="{for.inc40:                                        \l  %indvars.iv.next124 = add nuw nsw i64 %indvars.iv123, 1\l  %incdec.ptr42 = getelementptr inbounds %struct.jpeg_component_info,\l... %struct.jpeg_component_info* %compptr.0122, i64 1\l  %34 = load i32, i32* %num_components, align 8, !tbaa !18\l  %35 = sext i32 %34 to i64\l  %cmp7 = icmp slt i64 %indvars.iv.next124, %35\l  br i1 %cmp7, label %for.body, label %for.end43.loopexit\l|{<s0>T|<s1>F}}"];
	Node0x586f900:s0 -> Node0x586f700;
	Node0x586f900:s1 -> Node0x585cab0;
	Node0x585cab0 [shape=record, style = filled, fillcolor = blue, label="{for.end43.loopexit:                               \l  br label %for.end43\l}"];
	Node0x585cab0 -> Node0x586d280;
	Node0x586d280 [shape=record, style = filled, fillcolor = blue, label="{for.end43:                                        \l  %36 = load i32, i32* %output_iMCU_row, align 8, !tbaa !14\l  %inc45 = add i32 %36, 1\l  store i32 %inc45, i32* %output_iMCU_row, align 8, !tbaa !14\l  %37 = load i32, i32* %total_iMCU_rows, align 8, !tbaa !10\l  %cmp47 = icmp ult i32 %inc45, %37\l  %. = select i1 %cmp47, i32 3, i32 4\l  br label %cleanup\l}"];
	Node0x586d280 -> Node0x585ced0;
	Node0x5857e10 [shape=record, style = filled, fillcolor = blue, label="{cleanup.loopexit:                                 \l  br label %cleanup\l}"];
	Node0x5857e10 -> Node0x585ced0;
	Node0x585ced0 [shape=record, style = filled, fillcolor = blue, label="{cleanup:                                          \l  %retval.0 = phi i32 [ %., %for.end43 ], [ 0, %cleanup.loopexit ]\l  ret i32 %retval.0\l}"];
}
