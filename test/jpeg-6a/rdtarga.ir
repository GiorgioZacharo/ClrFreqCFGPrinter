; ModuleID = 'rdtarga.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.cjpeg_source_struct = type { void (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, void (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, %struct._IO_FILE*, i8**, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.jpeg_compress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32, %struct.jpeg_destination_mgr*, i32, i32, i32, i32, double, i32, i32, i32, %struct.jpeg_component_info*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], [16 x i8], [16 x i8], [16 x i8], i32, %struct.jpeg_scan_info*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i16, i16, i32, i32, i32, i32, i32, i32, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, %struct.jpeg_comp_master*, %struct.jpeg_c_main_controller*, %struct.jpeg_c_prep_controller*, %struct.jpeg_c_coef_controller*, %struct.jpeg_marker_writer*, %struct.jpeg_color_converter*, %struct.jpeg_downsampler*, %struct.jpeg_forward_dct*, %struct.jpeg_entropy_encoder* }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_destination_mgr = type { i8*, i64, void (%struct.jpeg_compress_struct*)*, i32 (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)* }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_scan_info = type { i32, [4 x i32], i32, i32, i32, i32 }
%struct.jpeg_comp_master = type opaque
%struct.jpeg_c_main_controller = type opaque
%struct.jpeg_c_prep_controller = type opaque
%struct.jpeg_c_coef_controller = type opaque
%struct.jpeg_marker_writer = type opaque
%struct.jpeg_color_converter = type opaque
%struct.jpeg_downsampler = type opaque
%struct.jpeg_forward_dct = type opaque
%struct.jpeg_entropy_encoder = type opaque
%struct._tga_source_struct = type { %struct.cjpeg_source_struct, %struct.jpeg_compress_struct*, i8**, %struct.jvirt_sarray_control*, i32, void (%struct._tga_source_struct*)*, [4 x i8], i32, i32, i32, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)* }
%struct.cdjpeg_progress_mgr = type { %struct.jpeg_progress_mgr, i32, i32, i32 }

@c5to8bits = internal unnamed_addr constant [32 x i8] c"\00\08\10\19!)1:BJRZcks{\84\8C\94\9C\A5\AD\B5\BD\C5\CE\D6\DE\E6\EF\F7\FF", align 16

; Function Attrs: nounwind uwtable
define %struct.cjpeg_source_struct* @jinit_read_targa(%struct.jpeg_compress_struct* %cinfo) #0 !prof !2 {
entry:
  %mem = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 1
  %0 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !3
  %alloc_small = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %0, i64 0, i32 0
  %1 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_small, align 8, !tbaa !11
  %2 = bitcast %struct.jpeg_compress_struct* %cinfo to %struct.jpeg_common_struct*
  %call = tail call i8* %1(%struct.jpeg_common_struct* %2, i32 1, i64 112) #4
  %cinfo1 = getelementptr inbounds i8, i8* %call, i64 48
  %3 = bitcast i8* %cinfo1 to %struct.jpeg_compress_struct**
  store %struct.jpeg_compress_struct* %cinfo, %struct.jpeg_compress_struct** %3, align 8, !tbaa !14
  %start_input = bitcast i8* %call to void (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)**
  store void (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)* @start_input_tga, void (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %start_input, align 8, !tbaa !17
  %finish_input = getelementptr inbounds i8, i8* %call, i64 16
  %4 = bitcast i8* %finish_input to void (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)**
  store void (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)* @finish_input_tga, void (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %4, align 8, !tbaa !18
  %5 = bitcast i8* %call to %struct.cjpeg_source_struct*
  ret %struct.cjpeg_source_struct* %5
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: nounwind uwtable
define internal void @start_input_tga(%struct.jpeg_compress_struct* %cinfo, %struct.cjpeg_source_struct* nocapture %sinfo) #0 !prof !2 {
entry:
  %targaheader = alloca [18 x i8], align 16
  %0 = bitcast %struct.cjpeg_source_struct* %sinfo to %struct._tga_source_struct*
  %1 = getelementptr inbounds [18 x i8], [18 x i8]* %targaheader, i64 0, i64 0
  call void @llvm.lifetime.start(i64 18, i8* %1) #4
  %input_file = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 0, i32 3
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %input_file, align 8, !tbaa !19
  %call = call i64 @fread(i8* %1, i64 1, i64 18, %struct._IO_FILE* %2)
  %cmp = icmp eq i64 %call, 18
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %err = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 0
  %3 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8, !tbaa !20
  %msg_code = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %3, i64 0, i32 5
  store i32 42, i32* %msg_code, align 8, !tbaa !21
  %error_exit = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %3, i64 0, i32 0
  %4 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit, align 8, !tbaa !23
  %5 = bitcast %struct.jpeg_compress_struct* %cinfo to %struct.jpeg_common_struct*
  tail call void %4(%struct.jpeg_common_struct* %5) #4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arrayidx = getelementptr inbounds [18 x i8], [18 x i8]* %targaheader, i64 0, i64 16
  %6 = load i8, i8* %arrayidx, align 16, !tbaa !24
  %7 = bitcast i8* %arrayidx to i16*
  %8 = load i16, i16* %7, align 16
  %9 = trunc i16 %8 to i8
  %cmp2 = icmp eq i8 %9, 15
  %10 = lshr i16 %8, 8
  %11 = zext i16 %10 to i32
  br i1 %cmp2, label %if.then4, label %if.end6

if.then4:                                         ; preds = %if.end
  store i8 16, i8* %arrayidx, align 16, !tbaa !24
  br label %if.end6

if.end6:                                          ; preds = %if.then4, %if.end
  %12 = phi i8 [ 16, %if.then4 ], [ %6, %if.end ]
  %13 = phi i8 [ 16, %if.then4 ], [ %9, %if.end ]
  %14 = bitcast [18 x i8]* %targaheader to i32*
  %15 = load i32, i32* %14, align 16
  %16 = bitcast [18 x i8]* %targaheader to i64*
  %17 = load i64, i64* %16, align 16
  %18 = trunc i64 %17 to i32
  %19 = trunc i64 %17 to i16
  %20 = trunc i64 %17 to i8
  %21 = trunc i64 %17 to i32
  %conv8 = and i32 %21, 255
  %22 = lshr i16 %19, 8
  %23 = trunc i16 %22 to i8
  %24 = lshr i32 %18, 16
  %25 = trunc i32 %24 to i8
  %conv12 = and i32 %24, 255
  %26 = lshr i64 %17, 40
  %27 = trunc i64 %26 to i32
  %conv14 = and i32 %27, 255
  %28 = lshr i64 %17, 40
  %conv16 = trunc i64 %28 to i32
  %shl = and i32 %conv16, 65280
  %add = or i32 %shl, %conv14
  %arrayidx17 = getelementptr inbounds [18 x i8], [18 x i8]* %targaheader, i64 0, i64 12
  %29 = bitcast i8* %arrayidx17 to i32*
  %30 = load i32, i32* %29, align 4
  %add22 = and i32 %30, 65535
  %31 = lshr i32 %30, 16
  %conv24 = and i32 %31, 255
  %32 = lshr i32 %30, 24
  %shl27 = shl nuw nsw i32 %32, 8
  %add28 = or i32 %shl27, %conv24
  %conv30 = zext i8 %13 to i32
  %shr311 = lshr i32 %conv30, 3
  %pixel_size = getelementptr inbounds %struct._tga_source_struct, %struct._tga_source_struct* %0, i64 0, i32 7
  store i32 %shr311, i32* %pixel_size, align 4, !tbaa !25
  %and = and i32 %11, 32
  %cmp33 = icmp eq i32 %and, 0
  %cmp36 = icmp ugt i8 %23, 1
  %cmp39 = icmp eq i32 %shr311, 0
  %or.cond313 = or i1 %cmp36, %cmp39
  %cmp43 = icmp ugt i8 %13, 39
  %or.cond314 = or i1 %cmp43, %or.cond313
  %33 = lshr i32 %15, 24
  br i1 %or.cond314, label %if.then54, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %if.end6
  %and48 = and i8 %12, 7
  %cmp49 = icmp ne i8 %and48, 0
  %shr35312.mask = and i32 %11, 192
  %cmp52 = icmp ne i32 %shr35312.mask, 0
  %or.cond = or i1 %cmp52, %cmp49
  br i1 %or.cond, label %if.then54, label %if.end59

if.then54:                                        ; preds = %lor.lhs.false45, %if.end6
  %err55 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 0
  %34 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err55, align 8, !tbaa !20
  %msg_code56 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %34, i64 0, i32 5
  store i32 1033, i32* %msg_code56, align 8, !tbaa !21
  %error_exit58 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %34, i64 0, i32 0
  %35 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit58, align 8, !tbaa !23
  %36 = bitcast %struct.jpeg_compress_struct* %cinfo to %struct.jpeg_common_struct*
  tail call void %35(%struct.jpeg_common_struct* %36) #4
  br label %if.end59

if.end59:                                         ; preds = %lor.lhs.false45, %if.then54
  %cmp60 = icmp ugt i8 %25, 8
  %read_pixel = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 1, i32 4
  %37 = bitcast i8*** %read_pixel to void (%struct._tga_source_struct*)**
  br i1 %cmp60, label %if.then62, label %if.else

if.then62:                                        ; preds = %if.end59
  store void (%struct._tga_source_struct*)* @read_rle_pixel, void (%struct._tga_source_struct*)** %37, align 8, !tbaa !26
  %dup_pixel_count = getelementptr inbounds %struct._tga_source_struct, %struct._tga_source_struct* %0, i64 0, i32 9
  store i32 0, i32* %dup_pixel_count, align 4, !tbaa !27
  %block_count = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 2
  %38 = bitcast %struct.cjpeg_source_struct* %block_count to i32*
  store i32 0, i32* %38, align 8, !tbaa !28
  %sub = add nsw i32 %conv12, -8
  br label %if.end64

if.else:                                          ; preds = %if.end59
  store void (%struct._tga_source_struct*)* @read_non_rle_pixel, void (%struct._tga_source_struct*)** %37, align 8, !tbaa !26
  br label %if.end64

if.end64:                                         ; preds = %if.else, %if.then62
  %subtype.0 = phi i32 [ %sub, %if.then62 ], [ %conv12, %if.else ]
  %in_color_space = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 9
  store i32 2, i32* %in_color_space, align 4, !tbaa !29
  switch i32 %subtype.0, label %sw.default135 [
    i32 1, label %sw.bb
    i32 2, label %sw.bb86
    i32 3, label %sw.bb110
  ]

sw.bb:                                            ; preds = %if.end64
  %39 = load i32, i32* %pixel_size, align 4, !tbaa !25
  %cmp66 = icmp eq i32 %39, 1
  %cmp68 = icmp eq i8 %23, 1
  %or.cond201 = and i1 %cmp68, %cmp66
  br i1 %or.cond201, label %if.then70, label %if.else71

if.then70:                                        ; preds = %sw.bb
  %40 = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 2, i32 1
  store i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)* @get_8bit_row, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %40, align 8, !tbaa !30
  %.pre = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 0
  %.pre323 = bitcast %struct.jpeg_compress_struct* %cinfo to %struct.jpeg_common_struct*
  br label %if.end76

if.else71:                                        ; preds = %sw.bb
  %err72 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 0
  %41 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err72, align 8, !tbaa !20
  %msg_code73 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %41, i64 0, i32 5
  store i32 1033, i32* %msg_code73, align 8, !tbaa !21
  %error_exit75 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %41, i64 0, i32 0
  %42 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit75, align 8, !tbaa !23
  %43 = bitcast %struct.jpeg_compress_struct* %cinfo to %struct.jpeg_common_struct*
  tail call void %42(%struct.jpeg_common_struct* %43) #4
  br label %if.end76

if.end76:                                         ; preds = %if.else71, %if.then70
  %.pre-phi = phi %struct.jpeg_common_struct* [ %43, %if.else71 ], [ %.pre323, %if.then70 ]
  %err77.pre-phi = phi %struct.jpeg_error_mgr** [ %err72, %if.else71 ], [ %.pre, %if.then70 ]
  %44 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err77.pre-phi, align 8, !tbaa !20
  %msg_code78 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %44, i64 0, i32 5
  store i32 1037, i32* %msg_code78, align 8, !tbaa !21
  %arrayidx80 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %44, i64 0, i32 6, i32 0, i64 0
  store i32 %add22, i32* %arrayidx80, align 4, !tbaa !31
  %arrayidx84 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %44, i64 0, i32 6, i32 0, i64 1
  store i32 %add28, i32* %arrayidx84, align 4, !tbaa !31
  %emit_message = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %44, i64 0, i32 1
  %45 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %emit_message, align 8, !tbaa !32
  tail call void %45(%struct.jpeg_common_struct* %.pre-phi, i32 1) #4
  br label %sw.epilog140

sw.bb86:                                          ; preds = %if.end64
  %46 = load i32, i32* %pixel_size, align 4, !tbaa !25
  switch i32 %46, label %sw.default [
    i32 2, label %sw.bb88
    i32 3, label %sw.bb90
    i32 4, label %sw.bb92
  ]

sw.bb88:                                          ; preds = %sw.bb86
  %47 = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 2, i32 1
  store i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)* @get_16bit_row, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %47, align 8, !tbaa !30
  br label %sw.epilog

sw.bb90:                                          ; preds = %sw.bb86
  %48 = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 2, i32 1
  store i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)* @get_24bit_row, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %48, align 8, !tbaa !30
  br label %sw.epilog

sw.bb92:                                          ; preds = %sw.bb86
  %49 = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 2, i32 1
  store i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)* @get_24bit_row, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %49, align 8, !tbaa !30
  br label %sw.epilog

sw.default:                                       ; preds = %sw.bb86
  %err94 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 0
  %50 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err94, align 8, !tbaa !20
  %msg_code95 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %50, i64 0, i32 5
  store i32 1033, i32* %msg_code95, align 8, !tbaa !21
  %error_exit97 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %50, i64 0, i32 0
  %51 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit97, align 8, !tbaa !23
  %52 = bitcast %struct.jpeg_compress_struct* %cinfo to %struct.jpeg_common_struct*
  tail call void %51(%struct.jpeg_common_struct* %52) #4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb92, %sw.bb90, %sw.bb88
  %err98 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 0
  %53 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err98, align 8, !tbaa !20
  %msg_code99 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %53, i64 0, i32 5
  store i32 1035, i32* %msg_code99, align 8, !tbaa !21
  %arrayidx103 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %53, i64 0, i32 6, i32 0, i64 0
  store i32 %add22, i32* %arrayidx103, align 4, !tbaa !31
  %arrayidx107 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %53, i64 0, i32 6, i32 0, i64 1
  store i32 %add28, i32* %arrayidx107, align 4, !tbaa !31
  %emit_message109 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %53, i64 0, i32 1
  %54 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %emit_message109, align 8, !tbaa !32
  %55 = bitcast %struct.jpeg_compress_struct* %cinfo to %struct.jpeg_common_struct*
  tail call void %54(%struct.jpeg_common_struct* %55, i32 1) #4
  br label %sw.epilog140

sw.bb110:                                         ; preds = %if.end64
  store i32 1, i32* %in_color_space, align 4, !tbaa !29
  %56 = load i32, i32* %pixel_size, align 4, !tbaa !25
  %cmp113 = icmp eq i32 %56, 1
  br i1 %cmp113, label %if.then115, label %if.else117

if.then115:                                       ; preds = %sw.bb110
  %57 = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 2, i32 1
  store i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)* @get_8bit_gray_row, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %57, align 8, !tbaa !30
  %.pre324 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 0
  %.pre325 = bitcast %struct.jpeg_compress_struct* %cinfo to %struct.jpeg_common_struct*
  br label %if.end122

if.else117:                                       ; preds = %sw.bb110
  %err118 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 0
  %58 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err118, align 8, !tbaa !20
  %msg_code119 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %58, i64 0, i32 5
  store i32 1033, i32* %msg_code119, align 8, !tbaa !21
  %error_exit121 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %58, i64 0, i32 0
  %59 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit121, align 8, !tbaa !23
  %60 = bitcast %struct.jpeg_compress_struct* %cinfo to %struct.jpeg_common_struct*
  tail call void %59(%struct.jpeg_common_struct* %60) #4
  br label %if.end122

if.end122:                                        ; preds = %if.else117, %if.then115
  %.pre-phi326 = phi %struct.jpeg_common_struct* [ %60, %if.else117 ], [ %.pre325, %if.then115 ]
  %err123.pre-phi = phi %struct.jpeg_error_mgr** [ %err118, %if.else117 ], [ %.pre324, %if.then115 ]
  %61 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err123.pre-phi, align 8, !tbaa !20
  %msg_code124 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %61, i64 0, i32 5
  store i32 1036, i32* %msg_code124, align 8, !tbaa !21
  %arrayidx128 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %61, i64 0, i32 6, i32 0, i64 0
  store i32 %add22, i32* %arrayidx128, align 4, !tbaa !31
  %arrayidx132 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %61, i64 0, i32 6, i32 0, i64 1
  store i32 %add28, i32* %arrayidx132, align 4, !tbaa !31
  %emit_message134 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %61, i64 0, i32 1
  %62 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %emit_message134, align 8, !tbaa !32
  tail call void %62(%struct.jpeg_common_struct* %.pre-phi326, i32 1) #4
  br label %sw.epilog140

sw.default135:                                    ; preds = %if.end64
  %err136 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 0
  %63 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err136, align 8, !tbaa !20
  %msg_code137 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %63, i64 0, i32 5
  store i32 1033, i32* %msg_code137, align 8, !tbaa !21
  %error_exit139 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %63, i64 0, i32 0
  %64 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit139, align 8, !tbaa !23
  %65 = bitcast %struct.jpeg_compress_struct* %cinfo to %struct.jpeg_common_struct*
  tail call void %64(%struct.jpeg_common_struct* %65) #4
  br label %sw.epilog140

sw.epilog140:                                     ; preds = %sw.default135, %if.end122, %sw.epilog, %if.end76
  %components.0 = phi i32 [ 3, %sw.default135 ], [ 1, %if.end122 ], [ 3, %sw.epilog ], [ 3, %if.end76 ]
  br i1 %cmp33, label %if.then141, label %if.else152

if.then141:                                       ; preds = %sw.epilog140
  %mem = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 1
  %66 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !3
  %request_virt_sarray = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %66, i64 0, i32 4
  %67 = load %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)** %request_virt_sarray, align 8, !tbaa !33
  %68 = bitcast %struct.jpeg_compress_struct* %cinfo to %struct.jpeg_common_struct*
  %mul = mul nuw nsw i32 %components.0, %add22
  %call142 = tail call %struct.jvirt_sarray_control* %67(%struct.jpeg_common_struct* %68, i32 1, i32 0, i32 %mul, i32 %add28, i32 1) #4
  %whole_image = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 1, i32 2
  %69 = bitcast void (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %whole_image to %struct.jvirt_sarray_control**
  store %struct.jvirt_sarray_control* %call142, %struct.jvirt_sarray_control** %69, align 8, !tbaa !34
  %progress = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 2
  %70 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %progress, align 8, !tbaa !35
  %cmp143 = icmp eq %struct.jpeg_progress_mgr* %70, null
  br i1 %cmp143, label %if.end148, label %if.then145

if.then145:                                       ; preds = %if.then141
  %71 = bitcast %struct.jpeg_progress_mgr* %70 to %struct.cdjpeg_progress_mgr*
  %total_extra_passes = getelementptr inbounds %struct.cdjpeg_progress_mgr, %struct.cdjpeg_progress_mgr* %71, i64 0, i32 2
  %72 = load i32, i32* %total_extra_passes, align 4, !tbaa !36
  %inc = add nsw i32 %72, 1
  store i32 %inc, i32* %total_extra_passes, align 4, !tbaa !36
  br label %if.end148

if.end148:                                        ; preds = %if.then141, %if.then145
  %buffer_height = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 0, i32 5
  store i32 1, i32* %buffer_height, align 8, !tbaa !39
  %get_pixel_rows151 = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 0, i32 1
  store i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)* @preload_image, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %get_pixel_rows151, align 8, !tbaa !40
  br label %while.cond.preheader

if.else152:                                       ; preds = %sw.epilog140
  %whole_image153 = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 1, i32 2
  %73 = bitcast void (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %whole_image153 to %struct.jvirt_sarray_control**
  store %struct.jvirt_sarray_control* null, %struct.jvirt_sarray_control** %73, align 8, !tbaa !34
  %mem154 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 1
  %74 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem154, align 8, !tbaa !3
  %alloc_sarray = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %74, i64 0, i32 2
  %75 = load i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)** %alloc_sarray, align 8, !tbaa !41
  %76 = bitcast %struct.jpeg_compress_struct* %cinfo to %struct.jpeg_common_struct*
  %mul155 = mul nuw nsw i32 %components.0, %add22
  %call156 = tail call i8** %75(%struct.jpeg_common_struct* %76, i32 1, i32 %mul155, i32 1) #4
  %buffer = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 0, i32 4
  store i8** %call156, i8*** %buffer, align 8, !tbaa !42
  %buffer_height159 = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 0, i32 5
  store i32 1, i32* %buffer_height159, align 8, !tbaa !39
  %77 = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 2, i32 1
  %78 = bitcast i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %77 to i64*
  %79 = load i64, i64* %78, align 8, !tbaa !30
  %get_pixel_rows162 = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 0, i32 1
  %80 = bitcast i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %get_pixel_rows162 to i64*
  store i64 %79, i64* %80, align 8, !tbaa !40
  br label %while.cond.preheader

while.cond.preheader:                             ; preds = %if.else152, %if.end148
  %tobool164321 = icmp eq i8 %20, 0
  br i1 %tobool164321, label %while.end, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %while.cond.preheader
  %cinfo.i = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 1
  %81 = bitcast %struct.cjpeg_source_struct* %cinfo.i to %struct.jpeg_compress_struct**
  br label %while.body

while.body:                                       ; preds = %while.body.lr.ph, %while.cond.backedge
  %idlen.0322 = phi i32 [ %conv8, %while.body.lr.ph ], [ %dec, %while.cond.backedge ]
  %dec = add nsw i32 %idlen.0322, -1
  %82 = load %struct._IO_FILE*, %struct._IO_FILE** %input_file, align 8, !tbaa !19
  %call.i = tail call i32 @_IO_getc(%struct._IO_FILE* %82) #4
  %cmp.i = icmp eq i32 %call.i, -1
  br i1 %cmp.i, label %if.then.i, label %while.cond.backedge

while.cond.backedge:                              ; preds = %while.body, %if.then.i
  %tobool164 = icmp eq i32 %dec, 0
  br i1 %tobool164, label %while.end.loopexit, label %while.body

if.then.i:                                        ; preds = %while.body
  %83 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %81, align 8, !tbaa !14
  %err.i = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %83, i64 0, i32 0
  %84 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err.i, align 8, !tbaa !20
  %msg_code.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %84, i64 0, i32 5
  store i32 42, i32* %msg_code.i, align 8, !tbaa !21
  %error_exit.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %84, i64 0, i32 0
  %85 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit.i, align 8, !tbaa !23
  %86 = bitcast %struct.jpeg_compress_struct* %83 to %struct.jpeg_common_struct*
  tail call void %85(%struct.jpeg_common_struct* %86) #4
  br label %while.cond.backedge

while.end.loopexit:                               ; preds = %while.cond.backedge
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %while.cond.preheader
  %cmp166 = icmp eq i32 %add, 0
  br i1 %cmp166, label %if.else191, label %if.then168

if.then168:                                       ; preds = %while.end
  %cmp169 = icmp ugt i32 %add, 256
  br i1 %cmp169, label %if.then180, label %lor.lhs.false171

lor.lhs.false171:                                 ; preds = %if.then168
  %87 = lshr i64 %17, 24
  %conv175 = trunc i64 %87 to i32
  %shl176 = and i32 %conv175, 65280
  %add177 = or i32 %shl176, %33
  %cmp178 = icmp eq i32 %add177, 0
  br i1 %cmp178, label %lor.lhs.false171.if.end185_crit_edge, label %if.then180

lor.lhs.false171.if.end185_crit_edge:             ; preds = %lor.lhs.false171
  %.pre327 = bitcast %struct.jpeg_compress_struct* %cinfo to %struct.jpeg_common_struct*
  br label %if.end185

if.then180:                                       ; preds = %lor.lhs.false171, %if.then168
  %err181 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 0
  %88 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err181, align 8, !tbaa !20
  %msg_code182 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %88, i64 0, i32 5
  store i32 1032, i32* %msg_code182, align 8, !tbaa !21
  %error_exit184 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %88, i64 0, i32 0
  %89 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit184, align 8, !tbaa !23
  %90 = bitcast %struct.jpeg_compress_struct* %cinfo to %struct.jpeg_common_struct*
  tail call void %89(%struct.jpeg_common_struct* %90) #4
  br label %if.end185

if.end185:                                        ; preds = %lor.lhs.false171.if.end185_crit_edge, %if.then180
  %.pre-phi328 = phi %struct.jpeg_common_struct* [ %.pre327, %lor.lhs.false171.if.end185_crit_edge ], [ %90, %if.then180 ]
  %mem186 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 1
  %91 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem186, align 8, !tbaa !3
  %alloc_sarray187 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %91, i64 0, i32 2
  %92 = load i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)** %alloc_sarray187, align 8, !tbaa !41
  %call188 = tail call i8** %92(%struct.jpeg_common_struct* %.pre-phi328, i32 1, i32 %add, i32 3) #4
  %colormap = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 1, i32 1
  %93 = bitcast i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %colormap to i8***
  store i8** %call188, i8*** %93, align 8, !tbaa !43
  %.mask = and i64 %17, -72057594037927936
  %cmp.i315 = icmp eq i64 %.mask, 1729382256910270464
  br i1 %cmp.i315, label %for.body.lr.ph.i, label %if.then.i320

if.then.i320:                                     ; preds = %if.end185
  %cinfo.i316 = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 1
  %94 = bitcast %struct.cjpeg_source_struct* %cinfo.i316 to %struct.jpeg_compress_struct**
  %95 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %94, align 8, !tbaa !14
  %err.i317 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %95, i64 0, i32 0
  %96 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err.i317, align 8, !tbaa !20
  %msg_code.i318 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %96, i64 0, i32 5
  store i32 1032, i32* %msg_code.i318, align 8, !tbaa !21
  %error_exit.i319 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %96, i64 0, i32 0
  %97 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit.i319, align 8, !tbaa !23
  %98 = bitcast %struct.jpeg_compress_struct* %95 to %struct.jpeg_common_struct*
  tail call void %97(%struct.jpeg_common_struct* %98) #4
  br label %for.body.lr.ph.i

for.body.lr.ph.i:                                 ; preds = %if.end185, %if.then.i320
  %cinfo.i.i = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 1
  %99 = bitcast %struct.cjpeg_source_struct* %cinfo.i.i to %struct.jpeg_compress_struct**
  br label %for.body.i

for.body.i:                                       ; preds = %read_byte.exit48.i, %for.body.lr.ph.i
  %indvars.iv.i = phi i64 [ 0, %for.body.lr.ph.i ], [ %indvars.iv.next.i, %read_byte.exit48.i ]
  %100 = load %struct._IO_FILE*, %struct._IO_FILE** %input_file, align 8, !tbaa !19
  %call.i.i = tail call i32 @_IO_getc(%struct._IO_FILE* %100) #4
  %cmp.i.i = icmp eq i32 %call.i.i, -1
  br i1 %cmp.i.i, label %if.then.i.i, label %read_byte.exit.i

if.then.i.i:                                      ; preds = %for.body.i
  %101 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %99, align 8, !tbaa !14
  %err.i.i = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %101, i64 0, i32 0
  %102 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err.i.i, align 8, !tbaa !20
  %msg_code.i.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %102, i64 0, i32 5
  store i32 42, i32* %msg_code.i.i, align 8, !tbaa !21
  %error_exit.i.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %102, i64 0, i32 0
  %103 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit.i.i, align 8, !tbaa !23
  %104 = bitcast %struct.jpeg_compress_struct* %101 to %struct.jpeg_common_struct*
  tail call void %103(%struct.jpeg_common_struct* %104) #4
  br label %read_byte.exit.i

read_byte.exit.i:                                 ; preds = %if.then.i.i, %for.body.i
  %conv.i = trunc i32 %call.i.i to i8
  %105 = load i8**, i8*** %93, align 8, !tbaa !43
  %arrayidx.i = getelementptr inbounds i8*, i8** %105, i64 2
  %106 = load i8*, i8** %arrayidx.i, align 8, !tbaa !44
  %arrayidx5.i = getelementptr inbounds i8, i8* %106, i64 %indvars.iv.i
  store i8 %conv.i, i8* %arrayidx5.i, align 1, !tbaa !24
  %107 = load %struct._IO_FILE*, %struct._IO_FILE** %input_file, align 8, !tbaa !19
  %call.i32.i = tail call i32 @_IO_getc(%struct._IO_FILE* %107) #4
  %cmp.i33.i = icmp eq i32 %call.i32.i, -1
  br i1 %cmp.i33.i, label %if.then.i38.i, label %read_byte.exit39.i

if.then.i38.i:                                    ; preds = %read_byte.exit.i
  %108 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %99, align 8, !tbaa !14
  %err.i35.i = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %108, i64 0, i32 0
  %109 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err.i35.i, align 8, !tbaa !20
  %msg_code.i36.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %109, i64 0, i32 5
  store i32 42, i32* %msg_code.i36.i, align 8, !tbaa !21
  %error_exit.i37.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %109, i64 0, i32 0
  %110 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit.i37.i, align 8, !tbaa !23
  %111 = bitcast %struct.jpeg_compress_struct* %108 to %struct.jpeg_common_struct*
  tail call void %110(%struct.jpeg_common_struct* %111) #4
  br label %read_byte.exit39.i

read_byte.exit39.i:                               ; preds = %if.then.i38.i, %read_byte.exit.i
  %conv7.i = trunc i32 %call.i32.i to i8
  %112 = load i8**, i8*** %93, align 8, !tbaa !43
  %arrayidx10.i = getelementptr inbounds i8*, i8** %112, i64 1
  %113 = load i8*, i8** %arrayidx10.i, align 8, !tbaa !44
  %arrayidx11.i = getelementptr inbounds i8, i8* %113, i64 %indvars.iv.i
  store i8 %conv7.i, i8* %arrayidx11.i, align 1, !tbaa !24
  %114 = load %struct._IO_FILE*, %struct._IO_FILE** %input_file, align 8, !tbaa !19
  %call.i41.i = tail call i32 @_IO_getc(%struct._IO_FILE* %114) #4
  %cmp.i42.i = icmp eq i32 %call.i41.i, -1
  br i1 %cmp.i42.i, label %if.then.i47.i, label %read_byte.exit48.i

if.then.i47.i:                                    ; preds = %read_byte.exit39.i
  %115 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %99, align 8, !tbaa !14
  %err.i44.i = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %115, i64 0, i32 0
  %116 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err.i44.i, align 8, !tbaa !20
  %msg_code.i45.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %116, i64 0, i32 5
  store i32 42, i32* %msg_code.i45.i, align 8, !tbaa !21
  %error_exit.i46.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %116, i64 0, i32 0
  %117 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit.i46.i, align 8, !tbaa !23
  %118 = bitcast %struct.jpeg_compress_struct* %115 to %struct.jpeg_common_struct*
  tail call void %117(%struct.jpeg_common_struct* %118) #4
  br label %read_byte.exit48.i

read_byte.exit48.i:                               ; preds = %if.then.i47.i, %read_byte.exit39.i
  %conv13.i = trunc i32 %call.i41.i to i8
  %119 = load i8**, i8*** %93, align 8, !tbaa !43
  %120 = load i8*, i8** %119, align 8, !tbaa !44
  %arrayidx17.i = getelementptr inbounds i8, i8* %120, i64 %indvars.iv.i
  store i8 %conv13.i, i8* %arrayidx17.i, align 1, !tbaa !24
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next.i to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %add
  br i1 %exitcond, label %if.end200.loopexit, label %for.body.i

if.else191:                                       ; preds = %while.end
  %tobool192 = icmp eq i8 %23, 0
  br i1 %tobool192, label %if.end198, label %if.then193

if.then193:                                       ; preds = %if.else191
  %err194 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 0
  %121 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err194, align 8, !tbaa !20
  %msg_code195 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %121, i64 0, i32 5
  store i32 1033, i32* %msg_code195, align 8, !tbaa !21
  %error_exit197 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %121, i64 0, i32 0
  %122 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit197, align 8, !tbaa !23
  %123 = bitcast %struct.jpeg_compress_struct* %cinfo to %struct.jpeg_common_struct*
  tail call void %122(%struct.jpeg_common_struct* %123) #4
  br label %if.end198

if.end198:                                        ; preds = %if.else191, %if.then193
  %colormap199 = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 1, i32 1
  %124 = bitcast i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %colormap199 to i8***
  store i8** null, i8*** %124, align 8, !tbaa !43
  br label %if.end200

if.end200.loopexit:                               ; preds = %read_byte.exit48.i
  br label %if.end200

if.end200:                                        ; preds = %if.end200.loopexit, %if.end198
  %input_components = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 8
  store i32 %components.0, i32* %input_components, align 8, !tbaa !45
  %data_precision = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 11
  store i32 8, i32* %data_precision, align 8, !tbaa !46
  %image_width = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 6
  store i32 %add22, i32* %image_width, align 8, !tbaa !47
  %image_height = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 7
  store i32 %add28, i32* %image_height, align 4, !tbaa !48
  call void @llvm.lifetime.end(i64 18, i8* %1) #4
  ret void
}

; Function Attrs: norecurse nounwind readnone uwtable
define internal void @finish_input_tga(%struct.jpeg_compress_struct* nocapture %cinfo, %struct.cjpeg_source_struct* nocapture %sinfo) #2 !prof !2 {
entry:
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: nounwind
declare i64 @fread(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) #3

; Function Attrs: nounwind uwtable
define internal void @read_rle_pixel(%struct._tga_source_struct* nocapture %sinfo) #0 !prof !2 {
entry:
  %input_file = getelementptr inbounds %struct._tga_source_struct, %struct._tga_source_struct* %sinfo, i64 0, i32 0, i32 3
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %input_file, align 8, !tbaa !19
  %dup_pixel_count = getelementptr inbounds %struct._tga_source_struct, %struct._tga_source_struct* %sinfo, i64 0, i32 9
  %1 = load i32, i32* %dup_pixel_count, align 4, !tbaa !27
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %dec = add nsw i32 %1, -1
  store i32 %dec, i32* %dup_pixel_count, align 4, !tbaa !27
  br label %cleanup

if.end:                                           ; preds = %entry
  %block_count = getelementptr inbounds %struct._tga_source_struct, %struct._tga_source_struct* %sinfo, i64 0, i32 8
  %2 = load i32, i32* %block_count, align 8, !tbaa !28
  %dec2 = add nsw i32 %2, -1
  store i32 %dec2, i32* %block_count, align 8, !tbaa !28
  %cmp3 = icmp slt i32 %2, 1
  br i1 %cmp3, label %if.then4, label %for.cond.preheader

if.then4:                                         ; preds = %if.end
  %call.i = tail call i32 @_IO_getc(%struct._IO_FILE* %0) #4
  %cmp.i = icmp eq i32 %call.i, -1
  br i1 %cmp.i, label %if.then.i, label %read_byte.exit

if.then.i:                                        ; preds = %if.then4
  %cinfo.i = getelementptr inbounds %struct._tga_source_struct, %struct._tga_source_struct* %sinfo, i64 0, i32 1
  %3 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %cinfo.i, align 8, !tbaa !14
  %err.i = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %3, i64 0, i32 0
  %4 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err.i, align 8, !tbaa !20
  %msg_code.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %4, i64 0, i32 5
  store i32 42, i32* %msg_code.i, align 8, !tbaa !21
  %error_exit.i = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %4, i64 0, i32 0
  %5 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit.i, align 8, !tbaa !23
  %6 = bitcast %struct.jpeg_compress_struct* %3 to %struct.jpeg_common_struct*
  tail call void %5(%struct.jpeg_common_struct* %6) #4
  br label %read_byte.exit

read_byte.exit:                                   ; preds = %if.then4, %if.then.i
  %7 = trunc i32 %call.i to i8
  %tobool = icmp slt i8 %7, 0
  %and6 = and i32 %call.i, 127
  br i1 %tobool, label %if.then5, label %if.else

if.then5:                                         ; preds = %read_byte.exit
  store i32 %and6, i32* %dup_pixel_count, align 4, !tbaa !27
  store i32 0, i32* %block_count, align 8, !tbaa !28
  br label %for.cond.preheader

if.else:                                          ; preds = %read_byte.exit
  store i32 %and6, i32* %block_count, align 8, !tbaa !28
  br label %for.cond.preheader

for.cond.preheader:                               ; preds = %if.then5, %if.else, %if.end
  %pixel_size = getelementptr inbounds %struct._tga_source_struct, %struct._tga_source_struct* %sinfo, i64 0, i32 7
  %8 = load i32, i32* %pixel_size, align 4, !tbaa !25
  %cmp1329 = icmp sgt i32 %8, 0
  br i1 %cmp1329, label %for.body.preheader, label %cleanup

for.body.preheader:                               ; preds = %for.cond.preheader
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %for.body.preheader ]
  %call14 = tail call i32 @_IO_getc(%struct._IO_FILE* %0)
  %conv = trunc i32 %call14 to i8
  %arrayidx = getelementptr inbounds %struct._tga_source_struct, %struct._tga_source_struct* %sinfo, i64 0, i32 6, i64 %indvars.iv
  store i8 %conv, i8* %arrayidx, align 1, !tbaa !24
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %9 = load i32, i32* %pixel_size, align 4, !tbaa !25
  %10 = sext i32 %9 to i64
  %cmp13 = icmp slt i64 %indvars.iv.next, %10
  br i1 %cmp13, label %for.body, label %cleanup.loopexit

cleanup.loopexit:                                 ; preds = %for.body
  br label %cleanup

cleanup:                                          ; preds = %cleanup.loopexit, %for.cond.preheader, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @read_non_rle_pixel(%struct._tga_source_struct* nocapture %sinfo) #0 !prof !2 {
entry:
  %input_file = getelementptr inbounds %struct._tga_source_struct, %struct._tga_source_struct* %sinfo, i64 0, i32 0, i32 3
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %input_file, align 8, !tbaa !19
  %pixel_size = getelementptr inbounds %struct._tga_source_struct, %struct._tga_source_struct* %sinfo, i64 0, i32 7
  %1 = load i32, i32* %pixel_size, align 4, !tbaa !25
  %cmp7 = icmp sgt i32 %1, 0
  br i1 %cmp7, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %for.body.preheader ]
  %call = tail call i32 @_IO_getc(%struct._IO_FILE* %0)
  %conv = trunc i32 %call to i8
  %arrayidx = getelementptr inbounds %struct._tga_source_struct, %struct._tga_source_struct* %sinfo, i64 0, i32 6, i64 %indvars.iv
  store i8 %conv, i8* %arrayidx, align 1, !tbaa !24
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %2 = load i32, i32* %pixel_size, align 4, !tbaa !25
  %3 = sext i32 %2 to i64
  %cmp = icmp slt i64 %indvars.iv.next, %3
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @get_8bit_row(%struct.jpeg_compress_struct* nocapture readonly %cinfo, %struct.cjpeg_source_struct* %sinfo) #0 !prof !2 {
entry:
  %0 = bitcast %struct.cjpeg_source_struct* %sinfo to %struct._tga_source_struct*
  %colormap1 = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 1, i32 1
  %1 = bitcast i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %colormap1 to i8***
  %2 = load i8**, i8*** %1, align 8, !tbaa !43
  %image_width = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 6
  %3 = load i32, i32* %image_width, align 8, !tbaa !47
  %cmp29 = icmp eq i32 %3, 0
  br i1 %cmp29, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %buffer = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 0, i32 4
  %4 = load i8**, i8*** %buffer, align 8, !tbaa !42
  %5 = load i8*, i8** %4, align 8, !tbaa !44
  %read_pixel = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 1, i32 4
  %6 = bitcast i8*** %read_pixel to void (%struct._tga_source_struct*)**
  %tga_pixel = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 1, i32 5
  %arrayidx2 = bitcast i32* %tga_pixel to i8*
  %arrayidx6 = getelementptr inbounds i8*, i8** %2, i64 1
  %arrayidx10 = getelementptr inbounds i8*, i8** %2, i64 2
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %ptr.031 = phi i8* [ %5, %for.body.lr.ph ], [ %incdec.ptr12, %for.body ]
  %col.030 = phi i32 [ %3, %for.body.lr.ph ], [ %dec, %for.body ]
  %7 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %6, align 8, !tbaa !26
  tail call void %7(%struct._tga_source_struct* nonnull %0) #4
  %8 = load i8, i8* %arrayidx2, align 8, !tbaa !24
  %idxprom = zext i8 %8 to i64
  %9 = load i8*, i8** %2, align 8, !tbaa !44
  %arrayidx4 = getelementptr inbounds i8, i8* %9, i64 %idxprom
  %10 = load i8, i8* %arrayidx4, align 1, !tbaa !24
  %incdec.ptr = getelementptr inbounds i8, i8* %ptr.031, i64 1
  store i8 %10, i8* %ptr.031, align 1, !tbaa !24
  %11 = load i8*, i8** %arrayidx6, align 8, !tbaa !44
  %arrayidx7 = getelementptr inbounds i8, i8* %11, i64 %idxprom
  %12 = load i8, i8* %arrayidx7, align 1, !tbaa !24
  %incdec.ptr8 = getelementptr inbounds i8, i8* %ptr.031, i64 2
  store i8 %12, i8* %incdec.ptr, align 1, !tbaa !24
  %13 = load i8*, i8** %arrayidx10, align 8, !tbaa !44
  %arrayidx11 = getelementptr inbounds i8, i8* %13, i64 %idxprom
  %14 = load i8, i8* %arrayidx11, align 1, !tbaa !24
  %incdec.ptr12 = getelementptr inbounds i8, i8* %ptr.031, i64 3
  store i8 %14, i8* %incdec.ptr8, align 1, !tbaa !24
  %dec = add i32 %col.030, -1
  %cmp = icmp eq i32 %dec, 0
  br i1 %cmp, label %for.end.loopexit, label %for.body

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret i32 1
}

; Function Attrs: nounwind uwtable
define internal i32 @get_16bit_row(%struct.jpeg_compress_struct* nocapture readonly %cinfo, %struct.cjpeg_source_struct* %sinfo) #0 !prof !2 {
entry:
  %0 = bitcast %struct.cjpeg_source_struct* %sinfo to %struct._tga_source_struct*
  %image_width = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 6
  %1 = load i32, i32* %image_width, align 8, !tbaa !47
  %cmp38 = icmp eq i32 %1, 0
  br i1 %cmp38, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %buffer = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 0, i32 4
  %2 = load i8**, i8*** %buffer, align 8, !tbaa !42
  %3 = load i8*, i8** %2, align 8, !tbaa !44
  %read_pixel = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 1, i32 4
  %4 = bitcast i8*** %read_pixel to void (%struct._tga_source_struct*)**
  %tga_pixel = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 1, i32 5
  %5 = bitcast i32* %tga_pixel to i16*
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %col.040 = phi i32 [ %1, %for.body.lr.ph ], [ %dec, %for.body ]
  %ptr.039 = phi i8* [ %3, %for.body.lr.ph ], [ %add.ptr, %for.body ]
  %6 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %4, align 8, !tbaa !26
  tail call void %6(%struct._tga_source_struct* nonnull %0) #4
  %7 = load i16, i16* %5, align 8
  %8 = zext i16 %7 to i32
  %conv = and i32 %8, 224
  %9 = lshr i16 %7, 8
  %10 = zext i16 %9 to i32
  %shl = shl nuw nsw i32 %10, 8
  %add = or i32 %shl, %conv
  %and = and i32 %8, 31
  %idxprom33 = zext i32 %and to i64
  %arrayidx5 = getelementptr inbounds [32 x i8], [32 x i8]* @c5to8bits, i64 0, i64 %idxprom33
  %11 = load i8, i8* %arrayidx5, align 1, !tbaa !24
  %arrayidx6 = getelementptr inbounds i8, i8* %ptr.039, i64 2
  store i8 %11, i8* %arrayidx6, align 1, !tbaa !24
  %shr34 = lshr exact i32 %add, 5
  %and7 = and i32 %shr34, 31
  %idxprom835 = zext i32 %and7 to i64
  %arrayidx9 = getelementptr inbounds [32 x i8], [32 x i8]* @c5to8bits, i64 0, i64 %idxprom835
  %12 = load i8, i8* %arrayidx9, align 1, !tbaa !24
  %arrayidx10 = getelementptr inbounds i8, i8* %ptr.039, i64 1
  store i8 %12, i8* %arrayidx10, align 1, !tbaa !24
  %shr1136 = lshr i32 %10, 2
  %and12 = and i32 %shr1136, 31
  %idxprom1337 = zext i32 %and12 to i64
  %arrayidx14 = getelementptr inbounds [32 x i8], [32 x i8]* @c5to8bits, i64 0, i64 %idxprom1337
  %13 = load i8, i8* %arrayidx14, align 1, !tbaa !24
  store i8 %13, i8* %ptr.039, align 1, !tbaa !24
  %add.ptr = getelementptr inbounds i8, i8* %ptr.039, i64 3
  %dec = add i32 %col.040, -1
  %cmp = icmp eq i32 %dec, 0
  br i1 %cmp, label %for.end.loopexit, label %for.body

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret i32 1
}

; Function Attrs: nounwind uwtable
define internal i32 @get_24bit_row(%struct.jpeg_compress_struct* nocapture readonly %cinfo, %struct.cjpeg_source_struct* %sinfo) #0 !prof !2 {
entry:
  %0 = bitcast %struct.cjpeg_source_struct* %sinfo to %struct._tga_source_struct*
  %image_width = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 6
  %1 = load i32, i32* %image_width, align 8, !tbaa !47
  %cmp24 = icmp eq i32 %1, 0
  br i1 %cmp24, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %buffer = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 0, i32 4
  %2 = load i8**, i8*** %buffer, align 8, !tbaa !42
  %3 = load i8*, i8** %2, align 8, !tbaa !44
  %read_pixel = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 1, i32 4
  %4 = bitcast i8*** %read_pixel to void (%struct._tga_source_struct*)**
  %tga_pixel = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 1, i32 5
  %5 = bitcast i32* %tga_pixel to [4 x i8]*
  %arrayidx1 = getelementptr inbounds [4 x i8], [4 x i8]* %5, i64 0, i64 2
  %arrayidx4 = getelementptr inbounds [4 x i8], [4 x i8]* %5, i64 0, i64 1
  %arrayidx9 = bitcast i32* %tga_pixel to i8*
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %col.026 = phi i32 [ %1, %for.body.lr.ph ], [ %dec, %for.body ]
  %ptr.025 = phi i8* [ %3, %for.body.lr.ph ], [ %incdec.ptr12, %for.body ]
  %6 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %4, align 8, !tbaa !26
  tail call void %6(%struct._tga_source_struct* nonnull %0) #4
  %7 = load i8, i8* %arrayidx1, align 2, !tbaa !24
  %incdec.ptr = getelementptr inbounds i8, i8* %ptr.025, i64 1
  store i8 %7, i8* %ptr.025, align 1, !tbaa !24
  %8 = load i8, i8* %arrayidx4, align 1, !tbaa !24
  %incdec.ptr7 = getelementptr inbounds i8, i8* %ptr.025, i64 2
  store i8 %8, i8* %incdec.ptr, align 1, !tbaa !24
  %9 = load i8, i8* %arrayidx9, align 8, !tbaa !24
  %incdec.ptr12 = getelementptr inbounds i8, i8* %ptr.025, i64 3
  store i8 %9, i8* %incdec.ptr7, align 1, !tbaa !24
  %dec = add i32 %col.026, -1
  %cmp = icmp eq i32 %dec, 0
  br i1 %cmp, label %for.end.loopexit, label %for.body

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret i32 1
}

; Function Attrs: nounwind uwtable
define internal i32 @get_8bit_gray_row(%struct.jpeg_compress_struct* nocapture readonly %cinfo, %struct.cjpeg_source_struct* %sinfo) #0 !prof !2 {
entry:
  %0 = bitcast %struct.cjpeg_source_struct* %sinfo to %struct._tga_source_struct*
  %image_width = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 6
  %1 = load i32, i32* %image_width, align 8, !tbaa !47
  %cmp10 = icmp eq i32 %1, 0
  br i1 %cmp10, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %buffer = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 0, i32 4
  %2 = load i8**, i8*** %buffer, align 8, !tbaa !42
  %3 = load i8*, i8** %2, align 8, !tbaa !44
  %read_pixel = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 1, i32 4
  %4 = bitcast i8*** %read_pixel to void (%struct._tga_source_struct*)**
  %tga_pixel = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 1, i32 5
  %arrayidx1 = bitcast i32* %tga_pixel to i8*
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %col.012 = phi i32 [ %1, %for.body.lr.ph ], [ %dec, %for.body ]
  %ptr.011 = phi i8* [ %3, %for.body.lr.ph ], [ %incdec.ptr, %for.body ]
  %5 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %4, align 8, !tbaa !26
  tail call void %5(%struct._tga_source_struct* nonnull %0) #4
  %6 = load i8, i8* %arrayidx1, align 8, !tbaa !24
  %incdec.ptr = getelementptr inbounds i8, i8* %ptr.011, i64 1
  store i8 %6, i8* %ptr.011, align 1, !tbaa !24
  %dec = add i32 %col.012, -1
  %cmp = icmp eq i32 %dec, 0
  br i1 %cmp, label %for.end.loopexit, label %for.body

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret i32 1
}

; Function Attrs: nounwind uwtable
define internal i32 @preload_image(%struct.jpeg_compress_struct* %cinfo, %struct.cjpeg_source_struct* %sinfo) #0 !prof !2 {
entry:
  %progress1 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 2
  %0 = bitcast %struct.jpeg_progress_mgr** %progress1 to %struct.cdjpeg_progress_mgr**
  %1 = load %struct.cdjpeg_progress_mgr*, %struct.cdjpeg_progress_mgr** %0, align 8, !tbaa !35
  %image_height = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 7
  %2 = load i32, i32* %image_height, align 4, !tbaa !48
  %cmp41 = icmp eq i32 %2, 0
  %cmp2 = icmp ne %struct.cdjpeg_progress_mgr* %1, null
  br i1 %cmp41, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %pass_counter = getelementptr inbounds %struct.cdjpeg_progress_mgr, %struct.cdjpeg_progress_mgr* %1, i64 0, i32 0, i32 1
  %pass_limit = getelementptr inbounds %struct.cdjpeg_progress_mgr, %struct.cdjpeg_progress_mgr* %1, i64 0, i32 0, i32 2
  %progress_monitor7 = bitcast %struct.cdjpeg_progress_mgr* %1 to void (%struct.jpeg_common_struct*)**
  %3 = bitcast %struct.jpeg_compress_struct* %cinfo to %struct.jpeg_common_struct*
  %mem = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 1
  %whole_image = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 1, i32 2
  %4 = bitcast void (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %whole_image to %struct.jvirt_sarray_control**
  %buffer = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 0, i32 4
  %5 = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 2, i32 1
  br i1 %cmp2, label %if.then.us.preheader, label %if.end.preheader

if.end.preheader:                                 ; preds = %for.body.lr.ph
  br label %if.end

if.then.us.preheader:                             ; preds = %for.body.lr.ph
  br label %if.then.us

if.then.us:                                       ; preds = %if.then.us.preheader, %if.then.us
  %6 = phi i32 [ %12, %if.then.us ], [ %2, %if.then.us.preheader ]
  %row.042.us = phi i32 [ %inc.us, %if.then.us ], [ 0, %if.then.us.preheader ]
  %conv.us = zext i32 %row.042.us to i64
  store i64 %conv.us, i64* %pass_counter, align 8, !tbaa !49
  %conv4.us = zext i32 %6 to i64
  store i64 %conv4.us, i64* %pass_limit, align 8, !tbaa !50
  %7 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %progress_monitor7, align 8, !tbaa !51
  tail call void %7(%struct.jpeg_common_struct* %3) #4
  %8 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !3
  %access_virt_sarray.us = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %8, i64 0, i32 7
  %9 = load i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)** %access_virt_sarray.us, align 8, !tbaa !52
  %10 = load %struct.jvirt_sarray_control*, %struct.jvirt_sarray_control** %4, align 8, !tbaa !34
  %call.us = tail call i8** %9(%struct.jpeg_common_struct* %3, %struct.jvirt_sarray_control* %10, i32 %row.042.us, i32 1, i32 1) #4
  store i8** %call.us, i8*** %buffer, align 8, !tbaa !42
  %11 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %5, align 8, !tbaa !30
  %call9.us = tail call i32 %11(%struct.jpeg_compress_struct* nonnull %cinfo, %struct.cjpeg_source_struct* %sinfo) #4
  %inc.us = add i32 %row.042.us, 1
  %12 = load i32, i32* %image_height, align 4, !tbaa !48
  %cmp.us = icmp ult i32 %inc.us, %12
  br i1 %cmp.us, label %if.then.us, label %for.end.loopexit

if.end:                                           ; preds = %if.end.preheader, %if.end
  %row.042 = phi i32 [ %inc, %if.end ], [ 0, %if.end.preheader ]
  %13 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !3
  %access_virt_sarray = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %13, i64 0, i32 7
  %14 = load i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)** %access_virt_sarray, align 8, !tbaa !52
  %15 = load %struct.jvirt_sarray_control*, %struct.jvirt_sarray_control** %4, align 8, !tbaa !34
  %call = tail call i8** %14(%struct.jpeg_common_struct* %3, %struct.jvirt_sarray_control* %15, i32 %row.042, i32 1, i32 1) #4
  store i8** %call, i8*** %buffer, align 8, !tbaa !42
  %16 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %5, align 8, !tbaa !30
  %call9 = tail call i32 %16(%struct.jpeg_compress_struct* nonnull %cinfo, %struct.cjpeg_source_struct* %sinfo) #4
  %inc = add i32 %row.042, 1
  %17 = load i32, i32* %image_height, align 4, !tbaa !48
  %cmp = icmp ult i32 %inc, %17
  br i1 %cmp, label %if.end, label %for.end.loopexit49

for.end.loopexit:                                 ; preds = %if.then.us
  %.lcssa = phi i32 [ %12, %if.then.us ]
  br label %for.end

for.end.loopexit49:                               ; preds = %if.end
  %.lcssa51 = phi i32 [ %17, %if.end ]
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit49, %for.end.loopexit, %entry
  %18 = phi i32 [ 0, %entry ], [ %.lcssa, %for.end.loopexit ], [ %.lcssa51, %for.end.loopexit49 ]
  br i1 %cmp2, label %if.then12, label %if.end14

if.then12:                                        ; preds = %for.end
  %completed_extra_passes = getelementptr inbounds %struct.cdjpeg_progress_mgr, %struct.cdjpeg_progress_mgr* %1, i64 0, i32 1
  %19 = load i32, i32* %completed_extra_passes, align 8, !tbaa !53
  %inc13 = add nsw i32 %19, 1
  store i32 %inc13, i32* %completed_extra_passes, align 8, !tbaa !53
  br label %if.end14

if.end14:                                         ; preds = %if.then12, %for.end
  %get_pixel_rows16 = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 0, i32 1
  store i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)* @get_memory_row, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %get_pixel_rows16, align 8, !tbaa !40
  %current_row = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 1, i32 3
  %20 = bitcast %struct._IO_FILE** %current_row to i32*
  store i32 0, i32* %20, align 8, !tbaa !54
  %sub.i = add i32 %18, -1
  %mem.i = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 1
  %21 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem.i, align 8, !tbaa !3
  %access_virt_sarray.i = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %21, i64 0, i32 7
  %22 = load i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)** %access_virt_sarray.i, align 8, !tbaa !52
  %23 = bitcast %struct.jpeg_compress_struct* %cinfo to %struct.jpeg_common_struct*
  %whole_image.i = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 1, i32 2
  %24 = bitcast void (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %whole_image.i to %struct.jvirt_sarray_control**
  %25 = load %struct.jvirt_sarray_control*, %struct.jvirt_sarray_control** %24, align 8, !tbaa !34
  %call.i = tail call i8** %22(%struct.jpeg_common_struct* %23, %struct.jvirt_sarray_control* %25, i32 %sub.i, i32 1, i32 0) #4
  %buffer.i = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 0, i32 4
  store i8** %call.i, i8*** %buffer.i, align 8, !tbaa !42
  %26 = load i32, i32* %20, align 8, !tbaa !54
  %inc.i = add i32 %26, 1
  store i32 %inc.i, i32* %20, align 8, !tbaa !54
  ret i32 1
}

; Function Attrs: nounwind
declare i32 @_IO_getc(%struct._IO_FILE* nocapture) #3

; Function Attrs: nounwind uwtable
define internal i32 @get_memory_row(%struct.jpeg_compress_struct* %cinfo, %struct.cjpeg_source_struct* nocapture %sinfo) #0 !prof !2 {
entry:
  %image_height = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 7
  %0 = load i32, i32* %image_height, align 4, !tbaa !48
  %current_row = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 1, i32 3
  %1 = bitcast %struct._IO_FILE** %current_row to i32*
  %2 = load i32, i32* %1, align 8, !tbaa !54
  %sub = add i32 %0, -1
  %sub1 = sub i32 %sub, %2
  %mem = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 1
  %3 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !3
  %access_virt_sarray = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %3, i64 0, i32 7
  %4 = load i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)** %access_virt_sarray, align 8, !tbaa !52
  %5 = bitcast %struct.jpeg_compress_struct* %cinfo to %struct.jpeg_common_struct*
  %whole_image = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 1, i32 2
  %6 = bitcast void (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %whole_image to %struct.jvirt_sarray_control**
  %7 = load %struct.jvirt_sarray_control*, %struct.jvirt_sarray_control** %6, align 8, !tbaa !34
  %call = tail call i8** %4(%struct.jpeg_common_struct* %5, %struct.jvirt_sarray_control* %7, i32 %sub1, i32 1, i32 0) #4
  %buffer = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %sinfo, i64 0, i32 4
  store i8** %call, i8*** %buffer, align 8, !tbaa !42
  %8 = load i32, i32* %1, align 8, !tbaa !54
  %inc = add i32 %8, 1
  store i32 %inc, i32* %1, align 8, !tbaa !54
  ret i32 1
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readnone uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"MaxFunctionCount", i32 150581}
!1 = !{!"clang version 3.8.0 (trunk 257473)"}
!2 = !{!"function_entry_count", i64 0}
!3 = !{!4, !5, i64 8}
!4 = !{!"jpeg_compress_struct", !5, i64 0, !5, i64 8, !5, i64 16, !8, i64 24, !8, i64 28, !5, i64 32, !8, i64 40, !8, i64 44, !8, i64 48, !6, i64 52, !9, i64 56, !8, i64 64, !8, i64 68, !6, i64 72, !5, i64 80, !6, i64 88, !6, i64 120, !6, i64 152, !6, i64 184, !6, i64 200, !6, i64 216, !8, i64 232, !5, i64 240, !8, i64 248, !8, i64 252, !8, i64 256, !8, i64 260, !8, i64 264, !6, i64 268, !8, i64 272, !8, i64 276, !8, i64 280, !6, i64 284, !10, i64 286, !10, i64 288, !8, i64 292, !8, i64 296, !8, i64 300, !8, i64 304, !8, i64 308, !8, i64 312, !8, i64 316, !6, i64 320, !8, i64 352, !8, i64 356, !8, i64 360, !6, i64 364, !8, i64 404, !8, i64 408, !8, i64 412, !8, i64 416, !5, i64 424, !5, i64 432, !5, i64 440, !5, i64 448, !5, i64 456, !5, i64 464, !5, i64 472, !5, i64 480, !5, i64 488}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = !{!"int", !6, i64 0}
!9 = !{!"double", !6, i64 0}
!10 = !{!"short", !6, i64 0}
!11 = !{!12, !5, i64 0}
!12 = !{!"jpeg_memory_mgr", !5, i64 0, !5, i64 8, !5, i64 16, !5, i64 24, !5, i64 32, !5, i64 40, !5, i64 48, !5, i64 56, !5, i64 64, !5, i64 72, !5, i64 80, !13, i64 88}
!13 = !{!"long", !6, i64 0}
!14 = !{!15, !5, i64 48}
!15 = !{!"_tga_source_struct", !16, i64 0, !5, i64 48, !5, i64 56, !5, i64 64, !8, i64 72, !5, i64 80, !6, i64 88, !8, i64 92, !8, i64 96, !8, i64 100, !5, i64 104}
!16 = !{!"cjpeg_source_struct", !5, i64 0, !5, i64 8, !5, i64 16, !5, i64 24, !5, i64 32, !8, i64 40}
!17 = !{!15, !5, i64 0}
!18 = !{!15, !5, i64 16}
!19 = !{!15, !5, i64 24}
!20 = !{!4, !5, i64 0}
!21 = !{!22, !8, i64 40}
!22 = !{!"jpeg_error_mgr", !5, i64 0, !5, i64 8, !5, i64 16, !5, i64 24, !5, i64 32, !8, i64 40, !6, i64 44, !8, i64 124, !13, i64 128, !5, i64 136, !8, i64 144, !5, i64 152, !8, i64 160, !8, i64 164}
!23 = !{!22, !5, i64 0}
!24 = !{!6, !6, i64 0}
!25 = !{!15, !8, i64 92}
!26 = !{!15, !5, i64 80}
!27 = !{!15, !8, i64 100}
!28 = !{!15, !8, i64 96}
!29 = !{!4, !6, i64 52}
!30 = !{!15, !5, i64 104}
!31 = !{!8, !8, i64 0}
!32 = !{!22, !5, i64 8}
!33 = !{!12, !5, i64 32}
!34 = !{!15, !5, i64 64}
!35 = !{!4, !5, i64 16}
!36 = !{!37, !8, i64 36}
!37 = !{!"cdjpeg_progress_mgr", !38, i64 0, !8, i64 32, !8, i64 36, !8, i64 40}
!38 = !{!"jpeg_progress_mgr", !5, i64 0, !13, i64 8, !13, i64 16, !8, i64 24, !8, i64 28}
!39 = !{!15, !8, i64 40}
!40 = !{!15, !5, i64 8}
!41 = !{!12, !5, i64 16}
!42 = !{!15, !5, i64 32}
!43 = !{!15, !5, i64 56}
!44 = !{!5, !5, i64 0}
!45 = !{!4, !8, i64 48}
!46 = !{!4, !8, i64 64}
!47 = !{!4, !8, i64 40}
!48 = !{!4, !8, i64 44}
!49 = !{!37, !13, i64 8}
!50 = !{!37, !13, i64 16}
!51 = !{!37, !5, i64 0}
!52 = !{!12, !5, i64 56}
!53 = !{!37, !8, i64 32}
!54 = !{!15, !8, i64 72}
