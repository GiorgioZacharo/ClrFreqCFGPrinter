; ModuleID = 'jcprepct.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_compress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32, %struct.jpeg_destination_mgr*, i32, i32, i32, i32, double, i32, i32, i32, %struct.jpeg_component_info*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], [16 x i8], [16 x i8], [16 x i8], i32, %struct.jpeg_scan_info*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i16, i16, i32, i32, i32, i32, i32, i32, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, %struct.jpeg_comp_master*, %struct.jpeg_c_main_controller*, %struct.jpeg_c_prep_controller*, %struct.jpeg_c_coef_controller*, %struct.jpeg_marker_writer*, %struct.jpeg_color_converter*, %struct.jpeg_downsampler*, %struct.jpeg_forward_dct*, %struct.jpeg_entropy_encoder* }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_destination_mgr = type { i8*, i64, void (%struct.jpeg_compress_struct*)*, i32 (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)* }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_scan_info = type { i32, [4 x i32], i32, i32, i32, i32 }
%struct.jpeg_comp_master = type { void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, i32, i32 }
%struct.jpeg_c_main_controller = type { void (%struct.jpeg_compress_struct*, i32)*, void (%struct.jpeg_compress_struct*, i8**, i32*, i32)* }
%struct.jpeg_c_prep_controller = type { void (%struct.jpeg_compress_struct*, i32)*, void (%struct.jpeg_compress_struct*, i8**, i32*, i32, i8***, i32*, i32)* }
%struct.jpeg_c_coef_controller = type { void (%struct.jpeg_compress_struct*, i32)*, i32 (%struct.jpeg_compress_struct*, i8***)* }
%struct.jpeg_marker_writer = type { void (%struct.jpeg_compress_struct*, i32, i8*, i32)*, void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)* }
%struct.jpeg_color_converter = type { void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)* }
%struct.jpeg_downsampler = type { void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*, i8***, i32, i8***, i32)*, i32 }
%struct.jpeg_forward_dct = type { void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, [64 x i16]*, i32, i32, i32)* }
%struct.jpeg_entropy_encoder = type { {}*, i32 (%struct.jpeg_compress_struct*, [64 x i16]**)*, void (%struct.jpeg_compress_struct*)* }
%struct.my_prep_controller = type { %struct.jpeg_c_prep_controller, [10 x i8**], i32, i32, i32, i32 }

; Function Attrs: nounwind uwtable
define void @jinit_c_prep_controller(%struct.jpeg_compress_struct* %cinfo, i32 %need_full_buffer) #0 !prof !2 {
entry:
  %tobool = icmp eq i32 %need_full_buffer, 0
  br i1 %tobool, label %entry.if.end_crit_edge, label %if.then, !prof !3

entry.if.end_crit_edge:                           ; preds = %entry
  %.pre = bitcast %struct.jpeg_compress_struct* %cinfo to %struct.jpeg_common_struct*
  br label %if.end

if.then:                                          ; preds = %entry
  %err = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 0
  %0 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8, !tbaa !4
  %msg_code = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %0, i64 0, i32 5
  store i32 4, i32* %msg_code, align 8, !tbaa !12
  %error_exit = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %0, i64 0, i32 0
  %1 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit, align 8, !tbaa !15
  %2 = bitcast %struct.jpeg_compress_struct* %cinfo to %struct.jpeg_common_struct*
  tail call void %1(%struct.jpeg_common_struct* %2) #3
  br label %if.end

if.end:                                           ; preds = %entry.if.end_crit_edge, %if.then
  %.pre-phi = phi %struct.jpeg_common_struct* [ %.pre, %entry.if.end_crit_edge ], [ %2, %if.then ]
  %mem = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 1
  %3 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !16
  %alloc_small = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %3, i64 0, i32 0
  %4 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_small, align 8, !tbaa !17
  %call = tail call i8* %4(%struct.jpeg_common_struct* %.pre-phi, i32 1, i64 112) #3
  %prep2 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 53
  %5 = bitcast %struct.jpeg_c_prep_controller** %prep2 to i8**
  store i8* %call, i8** %5, align 8, !tbaa !19
  %start_pass = bitcast i8* %call to void (%struct.jpeg_compress_struct*, i32)**
  store void (%struct.jpeg_compress_struct*, i32)* @start_pass_prep, void (%struct.jpeg_compress_struct*, i32)** %start_pass, align 8, !tbaa !20
  %downsample = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 57
  %6 = load %struct.jpeg_downsampler*, %struct.jpeg_downsampler** %downsample, align 8, !tbaa !23
  %need_context_rows = getelementptr inbounds %struct.jpeg_downsampler, %struct.jpeg_downsampler* %6, i64 0, i32 2
  %7 = load i32, i32* %need_context_rows, align 8, !tbaa !24
  %tobool3 = icmp eq i32 %7, 0
  %pre_process_data = getelementptr inbounds i8, i8* %call, i64 8
  %8 = bitcast i8* %pre_process_data to void (%struct.jpeg_compress_struct*, i8**, i32*, i32, i8***, i32*, i32)**
  %9 = bitcast i8* %call to %struct.my_prep_controller*
  br i1 %tobool3, label %if.else, label %if.then4, !prof !3

if.then4:                                         ; preds = %if.end
  store void (%struct.jpeg_compress_struct*, i8**, i32*, i32, i8***, i32*, i32)* @pre_process_context, void (%struct.jpeg_compress_struct*, i8**, i32*, i32, i8***, i32*, i32)** %8, align 8, !tbaa !26
  %max_v_samp_factor.i = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 39
  %10 = load i32, i32* %max_v_samp_factor.i, align 4, !tbaa !27
  %11 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !16
  %alloc_small.i = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %11, i64 0, i32 0
  %12 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %alloc_small.i, align 8, !tbaa !17
  %num_components.i = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 12
  %13 = load i32, i32* %num_components.i, align 4, !tbaa !28
  %mul.i = mul i32 %10, 5
  %mul2.i = mul i32 %13, %mul.i
  %conv.i = sext i32 %mul2.i to i64
  %mul3.i = shl nsw i64 %conv.i, 3
  %call.i = tail call i8* %12(%struct.jpeg_common_struct* %.pre-phi, i32 1, i64 %mul3.i) #3
  %14 = bitcast i8* %call.i to i8**
  %comp_info.i = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 14
  %15 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %comp_info.i, align 8, !tbaa !29
  %16 = load i32, i32* %num_components.i, align 4, !tbaa !28
  %cmp82.i = icmp sgt i32 %16, 0
  br i1 %cmp82.i, label %for.body.lr.ph.i, label %if.end14

for.body.lr.ph.i:                                 ; preds = %if.then4
  %max_h_samp_factor.i = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 38
  %mul13.i = mul nsw i32 %10, 3
  %idx.ext.i = sext i32 %10 to i64
  %conv16.i = sext i32 %mul13.i to i64
  %mul17.i = shl nsw i64 %conv16.i, 3
  %cmp1980.i = icmp sgt i32 %10, 0
  %idx.ext36.i = sext i32 %mul.i to i64
  br i1 %cmp1980.i, label %for.body.us.preheader.i, label %for.body.i.preheader

for.body.i.preheader:                             ; preds = %for.body.lr.ph.i
  br label %for.body.i

for.body.us.preheader.i:                          ; preds = %for.body.lr.ph.i
  %mul27.i = shl i32 %10, 2
  %mul22.i = shl i32 %10, 1
  %17 = sext i32 %mul22.i to i64
  %18 = sext i32 %mul27.i to i64
  %19 = add i32 %10, -1
  %20 = zext i32 %19 to i64
  %21 = add nuw nsw i64 %20, 1
  %22 = mul i32 %10, 5
  %23 = sext i32 %22 to i64
  %24 = shl nsw i64 %23, 3
  %25 = zext i32 %19 to i64
  %26 = shl nuw nsw i64 %25, 3
  %27 = shl i32 %10, 2
  %28 = sext i32 %27 to i64
  %29 = shl nsw i64 %28, 3
  %30 = add nsw i64 %29, %26
  %31 = shl i32 %10, 1
  %32 = sext i32 %31 to i64
  %33 = add nsw i64 %32, %25
  %34 = add i32 %10, -1
  %35 = zext i32 %34 to i64
  %36 = add nuw nsw i64 %35, 1
  %37 = and i64 %36, 8589934588
  %38 = add nsw i64 %37, -4
  %39 = lshr exact i64 %38, 2
  %40 = add i32 %10, 1
  %min.iters.check = icmp ult i64 %21, 4
  %n.vec = and i64 %21, 8589934588
  %cmp.zero = icmp eq i64 %n.vec, 0
  %41 = and i64 %39, 1
  %lcmp.mod = icmp eq i64 %41, 0
  %42 = icmp eq i64 %39, 0
  %cmp.n = icmp eq i64 %21, %n.vec
  br label %for.body.us.i

for.body.us.i:                                    ; preds = %for.cond18.for.end_crit_edge.us.i, %for.body.us.preheader.i
  %indvars.iv89.i = phi i64 [ 0, %for.body.us.preheader.i ], [ %indvars.iv.next90.i, %for.cond18.for.end_crit_edge.us.i ]
  %fake_buffer.085.us.i = phi i8** [ %14, %for.body.us.preheader.i ], [ %add.ptr37.us.i, %for.cond18.for.end_crit_edge.us.i ]
  %compptr.083.us.i = phi %struct.jpeg_component_info* [ %15, %for.body.us.preheader.i ], [ %incdec.ptr.us.i, %for.cond18.for.end_crit_edge.us.i ]
  %43 = mul i64 %24, %indvars.iv89.i
  %scevgep = getelementptr i8, i8* %call.i, i64 %43
  %44 = add i64 %26, %43
  %scevgep49 = getelementptr i8, i8* %call.i, i64 %44
  %45 = add i64 %29, %43
  %scevgep50 = getelementptr i8, i8* %call.i, i64 %45
  %46 = add i64 %30, %43
  %scevgep51 = getelementptr i8, i8* %call.i, i64 %46
  %47 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !16
  %alloc_sarray.us.i = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %47, i64 0, i32 2
  %48 = load i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)** %alloc_sarray.us.i, align 8, !tbaa !30
  %width_in_blocks.us.i = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr.083.us.i, i64 0, i32 7
  %49 = load i32, i32* %width_in_blocks.us.i, align 4, !tbaa !31
  %conv7.us.i = zext i32 %49 to i64
  %mul8.us.i = shl nuw nsw i64 %conv7.us.i, 3
  %50 = load i32, i32* %max_h_samp_factor.i, align 8, !tbaa !33
  %conv9.us.i = sext i32 %50 to i64
  %mul10.us.i = mul nsw i64 %mul8.us.i, %conv9.us.i
  %h_samp_factor.us.i = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr.083.us.i, i64 0, i32 2
  %51 = load i32, i32* %h_samp_factor.us.i, align 8, !tbaa !34
  %conv11.us.i = sext i32 %51 to i64
  %div.us.i = sdiv i64 %mul10.us.i, %conv11.us.i
  %conv12.us.i = trunc i64 %div.us.i to i32
  %call14.us.i = tail call i8** %48(%struct.jpeg_common_struct* nonnull %.pre-phi, i32 1, i32 %conv12.us.i, i32 %mul13.i) #3
  %52 = bitcast i8** %call14.us.i to i8*
  %add.ptr.us.i = getelementptr inbounds i8*, i8** %fake_buffer.085.us.i, i64 %idx.ext.i
  %53 = bitcast i8** %add.ptr.us.i to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %53, i8* %52, i64 %mul17.i, i32 1, i1 false) #3
  br i1 %min.iters.check, label %for.body21.us.i.preheader, label %min.iters.checked

min.iters.checked:                                ; preds = %for.body.us.i
  br i1 %cmp.zero, label %for.body21.us.i.preheader, label %vector.memcheck

vector.memcheck:                                  ; preds = %min.iters.checked
  %scevgep52 = getelementptr i8*, i8** %call14.us.i, i64 %32
  %scevgep5253 = bitcast i8** %scevgep52 to i8*
  %scevgep54 = getelementptr i8*, i8** %call14.us.i, i64 %33
  %scevgep5455 = bitcast i8** %scevgep54 to i8*
  %scevgep56 = getelementptr i8*, i8** %call14.us.i, i64 %25
  %scevgep5657 = bitcast i8** %scevgep56 to i8*
  %bound0 = icmp ule i8* %scevgep, %scevgep51
  %bound1 = icmp ule i8* %scevgep50, %scevgep49
  %found.conflict = and i1 %bound0, %bound1
  %bound058 = icmp ule i8* %scevgep, %scevgep5455
  %bound159 = icmp ule i8* %scevgep5253, %scevgep49
  %found.conflict60 = and i1 %bound058, %bound159
  %conflict.rdx = or i1 %found.conflict, %found.conflict60
  %bound061 = icmp ule i8* %scevgep, %scevgep5657
  %bound162 = icmp ule i8* %52, %scevgep49
  %found.conflict63 = and i1 %bound061, %bound162
  %conflict.rdx64 = or i1 %conflict.rdx, %found.conflict63
  %bound065 = icmp ule i8* %scevgep50, %scevgep5455
  %bound166 = icmp ule i8* %scevgep5253, %scevgep51
  %found.conflict67 = and i1 %bound065, %bound166
  %conflict.rdx68 = or i1 %conflict.rdx64, %found.conflict67
  %bound069 = icmp ule i8* %scevgep50, %scevgep5657
  %bound170 = icmp ule i8* %52, %scevgep51
  %found.conflict71 = and i1 %bound069, %bound170
  %conflict.rdx72 = or i1 %conflict.rdx68, %found.conflict71
  br i1 %conflict.rdx72, label %for.body21.us.i.preheader, label %vector.body.preheader

vector.body.preheader:                            ; preds = %vector.memcheck
  br i1 %lcmp.mod, label %vector.body.prol, label %vector.body.preheader.split

vector.body.prol:                                 ; preds = %vector.body.preheader
  %54 = getelementptr inbounds i8*, i8** %call14.us.i, i64 %17
  %55 = bitcast i8** %54 to <2 x i64>*
  %wide.load.prol = load <2 x i64>, <2 x i64>* %55, align 8, !tbaa !35
  %56 = getelementptr i8*, i8** %54, i64 2
  %57 = bitcast i8** %56 to <2 x i64>*
  %wide.load76.prol = load <2 x i64>, <2 x i64>* %57, align 8, !tbaa !35
  %58 = bitcast i8** %fake_buffer.085.us.i to <2 x i64>*
  store <2 x i64> %wide.load.prol, <2 x i64>* %58, align 8, !tbaa !35
  %59 = getelementptr i8*, i8** %fake_buffer.085.us.i, i64 2
  %60 = bitcast i8** %59 to <2 x i64>*
  store <2 x i64> %wide.load76.prol, <2 x i64>* %60, align 8, !tbaa !35
  %61 = bitcast i8** %call14.us.i to <2 x i64>*
  %wide.load77.prol = load <2 x i64>, <2 x i64>* %61, align 8, !tbaa !35
  %62 = getelementptr i8*, i8** %call14.us.i, i64 2
  %63 = bitcast i8** %62 to <2 x i64>*
  %wide.load78.prol = load <2 x i64>, <2 x i64>* %63, align 8, !tbaa !35
  %64 = getelementptr inbounds i8*, i8** %fake_buffer.085.us.i, i64 %18
  %65 = bitcast i8** %64 to <2 x i64>*
  store <2 x i64> %wide.load77.prol, <2 x i64>* %65, align 8, !tbaa !35
  %66 = getelementptr i8*, i8** %64, i64 2
  %67 = bitcast i8** %66 to <2 x i64>*
  store <2 x i64> %wide.load78.prol, <2 x i64>* %67, align 8, !tbaa !35
  br label %vector.body.preheader.split

vector.body.preheader.split:                      ; preds = %vector.body.prol, %vector.body.preheader
  %index.unr = phi i64 [ 0, %vector.body.preheader ], [ 4, %vector.body.prol ]
  br i1 %42, label %middle.block, label %vector.body.preheader.split.split

vector.body.preheader.split.split:                ; preds = %vector.body.preheader.split
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.body.preheader.split.split
  %index = phi i64 [ %index.unr, %vector.body.preheader.split.split ], [ %index.next.1, %vector.body ]
  %68 = add i64 %index, %17
  %69 = getelementptr inbounds i8*, i8** %call14.us.i, i64 %68
  %70 = bitcast i8** %69 to <2 x i64>*
  %wide.load = load <2 x i64>, <2 x i64>* %70, align 8, !tbaa !35
  %71 = getelementptr i8*, i8** %69, i64 2
  %72 = bitcast i8** %71 to <2 x i64>*
  %wide.load76 = load <2 x i64>, <2 x i64>* %72, align 8, !tbaa !35
  %73 = getelementptr inbounds i8*, i8** %fake_buffer.085.us.i, i64 %index
  %74 = bitcast i8** %73 to <2 x i64>*
  store <2 x i64> %wide.load, <2 x i64>* %74, align 8, !tbaa !35
  %75 = getelementptr i8*, i8** %73, i64 2
  %76 = bitcast i8** %75 to <2 x i64>*
  store <2 x i64> %wide.load76, <2 x i64>* %76, align 8, !tbaa !35
  %77 = getelementptr inbounds i8*, i8** %call14.us.i, i64 %index
  %78 = bitcast i8** %77 to <2 x i64>*
  %wide.load77 = load <2 x i64>, <2 x i64>* %78, align 8, !tbaa !35
  %79 = getelementptr i8*, i8** %77, i64 2
  %80 = bitcast i8** %79 to <2 x i64>*
  %wide.load78 = load <2 x i64>, <2 x i64>* %80, align 8, !tbaa !35
  %81 = add i64 %index, %18
  %82 = getelementptr inbounds i8*, i8** %fake_buffer.085.us.i, i64 %81
  %83 = bitcast i8** %82 to <2 x i64>*
  store <2 x i64> %wide.load77, <2 x i64>* %83, align 8, !tbaa !35
  %84 = getelementptr i8*, i8** %82, i64 2
  %85 = bitcast i8** %84 to <2 x i64>*
  store <2 x i64> %wide.load78, <2 x i64>* %85, align 8, !tbaa !35
  %index.next = add i64 %index, 4
  %86 = add i64 %index.next, %17
  %87 = getelementptr inbounds i8*, i8** %call14.us.i, i64 %86
  %88 = bitcast i8** %87 to <2 x i64>*
  %wide.load.1 = load <2 x i64>, <2 x i64>* %88, align 8, !tbaa !35
  %89 = getelementptr i8*, i8** %87, i64 2
  %90 = bitcast i8** %89 to <2 x i64>*
  %wide.load76.1 = load <2 x i64>, <2 x i64>* %90, align 8, !tbaa !35
  %91 = getelementptr inbounds i8*, i8** %fake_buffer.085.us.i, i64 %index.next
  %92 = bitcast i8** %91 to <2 x i64>*
  store <2 x i64> %wide.load.1, <2 x i64>* %92, align 8, !tbaa !35
  %93 = getelementptr i8*, i8** %91, i64 2
  %94 = bitcast i8** %93 to <2 x i64>*
  store <2 x i64> %wide.load76.1, <2 x i64>* %94, align 8, !tbaa !35
  %95 = getelementptr inbounds i8*, i8** %call14.us.i, i64 %index.next
  %96 = bitcast i8** %95 to <2 x i64>*
  %wide.load77.1 = load <2 x i64>, <2 x i64>* %96, align 8, !tbaa !35
  %97 = getelementptr i8*, i8** %95, i64 2
  %98 = bitcast i8** %97 to <2 x i64>*
  %wide.load78.1 = load <2 x i64>, <2 x i64>* %98, align 8, !tbaa !35
  %99 = add i64 %index.next, %18
  %100 = getelementptr inbounds i8*, i8** %fake_buffer.085.us.i, i64 %99
  %101 = bitcast i8** %100 to <2 x i64>*
  store <2 x i64> %wide.load77.1, <2 x i64>* %101, align 8, !tbaa !35
  %102 = getelementptr i8*, i8** %100, i64 2
  %103 = bitcast i8** %102 to <2 x i64>*
  store <2 x i64> %wide.load78.1, <2 x i64>* %103, align 8, !tbaa !35
  %index.next.1 = add i64 %index, 8
  %104 = icmp eq i64 %index.next.1, %n.vec
  br i1 %104, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !36

middle.block.unr-lcssa:                           ; preds = %vector.body
  br label %middle.block

middle.block:                                     ; preds = %vector.body.preheader.split, %middle.block.unr-lcssa
  br i1 %cmp.n, label %for.cond18.for.end_crit_edge.us.i, label %for.body21.us.i.preheader

for.body21.us.i.preheader:                        ; preds = %middle.block, %vector.memcheck, %min.iters.checked, %for.body.us.i
  %indvars.iv.i.ph = phi i64 [ 0, %vector.memcheck ], [ 0, %min.iters.checked ], [ 0, %for.body.us.i ], [ %n.vec, %middle.block ]
  %105 = or i64 %indvars.iv.i.ph, 1
  %106 = trunc i64 %105 to i32
  %107 = sub i32 %40, %106
  %xtraiter85 = and i32 %107, 1
  %lcmp.mod86 = icmp eq i32 %xtraiter85, 0
  br i1 %lcmp.mod86, label %for.body21.us.i.preheader.split, label %for.body21.us.i.prol

for.body21.us.i.prol:                             ; preds = %for.body21.us.i.preheader
  %108 = add nsw i64 %indvars.iv.i.ph, %17
  %arrayidx.us.i.prol = getelementptr inbounds i8*, i8** %call14.us.i, i64 %108
  %109 = bitcast i8** %arrayidx.us.i.prol to i64*
  %110 = load i64, i64* %109, align 8, !tbaa !35
  %arrayidx24.us.i.prol = getelementptr inbounds i8*, i8** %fake_buffer.085.us.i, i64 %indvars.iv.i.ph
  %111 = bitcast i8** %arrayidx24.us.i.prol to i64*
  store i64 %110, i64* %111, align 8, !tbaa !35
  %arrayidx26.us.i.prol = getelementptr inbounds i8*, i8** %call14.us.i, i64 %indvars.iv.i.ph
  %112 = bitcast i8** %arrayidx26.us.i.prol to i64*
  %113 = load i64, i64* %112, align 8, !tbaa !35
  %114 = add nsw i64 %indvars.iv.i.ph, %18
  %arrayidx30.us.i.prol = getelementptr inbounds i8*, i8** %fake_buffer.085.us.i, i64 %114
  %115 = bitcast i8** %arrayidx30.us.i.prol to i64*
  store i64 %113, i64* %115, align 8, !tbaa !35
  %indvars.iv.next.i.prol = or i64 %indvars.iv.i.ph, 1
  br label %for.body21.us.i.preheader.split

for.body21.us.i.preheader.split:                  ; preds = %for.body21.us.i.preheader, %for.body21.us.i.prol
  %indvars.iv.i.unr = phi i64 [ %indvars.iv.i.ph, %for.body21.us.i.preheader ], [ %indvars.iv.next.i.prol, %for.body21.us.i.prol ]
  %116 = icmp eq i32 %10, %106
  br i1 %116, label %for.cond18.for.end_crit_edge.us.i.loopexit, label %for.body21.us.i.preheader.split.split

for.body21.us.i.preheader.split.split:            ; preds = %for.body21.us.i.preheader.split
  br label %for.body21.us.i

for.body21.us.i:                                  ; preds = %for.body21.us.i, %for.body21.us.i.preheader.split.split
  %indvars.iv.i = phi i64 [ %indvars.iv.i.unr, %for.body21.us.i.preheader.split.split ], [ %indvars.iv.next.i.1, %for.body21.us.i ]
  %117 = add nsw i64 %indvars.iv.i, %17
  %arrayidx.us.i = getelementptr inbounds i8*, i8** %call14.us.i, i64 %117
  %118 = bitcast i8** %arrayidx.us.i to i64*
  %119 = load i64, i64* %118, align 8, !tbaa !35
  %arrayidx24.us.i = getelementptr inbounds i8*, i8** %fake_buffer.085.us.i, i64 %indvars.iv.i
  %120 = bitcast i8** %arrayidx24.us.i to i64*
  store i64 %119, i64* %120, align 8, !tbaa !35
  %arrayidx26.us.i = getelementptr inbounds i8*, i8** %call14.us.i, i64 %indvars.iv.i
  %121 = bitcast i8** %arrayidx26.us.i to i64*
  %122 = load i64, i64* %121, align 8, !tbaa !35
  %123 = add nsw i64 %indvars.iv.i, %18
  %arrayidx30.us.i = getelementptr inbounds i8*, i8** %fake_buffer.085.us.i, i64 %123
  %124 = bitcast i8** %arrayidx30.us.i to i64*
  store i64 %122, i64* %124, align 8, !tbaa !35
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %125 = add nsw i64 %indvars.iv.next.i, %17
  %arrayidx.us.i.1 = getelementptr inbounds i8*, i8** %call14.us.i, i64 %125
  %126 = bitcast i8** %arrayidx.us.i.1 to i64*
  %127 = load i64, i64* %126, align 8, !tbaa !35
  %arrayidx24.us.i.1 = getelementptr inbounds i8*, i8** %fake_buffer.085.us.i, i64 %indvars.iv.next.i
  %128 = bitcast i8** %arrayidx24.us.i.1 to i64*
  store i64 %127, i64* %128, align 8, !tbaa !35
  %arrayidx26.us.i.1 = getelementptr inbounds i8*, i8** %call14.us.i, i64 %indvars.iv.next.i
  %129 = bitcast i8** %arrayidx26.us.i.1 to i64*
  %130 = load i64, i64* %129, align 8, !tbaa !35
  %131 = add nsw i64 %indvars.iv.next.i, %18
  %arrayidx30.us.i.1 = getelementptr inbounds i8*, i8** %fake_buffer.085.us.i, i64 %131
  %132 = bitcast i8** %arrayidx30.us.i.1 to i64*
  store i64 %130, i64* %132, align 8, !tbaa !35
  %indvars.iv.next.i.1 = add nsw i64 %indvars.iv.i, 2
  %lftr.wideiv.1 = trunc i64 %indvars.iv.next.i.1 to i32
  %exitcond.1 = icmp eq i32 %lftr.wideiv.1, %10
  br i1 %exitcond.1, label %for.cond18.for.end_crit_edge.us.i.loopexit.unr-lcssa, label %for.body21.us.i, !llvm.loop !39

for.cond18.for.end_crit_edge.us.i.loopexit.unr-lcssa: ; preds = %for.body21.us.i
  br label %for.cond18.for.end_crit_edge.us.i.loopexit

for.cond18.for.end_crit_edge.us.i.loopexit:       ; preds = %for.body21.us.i.preheader.split, %for.cond18.for.end_crit_edge.us.i.loopexit.unr-lcssa
  br label %for.cond18.for.end_crit_edge.us.i

for.cond18.for.end_crit_edge.us.i:                ; preds = %for.cond18.for.end_crit_edge.us.i.loopexit, %middle.block
  %arrayidx34.us.i = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %9, i64 0, i32 1, i64 %indvars.iv89.i
  store i8** %add.ptr.us.i, i8*** %arrayidx34.us.i, align 8, !tbaa !35
  %add.ptr37.us.i = getelementptr inbounds i8*, i8** %fake_buffer.085.us.i, i64 %idx.ext36.i
  %indvars.iv.next90.i = add nuw nsw i64 %indvars.iv89.i, 1
  %incdec.ptr.us.i = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr.083.us.i, i64 1
  %133 = load i32, i32* %num_components.i, align 4, !tbaa !28
  %134 = sext i32 %133 to i64
  %cmp.us.i = icmp slt i64 %indvars.iv.next90.i, %134
  br i1 %cmp.us.i, label %for.body.us.i, label %if.end14.loopexit83

for.body.i:                                       ; preds = %for.body.i.preheader, %for.body.i
  %indvars.iv91.i = phi i64 [ %indvars.iv.next92.i, %for.body.i ], [ 0, %for.body.i.preheader ]
  %fake_buffer.085.i = phi i8** [ %add.ptr37.i, %for.body.i ], [ %14, %for.body.i.preheader ]
  %compptr.083.i = phi %struct.jpeg_component_info* [ %incdec.ptr.i, %for.body.i ], [ %15, %for.body.i.preheader ]
  %135 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !16
  %alloc_sarray.i = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %135, i64 0, i32 2
  %136 = load i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)** %alloc_sarray.i, align 8, !tbaa !30
  %width_in_blocks.i = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr.083.i, i64 0, i32 7
  %137 = load i32, i32* %width_in_blocks.i, align 4, !tbaa !31
  %conv7.i = zext i32 %137 to i64
  %mul8.i = shl nuw nsw i64 %conv7.i, 3
  %138 = load i32, i32* %max_h_samp_factor.i, align 8, !tbaa !33
  %conv9.i = sext i32 %138 to i64
  %mul10.i = mul nsw i64 %mul8.i, %conv9.i
  %h_samp_factor.i = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr.083.i, i64 0, i32 2
  %139 = load i32, i32* %h_samp_factor.i, align 8, !tbaa !34
  %conv11.i = sext i32 %139 to i64
  %div.i = sdiv i64 %mul10.i, %conv11.i
  %conv12.i = trunc i64 %div.i to i32
  %call14.i = tail call i8** %136(%struct.jpeg_common_struct* nonnull %.pre-phi, i32 1, i32 %conv12.i, i32 %mul13.i) #3
  %add.ptr.i = getelementptr inbounds i8*, i8** %fake_buffer.085.i, i64 %idx.ext.i
  %140 = bitcast i8** %add.ptr.i to i8*
  %141 = bitcast i8** %call14.i to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %140, i8* %141, i64 %mul17.i, i32 1, i1 false) #3
  %arrayidx34.i = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %9, i64 0, i32 1, i64 %indvars.iv91.i
  store i8** %add.ptr.i, i8*** %arrayidx34.i, align 8, !tbaa !35
  %add.ptr37.i = getelementptr inbounds i8*, i8** %fake_buffer.085.i, i64 %idx.ext36.i
  %indvars.iv.next92.i = add nuw nsw i64 %indvars.iv91.i, 1
  %incdec.ptr.i = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr.083.i, i64 1
  %142 = load i32, i32* %num_components.i, align 4, !tbaa !28
  %143 = sext i32 %142 to i64
  %cmp.i = icmp slt i64 %indvars.iv.next92.i, %143
  br i1 %cmp.i, label %for.body.i, label %if.end14.loopexit84

if.else:                                          ; preds = %if.end
  store void (%struct.jpeg_compress_struct*, i8**, i32*, i32, i8***, i32*, i32)* @pre_process_data, void (%struct.jpeg_compress_struct*, i8**, i32*, i32, i8***, i32*, i32)** %8, align 8, !tbaa !26
  %num_components = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 12
  %144 = load i32, i32* %num_components, align 4, !tbaa !28
  %cmp40 = icmp sgt i32 %144, 0
  br i1 %cmp40, label %for.body.lr.ph, label %if.end14, !prof !40

for.body.lr.ph:                                   ; preds = %if.else
  %comp_info = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 14
  %145 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %comp_info, align 8, !tbaa !29
  %max_h_samp_factor = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 38
  %color_buf = getelementptr inbounds i8, i8* %call, i64 16
  %146 = bitcast i8* %color_buf to [10 x i8**]*
  %147 = bitcast i32* %max_h_samp_factor to i64*
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %compptr.042 = phi %struct.jpeg_component_info* [ %145, %for.body.lr.ph ], [ %incdec.ptr, %for.body ]
  %148 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %mem, align 8, !tbaa !16
  %alloc_sarray = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %148, i64 0, i32 2
  %149 = load i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)** %alloc_sarray, align 8, !tbaa !30
  %width_in_blocks = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr.042, i64 0, i32 7
  %150 = load i32, i32* %width_in_blocks, align 4, !tbaa !31
  %conv = zext i32 %150 to i64
  %mul = shl nuw nsw i64 %conv, 3
  %151 = load i64, i64* %147, align 8
  %sext = shl i64 %151, 32
  %conv9 = ashr exact i64 %sext, 32
  %mul10 = mul nsw i64 %mul, %conv9
  %h_samp_factor = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr.042, i64 0, i32 2
  %152 = load i32, i32* %h_samp_factor, align 8, !tbaa !34
  %conv11 = sext i32 %152 to i64
  %div = sdiv i64 %mul10, %conv11
  %conv12 = trunc i64 %div to i32
  %153 = lshr i64 %151, 32
  %154 = trunc i64 %153 to i32
  %call13 = tail call i8** %149(%struct.jpeg_common_struct* nonnull %.pre-phi, i32 1, i32 %conv12, i32 %154) #3
  %arrayidx = getelementptr inbounds [10 x i8**], [10 x i8**]* %146, i64 0, i64 %indvars.iv
  store i8** %call13, i8*** %arrayidx, align 8, !tbaa !35
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %incdec.ptr = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr.042, i64 1
  %155 = load i32, i32* %num_components, align 4, !tbaa !28
  %156 = sext i32 %155 to i64
  %cmp = icmp slt i64 %indvars.iv.next, %156
  br i1 %cmp, label %for.body, label %if.end14.loopexit, !prof !40

if.end14.loopexit:                                ; preds = %for.body
  br label %if.end14

if.end14.loopexit83:                              ; preds = %for.cond18.for.end_crit_edge.us.i
  br label %if.end14

if.end14.loopexit84:                              ; preds = %for.body.i
  br label %if.end14

if.end14:                                         ; preds = %if.end14.loopexit84, %if.end14.loopexit83, %if.end14.loopexit, %if.else, %if.then4
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @start_pass_prep(%struct.jpeg_compress_struct* %cinfo, i32 %pass_mode) #0 !prof !2 {
entry:
  %prep1 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 53
  %0 = bitcast %struct.jpeg_c_prep_controller** %prep1 to %struct.my_prep_controller**
  %1 = load %struct.my_prep_controller*, %struct.my_prep_controller** %0, align 8, !tbaa !19
  %cmp = icmp eq i32 %pass_mode, 0
  br i1 %cmp, label %if.end, label %if.then, !prof !3

if.then:                                          ; preds = %entry
  %err = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 0
  %2 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8, !tbaa !4
  %msg_code = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %2, i64 0, i32 5
  store i32 4, i32* %msg_code, align 8, !tbaa !12
  %error_exit = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %2, i64 0, i32 0
  %3 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %error_exit, align 8, !tbaa !15
  %4 = bitcast %struct.jpeg_compress_struct* %cinfo to %struct.jpeg_common_struct*
  tail call void %3(%struct.jpeg_common_struct* %4) #3
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %image_height = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 7
  %5 = load i32, i32* %image_height, align 4, !tbaa !41
  %rows_to_go = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %1, i64 0, i32 2
  store i32 %5, i32* %rows_to_go, align 8, !tbaa !42
  %next_buf_row = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %1, i64 0, i32 3
  store i32 0, i32* %next_buf_row, align 4, !tbaa !43
  %this_row_group = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %1, i64 0, i32 4
  store i32 0, i32* %this_row_group, align 8, !tbaa !44
  %max_v_samp_factor = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 39
  %6 = load i32, i32* %max_v_samp_factor, align 4, !tbaa !27
  %mul = shl nsw i32 %6, 1
  %next_buf_stop = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %1, i64 0, i32 5
  store i32 %mul, i32* %next_buf_stop, align 4, !tbaa !45
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @pre_process_context(%struct.jpeg_compress_struct* %cinfo, i8** %input_buf, i32* nocapture %in_row_ctr, i32 %in_rows_avail, i8*** %output_buf, i32* nocapture %out_row_group_ctr, i32 %out_row_groups_avail) #0 !prof !46 {
entry:
  %prep1 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 53
  %0 = bitcast %struct.jpeg_c_prep_controller** %prep1 to %struct.my_prep_controller**
  %1 = load %struct.my_prep_controller*, %struct.my_prep_controller** %0, align 8, !tbaa !19
  %max_v_samp_factor = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 39
  %2 = load i32, i32* %max_v_samp_factor, align 4, !tbaa !27
  %mul = mul nsw i32 %2, 3
  %rows_to_go25 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %1, i64 0, i32 2
  %3 = load i32, i32* %out_row_group_ctr, align 4, !tbaa !47
  %cmp149 = icmp ult i32 %3, %out_row_groups_avail
  br i1 %cmp149, label %while.body.lr.ph, label %while.end

while.body.lr.ph:                                 ; preds = %entry
  %next_buf_stop = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %1, i64 0, i32 5
  %next_buf_row = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %1, i64 0, i32 3
  %cconvert = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 56
  %arraydecay = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %1, i64 0, i32 1, i64 0
  %image_height = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 7
  %num_components = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 12
  %image_width = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 6
  %downsample = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 57
  %this_row_group = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %1, i64 0, i32 4
  %4 = bitcast i32* %rows_to_go25 to i64*
  %5 = bitcast i32* %rows_to_go25 to i64*
  br label %while.body

while.body:                                       ; preds = %while.body.lr.ph, %while.cond.backedge
  %6 = load i32, i32* %in_row_ctr, align 4, !tbaa !47
  %cmp2 = icmp ult i32 %6, %in_rows_avail
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %sub = sub i32 %in_rows_avail, %6
  %7 = load i32, i32* %next_buf_stop, align 4, !tbaa !45
  %8 = load i32, i32* %next_buf_row, align 4, !tbaa !43
  %sub3 = sub nsw i32 %7, %8
  %cmp4 = icmp ult i32 %sub3, %sub
  %cond = select i1 %cmp4, i32 %sub3, i32 %sub
  %9 = load %struct.jpeg_color_converter*, %struct.jpeg_color_converter** %cconvert, align 8, !tbaa !48
  %color_convert = getelementptr inbounds %struct.jpeg_color_converter, %struct.jpeg_color_converter* %9, i64 0, i32 1
  %10 = load void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)*, void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)** %color_convert, align 8, !tbaa !49
  %idx.ext = zext i32 %6 to i64
  %add.ptr = getelementptr inbounds i8*, i8** %input_buf, i64 %idx.ext
  tail call void %10(%struct.jpeg_compress_struct* %cinfo, i8** %add.ptr, i8*** %arraydecay, i32 %8, i32 %cond) #3
  %11 = load i32, i32* %rows_to_go25, align 8, !tbaa !42
  %12 = load i32, i32* %image_height, align 4, !tbaa !41
  %cmp6 = icmp eq i32 %11, %12
  br i1 %cmp6, label %for.cond.preheader, label %if.end

for.cond.preheader:                               ; preds = %if.then
  %13 = load i32, i32* %num_components, align 4, !tbaa !28
  %cmp8147 = icmp sgt i32 %13, 0
  br i1 %cmp8147, label %for.cond9.preheader.preheader, label %if.end

for.cond9.preheader.preheader:                    ; preds = %for.cond.preheader
  %.pre155 = load i32, i32* %max_v_samp_factor, align 4, !tbaa !27
  br label %for.cond9.preheader

for.cond9.preheader:                              ; preds = %for.cond9.preheader.preheader, %for.end
  %14 = phi i32 [ %13, %for.cond9.preheader.preheader ], [ %19, %for.end ]
  %15 = phi i32 [ %.pre155, %for.cond9.preheader.preheader ], [ %20, %for.end ]
  %indvars.iv150 = phi i64 [ 0, %for.cond9.preheader.preheader ], [ %indvars.iv.next151, %for.end ]
  %cmp11145 = icmp slt i32 %15, 1
  br i1 %cmp11145, label %for.end, label %for.body12.lr.ph

for.body12.lr.ph:                                 ; preds = %for.cond9.preheader
  %arrayidx = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %1, i64 0, i32 1, i64 %indvars.iv150
  br label %for.body12

for.body12:                                       ; preds = %for.body12, %for.body12.lr.ph
  %row.0146 = phi i32 [ 1, %for.body12.lr.ph ], [ %inc, %for.body12 ]
  %16 = load i8**, i8*** %arrayidx, align 8, !tbaa !35
  %sub17 = sub nsw i32 0, %row.0146
  %17 = load i32, i32* %image_width, align 8, !tbaa !51
  tail call void @jcopy_sample_rows(i8** %16, i32 0, i8** %16, i32 %sub17, i32 1, i32 %17) #3
  %inc = add nuw nsw i32 %row.0146, 1
  %18 = load i32, i32* %max_v_samp_factor, align 4, !tbaa !27
  %cmp11 = icmp slt i32 %row.0146, %18
  br i1 %cmp11, label %for.body12, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body12
  %.lcssa = phi i32 [ %18, %for.body12 ]
  %.pre156 = load i32, i32* %num_components, align 4, !tbaa !28
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %for.cond9.preheader
  %19 = phi i32 [ %.pre156, %for.end.loopexit ], [ %14, %for.cond9.preheader ]
  %20 = phi i32 [ %.lcssa, %for.end.loopexit ], [ %15, %for.cond9.preheader ]
  %indvars.iv.next151 = add nuw nsw i64 %indvars.iv150, 1
  %21 = sext i32 %19 to i64
  %cmp8 = icmp slt i64 %indvars.iv.next151, %21
  br i1 %cmp8, label %for.cond9.preheader, label %if.end.loopexit

if.end.loopexit:                                  ; preds = %for.end
  br label %if.end

if.end:                                           ; preds = %if.end.loopexit, %for.cond.preheader, %if.then
  %22 = load i32, i32* %in_row_ctr, align 4, !tbaa !47
  %add = add i32 %22, %cond
  store i32 %add, i32* %in_row_ctr, align 4, !tbaa !47
  %23 = load i32, i32* %next_buf_row, align 4, !tbaa !43
  %add22 = add nsw i32 %23, %cond
  store i32 %add22, i32* %next_buf_row, align 4, !tbaa !43
  %24 = load i64, i64* %5, align 8
  %25 = trunc i64 %24 to i32
  %sub24 = sub i32 %25, %cond
  store i32 %sub24, i32* %rows_to_go25, align 8, !tbaa !42
  %26 = lshr i64 %24, 32
  %27 = trunc i64 %26 to i32
  %.pre157 = load i32, i32* %next_buf_stop, align 4, !tbaa !45
  br label %if.end49

if.else:                                          ; preds = %while.body
  %28 = load i64, i64* %4, align 8
  %29 = trunc i64 %28 to i32
  %cmp26 = icmp eq i32 %29, 0
  %30 = lshr i64 %28, 32
  %31 = trunc i64 %30 to i32
  br i1 %cmp26, label %if.end28, label %while.end.loopexit

if.end28:                                         ; preds = %if.else
  %32 = load i32, i32* %next_buf_stop, align 4, !tbaa !45
  %cmp31 = icmp slt i32 %31, %32
  br i1 %cmp31, label %for.cond33.preheader, label %if.end49

for.cond33.preheader:                             ; preds = %if.end28
  %33 = load i32, i32* %num_components, align 4, !tbaa !28
  %cmp35143 = icmp sgt i32 %33, 0
  br i1 %cmp35143, label %for.body36.preheader, label %if.end49.thread

for.body36.preheader:                             ; preds = %for.cond33.preheader
  br label %for.body36

for.body36:                                       ; preds = %for.body36.preheader, %expand_bottom_edge.exit.for.body36_crit_edge
  %34 = phi i32 [ %39, %expand_bottom_edge.exit.for.body36_crit_edge ], [ %33, %for.body36.preheader ]
  %35 = phi i32 [ %.pre152, %expand_bottom_edge.exit.for.body36_crit_edge ], [ %32, %for.body36.preheader ]
  %36 = phi i32 [ %.pre, %expand_bottom_edge.exit.for.body36_crit_edge ], [ %31, %for.body36.preheader ]
  %indvars.iv = phi i64 [ %indvars.iv.next, %expand_bottom_edge.exit.for.body36_crit_edge ], [ 0, %for.body36.preheader ]
  %arrayidx39 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %1, i64 0, i32 1, i64 %indvars.iv
  %37 = load i8**, i8*** %arrayidx39, align 8, !tbaa !35
  %38 = load i32, i32* %image_width, align 8, !tbaa !51
  %cmp6.i = icmp slt i32 %36, %35
  br i1 %cmp6.i, label %for.body.lr.ph.i, label %expand_bottom_edge.exit

for.body.lr.ph.i:                                 ; preds = %for.body36
  %sub.i = add nsw i32 %36, -1
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %for.body.lr.ph.i
  %row.07.i = phi i32 [ %36, %for.body.lr.ph.i ], [ %inc.i, %for.body.i ]
  tail call void @jcopy_sample_rows(i8** %37, i32 %sub.i, i8** %37, i32 %row.07.i, i32 1, i32 %38) #3
  %inc.i = add nsw i32 %row.07.i, 1
  %exitcond.i = icmp eq i32 %inc.i, %35
  br i1 %exitcond.i, label %expand_bottom_edge.exit.loopexit, label %for.body.i

expand_bottom_edge.exit.loopexit:                 ; preds = %for.body.i
  %.pre153 = load i32, i32* %num_components, align 4, !tbaa !28
  br label %expand_bottom_edge.exit

expand_bottom_edge.exit:                          ; preds = %expand_bottom_edge.exit.loopexit, %for.body36
  %39 = phi i32 [ %.pre153, %expand_bottom_edge.exit.loopexit ], [ %34, %for.body36 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %40 = sext i32 %39 to i64
  %cmp35 = icmp slt i64 %indvars.iv.next, %40
  br i1 %cmp35, label %expand_bottom_edge.exit.for.body36_crit_edge, label %for.end45.loopexit

expand_bottom_edge.exit.for.body36_crit_edge:     ; preds = %expand_bottom_edge.exit
  %.pre = load i32, i32* %next_buf_row, align 4, !tbaa !43
  %.pre152 = load i32, i32* %next_buf_stop, align 4, !tbaa !45
  br label %for.body36

for.end45.loopexit:                               ; preds = %expand_bottom_edge.exit
  %.pre154 = load i32, i32* %next_buf_stop, align 4, !tbaa !45
  br label %if.end49.thread

if.end49.thread:                                  ; preds = %for.cond33.preheader, %for.end45.loopexit
  %41 = phi i32 [ %.pre154, %for.end45.loopexit ], [ %32, %for.cond33.preheader ]
  store i32 %41, i32* %next_buf_row, align 4, !tbaa !43
  br label %if.then53

if.end49:                                         ; preds = %if.end28, %if.end
  %42 = phi i32 [ %32, %if.end28 ], [ %.pre157, %if.end ]
  %43 = phi i32 [ %31, %if.end28 ], [ %27, %if.end ]
  %cmp52 = icmp eq i32 %43, %42
  br i1 %cmp52, label %if.then53, label %while.cond.backedge, !prof !52

if.then53:                                        ; preds = %if.end49.thread, %if.end49
  %44 = load %struct.jpeg_downsampler*, %struct.jpeg_downsampler** %downsample, align 8, !tbaa !23
  %downsample54 = getelementptr inbounds %struct.jpeg_downsampler, %struct.jpeg_downsampler* %44, i64 0, i32 1
  %45 = load void (%struct.jpeg_compress_struct*, i8***, i32, i8***, i32)*, void (%struct.jpeg_compress_struct*, i8***, i32, i8***, i32)** %downsample54, align 8, !tbaa !53
  %46 = load i32, i32* %this_row_group, align 8, !tbaa !44
  %47 = load i32, i32* %out_row_group_ctr, align 4, !tbaa !47
  tail call void %45(%struct.jpeg_compress_struct* %cinfo, i8*** nonnull %arraydecay, i32 %46, i8*** %output_buf, i32 %47) #3
  %48 = load i32, i32* %out_row_group_ctr, align 4, !tbaa !47
  %inc57 = add i32 %48, 1
  store i32 %inc57, i32* %out_row_group_ctr, align 4, !tbaa !47
  %49 = load i32, i32* %max_v_samp_factor, align 4, !tbaa !27
  %50 = load i32, i32* %this_row_group, align 8, !tbaa !44
  %add60 = add nsw i32 %50, %49
  %cmp62 = icmp slt i32 %add60, %mul
  %add60. = select i1 %cmp62, i32 %add60, i32 0
  store i32 %add60., i32* %this_row_group, align 8, !tbaa !44
  %51 = load i32, i32* %next_buf_row, align 4, !tbaa !43
  %cmp67 = icmp slt i32 %51, %mul
  br i1 %cmp67, label %if.end70, label %if.then68

if.then68:                                        ; preds = %if.then53
  store i32 0, i32* %next_buf_row, align 4, !tbaa !43
  br label %if.end70

if.end70:                                         ; preds = %if.then53, %if.then68
  %52 = phi i32 [ %51, %if.then53 ], [ 0, %if.then68 ]
  %add73 = add nsw i32 %49, %52
  store i32 %add73, i32* %next_buf_stop, align 4, !tbaa !45
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.end70, %if.end49
  %53 = load i32, i32* %out_row_group_ctr, align 4, !tbaa !47
  %cmp = icmp ult i32 %53, %out_row_groups_avail
  br i1 %cmp, label %while.body, label %while.end.loopexit

while.end.loopexit:                               ; preds = %if.else, %while.cond.backedge
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @pre_process_data(%struct.jpeg_compress_struct* %cinfo, i8** %input_buf, i32* nocapture %in_row_ctr, i32 %in_rows_avail, i8*** %output_buf, i32* nocapture %out_row_group_ctr, i32 %out_row_groups_avail) #0 !prof !54 {
entry:
  %prep1 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 53
  %0 = bitcast %struct.jpeg_c_prep_controller** %prep1 to %struct.my_prep_controller**
  %1 = load %struct.my_prep_controller*, %struct.my_prep_controller** %0, align 8, !tbaa !19
  %2 = load i32, i32* %in_row_ctr, align 4, !tbaa !47
  %cmp119 = icmp ult i32 %2, %in_rows_avail
  br i1 %cmp119, label %land.rhs.lr.ph, label %while.end, !prof !55

land.rhs.lr.ph:                                   ; preds = %entry
  %max_v_samp_factor = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 39
  %next_buf_row = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %1, i64 0, i32 3
  %cconvert = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 56
  %arraydecay = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %1, i64 0, i32 1, i64 0
  %rows_to_go = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %1, i64 0, i32 2
  %num_components = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 12
  %image_width = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 6
  %downsample = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 57
  %3 = bitcast i32* %rows_to_go to i64*
  br label %land.rhs

land.rhs:                                         ; preds = %land.rhs.lr.ph, %while.cond.backedge
  %4 = phi i32 [ %2, %land.rhs.lr.ph ], [ %32, %while.cond.backedge ]
  %5 = load i32, i32* %out_row_group_ctr, align 4, !tbaa !47
  %cmp2 = icmp ult i32 %5, %out_row_groups_avail
  br i1 %cmp2, label %while.body, label %while.end.loopexit, !prof !55

while.body:                                       ; preds = %land.rhs
  %sub = sub i32 %in_rows_avail, %4
  %6 = load i32, i32* %max_v_samp_factor, align 4, !tbaa !27
  %7 = load i32, i32* %next_buf_row, align 4, !tbaa !43
  %sub3 = sub nsw i32 %6, %7
  %cmp4 = icmp ult i32 %sub3, %sub
  %cond = select i1 %cmp4, i32 %sub3, i32 %sub
  %8 = load %struct.jpeg_color_converter*, %struct.jpeg_color_converter** %cconvert, align 8, !tbaa !48
  %color_convert = getelementptr inbounds %struct.jpeg_color_converter, %struct.jpeg_color_converter* %8, i64 0, i32 1
  %9 = load void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)*, void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)** %color_convert, align 8, !tbaa !49
  %idx.ext = zext i32 %4 to i64
  %add.ptr = getelementptr inbounds i8*, i8** %input_buf, i64 %idx.ext
  tail call void %9(%struct.jpeg_compress_struct* nonnull %cinfo, i8** %add.ptr, i8*** %arraydecay, i32 %7, i32 %cond) #3
  %10 = load i32, i32* %in_row_ctr, align 4, !tbaa !47
  %add = add i32 %10, %cond
  store i32 %add, i32* %in_row_ctr, align 4, !tbaa !47
  %11 = load i32, i32* %next_buf_row, align 4, !tbaa !43
  %add7 = add nsw i32 %11, %cond
  store i32 %add7, i32* %next_buf_row, align 4, !tbaa !43
  %12 = load i64, i64* %3, align 8
  %13 = trunc i64 %12 to i32
  %sub8 = sub i32 %13, %cond
  store i32 %sub8, i32* %rows_to_go, align 8, !tbaa !42
  %cmp10 = icmp eq i32 %13, %cond
  %14 = lshr i64 %12, 32
  %15 = trunc i64 %14 to i32
  %16 = load i32, i32* %max_v_samp_factor, align 4, !tbaa !27
  %cmp13 = icmp slt i32 %15, %16
  %or.cond = and i1 %cmp10, %cmp13
  br i1 %or.cond, label %for.cond.preheader, label %if.end, !prof !56

for.cond.preheader:                               ; preds = %while.body
  %17 = load i32, i32* %num_components, align 4, !tbaa !28
  %cmp14117 = icmp sgt i32 %17, 0
  br i1 %cmp14117, label %for.body.preheader, label %if.end.thread

for.body.preheader:                               ; preds = %for.cond.preheader
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %expand_bottom_edge.exit.for.body_crit_edge
  %18 = phi i32 [ %23, %expand_bottom_edge.exit.for.body_crit_edge ], [ %17, %for.body.preheader ]
  %19 = phi i32 [ %.pre122, %expand_bottom_edge.exit.for.body_crit_edge ], [ %16, %for.body.preheader ]
  %20 = phi i32 [ %.pre, %expand_bottom_edge.exit.for.body_crit_edge ], [ %15, %for.body.preheader ]
  %indvars.iv120 = phi i64 [ %indvars.iv.next121, %expand_bottom_edge.exit.for.body_crit_edge ], [ 0, %for.body.preheader ]
  %arrayidx = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %1, i64 0, i32 1, i64 %indvars.iv120
  %21 = load i8**, i8*** %arrayidx, align 8, !tbaa !35
  %22 = load i32, i32* %image_width, align 8, !tbaa !51
  %cmp6.i = icmp slt i32 %20, %19
  br i1 %cmp6.i, label %for.body.lr.ph.i, label %expand_bottom_edge.exit

for.body.lr.ph.i:                                 ; preds = %for.body
  %sub.i = add nsw i32 %20, -1
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %for.body.lr.ph.i
  %row.07.i = phi i32 [ %20, %for.body.lr.ph.i ], [ %inc.i, %for.body.i ]
  tail call void @jcopy_sample_rows(i8** %21, i32 %sub.i, i8** %21, i32 %row.07.i, i32 1, i32 %22) #3
  %inc.i = add nsw i32 %row.07.i, 1
  %exitcond.i = icmp eq i32 %inc.i, %19
  br i1 %exitcond.i, label %expand_bottom_edge.exit.loopexit, label %for.body.i

expand_bottom_edge.exit.loopexit:                 ; preds = %for.body.i
  %.pre123 = load i32, i32* %num_components, align 4, !tbaa !28
  br label %expand_bottom_edge.exit

expand_bottom_edge.exit:                          ; preds = %expand_bottom_edge.exit.loopexit, %for.body
  %23 = phi i32 [ %.pre123, %expand_bottom_edge.exit.loopexit ], [ %18, %for.body ]
  %indvars.iv.next121 = add nuw nsw i64 %indvars.iv120, 1
  %24 = sext i32 %23 to i64
  %cmp14 = icmp slt i64 %indvars.iv.next121, %24
  br i1 %cmp14, label %expand_bottom_edge.exit.for.body_crit_edge, label %for.end.loopexit

expand_bottom_edge.exit.for.body_crit_edge:       ; preds = %expand_bottom_edge.exit
  %.pre = load i32, i32* %next_buf_row, align 4, !tbaa !43
  %.pre122 = load i32, i32* %max_v_samp_factor, align 4, !tbaa !27
  br label %for.body

for.end.loopexit:                                 ; preds = %expand_bottom_edge.exit
  %.pre124 = load i32, i32* %max_v_samp_factor, align 4, !tbaa !27
  br label %if.end.thread

if.end.thread:                                    ; preds = %for.cond.preheader, %for.end.loopexit
  %25 = phi i32 [ %.pre124, %for.end.loopexit ], [ %16, %for.cond.preheader ]
  store i32 %25, i32* %next_buf_row, align 4, !tbaa !43
  br label %if.then23

if.end:                                           ; preds = %while.body
  %cmp22 = icmp eq i32 %15, %16
  br i1 %cmp22, label %if.then23, label %if.end29, !prof !57

if.then23:                                        ; preds = %if.end.thread, %if.end
  %26 = load %struct.jpeg_downsampler*, %struct.jpeg_downsampler** %downsample, align 8, !tbaa !23
  %downsample24 = getelementptr inbounds %struct.jpeg_downsampler, %struct.jpeg_downsampler* %26, i64 0, i32 1
  %27 = load void (%struct.jpeg_compress_struct*, i8***, i32, i8***, i32)*, void (%struct.jpeg_compress_struct*, i8***, i32, i8***, i32)** %downsample24, align 8, !tbaa !53
  %28 = load i32, i32* %out_row_group_ctr, align 4, !tbaa !47
  tail call void %27(%struct.jpeg_compress_struct* nonnull %cinfo, i8*** nonnull %arraydecay, i32 0, i8*** %output_buf, i32 %28) #3
  store i32 0, i32* %next_buf_row, align 4, !tbaa !43
  %29 = load i32, i32* %out_row_group_ctr, align 4, !tbaa !47
  %inc28 = add i32 %29, 1
  store i32 %inc28, i32* %out_row_group_ctr, align 4, !tbaa !47
  br label %if.end29

if.end29:                                         ; preds = %if.then23, %if.end
  %30 = load i32, i32* %rows_to_go, align 8, !tbaa !42
  %cmp31 = icmp eq i32 %30, 0
  br i1 %cmp31, label %land.lhs.true32, label %while.cond.backedge, !prof !58

land.lhs.true32:                                  ; preds = %if.end29
  %31 = load i32, i32* %out_row_group_ctr, align 4, !tbaa !47
  %cmp33 = icmp ult i32 %31, %out_row_groups_avail
  br i1 %cmp33, label %if.then34, label %while.cond.backedge, !prof !59

while.cond.backedge:                              ; preds = %land.lhs.true32, %if.end29
  %32 = load i32, i32* %in_row_ctr, align 4, !tbaa !47
  %cmp = icmp ult i32 %32, %in_rows_avail
  br i1 %cmp, label %land.rhs, label %while.end.loopexit, !prof !55

if.then34:                                        ; preds = %land.lhs.true32
  %.lcssa = phi i32 [ %31, %land.lhs.true32 ]
  %33 = load i32, i32* %num_components, align 4, !tbaa !28
  %cmp37114 = icmp sgt i32 %33, 0
  br i1 %cmp37114, label %for.body38.preheader, label %for.end46

for.body38.preheader:                             ; preds = %if.then34
  %comp_info = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %cinfo, i64 0, i32 14
  %34 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %comp_info, align 8, !tbaa !29
  br label %for.body38

for.body38:                                       ; preds = %expand_bottom_edge.exit113.for.body38_crit_edge, %for.body38.preheader
  %35 = phi i32 [ %33, %for.body38.preheader ], [ %40, %expand_bottom_edge.exit113.for.body38_crit_edge ]
  %36 = phi i32 [ %.lcssa, %for.body38.preheader ], [ %.pre126, %expand_bottom_edge.exit113.for.body38_crit_edge ]
  %indvars.iv = phi i64 [ 0, %for.body38.preheader ], [ %indvars.iv.next, %expand_bottom_edge.exit113.for.body38_crit_edge ]
  %compptr.0116 = phi %struct.jpeg_component_info* [ %34, %for.body38.preheader ], [ %incdec.ptr, %expand_bottom_edge.exit113.for.body38_crit_edge ]
  %arrayidx40 = getelementptr inbounds i8**, i8*** %output_buf, i64 %indvars.iv
  %37 = load i8**, i8*** %arrayidx40, align 8, !tbaa !35
  %width_in_blocks = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr.0116, i64 0, i32 7
  %38 = load i32, i32* %width_in_blocks, align 4, !tbaa !31
  %mul = shl i32 %38, 3
  %v_samp_factor = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr.0116, i64 0, i32 3
  %39 = load i32, i32* %v_samp_factor, align 4, !tbaa !60
  %mul41 = mul i32 %39, %36
  %mul43 = mul i32 %39, %out_row_groups_avail
  %cmp6.i106 = icmp slt i32 %mul41, %mul43
  br i1 %cmp6.i106, label %for.body.lr.ph.i108, label %expand_bottom_edge.exit113

for.body.lr.ph.i108:                              ; preds = %for.body38
  %sub.i107 = add nsw i32 %mul41, -1
  br label %for.body.i112

for.body.i112:                                    ; preds = %for.body.i112, %for.body.lr.ph.i108
  %row.07.i109 = phi i32 [ %mul41, %for.body.lr.ph.i108 ], [ %inc.i110, %for.body.i112 ]
  tail call void @jcopy_sample_rows(i8** %37, i32 %sub.i107, i8** %37, i32 %row.07.i109, i32 1, i32 %mul) #3
  %inc.i110 = add nsw i32 %row.07.i109, 1
  %exitcond.i111 = icmp eq i32 %inc.i110, %mul43
  br i1 %exitcond.i111, label %expand_bottom_edge.exit113.loopexit, label %for.body.i112

expand_bottom_edge.exit113.loopexit:              ; preds = %for.body.i112
  %.pre127 = load i32, i32* %num_components, align 4, !tbaa !28
  br label %expand_bottom_edge.exit113

expand_bottom_edge.exit113:                       ; preds = %expand_bottom_edge.exit113.loopexit, %for.body38
  %40 = phi i32 [ %.pre127, %expand_bottom_edge.exit113.loopexit ], [ %35, %for.body38 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %41 = sext i32 %40 to i64
  %cmp37 = icmp slt i64 %indvars.iv.next, %41
  br i1 %cmp37, label %expand_bottom_edge.exit113.for.body38_crit_edge, label %for.end46.loopexit

expand_bottom_edge.exit113.for.body38_crit_edge:  ; preds = %expand_bottom_edge.exit113
  %incdec.ptr = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %compptr.0116, i64 1
  %.pre126 = load i32, i32* %out_row_group_ctr, align 4, !tbaa !47
  br label %for.body38

for.end46.loopexit:                               ; preds = %expand_bottom_edge.exit113
  br label %for.end46

for.end46:                                        ; preds = %for.end46.loopexit, %if.then34
  store i32 %out_row_groups_avail, i32* %out_row_group_ctr, align 4, !tbaa !47
  br label %while.end

while.end.loopexit:                               ; preds = %while.cond.backedge, %land.rhs
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %entry, %for.end46
  ret void
}

declare void @jcopy_sample_rows(i8**, i32, i8**, i32, i32, i32) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #2

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"MaxFunctionCount", i32 150581}
!1 = !{!"clang version 3.8.0 (trunk 257473)"}
!2 = !{!"function_entry_count", i64 1}
!3 = !{!"branch_weights", i32 2, i32 1}
!4 = !{!5, !6, i64 0}
!5 = !{!"jpeg_compress_struct", !6, i64 0, !6, i64 8, !6, i64 16, !9, i64 24, !9, i64 28, !6, i64 32, !9, i64 40, !9, i64 44, !9, i64 48, !7, i64 52, !10, i64 56, !9, i64 64, !9, i64 68, !7, i64 72, !6, i64 80, !7, i64 88, !7, i64 120, !7, i64 152, !7, i64 184, !7, i64 200, !7, i64 216, !9, i64 232, !6, i64 240, !9, i64 248, !9, i64 252, !9, i64 256, !9, i64 260, !9, i64 264, !7, i64 268, !9, i64 272, !9, i64 276, !9, i64 280, !7, i64 284, !11, i64 286, !11, i64 288, !9, i64 292, !9, i64 296, !9, i64 300, !9, i64 304, !9, i64 308, !9, i64 312, !9, i64 316, !7, i64 320, !9, i64 352, !9, i64 356, !9, i64 360, !7, i64 364, !9, i64 404, !9, i64 408, !9, i64 412, !9, i64 416, !6, i64 424, !6, i64 432, !6, i64 440, !6, i64 448, !6, i64 456, !6, i64 464, !6, i64 472, !6, i64 480, !6, i64 488}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"int", !7, i64 0}
!10 = !{!"double", !7, i64 0}
!11 = !{!"short", !7, i64 0}
!12 = !{!13, !9, i64 40}
!13 = !{!"jpeg_error_mgr", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !9, i64 40, !7, i64 44, !9, i64 124, !14, i64 128, !6, i64 136, !9, i64 144, !6, i64 152, !9, i64 160, !9, i64 164}
!14 = !{!"long", !7, i64 0}
!15 = !{!13, !6, i64 0}
!16 = !{!5, !6, i64 8}
!17 = !{!18, !6, i64 0}
!18 = !{!"jpeg_memory_mgr", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !6, i64 40, !6, i64 48, !6, i64 56, !6, i64 64, !6, i64 72, !6, i64 80, !14, i64 88}
!19 = !{!5, !6, i64 440}
!20 = !{!21, !6, i64 0}
!21 = !{!"", !22, i64 0, !7, i64 16, !9, i64 96, !9, i64 100, !9, i64 104, !9, i64 108}
!22 = !{!"jpeg_c_prep_controller", !6, i64 0, !6, i64 8}
!23 = !{!5, !6, i64 472}
!24 = !{!25, !9, i64 16}
!25 = !{!"jpeg_downsampler", !6, i64 0, !6, i64 8, !9, i64 16}
!26 = !{!21, !6, i64 8}
!27 = !{!5, !9, i64 308}
!28 = !{!5, !9, i64 68}
!29 = !{!5, !6, i64 80}
!30 = !{!18, !6, i64 16}
!31 = !{!32, !9, i64 28}
!32 = !{!"", !9, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24, !9, i64 28, !9, i64 32, !9, i64 36, !9, i64 40, !9, i64 44, !9, i64 48, !9, i64 52, !9, i64 56, !9, i64 60, !9, i64 64, !9, i64 68, !9, i64 72, !6, i64 80, !6, i64 88}
!33 = !{!5, !9, i64 304}
!34 = !{!32, !9, i64 8}
!35 = !{!6, !6, i64 0}
!36 = distinct !{!36, !37, !38}
!37 = !{!"llvm.loop.vectorize.width", i32 1}
!38 = !{!"llvm.loop.interleave.count", i32 1}
!39 = distinct !{!39, !37, !38}
!40 = !{!"branch_weights", i32 4, i32 2}
!41 = !{!5, !9, i64 44}
!42 = !{!21, !9, i64 96}
!43 = !{!21, !9, i64 100}
!44 = !{!21, !9, i64 104}
!45 = !{!21, !9, i64 108}
!46 = !{!"function_entry_count", i64 0}
!47 = !{!9, !9, i64 0}
!48 = !{!5, !6, i64 464}
!49 = !{!50, !6, i64 8}
!50 = !{!"jpeg_color_converter", !6, i64 0, !6, i64 8}
!51 = !{!5, !9, i64 40}
!52 = !{!"branch_weights", i32 727100763, i32 1420382885}
!53 = !{!25, !6, i64 8}
!54 = !{!"function_entry_count", i64 543}
!55 = !{!"branch_weights", i32 513, i32 544}
!56 = !{!"branch_weights", i32 2, i32 1540}
!57 = !{!"branch_weights", i32 1072434508, i32 1075049140}
!58 = !{!"branch_weights", i32 2, i32 512}
!59 = !{!"branch_weights", i32 1, i32 2}
!60 = !{!32, !9, i64 12}
