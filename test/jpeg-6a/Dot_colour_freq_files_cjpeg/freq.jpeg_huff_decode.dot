digraph "CFG for 'jpeg_huff_decode' function" {
	label="CFG for 'jpeg_huff_decode' function";

	Node0x4e79360 [shape=record, style = filled, fillcolor = blue, label="{entry:\l  %cmp = icmp slt i32 %bits_left, %min_bits\l  br i1 %cmp, label %if.then, label %if.end4\l|{<s0>T|<s1>F}}"];
	Node0x4e79360:s0 -> Node0x4e798c0;
	Node0x4e79360:s1 -> Node0x4e81230;
	Node0x4e798c0 [shape=record, style = filled, fillcolor = blue, label="{if.then:                                          \l  %call = tail call i32 @jpeg_fill_bit_buffer(%struct.bitread_working_state*\l... %state, i64 %get_buffer, i32 %bits_left, i32 %min_bits)\l  %tobool = icmp eq i32 %call, 0\l  br i1 %tobool, label %cleanup, label %if.end\l|{<s0>T|<s1>F}}"];
	Node0x4e798c0:s0 -> Node0x4e815a0;
	Node0x4e798c0:s1 -> Node0x4e81610;
	Node0x4e81610 [shape=record, style = filled, fillcolor = blue, label="{if.end:                                           \l  %get_buffer2 = getelementptr inbounds %struct.bitread_working_state,\l... %struct.bitread_working_state* %state, i64 0, i32 3\l  %0 = load i64, i64* %get_buffer2, align 8, !tbaa !2\l  %bits_left3 = getelementptr inbounds %struct.bitread_working_state,\l... %struct.bitread_working_state* %state, i64 0, i32 4\l  %1 = load i32, i32* %bits_left3, align 8, !tbaa !9\l  br label %if.end4\l}"];
	Node0x4e81610 -> Node0x4e81230;
	Node0x4e81230 [shape=record, style = filled, fillcolor = blue, label="{if.end4:                                          \l  %bits_left.addr.0 = phi i32 [ %1, %if.end ], [ %bits_left, %entry ]\l  %get_buffer.addr.0 = phi i64 [ %0, %if.end ], [ %get_buffer, %entry ]\l  %sub = sub nsw i32 %bits_left.addr.0, %min_bits\l  %sh_prom = zext i32 %sub to i64\l  %shr = ashr i64 %get_buffer.addr.0, %sh_prom\l  %conv = trunc i64 %shr to i32\l  %shl = shl i32 1, %min_bits\l  %sub5 = add nsw i32 %shl, -1\l  %and = and i32 %conv, %sub5\l  %conv6 = sext i32 %and to i64\l  %idxprom88 = sext i32 %min_bits to i64\l  %arrayidx89 = getelementptr inbounds %struct.d_derived_tbl,\l... %struct.d_derived_tbl* %htbl, i64 0, i32 1, i64 %idxprom88\l  %2 = load i64, i64* %arrayidx89, align 8, !tbaa !10\l  %cmp790 = icmp sgt i64 %conv6, %2\l  %get_buffer17 = getelementptr inbounds %struct.bitread_working_state,\l... %struct.bitread_working_state* %state, i64 0, i32 3\l  %bits_left18 = getelementptr inbounds %struct.bitread_working_state,\l... %struct.bitread_working_state* %state, i64 0, i32 4\l  br i1 %cmp790, label %while.body.preheader, label %while.end\l|{<s0>T|<s1>F}}"];
	Node0x4e81230:s0 -> Node0x4e832a0;
	Node0x4e81230:s1 -> Node0x4e83380;
	Node0x4e832a0 [shape=record, style = filled, fillcolor = blue, label="{while.body.preheader:                             \l  br label %while.body\l}"];
	Node0x4e832a0 -> Node0x4e834c0;
	Node0x4e834c0 [shape=record, style = filled, fillcolor = blue, label="{while.body:                                       \l  %code.094 = phi i64 [ %or, %if.end19 ], [ %conv6, %while.body.preheader ]\l  %l.093 = phi i32 [ %inc, %if.end19 ], [ %min_bits, %while.body.preheader ]\l  %get_buffer.addr.192 = phi i64 [ %get_buffer.addr.2, %if.end19 ], [\l... %get_buffer.addr.0, %while.body.preheader ]\l  %bits_left.addr.191 = phi i32 [ %sub20, %if.end19 ], [ %sub,\l... %while.body.preheader ]\l  %shl9 = shl i64 %code.094, 1\l  %cmp10 = icmp slt i32 %bits_left.addr.191, 1\l  br i1 %cmp10, label %if.then12, label %if.end19\l|{<s0>T|<s1>F}}"];
	Node0x4e834c0:s0 -> Node0x4e83e10;
	Node0x4e834c0:s1 -> Node0x4e835e0;
	Node0x4e83e10 [shape=record, style = filled, fillcolor = blue, label="{if.then12:                                        \l  %call13 = tail call i32 @jpeg_fill_bit_buffer(%struct.bitread_working_state*\l... %state, i64 %get_buffer.addr.192, i32 %bits_left.addr.191, i32 1)\l  %tobool14 = icmp eq i32 %call13, 0\l  br i1 %tobool14, label %cleanup.loopexit, label %if.end16\l|{<s0>T|<s1>F}}"];
	Node0x4e83e10:s0 -> Node0x4e84160;
	Node0x4e83e10:s1 -> Node0x4e841e0;
	Node0x4e841e0 [shape=record, style = filled, fillcolor = blue, label="{if.end16:                                         \l  %3 = load i64, i64* %get_buffer17, align 8, !tbaa !2\l  %4 = load i32, i32* %bits_left18, align 8, !tbaa !9\l  br label %if.end19\l}"];
	Node0x4e841e0 -> Node0x4e835e0;
	Node0x4e835e0 [shape=record, style = filled, fillcolor = blue, label="{if.end19:                                         \l  %bits_left.addr.2 = phi i32 [ %4, %if.end16 ], [ %bits_left.addr.191,\l... %while.body ]\l  %get_buffer.addr.2 = phi i64 [ %3, %if.end16 ], [ %get_buffer.addr.192,\l... %while.body ]\l  %sub20 = add nsw i32 %bits_left.addr.2, -1\l  %sh_prom21 = zext i32 %sub20 to i64\l  %shr2281 = lshr i64 %get_buffer.addr.2, %sh_prom21\l  %and24 = and i64 %shr2281, 1\l  %or = or i64 %and24, %shl9\l  %inc = add nsw i32 %l.093, 1\l  %idxprom = sext i32 %inc to i64\l  %arrayidx = getelementptr inbounds %struct.d_derived_tbl,\l... %struct.d_derived_tbl* %htbl, i64 0, i32 1, i64 %idxprom\l  %5 = load i64, i64* %arrayidx, align 8, !tbaa !10\l  %cmp7 = icmp sgt i64 %or, %5\l  br i1 %cmp7, label %while.body, label %while.end.loopexit\l|{<s0>T|<s1>F}}"];
	Node0x4e835e0:s0 -> Node0x4e834c0;
	Node0x4e835e0:s1 -> Node0x4e84c80;
	Node0x4e84c80 [shape=record, style = filled, fillcolor = blue, label="{while.end.loopexit:                               \l  %idxprom.lcssa104 = phi i64 [ %idxprom, %if.end19 ]\l  %inc.lcssa = phi i32 [ %inc, %if.end19 ]\l  %or.lcssa = phi i64 [ %or, %if.end19 ]\l  %sub20.lcssa = phi i32 [ %sub20, %if.end19 ]\l  %get_buffer.addr.2.lcssa = phi i64 [ %get_buffer.addr.2, %if.end19 ]\l  br label %while.end\l}"];
	Node0x4e84c80 -> Node0x4e83380;
	Node0x4e83380 [shape=record, style = filled, fillcolor = blue, label="{while.end:                                        \l  %idxprom.lcssa = phi i64 [ %idxprom88, %if.end4 ], [ %idxprom.lcssa104,\l... %while.end.loopexit ]\l  %code.0.lcssa = phi i64 [ %conv6, %if.end4 ], [ %or.lcssa,\l... %while.end.loopexit ]\l  %l.0.lcssa = phi i32 [ %min_bits, %if.end4 ], [ %inc.lcssa,\l... %while.end.loopexit ]\l  %get_buffer.addr.1.lcssa = phi i64 [ %get_buffer.addr.0, %if.end4 ], [\l... %get_buffer.addr.2.lcssa, %while.end.loopexit ]\l  %bits_left.addr.1.lcssa = phi i32 [ %sub, %if.end4 ], [ %sub20.lcssa,\l... %while.end.loopexit ]\l  store i64 %get_buffer.addr.1.lcssa, i64* %get_buffer17, align 8, !tbaa !2\l  store i32 %bits_left.addr.1.lcssa, i32* %bits_left18, align 8, !tbaa !9\l  %cmp28 = icmp sgt i32 %l.0.lcssa, 16\l  br i1 %cmp28, label %if.then30, label %if.end34\l|{<s0>T|<s1>F}}"];
	Node0x4e83380:s0 -> Node0x4e85750;
	Node0x4e83380:s1 -> Node0x4e85800;
	Node0x4e85750 [shape=record, style = filled, fillcolor = blue, label="{if.then30:                                        \l  %cinfo = getelementptr inbounds %struct.bitread_working_state,\l... %struct.bitread_working_state* %state, i64 0, i32 5\l  %6 = load %struct.jpeg_decompress_struct*, %struct.jpeg_decompress_struct**\l... %cinfo, align 8, !tbaa !11\l  %err = getelementptr inbounds %struct.jpeg_decompress_struct,\l... %struct.jpeg_decompress_struct* %6, i64 0, i32 0\l  %7 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %err, align 8,\l... !tbaa !12\l  %msg_code = getelementptr inbounds %struct.jpeg_error_mgr,\l... %struct.jpeg_error_mgr* %7, i64 0, i32 5\l  store i32 114, i32* %msg_code, align 8, !tbaa !16\l  %emit_message = getelementptr inbounds %struct.jpeg_error_mgr,\l... %struct.jpeg_error_mgr* %7, i64 0, i32 1\l  %8 = load void (%struct.jpeg_common_struct*, i32)*, void\l... (%struct.jpeg_common_struct*, i32)** %emit_message, align 8, !tbaa !18\l  %9 = bitcast %struct.jpeg_decompress_struct* %6 to\l... %struct.jpeg_common_struct*\l  tail call void %8(%struct.jpeg_common_struct* %9, i32 -1) #2\l  br label %cleanup\l}"];
	Node0x4e85750 -> Node0x4e815a0;
	Node0x4e85800 [shape=record, style = filled, fillcolor = blue, label="{if.end34:                                         \l  %arrayidx36 = getelementptr inbounds %struct.d_derived_tbl,\l... %struct.d_derived_tbl* %htbl, i64 0, i32 2, i64 %idxprom.lcssa\l  %10 = load i32, i32* %arrayidx36, align 4, !tbaa !19\l  %arrayidx38 = getelementptr inbounds %struct.d_derived_tbl,\l... %struct.d_derived_tbl* %htbl, i64 0, i32 0, i64 %idxprom.lcssa\l  %11 = load i64, i64* %arrayidx38, align 8, !tbaa !10\l  %sub39 = sub nsw i64 %code.0.lcssa, %11\l  %conv40 = trunc i64 %sub39 to i32\l  %add = add nsw i32 %conv40, %10\l  %idxprom41 = sext i32 %add to i64\l  %pub = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl*\l... %htbl, i64 0, i32 3\l  %12 = load %struct.JHUFF_TBL*, %struct.JHUFF_TBL** %pub, align 8, !tbaa !20\l  %arrayidx42 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL*\l... %12, i64 0, i32 1, i64 %idxprom41\l  %13 = load i8, i8* %arrayidx42, align 1, !tbaa !22\l  %conv43 = zext i8 %13 to i32\l  br label %cleanup\l}"];
	Node0x4e85800 -> Node0x4e815a0;
	Node0x4e84160 [shape=record, style = filled, fillcolor = blue, label="{cleanup.loopexit:                                 \l  br label %cleanup\l}"];
	Node0x4e84160 -> Node0x4e815a0;
	Node0x4e815a0 [shape=record, style = filled, fillcolor = blue, label="{cleanup:                                          \l  %retval.0 = phi i32 [ 0, %if.then30 ], [ %conv43, %if.end34 ], [ -1,\l... %if.then ], [ -1, %cleanup.loopexit ]\l  ret i32 %retval.0\l}"];
}
